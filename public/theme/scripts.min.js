(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

	var _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
	    _scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
	    _DEG2RAD = Math.PI / 180,
	    _sin = Math.sin,
	    _cos = Math.cos,
	    _abs = Math.abs,
	    _sqrt = Math.sqrt,
	    _isNumber = function _isNumber(value) {
	  return typeof value === "number";
	},
	    _roundingNum = 1e5,
	    _round = function _round(value) {
	  return Math.round(value * _roundingNum) / _roundingNum || 0;
	};
	function transformRawPath(rawPath, a, b, c, d, tx, ty) {
	  var j = rawPath.length,
	      segment,
	      l,
	      i,
	      x,
	      y;

	  while (--j > -1) {
	    segment = rawPath[j];
	    l = segment.length;

	    for (i = 0; i < l; i += 2) {
	      x = segment[i];
	      y = segment[i + 1];
	      segment[i] = x * a + y * c + tx;
	      segment[i + 1] = x * b + y * d + ty;
	    }
	  }

	  rawPath._dirty = 1;
	  return rawPath;
	}

	function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
	  if (lastX === x && lastY === y) {
	    return;
	  }

	  rx = _abs(rx);
	  ry = _abs(ry);

	  var angleRad = angle % 360 * _DEG2RAD,
	      cosAngle = _cos(angleRad),
	      sinAngle = _sin(angleRad),
	      PI = Math.PI,
	      TWOPI = PI * 2,
	      dx2 = (lastX - x) / 2,
	      dy2 = (lastY - y) / 2,
	      x1 = cosAngle * dx2 + sinAngle * dy2,
	      y1 = -sinAngle * dx2 + cosAngle * dy2,
	      x1_sq = x1 * x1,
	      y1_sq = y1 * y1,
	      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);

	  if (radiiCheck > 1) {
	    rx = _sqrt(radiiCheck) * rx;
	    ry = _sqrt(radiiCheck) * ry;
	  }

	  var rx_sq = rx * rx,
	      ry_sq = ry * ry,
	      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);

	  if (sq < 0) {
	    sq = 0;
	  }

	  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),
	      cx1 = coef * (rx * y1 / ry),
	      cy1 = coef * -(ry * x1 / rx),
	      sx2 = (lastX + x) / 2,
	      sy2 = (lastY + y) / 2,
	      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
	      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
	      ux = (x1 - cx1) / rx,
	      uy = (y1 - cy1) / ry,
	      vx = (-x1 - cx1) / rx,
	      vy = (-y1 - cy1) / ry,
	      temp = ux * ux + uy * uy,
	      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
	      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));

	  isNaN(angleExtent) && (angleExtent = PI);

	  if (!sweepFlag && angleExtent > 0) {
	    angleExtent -= TWOPI;
	  } else if (sweepFlag && angleExtent < 0) {
	    angleExtent += TWOPI;
	  }

	  angleStart %= TWOPI;
	  angleExtent %= TWOPI;

	  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
	      rawPath = [],
	      angleIncrement = angleExtent / segments,
	      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
	      ma = cosAngle * rx,
	      mb = sinAngle * rx,
	      mc = sinAngle * -ry,
	      md = cosAngle * ry,
	      i;

	  for (i = 0; i < segments; i++) {
	    angle = angleStart + i * angleIncrement;
	    x1 = _cos(angle);
	    y1 = _sin(angle);
	    ux = _cos(angle += angleIncrement);
	    uy = _sin(angle);
	    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
	  }

	  for (i = 0; i < rawPath.length; i += 2) {
	    x1 = rawPath[i];
	    y1 = rawPath[i + 1];
	    rawPath[i] = x1 * ma + y1 * mc + cx;
	    rawPath[i + 1] = x1 * mb + y1 * md + cy;
	  }

	  rawPath[i - 2] = x;
	  rawPath[i - 1] = y;
	  return rawPath;
	}

	function stringToRawPath(d) {
	  var a = (d + "").replace(_scientific, function (m) {
	    var n = +m;
	    return n < 0.0001 && n > -0.0001 ? 0 : n;
	  }).match(_svgPathExp) || [],
	      path = [],
	      relativeX = 0,
	      relativeY = 0,
	      twoThirds = 2 / 3,
	      elements = a.length,
	      points = 0,
	      errorMessage = "ERROR: malformed path: " + d,
	      i,
	      j,
	      x,
	      y,
	      command,
	      isRelative,
	      segment,
	      startX,
	      startY,
	      difX,
	      difY,
	      beziers,
	      prevCommand,
	      flag1,
	      flag2,
	      line = function line(sx, sy, ex, ey) {
	    difX = (ex - sx) / 3;
	    difY = (ey - sy) / 3;
	    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
	  };

	  if (!d || !isNaN(a[0]) || isNaN(a[1])) {
	    console.log(errorMessage);
	    return path;
	  }

	  for (i = 0; i < elements; i++) {
	    prevCommand = command;

	    if (isNaN(a[i])) {
	      command = a[i].toUpperCase();
	      isRelative = command !== a[i];
	    } else {
	      i--;
	    }

	    x = +a[i + 1];
	    y = +a[i + 2];

	    if (isRelative) {
	      x += relativeX;
	      y += relativeY;
	    }

	    if (!i) {
	      startX = x;
	      startY = y;
	    }

	    if (command === "M") {
	      if (segment) {
	        if (segment.length < 8) {
	          path.length -= 1;
	        } else {
	          points += segment.length;
	        }
	      }

	      relativeX = startX = x;
	      relativeY = startY = y;
	      segment = [x, y];
	      path.push(segment);
	      i += 2;
	      command = "L";
	    } else if (command === "C") {
	      if (!segment) {
	        segment = [0, 0];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);
	      i += 6;
	    } else if (command === "S") {
	      difX = relativeX;
	      difY = relativeY;

	      if (prevCommand === "C" || prevCommand === "S") {
	        difX += relativeX - segment[segment.length - 4];
	        difY += relativeY - segment[segment.length - 3];
	      }

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);
	      i += 4;
	    } else if (command === "Q") {
	      difX = relativeX + (x - relativeX) * twoThirds;
	      difY = relativeY + (y - relativeY) * twoThirds;

	      if (!isRelative) {
	        relativeX = relativeY = 0;
	      }

	      relativeX += a[i + 3] * 1;
	      relativeY += a[i + 4] * 1;
	      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
	      i += 4;
	    } else if (command === "T") {
	      difX = relativeX - segment[segment.length - 4];
	      difY = relativeY - segment[segment.length - 3];
	      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);
	      i += 2;
	    } else if (command === "H") {
	      line(relativeX, relativeY, relativeX = x, relativeY);
	      i += 1;
	    } else if (command === "V") {
	      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));
	      i += 1;
	    } else if (command === "L" || command === "Z") {
	      if (command === "Z") {
	        x = startX;
	        y = startY;
	        segment.closed = true;
	      }

	      if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
	        line(relativeX, relativeY, x, y);

	        if (command === "L") {
	          i += 2;
	        }
	      }

	      relativeX = x;
	      relativeY = y;
	    } else if (command === "A") {
	      flag1 = a[i + 4];
	      flag2 = a[i + 5];
	      difX = a[i + 6];
	      difY = a[i + 7];
	      j = 7;

	      if (flag1.length > 1) {
	        if (flag1.length < 3) {
	          difY = difX;
	          difX = flag2;
	          j--;
	        } else {
	          difY = flag2;
	          difX = flag1.substr(2);
	          j -= 2;
	        }

	        flag2 = flag1.charAt(1);
	        flag1 = flag1.charAt(0);
	      }

	      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);
	      i += j;

	      if (beziers) {
	        for (j = 0; j < beziers.length; j++) {
	          segment.push(beziers[j]);
	        }
	      }

	      relativeX = segment[segment.length - 2];
	      relativeY = segment[segment.length - 1];
	    } else {
	      console.log(errorMessage);
	    }
	  }

	  i = segment.length;

	  if (i < 6) {
	    path.pop();
	    i = 0;
	  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {
	    segment.closed = true;
	  }

	  path.totalPoints = points + i;
	  return path;
	}
	function rawPathToString(rawPath) {
	  if (_isNumber(rawPath[0])) {
	    rawPath = [rawPath];
	  }

	  var result = "",
	      l = rawPath.length,
	      sl,
	      s,
	      i,
	      segment;

	  for (s = 0; s < l; s++) {
	    segment = rawPath[s];
	    result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
	    sl = segment.length;

	    for (i = 2; i < sl; i++) {
	      result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
	    }

	    if (segment.closed) {
	      result += "z";
	    }
	  }

	  return result;
	}

	/*!
	 * CustomEase 3.12.2
	 * https://greensock.com
	 *
	 * @license Copyright 2008-2023, GreenSock. All rights reserved.
	 * Subject to the terms at https://greensock.com/standard-license or for
	 * Club GreenSock members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/

	var gsap,
	    _coreInitted,
	    _getGSAP = function _getGSAP() {
	  return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
	},
	    _initCore = function _initCore() {
	  gsap = _getGSAP();

	  if (gsap) {
	    gsap.registerEase("_CE", CustomEase.create);
	    _coreInitted = 1;
	  } else {
	    console.warn("Please gsap.registerPlugin(CustomEase)");
	  }
	},
	    _bigNum = 1e20,
	    _round$1 = function _round(value) {
	  return ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000;
	},
	    _numExp = /[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,
	    _needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
	    _findMinimum = function _findMinimum(values) {
	  var l = values.length,
	      min = _bigNum,
	      i;

	  for (i = 1; i < l; i += 6) {
	    +values[i] < min && (min = +values[i]);
	  }

	  return min;
	},
	    _normalize = function _normalize(values, height, originY) {
	  if (!originY && originY !== 0) {
	    originY = Math.max(+values[values.length - 1], +values[1]);
	  }

	  var tx = +values[0] * -1,
	      ty = -originY,
	      l = values.length,
	      sx = 1 / (+values[l - 2] + tx),
	      sy = -height || (Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0]) ? _findMinimum(values) + ty : +values[l - 1] + ty),
	      i;

	  if (sy) {
	    sy = 1 / sy;
	  } else {
	    sy = -sx;
	  }

	  for (i = 0; i < l; i += 2) {
	    values[i] = (+values[i] + tx) * sx;
	    values[i + 1] = (+values[i + 1] + ty) * sy;
	  }
	},
	    _bezierToPoints = function _bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
	  var x12 = (x1 + x2) / 2,
	      y12 = (y1 + y2) / 2,
	      x23 = (x2 + x3) / 2,
	      y23 = (y2 + y3) / 2,
	      x34 = (x3 + x4) / 2,
	      y34 = (y3 + y4) / 2,
	      x123 = (x12 + x23) / 2,
	      y123 = (y12 + y23) / 2,
	      x234 = (x23 + x34) / 2,
	      y234 = (y23 + y34) / 2,
	      x1234 = (x123 + x234) / 2,
	      y1234 = (y123 + y234) / 2,
	      dx = x4 - x1,
	      dy = y4 - y1,
	      d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
	      d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
	      length;

	  if (!points) {
	    points = [{
	      x: x1,
	      y: y1
	    }, {
	      x: x4,
	      y: y4
	    }];
	    index = 1;
	  }

	  points.splice(index || points.length - 1, 0, {
	    x: x1234,
	    y: y1234
	  });

	  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
	    length = points.length;

	    _bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);

	    _bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
	  }

	  return points;
	};

	var CustomEase = function () {
	  function CustomEase(id, data, config) {
	    _coreInitted || _initCore();
	    this.id = id;
	     this.setData(data, config);
	  }

	  var _proto = CustomEase.prototype;

	  _proto.setData = function setData(data, config) {
	    config = config || {};
	    data = data || "0,0,1,1";
	    var values = data.match(_numExp),
	        closest = 1,
	        points = [],
	        lookup = [],
	        precision = config.precision || 1,
	        fast = precision <= 1,
	        l,
	        a1,
	        a2,
	        i,
	        inc,
	        j,
	        point,
	        prevPoint,
	        p;
	    this.data = data;

	    if (_needsParsingExp.test(data) || ~data.indexOf("M") && data.indexOf("C") < 0) {
	      values = stringToRawPath(data)[0];
	    }

	    l = values.length;

	    if (l === 4) {
	      values.unshift(0, 0);
	      values.push(1, 1);
	      l = 8;
	    } else if ((l - 2) % 6) {
	      throw "Invalid CustomEase";
	    }

	    if (+values[0] !== 0 || +values[l - 2] !== 1) {
	      _normalize(values, config.height, config.originY);
	    }

	    this.segment = values;

	    for (i = 2; i < l; i += 6) {
	      a1 = {
	        x: +values[i - 2],
	        y: +values[i - 1]
	      };
	      a2 = {
	        x: +values[i + 4],
	        y: +values[i + 5]
	      };
	      points.push(a1, a2);

	      _bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
	    }

	    l = points.length;

	    for (i = 0; i < l; i++) {
	      point = points[i];
	      prevPoint = points[i - 1] || point;

	      if ((point.x > prevPoint.x || prevPoint.y !== point.y && prevPoint.x === point.x || point === prevPoint) && point.x <= 1) {
	        prevPoint.cx = point.x - prevPoint.x;
	        prevPoint.cy = point.y - prevPoint.y;
	        prevPoint.n = point;
	        prevPoint.nx = point.x;

	        if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) {
	          fast = 0;
	        }

	        if (prevPoint.cx < closest) {
	          if (!prevPoint.cx) {
	            prevPoint.cx = 0.001;

	            if (i === l - 1) {
	              prevPoint.x -= 0.001;
	              closest = Math.min(closest, 0.001);
	              fast = 0;
	            }
	          } else {
	            closest = prevPoint.cx;
	          }
	        }
	      } else {
	        points.splice(i--, 1);
	        l--;
	      }
	    }

	    l = 1 / closest + 1 | 0;
	    inc = 1 / l;
	    j = 0;
	    point = points[0];

	    if (fast) {
	      for (i = 0; i < l; i++) {
	        p = i * inc;

	        if (point.nx < p) {
	          point = points[++j];
	        }

	        a1 = point.y + (p - point.x) / point.cx * point.cy;
	        lookup[i] = {
	          x: p,
	          cx: inc,
	          y: a1,
	          cy: 0,
	          nx: 9
	        };

	        if (i) {
	          lookup[i - 1].cy = a1 - lookup[i - 1].y;
	        }
	      }

	      lookup[l - 1].cy = points[points.length - 1].y - a1;
	    } else {
	      for (i = 0; i < l; i++) {
	        if (point.nx < i * inc) {
	          point = points[++j];
	        }

	        lookup[i] = point;
	      }

	      if (j < points.length - 1) {
	        lookup[i - 1] = points[points.length - 2];
	      }
	    }

	    this.ease = function (p) {
	      var point = lookup[p * l | 0] || lookup[l - 1];

	      if (point.nx < p) {
	        point = point.n;
	      }

	      return point.y + (p - point.x) / point.cx * point.cy;
	    };

	    this.ease.custom = this;
	    this.id && gsap && gsap.registerEase(this.id, this.ease);
	    return this;
	  };

	  _proto.getSVGData = function getSVGData(config) {
	    return CustomEase.getSVGData(this, config);
	  };

	  CustomEase.create = function create(id, data, config) {
	    return new CustomEase(id, data, config).ease;
	  };

	  CustomEase.register = function register(core) {
	    gsap = core;

	    _initCore();
	  };

	  CustomEase.get = function get(id) {
	    return gsap.parseEase(id);
	  };

	  CustomEase.getSVGData = function getSVGData(ease, config) {
	    config = config || {};
	    var width = config.width || 100,
	        height = config.height || 100,
	        x = config.x || 0,
	        y = (config.y || 0) + height,
	        e = gsap.utils.toArray(config.path)[0],
	        a,
	        slope,
	        i,
	        inc,
	        tx,
	        ty,
	        precision,
	        threshold,
	        prevX,
	        prevY;

	    if (config.invert) {
	      height = -height;
	      y = 0;
	    }

	    if (typeof ease === "string") {
	      ease = gsap.parseEase(ease);
	    }

	    if (ease.custom) {
	      ease = ease.custom;
	    }

	    if (ease instanceof CustomEase) {
	      a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));
	    } else {
	      a = [x, y];
	      precision = Math.max(5, (config.precision || 1) * 200);
	      inc = 1 / precision;
	      precision += 2;
	      threshold = 5 / precision;
	      prevX = _round$1(x + inc * width);
	      prevY = _round$1(y + ease(inc) * -height);
	      slope = (prevY - y) / (prevX - x);

	      for (i = 2; i < precision; i++) {
	        tx = _round$1(x + i * inc * width);
	        ty = _round$1(y + ease(i * inc) * -height);

	        if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) {
	          a.push(prevX, prevY);
	          slope = (ty - prevY) / (tx - prevX);
	        }

	        prevX = tx;
	        prevY = ty;
	      }

	      a = "M" + a.join(",");
	    }

	    e && e.setAttribute("d", a);
	    return a;
	  };

	  return CustomEase;
	}();
	_getGSAP() && gsap.registerPlugin(CustomEase);
	CustomEase.version = "3.12.2";

	exports.CustomEase = CustomEase;
	exports.default = CustomEase;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],2:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

	/*!
	 * ScrollToPlugin 3.12.2
	 * https://greensock.com
	 *
	 * @license Copyright 2008-2023, GreenSock. All rights reserved.
	 * Subject to the terms at https://greensock.com/standard-license or for
	 * Club GreenSock members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/
	var gsap,
	    _coreInitted,
	    _window,
	    _docEl,
	    _body,
	    _toArray,
	    _config,
	    ScrollTrigger,
	    _windowExists = function _windowExists() {
	  return typeof window !== "undefined";
	},
	    _getGSAP = function _getGSAP() {
	  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;
	},
	    _isString = function _isString(value) {
	  return typeof value === "string";
	},
	    _isFunction = function _isFunction(value) {
	  return typeof value === "function";
	},
	    _max = function _max(element, axis) {
	  var dim = axis === "x" ? "Width" : "Height",
	      scroll = "scroll" + dim,
	      client = "client" + dim;
	  return element === _window || element === _docEl || element === _body ? Math.max(_docEl[scroll], _body[scroll]) - (_window["inner" + dim] || _docEl[client] || _body[client]) : element[scroll] - element["offset" + dim];
	},
	    _buildGetter = function _buildGetter(e, axis) {
	  var p = "scroll" + (axis === "x" ? "Left" : "Top");

	  if (e === _window) {
	    if (e.pageXOffset != null) {
	      p = "page" + axis.toUpperCase() + "Offset";
	    } else {
	      e = _docEl[p] != null ? _docEl : _body;
	    }
	  }

	  return function () {
	    return e[p];
	  };
	},
	    _clean = function _clean(value, index, target, targets) {
	  _isFunction(value) && (value = value(index, target, targets));

	  if (typeof value !== "object") {
	    return _isString(value) && value !== "max" && value.charAt(1) !== "=" ? {
	      x: value,
	      y: value
	    } : {
	      y: value
	    };
	  } else if (value.nodeType) {
	    return {
	      y: value,
	      x: value
	    };
	  } else {
	    var result = {},
	        p;

	    for (p in value) {
	      result[p] = p !== "onAutoKill" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];
	    }

	    return result;
	  }
	},
	    _getOffset = function _getOffset(element, container) {
	  element = _toArray(element)[0];

	  if (!element || !element.getBoundingClientRect) {
	    return console.warn("scrollTo target doesn't exist. Using 0") || {
	      x: 0,
	      y: 0
	    };
	  }

	  var rect = element.getBoundingClientRect(),
	      isRoot = !container || container === _window || container === _body,
	      cRect = isRoot ? {
	    top: _docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0),
	    left: _docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)
	  } : container.getBoundingClientRect(),
	      offsets = {
	    x: rect.left - cRect.left,
	    y: rect.top - cRect.top
	  };

	  if (!isRoot && container) {
	    offsets.x += _buildGetter(container, "x")();
	    offsets.y += _buildGetter(container, "y")();
	  }

	  return offsets;
	},
	    _parseVal = function _parseVal(value, target, axis, currentVal, offset) {
	  return !isNaN(value) && typeof value !== "object" ? parseFloat(value) - offset : _isString(value) && value.charAt(1) === "=" ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : value === "max" ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset);
	},
	    _initCore = function _initCore() {
	  gsap = _getGSAP();

	  if (_windowExists() && gsap && typeof document !== "undefined" && document.body) {
	    _window = window;
	    _body = document.body;
	    _docEl = document.documentElement;
	    _toArray = gsap.utils.toArray;
	    gsap.config({
	      autoKillThreshold: 7
	    });
	    _config = gsap.config();
	    _coreInitted = 1;
	  }
	};

	var ScrollToPlugin = {
	  version: "3.12.2",
	  name: "scrollTo",
	  rawVars: 1,
	  register: function register(core) {
	    gsap = core;

	    _initCore();
	  },
	  init: function init(target, value, tween, index, targets) {
	    _coreInitted || _initCore();
	    var data = this,
	        snapType = gsap.getProperty(target, "scrollSnapType");
	    data.isWin = target === _window;
	    data.target = target;
	    data.tween = tween;
	    value = _clean(value, index, target, targets);
	    data.vars = value;
	    data.autoKill = !!value.autoKill;
	    data.getX = _buildGetter(target, "x");
	    data.getY = _buildGetter(target, "y");
	    data.x = data.xPrev = data.getX();
	    data.y = data.yPrev = data.getY();
	    ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);
	    gsap.getProperty(target, "scrollBehavior") === "smooth" && gsap.set(target, {
	      scrollBehavior: "auto"
	    });

	    if (snapType && snapType !== "none") {
	      data.snap = 1;
	      data.snapInline = target.style.scrollSnapType;
	      target.style.scrollSnapType = "none";
	    }

	    if (value.x != null) {
	      data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);

	      data._props.push("scrollTo_x");
	    } else {
	      data.skipX = 1;
	    }

	    if (value.y != null) {
	      data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);

	      data._props.push("scrollTo_y");
	    } else {
	      data.skipY = 1;
	    }
	  },
	  render: function render(ratio, data) {
	    var pt = data._pt,
	        target = data.target,
	        tween = data.tween,
	        autoKill = data.autoKill,
	        xPrev = data.xPrev,
	        yPrev = data.yPrev,
	        isWin = data.isWin,
	        snap = data.snap,
	        snapInline = data.snapInline,
	        x,
	        y,
	        yDif,
	        xDif,
	        threshold;

	    while (pt) {
	      pt.r(ratio, pt.d);
	      pt = pt._next;
	    }

	    x = isWin || !data.skipX ? data.getX() : xPrev;
	    y = isWin || !data.skipY ? data.getY() : yPrev;
	    yDif = y - yPrev;
	    xDif = x - xPrev;
	    threshold = _config.autoKillThreshold;

	    if (data.x < 0) {
	      data.x = 0;
	    }

	    if (data.y < 0) {
	      data.y = 0;
	    }

	    if (autoKill) {
	      if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
	        data.skipX = 1;
	      }

	      if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
	        data.skipY = 1;
	      }

	      if (data.skipX && data.skipY) {
	        tween.kill();
	        data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
	      }
	    }

	    if (isWin) {
	      _window.scrollTo(!data.skipX ? data.x : x, !data.skipY ? data.y : y);
	    } else {
	      data.skipY || (target.scrollTop = data.y);
	      data.skipX || (target.scrollLeft = data.x);
	    }

	    if (snap && (ratio === 1 || ratio === 0)) {
	      y = target.scrollTop;
	      x = target.scrollLeft;
	      snapInline ? target.style.scrollSnapType = snapInline : target.style.removeProperty("scroll-snap-type");
	      target.scrollTop = y + 1;
	      target.scrollLeft = x + 1;
	      target.scrollTop = y;
	      target.scrollLeft = x;
	    }

	    data.xPrev = data.x;
	    data.yPrev = data.y;
	    ScrollTrigger && ScrollTrigger.update();
	  },
	  kill: function kill(property) {
	    var both = property === "scrollTo";

	    if (both || property === "scrollTo_x") {
	      this.skipX = 1;
	    }

	    if (both || property === "scrollTo_y") {
	      this.skipY = 1;
	    }
	  }
	};
	ScrollToPlugin.max = _max;
	ScrollToPlugin.getOffset = _getOffset;
	ScrollToPlugin.buildGetter = _buildGetter;
	_getGSAP() && gsap.registerPlugin(ScrollToPlugin);

	exports.ScrollToPlugin = ScrollToPlugin;
	exports.default = ScrollToPlugin;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],3:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /*!
   * Observer 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var gsap,
      _coreInitted,
      _clamp,
      _win,
      _doc,
      _docEl,
      _body,
      _isTouch,
      _pointerType,
      ScrollTrigger,
      _root,
      _normalizer,
      _eventTypes,
      _context,
      _getGSAP = function _getGSAP() {
    return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
  },
      _startup = 1,
      _observers = [],
      _scrollers = [],
      _proxies = [],
      _getTime = Date.now,
      _bridge = function _bridge(name, value) {
    return value;
  },
      _integrate = function _integrate() {
    var core = ScrollTrigger.core,
        data = core.bridge || {},
        scrollers = core._scrollers,
        proxies = core._proxies;
    scrollers.push.apply(scrollers, _scrollers);
    proxies.push.apply(proxies, _proxies);
    _scrollers = scrollers;
    _proxies = proxies;

    _bridge = function _bridge(name, value) {
      return data[name](value);
    };
  },
      _getProxyProp = function _getProxyProp(element, property) {
    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
  },
      _isViewport = function _isViewport(el) {
    return !!~_root.indexOf(el);
  },
      _addListener = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _scrollLeft = "scrollLeft",
      _scrollTop = "scrollTop",
      _onScroll = function _onScroll() {
    return _normalizer && _normalizer.isPressed || _scrollers.cache++;
  },
      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
    var cachingFunc = function cachingFunc(value) {
      if (value || value === 0) {
        _startup && (_win.history.scrollRestoration = "manual");
        var isNormalizing = _normalizer && _normalizer.isPressed;
        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0);
        f(value);
        cachingFunc.cacheID = _scrollers.cache;
        isNormalizing && _bridge("ss", value);
      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
        cachingFunc.cacheID = _scrollers.cache;
        cachingFunc.v = f();
      }

      return cachingFunc.v + cachingFunc.offset;
    };

    cachingFunc.offset = 0;
    return f && cachingFunc;
  },
      _horizontal = {
    s: _scrollLeft,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;
    })
  },
      _vertical = {
    s: _scrollTop,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: _horizontal,
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;
    })
  },
      _getTarget = function _getTarget(t, self) {
    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
  },
      _getScrollFunc = function _getScrollFunc(element, _ref) {
    var s = _ref.s,
        sc = _ref.sc;
    _isViewport(element) && (element = _doc.scrollingElement || _docEl);

    var i = _scrollers.indexOf(element),
        offset = sc === _vertical.sc ? 1 : 2;

    !~i && (i = _scrollers.push(element) - 1);
    _scrollers[i + offset] || _addListener(element, "scroll", _onScroll);
    var prev = _scrollers[i + offset],
        func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {
      return arguments.length ? element[s] = value : element[s];
    })));
    func.target = element;
    prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth");
    return func;
  },
      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
    var v1 = value,
        v2 = value,
        t1 = _getTime(),
        t2 = t1,
        min = minTimeRefresh || 50,
        dropToZeroTime = Math.max(500, min * 3),
        update = function update(value, force) {
      var t = _getTime();

      if (force || t - t1 > min) {
        v2 = v1;
        v1 = value;
        t2 = t1;
        t1 = t;
      } else if (useDelta) {
        v1 += value;
      } else {
        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
      }
    },
        reset = function reset() {
      v2 = v1 = useDelta ? 0 : v1;
      t2 = t1 = 0;
    },
        getVelocity = function getVelocity(latestValue) {
      var tOld = t2,
          vOld = v2,
          t = _getTime();

      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
    };

    return {
      update: update,
      reset: reset,
      getVelocity: getVelocity
    };
  },
      _getEvent = function _getEvent(e, preventDefault) {
    preventDefault && !e._gsapAllow && e.preventDefault();
    return e.changedTouches ? e.changedTouches[0] : e;
  },
      _getAbsoluteMax = function _getAbsoluteMax(a) {
    var max = Math.max.apply(Math, a),
        min = Math.min.apply(Math, a);
    return Math.abs(max) >= Math.abs(min) ? max : min;
  },
      _setScrollTrigger = function _setScrollTrigger() {
    ScrollTrigger = gsap.core.globals().ScrollTrigger;
    ScrollTrigger && ScrollTrigger.core && _integrate();
  },
      _initCore = function _initCore(core) {
    gsap = core || _getGSAP();

    if (gsap && typeof document !== "undefined" && document.body) {
      _win = window;
      _doc = document;
      _docEl = _doc.documentElement;
      _body = _doc.body;
      _root = [_win, _doc, _docEl, _body];
      _clamp = gsap.utils.clamp;

      _context = gsap.core.context || function () {};

      _pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
      _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
      setTimeout(function () {
        return _startup = 0;
      }, 500);

      _setScrollTrigger();

      _coreInitted = 1;
    }

    return _coreInitted;
  };

  _horizontal.op = _vertical;
  _scrollers.cache = 0;
  var Observer = function () {
    function Observer(vars) {
      this.init(vars);
    }

    var _proto = Observer.prototype;

    _proto.init = function init(vars) {
      _coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
      ScrollTrigger || _setScrollTrigger();
      var tolerance = vars.tolerance,
          dragMinimum = vars.dragMinimum,
          type = vars.type,
          target = vars.target,
          lineHeight = vars.lineHeight,
          debounce = vars.debounce,
          preventDefault = vars.preventDefault,
          onStop = vars.onStop,
          onStopDelay = vars.onStopDelay,
          ignore = vars.ignore,
          wheelSpeed = vars.wheelSpeed,
          event = vars.event,
          onDragStart = vars.onDragStart,
          onDragEnd = vars.onDragEnd,
          onDrag = vars.onDrag,
          onPress = vars.onPress,
          onRelease = vars.onRelease,
          onRight = vars.onRight,
          onLeft = vars.onLeft,
          onUp = vars.onUp,
          onDown = vars.onDown,
          onChangeX = vars.onChangeX,
          onChangeY = vars.onChangeY,
          onChange = vars.onChange,
          onToggleX = vars.onToggleX,
          onToggleY = vars.onToggleY,
          onHover = vars.onHover,
          onHoverEnd = vars.onHoverEnd,
          onMove = vars.onMove,
          ignoreCheck = vars.ignoreCheck,
          isNormalizer = vars.isNormalizer,
          onGestureStart = vars.onGestureStart,
          onGestureEnd = vars.onGestureEnd,
          onWheel = vars.onWheel,
          onEnable = vars.onEnable,
          onDisable = vars.onDisable,
          onClick = vars.onClick,
          scrollSpeed = vars.scrollSpeed,
          capture = vars.capture,
          allowClicks = vars.allowClicks,
          lockAxis = vars.lockAxis,
          onLockAxis = vars.onLockAxis;
      this.target = target = _getTarget(target) || _docEl;
      this.vars = vars;
      ignore && (ignore = gsap.utils.toArray(ignore));
      tolerance = tolerance || 1e-9;
      dragMinimum = dragMinimum || 0;
      wheelSpeed = wheelSpeed || 1;
      scrollSpeed = scrollSpeed || 1;
      type = type || "wheel,touch,pointer";
      debounce = debounce !== false;
      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22);

      var id,
          onStopDelayedCall,
          dragged,
          moved,
          wheeled,
          locked,
          axis,
          self = this,
          prevDeltaX = 0,
          prevDeltaY = 0,
          scrollFuncX = _getScrollFunc(target, _horizontal),
          scrollFuncY = _getScrollFunc(target, _vertical),
          scrollX = scrollFuncX(),
          scrollY = scrollFuncY(),
          limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
          isViewport = _isViewport(target),
          ownerDoc = target.ownerDocument || _doc,
          deltaX = [0, 0, 0],
          deltaY = [0, 0, 0],
          onClickTime = 0,
          clickCapture = function clickCapture() {
        return onClickTime = _getTime();
      },
          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
      },
          onStopFunc = function onStopFunc() {
        self._vx.reset();

        self._vy.reset();

        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
          update = function update() {
        var dx = self.deltaX = _getAbsoluteMax(deltaX),
            dy = self.deltaY = _getAbsoluteMax(deltaY),
            changedX = Math.abs(dx) >= tolerance,
            changedY = Math.abs(dy) >= tolerance;

        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY);

        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }

        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }

        if (moved || dragged) {
          onMove && onMove(self);

          if (dragged) {
            onDrag(self);
            dragged = false;
          }

          moved = false;
        }

        locked && !(locked = false) && onLockAxis && onLockAxis(self);

        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }

        id = 0;
      },
          onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;

        self._vx.update(x);

        self._vy.update(y);

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }

        if (axis !== "y") {
          deltaX[2] += x;

          self._vx.update(x, true);
        }

        if (axis !== "x") {
          deltaY[2] += y;

          self._vy.update(y, true);
        }

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y,
            isDragging = self.isDragging;
        self.x = x;
        self.y = y;

        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
          onDrag && (dragged = true);
          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
          isDragging || onDragStart && onDragStart(self);
        }
      },
          _onPress = self.onPress = function (e) {
        if (_ignoreCheck(e, 1) || e && e.button) {
          return;
        }

        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e);
        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;

        self._vx.reset();

        self._vy.reset();

        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);

        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      },
          _onRelease = self.onRelease = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);

        var isTrackingDrag = !isNaN(self.y - self.startY),
            wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
            eventData = _getEvent(e);

        if (!wasDragging && isTrackingDrag) {
          self._vx.reset();

          self._vy.reset();

          if (preventDefault && allowClicks) {
            gsap.delayedCall(0.08, function () {
              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }

        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, wasDragging);
      },
          _onGestureStart = function _onGestureStart(e) {
        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
      },
          _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
          onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = scrollFuncX(),
            y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
          _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
          _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
          _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
          _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
          _onClick = function _onClick(e) {
        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
      };

      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
      self.deltaX = self.deltaY = 0;
      self._vx = _getVelocityProp(0, 50, true);
      self._vy = _getVelocityProp(0, 50, true);
      self.scrollX = scrollFuncX;
      self.scrollY = scrollFuncY;
      self.isDragging = self.isGesturing = self.isPressed = false;

      _context(this);

      self.enable = function (e) {
        if (!self.isEnabled) {
          _addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, preventDefault, capture);
          type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, preventDefault, capture);

          if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);

            _addListener(ownerDoc, _eventTypes[2], _onRelease);

            _addListener(ownerDoc, _eventTypes[3], _onRelease);

            allowClicks && _addListener(target, "click", clickCapture, false, true);
            onClick && _addListener(target, "click", _onClick);
            onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
            onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
            onHover && _addListener(target, _pointerType + "enter", _onHover);
            onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
            onMove && _addListener(target, _pointerType + "move", _onMove);
          }

          self.isEnabled = true;
          e && e.type && _onPress(e);
          onEnable && onEnable(self);
        }

        return self;
      };

      self.disable = function () {
        if (self.isEnabled) {
          _observers.filter(function (o) {
            return o !== self && _isViewport(o.target);
          }).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          if (self.isPressed) {
            self._vx.reset();

            self._vy.reset();

            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
          }

          _removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);

          _removeListener(target, "wheel", _onWheel, capture);

          _removeListener(target, _eventTypes[0], _onPress, capture);

          _removeListener(ownerDoc, _eventTypes[2], _onRelease);

          _removeListener(ownerDoc, _eventTypes[3], _onRelease);

          _removeListener(target, "click", clickCapture, true);

          _removeListener(target, "click", _onClick);

          _removeListener(ownerDoc, "gesturestart", _onGestureStart);

          _removeListener(ownerDoc, "gestureend", _onGestureEnd);

          _removeListener(target, _pointerType + "enter", _onHover);

          _removeListener(target, _pointerType + "leave", _onHoverEnd);

          _removeListener(target, _pointerType + "move", _onMove);

          self.isEnabled = self.isPressed = self.isDragging = false;
          onDisable && onDisable(self);
        }
      };

      self.kill = self.revert = function () {
        self.disable();

        var i = _observers.indexOf(self);

        i >= 0 && _observers.splice(i, 1);
        _normalizer === self && (_normalizer = 0);
      };

      _observers.push(self);

      isNormalizer && _isViewport(target) && (_normalizer = self);
      self.enable(event);
    };

    _createClass(Observer, [{
      key: "velocityX",
      get: function get() {
        return this._vx.getVelocity();
      }
    }, {
      key: "velocityY",
      get: function get() {
        return this._vy.getVelocity();
      }
    }]);

    return Observer;
  }();
  Observer.version = "3.12.2";

  Observer.create = function (vars) {
    return new Observer(vars);
  };

  Observer.register = _initCore;

  Observer.getAll = function () {
    return _observers.slice();
  };

  Observer.getById = function (id) {
    return _observers.filter(function (o) {
      return o.vars.id === id;
    })[0];
  };

  _getGSAP() && gsap.registerPlugin(Observer);

  /*!
   * ScrollTrigger 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  var gsap$1,
      _coreInitted$1,
      _win$1,
      _doc$1,
      _docEl$1,
      _body$1,
      _root$1,
      _resizeDelay,
      _toArray,
      _clamp$1,
      _time2,
      _syncInterval,
      _refreshing,
      _pointerIsDown,
      _transformProp,
      _i,
      _prevWidth,
      _prevHeight,
      _autoRefresh,
      _sort,
      _suppressOverwrites,
      _ignoreResize,
      _normalizer$1,
      _ignoreMobileResize,
      _baseScreenHeight,
      _baseScreenWidth,
      _fixIOSBug,
      _context$1,
      _scrollRestoration,
      _div100vh,
      _100vh,
      _limitCallbacks,
      _startup$1 = 1,
      _getTime$1 = Date.now,
      _time1 = _getTime$1(),
      _lastScrollTime = 0,
      _enabled = 0,
      _parseClamp = function _parseClamp(value, type, self) {
    var clamp = _isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
    self["_" + type + "Clamp"] = clamp;
    return clamp ? value.substr(6, value.length - 7) : value;
  },
      _keepClamp = function _keepClamp(value, clamp) {
    return clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value;
  },
      _rafBugFix = function _rafBugFix() {
    return _enabled && requestAnimationFrame(_rafBugFix);
  },
      _pointerDownHandler = function _pointerDownHandler() {
    return _pointerIsDown = 1;
  },
      _pointerUpHandler = function _pointerUpHandler() {
    return _pointerIsDown = 0;
  },
      _passThrough = function _passThrough(v) {
    return v;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _getGSAP$1 = function _getGSAP() {
    return gsap$1 || _windowExists() && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;
  },
      _isViewport$1 = function _isViewport(e) {
    return !!~_root$1.indexOf(e);
  },
      _getViewportDimension = function _getViewportDimension(dimensionProperty) {
    return (dimensionProperty === "Height" ? _100vh : _win$1["inner" + dimensionProperty]) || _docEl$1["client" + dimensionProperty] || _body$1["client" + dimensionProperty];
  },
      _getBoundsFunc = function _getBoundsFunc(element) {
    return _getProxyProp(element, "getBoundingClientRect") || (_isViewport$1(element) ? function () {
      _winOffsets.width = _win$1.innerWidth;
      _winOffsets.height = _100vh;
      return _winOffsets;
    } : function () {
      return _getBounds(element);
    });
  },
      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
    var d = _ref.d,
        d2 = _ref.d2,
        a = _ref.a;
    return (a = _getProxyProp(scroller, "getBoundingClientRect")) ? function () {
      return a()[d];
    } : function () {
      return (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0;
    };
  },
      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
      return _winOffsets;
    };
  },
      _maxScroll = function _maxScroll(element, _ref2) {
    var s = _ref2.s,
        d2 = _ref2.d2,
        d = _ref2.d,
        a = _ref2.a;
    return Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport$1(element) ? (_docEl$1[s] || _body$1[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]);
  },
      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
    for (var i = 0; i < _autoRefresh.length; i += 3) {
      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
    }
  },
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _endAnimation = function _endAnimation(animation, reversed, pause) {
    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
  },
      _callback = function _callback(self, func) {
    if (self.enabled) {
      var result = func(self);
      result && result.totalTime && (self.callbackAnimation = result);
    }
  },
      _abs = Math.abs,
      _left = "left",
      _top = "top",
      _right = "right",
      _bottom = "bottom",
      _width = "width",
      _height = "height",
      _Right = "Right",
      _Left = "Left",
      _Top = "Top",
      _Bottom = "Bottom",
      _padding = "padding",
      _margin = "margin",
      _Width = "Width",
      _Height = "Height",
      _px = "px",
      _getComputedStyle = function _getComputedStyle(element) {
    return _win$1.getComputedStyle(element);
  },
      _makePositionable = function _makePositionable(element) {
    var position = _getComputedStyle(element).position;

    element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _getBounds = function _getBounds(element, withoutTransforms) {
    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap$1.to(element, {
      x: 0,
      y: 0,
      xPercent: 0,
      yPercent: 0,
      rotation: 0,
      rotationX: 0,
      rotationY: 0,
      scale: 1,
      skewX: 0,
      skewY: 0
    }).progress(1),
        bounds = element.getBoundingClientRect();
    tween && tween.progress(0).kill();
    return bounds;
  },
      _getSize = function _getSize(element, _ref3) {
    var d2 = _ref3.d2;
    return element["offset" + d2] || element["client" + d2] || 0;
  },
      _getLabelRatioArray = function _getLabelRatioArray(timeline) {
    var a = [],
        labels = timeline.labels,
        duration = timeline.duration(),
        p;

    for (p in labels) {
      a.push(labels[p] / duration);
    }

    return a;
  },
      _getClosestLabel = function _getClosestLabel(animation) {
    return function (value) {
      return gsap$1.utils.snap(_getLabelRatioArray(animation), value);
    };
  },
      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
    var snap = gsap$1.utils.snap(snapIncrementOrArray),
        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
      return a - b;
    });
    return a ? function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }

      var i;

      if (!direction) {
        return snap(value);
      }

      if (direction > 0) {
        value -= threshold;

        for (i = 0; i < a.length; i++) {
          if (a[i] >= value) {
            return a[i];
          }
        }

        return a[i - 1];
      } else {
        i = a.length;
        value += threshold;

        while (i--) {
          if (a[i] <= value) {
            return a[i];
          }
        }
      }

      return a[0];
    } : function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }

      var snapped = snap(value);
      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
    };
  },
      _getLabelAtDirection = function _getLabelAtDirection(timeline) {
    return function (value, st) {
      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
    };
  },
      _multiListener = function _multiListener(func, element, types, callback) {
    return types.split(",").forEach(function (type) {
      return func(element, type, callback);
    });
  },
      _addListener$1 = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      _removeListener$1 = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _wheelListener = function _wheelListener(func, el, scrollFunc) {
    scrollFunc = scrollFunc && scrollFunc.wheelHandler;

    if (scrollFunc) {
      func(el, "wheel", scrollFunc);
      func(el, "touchmove", scrollFunc);
    }
  },
      _markerDefaults = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal"
  },
      _defaults = {
    toggleActions: "play",
    anticipatePin: 0
  },
      _keywords = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1
  },
      _offsetToPx = function _offsetToPx(value, size) {
    if (_isString(value)) {
      var eqIndex = value.indexOf("="),
          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;

      if (~eqIndex) {
        value.indexOf("%") > eqIndex && (relative *= size / 100);
        value = value.substr(0, eqIndex - 1);
      }

      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
    }

    return value;
  },
      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
    var startColor = _ref4.startColor,
        endColor = _ref4.endColor,
        fontSize = _ref4.fontSize,
        indent = _ref4.indent,
        fontWeight = _ref4.fontWeight;

    var e = _doc$1.createElement("div"),
        useFixedPosition = _isViewport$1(container) || _getProxyProp(container, "pinType") === "fixed",
        isScroller = type.indexOf("scroller") !== -1,
        parent = useFixedPosition ? _body$1 : container,
        isStart = type.indexOf("start") !== -1,
        color = isStart ? startColor : endColor,
        css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

    css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
    matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
    e._isStart = isStart;
    e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
    e.style.cssText = css;
    e.innerText = name || name === 0 ? type + "-" + name : type;
    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
    e._offset = e["offset" + direction.op.d2];

    _positionMarker(e, 0, direction, isStart);

    return e;
  },
      _positionMarker = function _positionMarker(marker, start, direction, flipped) {
    var vars = {
      display: "block"
    },
        side = direction[flipped ? "os2" : "p2"],
        oppositeSide = direction[flipped ? "p2" : "os2"];
    marker._isFlipped = flipped;
    vars[direction.a + "Percent"] = flipped ? -100 : 0;
    vars[direction.a] = flipped ? "1px" : 0;
    vars["border" + side + _Width] = 1;
    vars["border" + oppositeSide + _Width] = 0;
    vars[direction.p] = start + "px";
    gsap$1.set(marker, vars);
  },
      _triggers = [],
      _ids = {},
      _rafID,
      _sync = function _sync() {
    return _getTime$1() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));
  },
      _onScroll$1 = function _onScroll() {
    if (!_normalizer$1 || !_normalizer$1.isPressed || _normalizer$1.startX > _body$1.clientWidth) {
      _scrollers.cache++;

      if (_normalizer$1) {
        _rafID || (_rafID = requestAnimationFrame(_updateAll));
      } else {
        _updateAll();
      }

      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime$1();
    }
  },
      _setBaseDimensions = function _setBaseDimensions() {
    _baseScreenWidth = _win$1.innerWidth;
    _baseScreenHeight = _win$1.innerHeight;
  },
      _onResize = function _onResize() {
    _scrollers.cache++;
    !_refreshing && !_ignoreResize && !_doc$1.fullscreenElement && !_doc$1.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win$1.innerWidth || Math.abs(_win$1.innerHeight - _baseScreenHeight) > _win$1.innerHeight * 0.25) && _resizeDelay.restart(true);
  },
      _listeners = {},
      _emptyArray = [],
      _softRefresh = function _softRefresh() {
    return _removeListener$1(ScrollTrigger$1, "scrollEnd", _softRefresh) || _refreshAll(true);
  },
      _dispatch = function _dispatch(type) {
    return _listeners[type] && _listeners[type].map(function (f) {
      return f();
    }) || _emptyArray;
  },
      _savedStyles = [],
      _revertRecorded = function _revertRecorded(media) {
    for (var i = 0; i < _savedStyles.length; i += 5) {
      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {
        _savedStyles[i].style.cssText = _savedStyles[i + 1];
        _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
        _savedStyles[i + 3].uncache = 1;
      }
    }
  },
      _revertAll = function _revertAll(kill, media) {
    var trigger;

    for (_i = 0; _i < _triggers.length; _i++) {
      trigger = _triggers[_i];

      if (trigger && (!media || trigger._ctx === media)) {
        if (kill) {
          trigger.kill(1);
        } else {
          trigger.revert(true, true);
        }
      }
    }

    media && _revertRecorded(media);
    media || _dispatch("revert");
  },
      _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
    _scrollers.cache++;
    (force || !_refreshingAll) && _scrollers.forEach(function (obj) {
      return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
    });
    _isString(scrollRestoration) && (_win$1.history.scrollRestoration = _scrollRestoration = scrollRestoration);
  },
      _refreshingAll,
      _refreshID = 0,
      _queueRefreshID,
      _queueRefreshAll = function _queueRefreshAll() {
    if (_queueRefreshID !== _refreshID) {
      var id = _queueRefreshID = _refreshID;
      requestAnimationFrame(function () {
        return id === _refreshID && _refreshAll(true);
      });
    }
  },
      _refresh100vh = function _refresh100vh() {
    _body$1.appendChild(_div100vh);

    _100vh = _div100vh.offsetHeight || _win$1.innerHeight;

    _body$1.removeChild(_div100vh);
  },
      _refreshAll = function _refreshAll(force, skipRevert) {
    if (_lastScrollTime && !force) {
      _addListener$1(ScrollTrigger$1, "scrollEnd", _softRefresh);

      return;
    }

    _refresh100vh();

    _refreshingAll = ScrollTrigger$1.isRefreshing = true;

    _scrollers.forEach(function (obj) {
      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
    });

    var refreshInits = _dispatch("refreshInit");

    _sort && ScrollTrigger$1.sort();
    skipRevert || _revertAll();

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && (obj.target.style.scrollBehavior = "auto");
        obj(0);
      }
    });

    _triggers.slice(0).forEach(function (t) {
      return t.refresh();
    });

    _triggers.forEach(function (t, i) {
      if (t._subPinOffset && t.pin) {
        var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
            original = t.pin[prop];
        t.revert(true, 1);
        t.adjustPinSpacing(t.pin[prop] - original);
        t.refresh();
      }
    });

    _triggers.forEach(function (t) {
      var max = _maxScroll(t.scroller, t._dir);

      (t.vars.end === "max" || t._endClamp && t.end > max) && t.setPositions(t.start, Math.max(t.start + 1, max), true);
    });

    refreshInits.forEach(function (result) {
      return result && result.render && result.render(-1);
    });

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && requestAnimationFrame(function () {
          return obj.target.style.scrollBehavior = "smooth";
        });
        obj.rec && obj(obj.rec);
      }
    });

    _clearScrollMemory(_scrollRestoration, 1);

    _resizeDelay.pause();

    _refreshID++;
    _refreshingAll = 2;

    _updateAll(2);

    _triggers.forEach(function (t) {
      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
    });

    _refreshingAll = ScrollTrigger$1.isRefreshing = false;

    _dispatch("refresh");
  },
      _lastScroll = 0,
      _direction = 1,
      _primary,
      _updateAll = function _updateAll(force) {
    if (!_refreshingAll || force === 2) {
      ScrollTrigger$1.isUpdating = true;
      _primary && _primary.update(0);

      var l = _triggers.length,
          time = _getTime$1(),
          recordVelocity = time - _time1 >= 50,
          scroll = l && _triggers[0].scroll();

      _direction = _lastScroll > scroll ? -1 : 1;
      _refreshingAll || (_lastScroll = scroll);

      if (recordVelocity) {
        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
          _lastScrollTime = 0;

          _dispatch("scrollEnd");
        }

        _time2 = _time1;
        _time1 = time;
      }

      if (_direction < 0) {
        _i = l;

        while (_i-- > 0) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }

        _direction = 1;
      } else {
        for (_i = 0; _i < l; _i++) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
      }

      ScrollTrigger$1.isUpdating = false;
    }

    _rafID = 0;
  },
      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
      _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
      _swapPinOut = function _swapPinOut(pin, spacer, state) {
    _setState(state);

    var cache = pin._gsap;

    if (cache.spacerIsNative) {
      _setState(cache.spacerState);
    } else if (pin._gsap.swappedIn) {
      var parent = spacer.parentNode;

      if (parent) {
        parent.insertBefore(pin, spacer);
        parent.removeChild(spacer);
      }
    }

    pin._gsap.swappedIn = false;
  },
      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
    if (!pin._gsap.swappedIn) {
      var i = _propNamesToCopy.length,
          spacerStyle = spacer.style,
          pinStyle = pin.style,
          p;

      while (i--) {
        p = _propNamesToCopy[i];
        spacerStyle[p] = cs[p];
      }

      spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
      cs.display === "inline" && (spacerStyle.display = "inline-block");
      pinStyle[_bottom] = pinStyle[_right] = "auto";
      spacerStyle.flexBasis = cs.flexBasis || "auto";
      spacerStyle.overflow = "visible";
      spacerStyle.boxSizing = "border-box";
      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
      spacerStyle[_height] = _getSize(pin, _vertical) + _px;
      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";

      _setState(spacerState);

      pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
      pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
      pinStyle[_padding] = cs[_padding];

      if (pin.parentNode !== spacer) {
        pin.parentNode.insertBefore(spacer, pin);
        spacer.appendChild(pin);
      }

      pin._gsap.swappedIn = true;
    }
  },
      _capsExp = /([A-Z])/g,
      _setState = function _setState(state) {
    if (state) {
      var style = state.t.style,
          l = state.length,
          i = 0,
          p,
          value;
      (state.t._gsap || gsap$1.core.getCache(state.t)).uncache = 1;

      for (; i < l; i += 2) {
        value = state[i + 1];
        p = state[i];

        if (value) {
          style[p] = value;
        } else if (style[p]) {
          style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
        }
      }
    }
  },
      _getState = function _getState(element) {
    var l = _stateProps.length,
        style = element.style,
        state = [],
        i = 0;

    for (; i < l; i++) {
      state.push(_stateProps[i], style[_stateProps[i]]);
    }

    state.t = element;
    return state;
  },
      _copyState = function _copyState(state, override, omitOffsets) {
    var result = [],
        l = state.length,
        i = omitOffsets ? 8 : 0,
        p;

    for (; i < l; i += 2) {
      p = state[i];
      result.push(p, p in override ? override[p] : state[i + 1]);
    }

    result.t = state.t;
    return result;
  },
      _winOffsets = {
    left: 0,
    top: 0
  },
      _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {
    _isFunction(value) && (value = value(self));

    if (_isString(value) && value.substr(0, 3) === "max") {
      value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
    }

    var time = containerAnimation ? containerAnimation.time() : 0,
        p1,
        p2,
        element;
    containerAnimation && containerAnimation.seek(0);
    isNaN(value) || (value = +value);

    if (!_isNumber(value)) {
      _isFunction(trigger) && (trigger = trigger(self));
      var offsets = (value || "0").split(" "),
          bounds,
          localOffset,
          globalOffset,
          display;
      element = _getTarget(trigger, self) || _body$1;
      bounds = _getBounds(element) || {};

      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
        display = element.style.display;
        element.style.display = "block";
        bounds = _getBounds(element);
        display ? element.style.display = display : element.style.removeProperty("display");
      }

      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
      globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
      scrollerSize -= scrollerSize - globalOffset;
    } else {
      containerAnimation && (value = gsap$1.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
    }

    if (clampZeroProp) {
      self[clampZeroProp] = value || -0.001;
      value < 0 && (value = 0);
    }

    if (marker) {
      var position = value + scrollerSize,
          isStart = marker._isStart;
      p1 = "scroll" + direction.d2;

      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body$1[p1], _docEl$1[p1]) : marker.parentNode[p1]) <= position + 1);

      if (useFixedPosition) {
        scrollerBounds = _getBounds(markerScroller);
        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
      }
    }

    if (containerAnimation && element) {
      p1 = _getBounds(element);
      containerAnimation.seek(scrollerMax);
      p2 = _getBounds(element);
      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
      value = value / containerAnimation._caScrollDist * scrollerMax;
    }

    containerAnimation && containerAnimation.seek(time);
    return containerAnimation ? value : Math.round(value);
  },
      _prefixExp = /(webkit|moz|length|cssText|inset)/i,
      _reparent = function _reparent(element, parent, top, left) {
    if (element.parentNode !== parent) {
      var style = element.style,
          p,
          cs;

      if (parent === _body$1) {
        element._stOrig = style.cssText;
        cs = _getComputedStyle(element);

        for (p in cs) {
          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
            style[p] = cs[p];
          }
        }

        style.top = top;
        style.left = left;
      } else {
        style.cssText = element._stOrig;
      }

      gsap$1.core.getCache(element).uncache = 1;
      parent.appendChild(element);
    }
  },
      _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {
    var last1 = initialValue,
        last2 = last1;
    return function (value) {
      var current = Math.round(getValueFunc());

      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {
        value = current;
        onInterrupt && onInterrupt();
      }

      last2 = last1;
      last1 = value;
      return value;
    };
  },
      _shiftMarker = function _shiftMarker(marker, direction, value) {
    var vars = {};
    vars[direction.p] = "+=" + value;
    gsap$1.set(marker, vars);
  },
      _getTweenCreator = function _getTweenCreator(scroller, direction) {
    var getScroll = _getScrollFunc(scroller, direction),
        prop = "_scroll" + direction.p2,
        getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
      var tween = getTween.tween,
          onComplete = vars.onComplete,
          modifiers = {};
      initialValue = initialValue || getScroll();

      var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {
        tween.kill();
        getTween.tween = 0;
      });

      change2 = change1 && change2 || 0;
      change1 = change1 || scrollTo - initialValue;
      tween && tween.kill();
      vars[prop] = scrollTo;
      vars.modifiers = modifiers;

      modifiers[prop] = function () {
        return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
      };

      vars.onUpdate = function () {
        _scrollers.cache++;

        _updateAll();
      };

      vars.onComplete = function () {
        getTween.tween = 0;
        onComplete && onComplete.call(tween);
      };

      tween = getTween.tween = gsap$1.to(scroller, vars);
      return tween;
    };

    scroller[prop] = getScroll;

    getScroll.wheelHandler = function () {
      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
    };

    _addListener$1(scroller, "wheel", getScroll.wheelHandler);

    ScrollTrigger$1.isTouch && _addListener$1(scroller, "touchmove", getScroll.wheelHandler);
    return getTween;
  };

  var ScrollTrigger$1 = function () {
    function ScrollTrigger(vars, animation) {
      _coreInitted$1 || ScrollTrigger.register(gsap$1) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");

      _context$1(this);

      this.init(vars, animation);
    }

    var _proto = ScrollTrigger.prototype;

    _proto.init = function init(vars, animation) {
      this.progress = this.start = 0;
      this.vars && this.kill(true, true);

      if (!_enabled) {
        this.update = this.refresh = this.kill = _passThrough;
        return;
      }

      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {
        trigger: vars
      } : vars, _defaults);

      var _vars = vars,
          onUpdate = _vars.onUpdate,
          toggleClass = _vars.toggleClass,
          id = _vars.id,
          onToggle = _vars.onToggle,
          onRefresh = _vars.onRefresh,
          scrub = _vars.scrub,
          trigger = _vars.trigger,
          pin = _vars.pin,
          pinSpacing = _vars.pinSpacing,
          invalidateOnRefresh = _vars.invalidateOnRefresh,
          anticipatePin = _vars.anticipatePin,
          onScrubComplete = _vars.onScrubComplete,
          onSnapComplete = _vars.onSnapComplete,
          once = _vars.once,
          snap = _vars.snap,
          pinReparent = _vars.pinReparent,
          pinSpacer = _vars.pinSpacer,
          containerAnimation = _vars.containerAnimation,
          fastScrollEnd = _vars.fastScrollEnd,
          preventOverlaps = _vars.preventOverlaps,
          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,
          isToggle = !scrub && scrub !== 0,
          scroller = _getTarget(vars.scroller || _win$1),
          scrollerCache = gsap$1.core.getCache(scroller),
          isViewport = _isViewport$1(scroller),
          useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || isViewport && "fixed") === "fixed",
          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
          toggleActions = isToggle && vars.toggleActions.split(" "),
          markers = "markers" in vars ? vars.markers : _defaults.markers,
          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
          self = this,
          onRefreshInit = vars.onRefreshInit && function () {
        return vars.onRefreshInit(self);
      },
          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
          lastSnap = 0,
          lastRefresh = 0,
          prevProgress = 0,
          scrollFunc = _getScrollFunc(scroller, direction),
          tweenTo,
          pinCache,
          snapFunc,
          scroll1,
          scroll2,
          start,
          end,
          markerStart,
          markerEnd,
          markerStartTrigger,
          markerEndTrigger,
          markerVars,
          executingOnRefresh,
          change,
          pinOriginalState,
          pinActiveState,
          pinState,
          spacer,
          offset,
          pinGetter,
          pinSetter,
          pinStart,
          pinChange,
          spacingStart,
          spacerState,
          markerStartSetter,
          pinMoves,
          markerEndSetter,
          cs,
          snap1,
          snap2,
          scrubTween,
          scrubSmooth,
          snapDurClamp,
          snapDelayedCall,
          prevScroll,
          prevAnimProgress,
          caMarkerSetter,
          customRevertReturn;

      self._startClamp = self._endClamp = false;
      self._dir = direction;
      anticipatePin *= 45;
      self.scroller = scroller;
      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
      scroll1 = scrollFunc();
      self.vars = vars;
      animation = animation || vars.animation;

      if ("refreshPriority" in vars) {
        _sort = 1;
        vars.refreshPriority === -9999 && (_primary = self);
      }

      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
        top: _getTweenCreator(scroller, _vertical),
        left: _getTweenCreator(scroller, _horizontal)
      };
      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

      self.scrubDuration = function (value) {
        scrubSmooth = _isNumber(value) && value;

        if (!scrubSmooth) {
          scrubTween && scrubTween.progress(1).kill();
          scrubTween = 0;
        } else {
          scrubTween ? scrubTween.duration(value) : scrubTween = gsap$1.to(animation, {
            ease: "expo",
            totalProgress: "+=0",
            duration: scrubSmooth,
            paused: true,
            onComplete: function onComplete() {
              return onScrubComplete && onScrubComplete(self);
            }
          });
        }
      };

      if (animation) {
        animation.vars.lazy = false;
        animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true);
        self.animation = animation.pause();
        animation.scrollTrigger = self;
        self.scrubDuration(scrub);
        snap1 = 0;
        id || (id = animation.vars.id);
      }

      if (snap) {
        if (!_isObject(snap) || snap.push) {
          snap = {
            snapTo: snap
          };
        }

        "scrollBehavior" in _body$1.style && gsap$1.set(isViewport ? [_body$1, _docEl$1] : scroller, {
          scrollBehavior: "auto"
        });

        _scrollers.forEach(function (o) {
          return _isFunction(o) && o.target === (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller) && (o.smooth = false);
        });

        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
          return _snapDirectional(snap.snapTo)(value, _getTime$1() - lastRefresh < 500 ? 0 : st.direction);
        } : gsap$1.utils.snap(snap.snapTo);
        snapDurClamp = snap.duration || {
          min: 0.1,
          max: 2
        };
        snapDurClamp = _isObject(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);
        snapDelayedCall = gsap$1.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
          var scroll = scrollFunc(),
              refreshedRecently = _getTime$1() - lastRefresh < 500,
              tween = tweenTo.tween;

          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
            var progress = (scroll - start) / change,
                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime$1() - _time2) * 1000 || 0,
                change1 = gsap$1.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
                naturalEnd = progress + (snap.inertia === false ? 0 : change1),
                endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),
                endScroll = Math.round(start + endValue * change),
                _snap = snap,
                onStart = _snap.onStart,
                _onInterrupt = _snap.onInterrupt,
                _onComplete = _snap.onComplete;

            if (scroll <= end && scroll >= start && endScroll !== scroll) {
              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
                return;
              }

              if (snap.inertia === false) {
                change1 = endValue - progress;
              }

              tweenTo(endScroll, {
                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
                ease: snap.ease || "power3",
                data: _abs(endScroll - scroll),
                onInterrupt: function onInterrupt() {
                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
                },
                onComplete: function onComplete() {
                  self.update();
                  lastSnap = scrollFunc();
                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                  onSnapComplete && onSnapComplete(self);
                  _onComplete && _onComplete(self);
                }
              }, scroll, change1 * change, endScroll - scroll - change1 * change);
              onStart && onStart(self, tweenTo.tween);
            }
          } else if (self.isActive && lastSnap !== scroll) {
            snapDelayedCall.restart(true);
          }
        }).pause();
      }

      id && (_ids[id] = self);
      trigger = self.trigger = _getTarget(trigger || pin !== true && pin);
      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
      customRevertReturn && (customRevertReturn = customRevertReturn(self));
      pin = pin === true ? trigger : _getTarget(pin);
      _isString(toggleClass) && (toggleClass = {
        targets: trigger,
        className: toggleClass
      });

      if (pin) {
        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding);
        self.pin = pin;
        pinCache = gsap$1.core.getCache(pin);

        if (!pinCache.spacer) {
          if (pinSpacer) {
            pinSpacer = _getTarget(pinSpacer);
            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement);
            pinCache.spacerIsNative = !!pinSpacer;
            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
          }

          pinCache.spacer = spacer = pinSpacer || _doc$1.createElement("div");
          spacer.classList.add("pin-spacer");
          id && spacer.classList.add("pin-spacer-" + id);
          pinCache.pinState = pinOriginalState = _getState(pin);
        } else {
          pinOriginalState = pinCache.pinState;
        }

        vars.force3D !== false && gsap$1.set(pin, {
          force3D: true
        });
        self.spacer = spacer = pinCache.spacer;
        cs = _getComputedStyle(pin);
        spacingStart = cs[pinSpacing + direction.os2];
        pinGetter = gsap$1.getProperty(pin);
        pinSetter = gsap$1.quickSetter(pin, direction.a, _px);

        _swapPinIn(pin, spacer, cs);

        pinState = _getState(pin);
      }

      if (markers) {
        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
        markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
        markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
        offset = markerStartTrigger["offset" + direction.op.d2];

        var content = _getTarget(_getProxyProp(scroller, "content") || scroller);

        markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
        markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
        containerAnimation && (caMarkerSetter = gsap$1.quickSetter([markerStart, markerEnd], direction.a, _px));

        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true)) {
          _makePositionable(isViewport ? _body$1 : scroller);

          gsap$1.set([markerStartTrigger, markerEndTrigger], {
            force3D: true
          });
          markerStartSetter = gsap$1.quickSetter(markerStartTrigger, direction.a, _px);
          markerEndSetter = gsap$1.quickSetter(markerEndTrigger, direction.a, _px);
        }
      }

      if (containerAnimation) {
        var oldOnUpdate = containerAnimation.vars.onUpdate,
            oldParams = containerAnimation.vars.onUpdateParams;
        containerAnimation.eventCallback("onUpdate", function () {
          self.update(0, 0, 1);
          oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
        });
      }

      self.previous = function () {
        return _triggers[_triggers.indexOf(self) - 1];
      };

      self.next = function () {
        return _triggers[_triggers.indexOf(self) + 1];
      };

      self.revert = function (revert, temp) {
        if (!temp) {
          return self.kill(true);
        }

        var r = revert !== false || !self.enabled,
            prevRefreshing = _refreshing;

        if (r !== self.isReverted) {
          if (r) {
            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0);
            prevProgress = self.progress;
            prevAnimProgress = animation && animation.progress();
          }

          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
            return m.style.display = r ? "none" : "block";
          });

          if (r) {
            _refreshing = self;
            self.update(r);
          }

          if (pin && (!pinReparent || !self.isActive)) {
            if (r) {
              _swapPinOut(pin, spacer, pinOriginalState);
            } else {
              _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
            }
          }

          r || self.update(r);
          _refreshing = prevRefreshing;
          self.isReverted = r;
        }
      };

      self.refresh = function (soft, force, position, pinOffset) {
        if ((_refreshing || !self.enabled) && !force) {
          return;
        }

        if (pin && soft && _lastScrollTime) {
          _addListener$1(ScrollTrigger, "scrollEnd", _softRefresh);

          return;
        }

        !_refreshingAll && onRefreshInit && onRefreshInit(self);
        _refreshing = self;

        if (tweenTo.tween && !position) {
          tweenTo.tween.kill();
          tweenTo.tween = 0;
        }

        scrubTween && scrubTween.pause();
        invalidateOnRefresh && animation && animation.revert({
          kill: false
        }).invalidate();
        self.isReverted || self.revert(true, true);
        self._subPinOffset = false;

        var size = getScrollerSize(),
            scrollerBounds = getScrollerOffsets(),
            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
            isFirstRefresh = change <= 0.01,
            offset = 0,
            otherPinOffset = pinOffset || 0,
            parsedEnd = _isObject(position) ? position.end : vars.end,
            parsedEndTrigger = vars.endTrigger || trigger,
            parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
            i = triggerIndex,
            cs,
            bounds,
            scroll,
            isVertical,
            override,
            curTrigger,
            curPin,
            oppositeScroll,
            initted,
            revertedPins,
            forcedOverflow,
            markerStartOffset,
            markerEndOffset;

        if (markers && _isObject(position)) {
          markerStartOffset = gsap$1.getProperty(markerStartTrigger, direction.p);
          markerEndOffset = gsap$1.getProperty(markerEndTrigger, direction.p);
        }

        while (i--) {
          curTrigger = _triggers[i];
          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self);
          curPin = curTrigger.pin;

          if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
            revertedPins || (revertedPins = []);
            revertedPins.unshift(curTrigger);
            curTrigger.revert(true, true);
          }

          if (curTrigger !== _triggers[i]) {
            triggerIndex--;
            i--;
          }
        }

        _isFunction(parsedStart) && (parsedStart = parsedStart(self));
        parsedStart = _parseClamp(parsedStart, "start", self);
        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

        if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
          if (~parsedEnd.indexOf(" ")) {
            parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
          } else {
            offset = _offsetToPx(parsedEnd.substr(2), size);
            parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap$1.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset;
            parsedEndTrigger = trigger;
          }
        }

        parsedEnd = _parseClamp(parsedEnd, "end", self);
        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
        offset = 0;
        i = triggerIndex;

        while (i--) {
          curTrigger = _triggers[i];
          curPin = curTrigger.pin;

          if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
            cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);

            if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {
              offset += cs * (1 - curTrigger.progress);
            }

            curPin === pin && (otherPinOffset += cs);
          }
        }

        start += offset;
        end += offset;
        self._startClamp && (self._startClamp += offset);

        if (self._endClamp && !_refreshingAll) {
          self._endClamp = end || -0.001;
          end = Math.min(end, _maxScroll(scroller, direction));
        }

        change = end - start || (start -= 0.01) && 0.001;

        if (isFirstRefresh) {
          prevProgress = gsap$1.utils.clamp(0, 1, gsap$1.utils.normalize(start, end, prevScroll));
        }

        self._pinPush = otherPinOffset;

        if (markerStart && offset) {
          cs = {};
          cs[direction.a] = "+=" + offset;
          pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
          gsap$1.set([markerStart, markerEnd], cs);
        }

        if (pin) {
          cs = _getComputedStyle(pin);
          isVertical = direction === _vertical;
          scroll = scrollFunc();
          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;

          if (!max && end > 1) {
            forcedOverflow = (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller).style;
            forcedOverflow = {
              style: forcedOverflow,
              value: forcedOverflow["overflow" + direction.a.toUpperCase()]
            };

            if (isViewport && _getComputedStyle(_body$1)["overflow" + direction.a.toUpperCase()] !== "scroll") {
              forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
            }
          }

          _swapPinIn(pin, spacer, cs);

          pinState = _getState(pin);
          bounds = _getBounds(pin, true);
          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();

          if (pinSpacing) {
            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
            spacerState.t = spacer;
            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;
            i && spacerState.push(direction.d, i + _px);

            _setState(spacerState);

            if (pinnedContainer) {
              _triggers.forEach(function (t) {
                if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                  t._subPinOffset = true;
                }
              });
            }

            useFixedPosition && scrollFunc(prevScroll);
          }

          if (useFixedPosition) {
            override = {
              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
              boxSizing: "border-box",
              position: "fixed"
            };
            override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
            override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
            override[_padding] = cs[_padding];
            override[_padding + _Top] = cs[_padding + _Top];
            override[_padding + _Right] = cs[_padding + _Right];
            override[_padding + _Bottom] = cs[_padding + _Bottom];
            override[_padding + _Left] = cs[_padding + _Left];
            pinActiveState = _copyState(pinOriginalState, override, pinReparent);
            _refreshingAll && scrollFunc(0);
          }

          if (animation) {
            initted = animation._initted;

            _suppressOverwrites(1);

            animation.render(animation.duration(), true, true);
            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
            pinMoves = Math.abs(change - pinChange) > 1;
            useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2);
            animation.render(0, true, true);
            initted || animation.invalidate(true);
            animation.parent || animation.totalTime(animation.totalTime());

            _suppressOverwrites(0);
          } else {
            pinChange = change;
          }

          forcedOverflow && (forcedOverflow.value ? forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty("overflow-" + direction.a));
        } else if (trigger && scrollFunc() && !containerAnimation) {
          bounds = trigger.parentNode;

          while (bounds && bounds !== _body$1) {
            if (bounds._pinOffset) {
              start -= bounds._pinOffset;
              end -= bounds._pinOffset;
            }

            bounds = bounds.parentNode;
          }
        }

        revertedPins && revertedPins.forEach(function (t) {
          return t.revert(false, true);
        });
        self.start = start;
        self.end = end;
        scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc();

        if (!containerAnimation && !_refreshingAll) {
          scroll1 < prevScroll && scrollFunc(prevScroll);
          self.scroll.rec = 0;
        }

        self.revert(false, true);
        lastRefresh = _getTime$1();

        if (snapDelayedCall) {
          lastSnap = -1;
          snapDelayedCall.restart(true);
        }

        _refreshing = 0;
        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true);

        if (isFirstRefresh || prevProgress !== self.progress || containerAnimation) {
          animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap$1.utils.normalize(start, end, 0) : prevProgress, true);
          self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;
        }

        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
        scrubTween && scrubTween.invalidate();

        if (!isNaN(markerStartOffset)) {
          markerStartOffset -= gsap$1.getProperty(markerStartTrigger, direction.p);
          markerEndOffset -= gsap$1.getProperty(markerEndTrigger, direction.p);

          _shiftMarker(markerStartTrigger, direction, markerStartOffset);

          _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));

          _shiftMarker(markerEndTrigger, direction, markerEndOffset);

          _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
        }

        isFirstRefresh && !_refreshingAll && self.update();

        if (onRefresh && !_refreshingAll && !executingOnRefresh) {
          executingOnRefresh = true;
          onRefresh(self);
          executingOnRefresh = false;
        }
      };

      self.getVelocity = function () {
        return (scrollFunc() - scroll2) / (_getTime$1() - _time2) * 1000 || 0;
      };

      self.endAnimation = function () {
        _endAnimation(self.callbackAnimation);

        if (animation) {
          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
        }
      };

      self.labelToScroll = function (label) {
        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
      };

      self.getTrailing = function (name) {
        var i = _triggers.indexOf(self),
            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);

        return (_isString(name) ? a.filter(function (t) {
          return t.vars.preventOverlaps === name;
        }) : a).filter(function (t) {
          return self.direction > 0 ? t.end <= start : t.start >= end;
        });
      };

      self.update = function (reset, recordVelocity, forceFake) {
        if (containerAnimation && !forceFake && !reset) {
          return;
        }

        var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
            p = reset ? 0 : (scroll - start) / change,
            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
            prevProgress = self.progress,
            isActive,
            wasActive,
            toggleState,
            action,
            stateChanged,
            toggled,
            isAtMax,
            isTakingAction;

        if (recordVelocity) {
          scroll2 = scroll1;
          scroll1 = containerAnimation ? scrollFunc() : scroll;

          if (snap) {
            snap2 = snap1;
            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
          }
        }

        anticipatePin && !clipped && pin && !_refreshing && !_startup$1 && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime$1() - _time2) * anticipatePin && (clipped = 0.0001);

        if (clipped !== prevProgress && self.enabled) {
          isActive = self.isActive = !!clipped && clipped < 1;
          wasActive = !!prevProgress && prevProgress < 1;
          toggled = isActive !== wasActive;
          stateChanged = toggled || !!clipped !== !!prevProgress;
          self.direction = clipped > prevProgress ? 1 : -1;
          self.progress = clipped;

          if (stateChanged && !_refreshing) {
            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3;

            if (isToggle) {
              action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState];
              isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
            }
          }

          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
            return t.endAnimation();
          }));

          if (!isToggle) {
            if (scrubTween && !_refreshing && !_startup$1) {
              scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start);

              if (scrubTween.resetTo) {
                scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
              } else {
                scrubTween.vars.totalProgress = clipped;
                scrubTween.invalidate().restart();
              }
            } else if (animation) {
              animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
            }
          }

          if (pin) {
            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);

            if (!useFixedPosition) {
              pinSetter(_round(pinStart + pinChange * clipped));
            } else if (stateChanged) {
              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction);

              if (pinReparent) {
                if (!reset && (isActive || isAtMax)) {
                  var bounds = _getBounds(pin, true),
                      _offset = scroll - start;

                  _reparent(pin, _body$1, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);
                } else {
                  _reparent(pin, spacer);
                }
              }

              _setState(isActive || isAtMax ? pinActiveState : pinState);

              pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
            }
          }

          snap && !tweenTo.tween && !_refreshing && !_startup$1 && snapDelayedCall.restart(true);
          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
            return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
          });
          onUpdate && !isToggle && !reset && onUpdate(self);

          if (stateChanged && !_refreshing) {
            if (isToggle) {
              if (isTakingAction) {
                if (action === "complete") {
                  animation.pause().totalProgress(1);
                } else if (action === "reset") {
                  animation.restart(true).pause();
                } else if (action === "restart") {
                  animation.restart(true);
                } else {
                  animation[action]();
                }
              }

              onUpdate && onUpdate(self);
            }

            if (toggled || !_limitCallbacks) {
              onToggle && toggled && _callback(self, onToggle);
              callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0);

              if (!toggled) {
                toggleState = clipped === 1 ? 1 : 3;
                callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              }
            }

            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
              _endAnimation(self.callbackAnimation);

              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
            }
          } else if (isToggle && onUpdate && !_refreshing) {
            onUpdate(self);
          }
        }

        if (markerEndSetter) {
          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
          markerEndSetter(n);
        }

        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
      };

      self.enable = function (reset, refresh) {
        if (!self.enabled) {
          self.enabled = true;

          _addListener$1(scroller, "resize", _onResize);

          isViewport || _addListener$1(scroller, "scroll", _onScroll$1);
          onRefreshInit && _addListener$1(ScrollTrigger, "refreshInit", onRefreshInit);

          if (reset !== false) {
            self.progress = prevProgress = 0;
            scroll1 = scroll2 = lastSnap = scrollFunc();
          }

          refresh !== false && self.refresh();
        }
      };

      self.getTween = function (snap) {
        return snap && tweenTo ? tweenTo.tween : scrubTween;
      };

      self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
        if (containerAnimation) {
          var st = containerAnimation.scrollTrigger,
              duration = containerAnimation.duration(),
              _change = st.end - st.start;

          newStart = st.start + _change * newStart / duration;
          newEnd = st.start + _change * newEnd / duration;
        }

        self.refresh(false, false, {
          start: _keepClamp(newStart, keepClamp && !!self._startClamp),
          end: _keepClamp(newEnd, keepClamp && !!self._endClamp)
        }, pinOffset);
        self.update();
      };

      self.adjustPinSpacing = function (amount) {
        if (spacerState && amount) {
          var i = spacerState.indexOf(direction.d) + 1;
          spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
          spacerState[1] = parseFloat(spacerState[1]) + amount + _px;

          _setState(spacerState);
        }
      };

      self.disable = function (reset, allowAnimation) {
        if (self.enabled) {
          reset !== false && self.revert(true, true);
          self.enabled = self.isActive = false;
          allowAnimation || scrubTween && scrubTween.pause();
          prevScroll = 0;
          pinCache && (pinCache.uncache = 1);
          onRefreshInit && _removeListener$1(ScrollTrigger, "refreshInit", onRefreshInit);

          if (snapDelayedCall) {
            snapDelayedCall.pause();
            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
          }

          if (!isViewport) {
            var i = _triggers.length;

            while (i--) {
              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
                return;
              }
            }

            _removeListener$1(scroller, "resize", _onResize);

            isViewport || _removeListener$1(scroller, "scroll", _onScroll$1);
          }
        }
      };

      self.kill = function (revert, allowAnimation) {
        self.disable(revert, allowAnimation);
        scrubTween && !allowAnimation && scrubTween.kill();
        id && delete _ids[id];

        var i = _triggers.indexOf(self);

        i >= 0 && _triggers.splice(i, 1);
        i === _i && _direction > 0 && _i--;
        i = 0;

        _triggers.forEach(function (t) {
          return t.scroller === self.scroller && (i = 1);
        });

        i || _refreshingAll || (self.scroll.rec = 0);

        if (animation) {
          animation.scrollTrigger = null;
          revert && animation.revert({
            kill: false
          });
          allowAnimation || animation.kill();
        }

        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
          return m.parentNode && m.parentNode.removeChild(m);
        });
        _primary === self && (_primary = 0);

        if (pin) {
          pinCache && (pinCache.uncache = 1);
          i = 0;

          _triggers.forEach(function (t) {
            return t.pin === pin && i++;
          });

          i || (pinCache.spacer = 0);
        }

        vars.onKill && vars.onKill(self);
      };

      _triggers.push(self);

      self.enable(false, false);
      customRevertReturn && customRevertReturn(self);

      if (animation && animation.add && !change) {
        var updateFunc = self.update;

        self.update = function () {
          self.update = updateFunc;
          start || end || self.refresh();
        };

        gsap$1.delayedCall(0.01, self.update);
        change = 0.01;
        start = end = 0;
      } else {
        self.refresh();
      }

      pin && _queueRefreshAll();
    };

    ScrollTrigger.register = function register(core) {
      if (!_coreInitted$1) {
        gsap$1 = core || _getGSAP$1();
        _windowExists() && window.document && ScrollTrigger.enable();
        _coreInitted$1 = _enabled;
      }

      return _coreInitted$1;
    };

    ScrollTrigger.defaults = function defaults(config) {
      if (config) {
        for (var p in config) {
          _defaults[p] = config[p];
        }
      }

      return _defaults;
    };

    ScrollTrigger.disable = function disable(reset, kill) {
      _enabled = 0;

      _triggers.forEach(function (trigger) {
        return trigger[kill ? "kill" : "disable"](reset);
      });

      _removeListener$1(_win$1, "wheel", _onScroll$1);

      _removeListener$1(_doc$1, "scroll", _onScroll$1);

      clearInterval(_syncInterval);

      _removeListener$1(_doc$1, "touchcancel", _passThrough);

      _removeListener$1(_body$1, "touchstart", _passThrough);

      _multiListener(_removeListener$1, _doc$1, "pointerdown,touchstart,mousedown", _pointerDownHandler);

      _multiListener(_removeListener$1, _doc$1, "pointerup,touchend,mouseup", _pointerUpHandler);

      _resizeDelay.kill();

      _iterateAutoRefresh(_removeListener$1);

      for (var i = 0; i < _scrollers.length; i += 3) {
        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);

        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);
      }
    };

    ScrollTrigger.enable = function enable() {
      _win$1 = window;
      _doc$1 = document;
      _docEl$1 = _doc$1.documentElement;
      _body$1 = _doc$1.body;

      if (gsap$1) {
        _toArray = gsap$1.utils.toArray;
        _clamp$1 = gsap$1.utils.clamp;
        _context$1 = gsap$1.core.context || _passThrough;
        _suppressOverwrites = gsap$1.core.suppressOverwrites || _passThrough;
        _scrollRestoration = _win$1.history.scrollRestoration || "auto";
        _lastScroll = _win$1.pageYOffset;
        gsap$1.core.globals("ScrollTrigger", ScrollTrigger);

        if (_body$1) {
          _enabled = 1;
          _div100vh = document.createElement("div");
          _div100vh.style.height = "100vh";
          _div100vh.style.position = "absolute";

          _refresh100vh();

          _rafBugFix();

          Observer.register(gsap$1);
          ScrollTrigger.isTouch = Observer.isTouch;
          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent);

          _addListener$1(_win$1, "wheel", _onScroll$1);

          _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];

          if (gsap$1.matchMedia) {
            ScrollTrigger.matchMedia = function (vars) {
              var mm = gsap$1.matchMedia(),
                  p;

              for (p in vars) {
                mm.add(p, vars[p]);
              }

              return mm;
            };

            gsap$1.addEventListener("matchMediaInit", function () {
              return _revertAll();
            });
            gsap$1.addEventListener("matchMediaRevert", function () {
              return _revertRecorded();
            });
            gsap$1.addEventListener("matchMedia", function () {
              _refreshAll(0, 1);

              _dispatch("matchMedia");
            });
            gsap$1.matchMedia("(orientation: portrait)", function () {
              _setBaseDimensions();

              return _setBaseDimensions;
            });
          } else {
            console.warn("Requires GSAP 3.11.0 or later");
          }

          _setBaseDimensions();

          _addListener$1(_doc$1, "scroll", _onScroll$1);

          var bodyStyle = _body$1.style,
              border = bodyStyle.borderTopStyle,
              AnimationProto = gsap$1.core.Animation.prototype,
              bounds,
              i;
          AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", {
            value: function value() {
              return this.time(-0.01, true);
            }
          });
          bodyStyle.borderTopStyle = "solid";
          bounds = _getBounds(_body$1);
          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0;
          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style");
          _syncInterval = setInterval(_sync, 250);
          gsap$1.delayedCall(0.5, function () {
            return _startup$1 = 0;
          });

          _addListener$1(_doc$1, "touchcancel", _passThrough);

          _addListener$1(_body$1, "touchstart", _passThrough);

          _multiListener(_addListener$1, _doc$1, "pointerdown,touchstart,mousedown", _pointerDownHandler);

          _multiListener(_addListener$1, _doc$1, "pointerup,touchend,mouseup", _pointerUpHandler);

          _transformProp = gsap$1.utils.checkPrefix("transform");

          _stateProps.push(_transformProp);

          _coreInitted$1 = _getTime$1();
          _resizeDelay = gsap$1.delayedCall(0.2, _refreshAll).pause();
          _autoRefresh = [_doc$1, "visibilitychange", function () {
            var w = _win$1.innerWidth,
                h = _win$1.innerHeight;

            if (_doc$1.hidden) {
              _prevWidth = w;
              _prevHeight = h;
            } else if (_prevWidth !== w || _prevHeight !== h) {
              _onResize();
            }
          }, _doc$1, "DOMContentLoaded", _refreshAll, _win$1, "load", _refreshAll, _win$1, "resize", _onResize];

          _iterateAutoRefresh(_addListener$1);

          _triggers.forEach(function (trigger) {
            return trigger.enable(0, 1);
          });

          for (i = 0; i < _scrollers.length; i += 3) {
            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);

            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);
          }
        }
      }
    };

    ScrollTrigger.config = function config(vars) {
      "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
      var ms = vars.syncInterval;
      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
      "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

      if ("autoRefreshEvents" in vars) {
        _iterateAutoRefresh(_removeListener$1) || _iterateAutoRefresh(_addListener$1, vars.autoRefreshEvents || "none");
        _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
      }
    };

    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
      var t = _getTarget(target),
          i = _scrollers.indexOf(t),
          isViewport = _isViewport$1(t);

      if (~i) {
        _scrollers.splice(i, isViewport ? 6 : 2);
      }

      if (vars) {
        isViewport ? _proxies.unshift(_win$1, vars, _body$1, vars, _docEl$1, vars) : _proxies.unshift(t, vars);
      }
    };

    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
      _triggers.forEach(function (t) {
        return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
      });
    };

    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {
      var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
          offset = bounds[horizontal ? _width : _height] * ratio || 0;
      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win$1.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win$1.innerHeight;
    };

    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {
      _isString(element) && (element = _getTarget(element));
      var bounds = element.getBoundingClientRect(),
          size = bounds[horizontal ? _width : _height],
          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
      return horizontal ? (bounds.left + offset) / _win$1.innerWidth : (bounds.top + offset) / _win$1.innerHeight;
    };

    ScrollTrigger.killAll = function killAll(allowListeners) {
      _triggers.slice(0).forEach(function (t) {
        return t.vars.id !== "ScrollSmoother" && t.kill();
      });

      if (allowListeners !== true) {
        var listeners = _listeners.killAll || [];
        _listeners = {};
        listeners.forEach(function (f) {
          return f();
        });
      }
    };

    return ScrollTrigger;
  }();
  ScrollTrigger$1.version = "3.12.2";

  ScrollTrigger$1.saveStyles = function (targets) {
    return targets ? _toArray(targets).forEach(function (target) {
      if (target && target.style) {
        var i = _savedStyles.indexOf(target);

        i >= 0 && _savedStyles.splice(i, 5);

        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap$1.core.getCache(target), _context$1());
      }
    }) : _savedStyles;
  };

  ScrollTrigger$1.revert = function (soft, media) {
    return _revertAll(!soft, media);
  };

  ScrollTrigger$1.create = function (vars, animation) {
    return new ScrollTrigger$1(vars, animation);
  };

  ScrollTrigger$1.refresh = function (safe) {
    return safe ? _onResize() : (_coreInitted$1 || ScrollTrigger$1.register()) && _refreshAll(true);
  };

  ScrollTrigger$1.update = function (force) {
    return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
  };

  ScrollTrigger$1.clearScrollMemory = _clearScrollMemory;

  ScrollTrigger$1.maxScroll = function (element, horizontal) {
    return _maxScroll(element, horizontal ? _horizontal : _vertical);
  };

  ScrollTrigger$1.getScrollFunc = function (element, horizontal) {
    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
  };

  ScrollTrigger$1.getById = function (id) {
    return _ids[id];
  };

  ScrollTrigger$1.getAll = function () {
    return _triggers.filter(function (t) {
      return t.vars.id !== "ScrollSmoother";
    });
  };

  ScrollTrigger$1.isScrolling = function () {
    return !!_lastScrollTime;
  };

  ScrollTrigger$1.snapDirectional = _snapDirectional;

  ScrollTrigger$1.addEventListener = function (type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  };

  ScrollTrigger$1.removeEventListener = function (type, callback) {
    var a = _listeners[type],
        i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  };

  ScrollTrigger$1.batch = function (targets, vars) {
    var result = [],
        varsCopy = {},
        interval = vars.interval || 0.016,
        batchMax = vars.batchMax || 1e9,
        proxyCallback = function proxyCallback(type, callback) {
      var elements = [],
          triggers = [],
          delay = gsap$1.delayedCall(interval, function () {
        callback(elements, triggers);
        elements = [];
        triggers = [];
      }).pause();
      return function (self) {
        elements.length || delay.restart(true);
        elements.push(self.trigger);
        triggers.push(self);
        batchMax <= elements.length && delay.progress(1);
      };
    },
        p;

    for (p in vars) {
      varsCopy[p] = p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
    }

    if (_isFunction(batchMax)) {
      batchMax = batchMax();

      _addListener$1(ScrollTrigger$1, "refresh", function () {
        return batchMax = vars.batchMax();
      });
    }

    _toArray(targets).forEach(function (target) {
      var config = {};

      for (p in varsCopy) {
        config[p] = varsCopy[p];
      }

      config.trigger = target;
      result.push(ScrollTrigger$1.create(config));
    });

    return result;
  };

  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
  },
      _allowNativePanning = function _allowNativePanning(target, direction) {
    if (direction === true) {
      target.style.removeProperty("touch-action");
    } else {
      target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none";
    }

    target === _docEl$1 && _allowNativePanning(_body$1, direction);
  },
      _overflow = {
    auto: 1,
    scroll: 1
  },
      _nestedScroll = function _nestedScroll(_ref5) {
    var event = _ref5.event,
        target = _ref5.target,
        axis = _ref5.axis;

    var node = (event.changedTouches ? event.changedTouches[0] : event).target,
        cache = node._gsap || gsap$1.core.getCache(node),
        time = _getTime$1(),
        cs;

    if (!cache._isScrollT || time - cache._isScrollT > 2000) {
      while (node && node !== _body$1 && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {
        node = node.parentNode;
      }

      cache._isScroll = node && node !== target && !_isViewport$1(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
      cache._isScrollT = time;
    }

    if (cache._isScroll || axis === "x") {
      event.stopPropagation();
      event._gsapAllow = true;
    }
  },
      _inputObserver = function _inputObserver(target, type, inputs, nested) {
    return Observer.create({
      target: target,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: type,
      onWheel: nested = nested && _nestedScroll,
      onPress: nested,
      onDrag: nested,
      onScroll: nested,
      onEnable: function onEnable() {
        return inputs && _addListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, false, true);
      },
      onDisable: function onDisable() {
        return _removeListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, true);
      }
    });
  },
      _inputExp = /(input|label|select|textarea)/i,
      _inputIsFocused,
      _captureInputs = function _captureInputs(e) {
    var isInput = _inputExp.test(e.target.tagName);

    if (isInput || _inputIsFocused) {
      e._gsapAllow = true;
      _inputIsFocused = isInput;
    }
  },
      _getScrollNormalizer = function _getScrollNormalizer(vars) {
    _isObject(vars) || (vars = {});
    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
    vars.type || (vars.type = "wheel,touch");
    vars.debounce = !!vars.debounce;
    vars.id = vars.id || "normalizer";

    var _vars2 = vars,
        normalizeScrollX = _vars2.normalizeScrollX,
        momentum = _vars2.momentum,
        allowNestedScroll = _vars2.allowNestedScroll,
        onRelease = _vars2.onRelease,
        self,
        maxY,
        target = _getTarget(vars.target) || _docEl$1,
        smoother = gsap$1.core.globals().ScrollSmoother,
        smootherInstance = smoother && smoother.get(),
        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),
        scrollFuncY = _getScrollFunc(target, _vertical),
        scrollFuncX = _getScrollFunc(target, _horizontal),
        scale = 1,
        initialScale = (Observer.isTouch && _win$1.visualViewport ? _win$1.visualViewport.scale * _win$1.visualViewport.width : _win$1.outerWidth) / _win$1.innerWidth,
        wheelRefresh = 0,
        resolveMomentumDuration = _isFunction(momentum) ? function () {
      return momentum(self);
    } : function () {
      return momentum || 2.8;
    },
        lastRefreshID,
        skipTouchMove,
        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
        resumeTouchMove = function resumeTouchMove() {
      return skipTouchMove = false;
    },
        scrollClampX = _passThrough,
        scrollClampY = _passThrough,
        updateClamps = function updateClamps() {
      maxY = _maxScroll(target, _vertical);
      scrollClampY = _clamp$1(_fixIOSBug ? 1 : 0, maxY);
      normalizeScrollX && (scrollClampX = _clamp$1(0, _maxScroll(target, _horizontal)));
      lastRefreshID = _refreshID;
    },
        removeContentOffset = function removeContentOffset() {
      content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
      content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
      scrollFuncY.offset = scrollFuncY.cacheID = 0;
    },
        ignoreDrag = function ignoreDrag() {
      if (skipTouchMove) {
        requestAnimationFrame(resumeTouchMove);

        var offset = _round(self.deltaY / 2),
            scroll = scrollClampY(scrollFuncY.v - offset);

        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
          scrollFuncY.offset = scroll - scrollFuncY.v;

          var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);

          content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
          content._gsap.y = y + "px";
          scrollFuncY.cacheID = _scrollers.cache;

          _updateAll();
        }

        return true;
      }

      scrollFuncY.offset && removeContentOffset();
      skipTouchMove = true;
    },
        tween,
        startScrollX,
        startScrollY,
        onStopDelayedCall,
        onResize = function onResize() {
      updateClamps();

      if (tween.isActive() && tween.vars.scrollY > maxY) {
        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
      }
    };

    content && gsap$1.set(content, {
      y: "+=0"
    });

    vars.ignoreCheck = function (e) {
      return _fixIOSBug && e.type === "touchmove" && ignoreDrag() || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
    };

    vars.onPress = function () {
      skipTouchMove = false;
      var prevScale = scale;
      scale = _round((_win$1.visualViewport && _win$1.visualViewport.scale || 1) / initialScale);
      tween.pause();
      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
      startScrollX = scrollFuncX();
      startScrollY = scrollFuncY();
      updateClamps();
      lastRefreshID = _refreshID;
    };

    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
      scrollFuncY.offset && removeContentOffset();

      if (!wasDragging) {
        onStopDelayedCall.restart(true);
      } else {
        _scrollers.cache++;
        var dur = resolveMomentumDuration(),
            currentScroll,
            endScroll;

        if (normalizeScrollX) {
          currentScroll = scrollFuncX();
          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227;
          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
          tween.vars.scrollX = scrollClampX(endScroll);
        }

        currentScroll = scrollFuncY();
        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227;
        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
        tween.vars.scrollY = scrollClampY(endScroll);
        tween.invalidate().duration(dur).play(0.01);

        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
          gsap$1.to({}, {
            onUpdate: onResize,
            duration: dur
          });
        }
      }

      onRelease && onRelease(self);
    };

    vars.onWheel = function () {
      tween._ts && tween.pause();

      if (_getTime$1() - wheelRefresh > 1000) {
        lastRefreshID = 0;
        wheelRefresh = _getTime$1();
      }
    };

    vars.onChange = function (self, dx, dy, xArray, yArray) {
      _refreshID !== lastRefreshID && updateClamps();
      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1]));

      if (dy) {
        scrollFuncY.offset && removeContentOffset();
        var isTouch = yArray[2] === dy,
            y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
            yClamped = scrollClampY(y);
        isTouch && y !== yClamped && (startScrollY += yClamped - y);
        scrollFuncY(yClamped);
      }

      (dy || dx) && _updateAll();
    };

    vars.onEnable = function () {
      _allowNativePanning(target, normalizeScrollX ? false : "x");

      ScrollTrigger$1.addEventListener("refresh", onResize);

      _addListener$1(_win$1, "resize", onResize);

      if (scrollFuncY.smooth) {
        scrollFuncY.target.style.scrollBehavior = "auto";
        scrollFuncY.smooth = scrollFuncX.smooth = false;
      }

      inputObserver.enable();
    };

    vars.onDisable = function () {
      _allowNativePanning(target, true);

      _removeListener$1(_win$1, "resize", onResize);

      ScrollTrigger$1.removeEventListener("refresh", onResize);
      inputObserver.kill();
    };

    vars.lockAxis = vars.lockAxis !== false;
    self = new Observer(vars);
    self.iOS = _fixIOSBug;
    _fixIOSBug && !scrollFuncY() && scrollFuncY(1);
    _fixIOSBug && gsap$1.ticker.add(_passThrough);
    onStopDelayedCall = self._dc;
    tween = gsap$1.to(self, {
      ease: "power4",
      paused: true,
      scrollX: normalizeScrollX ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
          return tween.pause();
        })
      },
      onUpdate: _updateAll,
      onComplete: onStopDelayedCall.vars.onComplete
    });
    return self;
  };

  ScrollTrigger$1.sort = function (func) {
    return _triggers.sort(func || function (a, b) {
      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);
    });
  };

  ScrollTrigger$1.observe = function (vars) {
    return new Observer(vars);
  };

  ScrollTrigger$1.normalizeScroll = function (vars) {
    if (typeof vars === "undefined") {
      return _normalizer$1;
    }

    if (vars === true && _normalizer$1) {
      return _normalizer$1.enable();
    }

    if (vars === false) {
      return _normalizer$1 && _normalizer$1.kill();
    }

    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
    _normalizer$1 && _normalizer$1.target === normalizer.target && _normalizer$1.kill();
    _isViewport$1(normalizer.target) && (_normalizer$1 = normalizer);
    return normalizer;
  };

  ScrollTrigger$1.core = {
    _getVelocityProp: _getVelocityProp,
    _inputObserver: _inputObserver,
    _scrollers: _scrollers,
    _proxies: _proxies,
    bridge: {
      ss: function ss() {
        _lastScrollTime || _dispatch("scrollStart");
        _lastScrollTime = _getTime$1();
      },
      ref: function ref() {
        return _refreshing;
      }
    }
  };
  _getGSAP$1() && gsap$1.registerPlugin(ScrollTrigger$1);

  exports.ScrollTrigger = ScrollTrigger$1;
  exports.default = ScrollTrigger$1;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

},{}],4:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /*!
   * GSAP 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _suppressOverwrites,
      _reverting,
      _context,
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
      _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
      _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
      _relExp = /[+-]=-?[.\d]+/,
      _delimitedValueExp = /[^,'"\[\]\s]+/gi,
      _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
      _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
      _revertConfig = {
    suppressEvents: true
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }

    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
      _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
        end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    var l = toFind.length,
        i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

    return i < l;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && !_reverting && _lazyRender();
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }

    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
        t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
        next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null;
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
    child._act = 0;
  },
      _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      var a = animation;

      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }

    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

      _setEnd(animation);

      parent._dirty || _uncache(parent, animation);
    }

    return animation;
  },
      _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    }

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime);
          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum;
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);

    if (!tween._initted) {
      return 1;
    }

    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);

      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
        repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;

    if (repeatDelay && tween._repeat) {
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        return;
      }

      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);
      suppressEvents || (suppressEvents = totalTime && !prevIteration);
      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
        dur = _roundPrecise(duration) || 0,
        totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        i,
        offset,
        isPercent;

    if (_isString(position) && (isNaN(position) || position in labels)) {
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");

      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }

      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
      _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars,
        parent;

    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;

    if (type) {
      irVars = vars;
      parent = timeline;

      while (parent && !("immediateRender" in irVars)) {
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
      clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return ar.forEach(function (value) {
      var _accumulator;

      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }

    var vars = _isObject(v) ? v : {
      each: v
    },
        ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;

    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

        if (!wrapAt) {
          max = -_bigNum;

          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

          wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;

        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0;
        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;
    };
  },
      _roundModifier = function _roundModifier(v) {
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length);
    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;

    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius;
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;

      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }

        if (dx < min) {
          min = dx;
          closest = i;
        }
      }

      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };

    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i]));
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        prevContext = _context,
        context = animation._ctx,
        params,
        scope,
        result;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender();
    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
      _quickTween,
      _registerPluginQueue = [],
      _createPlugin = function _createPlugin(config) {
    if (_windowExists() && config) {
      config = !config.name && config["default"] || config;

      var name = config.name,
          isFunc = _isFunction(config),
          Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
          instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
          statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };

      _wake();

      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }

        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));

        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));

        _plugins[Plugin.prop = name] = Plugin;

        if (config.targetTest) {
          _harnessPlugins.push(Plugin);

          _reservedProps[name] = 1;
        }

        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";
      }

      _addGlobal(name, Plugin);

      config.register && config.register(gsap, Plugin, PropTween);
    } else {
      config && _registerPluginQueue.push(config);
    }
  },
      _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }

        if (v.length === 9) {
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1);
          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
        p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));
      return true;
    }
  },
      _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1000 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _delta,
        _i,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;

      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
      _lastUpdate += elapsed;
      time = _lastUpdate - _startTime;
      overlap = time - _nextTime;

      if (overlap > 0 || manual) {
        frame = ++_self.frame;
        _delta = time - _self.time * 1000;
        _self.time = time = time / 1000;
        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
        dispatch = 1;
      }

      manual || (_id = _req(_tick));

      if (dispatch) {
        for (_i = 0; _i < _listeners.length; _i++) {
          _listeners[_i](time, _delta, frame, v);
        }
      }
    };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

            _raf = _win.requestAnimationFrame;

            _registerPluginQueue.forEach(_createPlugin);
          }

          _id && _self.sleep();

          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity;
        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);

          _self.remove(func);
        } : callback;

        _self.remove(callback);

        _listeners[prioritize ? "unshift" : "push"](func);

        _wake();

        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
      _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
        close = value.indexOf(")"),
        nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
      _configEaseFromString = function _configEaseFromString(name) {
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2;

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  };

  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;

    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });

  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };

    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);

  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });

  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });

  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });

  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }

      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];

  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });

  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  var Animation = function () {
    function Animation(vars) {
      this.vars = vars;
      this._delay = +vars.delay || 0;

      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }

      this._ts = 1;

      _setDuration(this, +vars.duration, 1, 1);

      this.data = vars.data;

      if (_context) {
        this._ctx = _context;

        _context.data.push(this);
      }

      _tickerActive || _ticker.wake();
    }

    var _proto = Animation.prototype;

    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    };

    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };

    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    };

    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);

        !parent._dp || parent.parent || _postAddChecks(parent, this);

        while (parent && parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
        this._ts || (this._pTime = _totalTime);

        _lazySafeRender(this, _totalTime, suppressEvents);
      }

      return this;
    };

    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;
    };

    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };

    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };

    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    };

    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts;
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;
      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;
      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);

      _setEnd(this);

      return _recacheAncestors(this);
    };

    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());
          this._ts = this._act = 0;
        } else {
          _wake();

          this._ts = this._rts;
          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));
        }
      }

      return this;
    };

    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    };

    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    };

    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp;
      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };

    _proto.revert = function revert(config) {
      if (config === void 0) {
        config = _revertConfig;
      }

      var prevIsReverting = _reverting;
      _reverting = config;

      if (this._initted || this._startAt) {
        this.timeline && this.timeline.revert(config);
        this.totalTime(-0.01, config.suppressEvents);
      }

      this.data !== "nested" && config.kill !== false && this.kill();
      _reverting = prevIsReverting;
      return this;
    };

    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time;
    };

    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value === Infinity ? -2 : value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat === -2 ? Infinity : this._repeat;
    };

    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        var time = this._time;
        this._rDelay = value;

        _onUpdateTotalDuration(this);

        return time ? this.time(time) : this;
      }

      return this._rDelay;
    };

    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    };

    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };

    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };

    _proto.play = function play(from, suppressEvents) {
      from != null && this.seek(from, suppressEvents);
      return this.reversed(false).paused(false);
    };

    _proto.reverse = function reverse(from, suppressEvents) {
      from != null && this.seek(from || this.totalDuration(), suppressEvents);
      return this.reversed(true).paused(false);
    };

    _proto.pause = function pause(atTime, suppressEvents) {
      atTime != null && this.seek(atTime, suppressEvents);
      return this.paused(true);
    };

    _proto.resume = function resume() {
      return this.paused(false);
    };

    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));
        return this;
      }

      return this._rts < 0;
    };

    _proto.invalidate = function invalidate() {
      this._initted = this._act = 0;
      this._zTime = -_tinyNum;
      return this;
    };

    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };

    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;
          params && (vars[type + "Params"] = params);
          type === "onUpdate" && (this._onUpdate = callback);
        }

        return this;
      }

      return vars[type];
    };

    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null;
          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };

    _proto.kill = function kill() {
      _interrupt(this);
    };

    return Animation;
  }();

  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });

  var Timeline = function (_Animation) {
    _inheritsLoose(Timeline, _Animation);

    function Timeline(vars, position) {
      var _this;

      if (vars === void 0) {
        vars = {};
      }

      _this = _Animation.call(this, vars) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
      vars.reversed && _this.reverse();
      vars.paused && _this.paused(true);
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }

    var _proto2 = Timeline.prototype;

    _proto2.to = function to(targets, vars, position) {
      _createTweenType(0, arguments, this);

      return this;
    };

    _proto2.from = function from(targets, vars, position) {
      _createTweenType(1, arguments, this);

      return this;
    };

    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      _createTweenType(2, arguments, this);

      return this;
    };

    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };

    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
    };

    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };

    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;
      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime);
          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }

          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);
            iteration < prevIteration && (rewinding = !rewinding);
            prevTime = rewinding ? 0 : tTime % dur ? dur : tTime;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
            this._tTime = tTime;
            !suppressEvents && this.parent && _callback(this, "onRepeat");
            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
              return this;
            }

            dur = this._dur;
            tDur = this._tDur;

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            }

            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale;

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
          prevTime = 0;
        }

        if (!prevTime && time && !suppressEvents && !iteration) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum);
                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time;

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);
                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            this._start = prevStart;

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto2.add = function add(child, position) {
      var _this2 = this;

      _isNumber(position) || (position = _parsePosition(this, position, child));

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return this;
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this;
    };

    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }

      if (tweens === void 0) {
        tweens = true;
      }

      if (timelines === void 0) {
        timelines = true;
      }

      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }

      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }

        child = child._next;
      }

      return a;
    };

    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };

    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    };

    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    };

    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };

    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };

    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };

    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    };

    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    };

    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }

        child = child._next;
      }

      return a;
    };

    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          immediateRender = _vars.immediateRender,
          initted,
          tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();

          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }

          _onStart && _onStart.apply(tween, onStartParams || []);
        }
      }, vars));

      return immediateRender ? tween.render(0) : tween;
    };

    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };

    _proto2.recent = function recent() {
      return this._recent;
    };

    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };

    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };

    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };

    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }

      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
          child._end += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    };

    _proto2.invalidate = function invalidate(soft) {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate(soft);
        child = child._next;
      }

      return _Animation.prototype.invalidate.call(this, soft);
    };

    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }

      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._dp && (this._time = this._tTime = this._pTime = 0);
      includeLabels && (this.labels = {});
      return _uncache(this);
    };

    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev;
          child._dirty && child.totalDuration();
          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            self._lock = 1;
            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          child._end > max && child._ts && (max = child._end);
          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

        self._dirty = 0;
      }

      return self._tDur;
    };

    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    };

    return Timeline;
  }(Animation);

  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });

  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop);
      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0;
        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : "";
    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0;
    }

    this._pt = pt;
    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;

    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

        if (pt || pt === 0) {
          end = pt;
        }
      }
    }

    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }

    var copy = {},
        p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;

    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];
        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
      _overwritingTween,
      _forceAllPropTweens,
      _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
        autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars,
        overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    tween._from = !tl && !!vars.runBackwards;

    if (!tl || keyframes && !vars.stagger) {
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop];
      cleanVars = _copyExcluding(vars, _reservedProps);

      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1);
        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);
        prevStartAt._lazy = 0;
      }

      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt)));

        tween._startAt._dp = 0;
        tween._startAt._sat = tween;
        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            time && (tween._zTime = time);
            return;
          }
        }
      } else if (runBackwards && dur) {
        if (!prevStartAt) {
          time && (immediateRender = false);
          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            stagger: 0,
            parent: parent
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars);

          _removeFromParent(tween._startAt = Tween.set(targets, p));

          tween._startAt._dp = 0;
          tween._startAt._sat = tween;
          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum);
          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();
        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween);
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten;
    keyframes && time <= 0 && tl.render(_bigNum, true, true);
  },
      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
        pt,
        rootPT,
        lookup,
        i;

    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;

      while (i--) {
        pt = lookup[i][property];

        if (pt && pt.d && pt.d._pt) {
          pt = pt.d._pt;

          while (pt && pt.p !== property && pt.fp !== property) {
            pt = pt._next;
          }
        }

        if (!pt) {
          _forceAllPropTweens = 1;
          tween.vars[property] = "+=0";

          _initTween(tween, time);

          _forceAllPropTweens = 0;
          return 1;
        }

        ptCache.push(pt);
      }
    }

    i = ptCache.length;

    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT;
      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));
      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));
    }
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
        p,
        a;

    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []);
      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
      _staggerPropsToSkip = {};

  _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
    return _staggerPropsToSkip[name] = 1;
  });

  var Tween = function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);

    function Tween(targets, vars, position, skipInherit) {
      var _this3;

      if (typeof vars === "number") {
        position.duration = vars;
        vars = position;
        position = null;
      }

      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = vars.parent || _globalTimeline,
          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = [];
      _this3._overwrite = overwrite;

      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {},
          targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
        });
        tl.kill();
        tl.parent = tl._dp = _assertThisInitialized(_this3);
        tl._start = 0;

        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          l = parsedTargets.length;
          staggerFunc = stagger && distribute(stagger);

          if (_isObject(stagger)) {
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }

          for (i = 0; i < l; i++) {
            copy = _copyExcluding(vars, _staggerPropsToSkip);
            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i];
            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

            if (!stagger && l === 1 && copy.delay) {
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }

            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
            tl._ease = _easeMap.none;
          }

          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;
        } else if (keyframes) {
          _inheritDefaults(_setDefaults(tl.vars.defaults, {
            ease: "none"
          }));

          tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
          var time = 0,
              a,
              kf,
              v;

          if (_isArray(keyframes)) {
            keyframes.forEach(function (frame) {
              return tl.to(parsedTargets, frame, ">");
            });
            tl.duration();
          } else {
            copy = {};

            for (p in keyframes) {
              p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
            }

            for (p in copy) {
              a = copy[p].sort(function (a, b) {
                return a.t - b.t;
              });
              time = 0;

              for (i = 0; i < a.length; i++) {
                kf = a[i];
                v = {
                  ease: kf.e,
                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                };
                v[p] = kf.v;
                tl.to(parsedTargets, v, time);
                time += v.duration;
              }
            }

            tl.duration() < duration && tl.to({}, {
              duration: duration - tl.duration()
            });
          }
        }

        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0;
      }

      if (overwrite === true && !_suppressOverwrites) {
        _overwritingTween = _assertThisInitialized(_this3);

        _globalTimeline.killTweensOf(parsedTargets);

        _overwritingTween = 0;
      }

      _addToTimeline(parent, _assertThisInitialized(_this3), position);

      vars.reversed && _this3.reverse();
      vars.paused && _this3.paused(true);

      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum;

        _this3.render(Math.max(0, -delay) || 0);
      }

      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }

    var _proto3 = Tween.prototype;

    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          isNegative = totalTime < 0,
          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && isNegative) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            this._tTime = tTime;
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1;
              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
            this._tTime = 0;
            return this;
          }

          if (prevTime !== this._time) {
            return this;
          }

          if (dur !== this._dur) {
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1;
          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        if (time && !prevTime && !suppressEvents && !iteration) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto3.targets = function targets() {
      return this._targets;
    };

    _proto3.invalidate = function invalidate(soft) {
      (!soft || !this.vars.runBackwards) && (this._startAt = 0);
      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate(soft);
      return _Animation2.prototype.invalidate.call(this, soft);
    };

    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
      _tickerActive || _ticker.wake();
      this._ts || this.play();
      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
          ratio;
      this._initted || _initTween(this, time);
      ratio = this._ease(time / this._dur);

      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
        return this.resetTo(property, value, start, startIsRelative);
      }

      _alignPlayhead(this, 0);

      this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
      return this.render(0);
    };

    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }

      if (!targets && (!vars || vars === "all")) {
        this._lazy = this._pt = 0;
        return this.parent ? _interrupt(this) : this;
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);
        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);
        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this);
      return this;
    };

    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };

    Tween.from = function from(targets, vars) {
      return _createTweenType(1, arguments);
    };

    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    };

    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return _createTweenType(2, arguments);
    };

    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };

    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };

    return Tween;
  }(Animation);

  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  });

  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);

      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });

  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";

    if (!ratio && data.b) {
      s = data.b;
    } else if (ratio === 1 && data.e) {
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;
        pt = pt._next;
      }

      s += data.c;
    }

    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;

    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last;

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  };

  var PropTween = function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;

      if (next) {
        next._prev = this;
      }
    }

    var _proto4 = PropTween.prototype;

    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set;
      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target;
      this.tween = tween;
    };

    return PropTween;
  }();

  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });

  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;

  var _media = [],
      _listeners = {},
      _emptyArray = [],
      _lastMediaTime = 0,
      _contextID = 0,
      _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
      _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
        matches = [];

    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");

      _media.forEach(function (c) {
        var queries = c.queries,
            conditions = c.conditions,
            match,
            p,
            anyMatch,
            toggled;

        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches;
          match && (anyMatch = 1);

          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }

        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });

      _dispatch("matchMediaRevert");

      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;

      _dispatch("matchMedia");
    }
  };

  var Context = function () {
    function Context(func, scope) {
      this.selector = scope && selector(scope);
      this.data = [];
      this._r = [];
      this.isReverted = false;
      this.id = _contextID++;
      func && this.add(func);
    }

    var _proto5 = Context.prototype;

    _proto5.add = function add(name, func, scope) {
      if (_isFunction(name)) {
        scope = func;
        func = name;
        name = _isFunction;
      }

      var self = this,
          f = function f() {
        var prev = _context,
            prevSelector = self.selector,
            result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };

      self.last = f;
      return name === _isFunction ? f(self) : name ? self[name] = f : f;
    };

    _proto5.ignore = function ignore(func) {
      var prev = _context;
      _context = null;
      func(this);
      _context = prev;
    };

    _proto5.getTweens = function getTweens() {
      var a = [];
      this.data.forEach(function (e) {
        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
      });
      return a;
    };

    _proto5.clear = function clear() {
      this._r.length = this.data.length = 0;
    };

    _proto5.kill = function kill(revert, matchMedia) {
      var _this4 = this;

      if (revert) {
        var tweens = this.getTweens();
        this.data.forEach(function (t) {
          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        });
        tweens.map(function (t) {
          return {
            g: t.globalTime(0),
            t: t
          };
        }).sort(function (a, b) {
          return b.g - a.g || -Infinity;
        }).forEach(function (o) {
          return o.t.revert(revert);
        });
        this.data.forEach(function (e) {
          return !(e instanceof Tween) && e.revert && e.revert(revert);
        });

        this._r.forEach(function (f) {
          return f(revert, _this4);
        });

        this.isReverted = true;
      } else {
        this.data.forEach(function (e) {
          return e.kill && e.kill();
        });
      }

      this.clear();

      if (matchMedia) {
        var i = _media.length;

        while (i--) {
          _media[i].id === this.id && _media.splice(i, 1);
        }
      }
    };

    _proto5.revert = function revert(config) {
      this.kill(config || {});
    };

    return Context;
  }();

  var MatchMedia = function () {
    function MatchMedia(scope) {
      this.contexts = [];
      this.scope = scope;
    }

    var _proto6 = MatchMedia.prototype;

    _proto6.add = function add(conditions, func, scope) {
      _isObject(conditions) || (conditions = {
        matches: conditions
      });
      var context = new Context(0, scope || this.scope),
          cond = context.conditions = {},
          mq,
          p,
          active;
      _context && !context.selector && (context.selector = _context.selector);
      this.contexts.push(context);
      func = context.add("onMatch", func);
      context.queries = conditions;

      for (p in conditions) {
        if (p === "all") {
          active = 1;
        } else {
          mq = _win.matchMedia(conditions[p]);

          if (mq) {
            _media.indexOf(context) < 0 && _media.push(context);
            (cond[p] = mq.matches) && (active = 1);
            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
          }
        }
      }

      active && func(context);
      return this;
    };

    _proto6.revert = function revert(config) {
      this.kill(config || {});
    };

    _proto6.kill = function kill(revert) {
      this.contexts.forEach(function (c) {
        return c.kill(revert, true);
      });
    };

    return MatchMedia;
  }();

  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      _isString(target) && (target = toArray(target)[0]);

      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;

      unit === "native" && (unit = "");
      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = toArray(target);

      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;

          while (i--) {
            setters[i](value);
          }
        };
      }

      target = target[0] || {};

      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);

      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    quickTo: function quickTo(target, property, vars) {
      var _merge2;

      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
          func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };

      func.tween = tween;
      return func;
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref3) {
      var name = _ref3.name,
          effect = _ref3.effect,
          plugins = _ref3.plugins,
          defaults = _ref3.defaults,
          extendTimeline = _ref3.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });

      _effects[name] = function (targets, vars, tl) {
        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };

      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }

      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

      _globalTimeline.remove(tl);

      tl._dp = 0;
      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;

      while (child) {
        next = child._next;

        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }

        child = next;
      }

      _addToTimeline(_globalTimeline, tl, 0);

      return tl;
    },
    context: function context(func, scope) {
      return func ? new Context(func, scope) : _context;
    },
    matchMedia: function matchMedia(scope) {
      return new MatchMedia(scope);
    },
    matchMediaRefresh: function matchMediaRefresh() {
      return _media.forEach(function (c) {
        var cond = c.conditions,
            found,
            p;

        for (p in cond) {
          if (cond[p]) {
            cond[p] = false;
            found = 1;
          }
        }

        found && c.revert();
      }) || _onMediaChange();
    },
    addEventListener: function addEventListener(type, callback) {
      var a = _listeners[type] || (_listeners[type] = []);
      ~a.indexOf(callback) || a.push(callback);
    },
    removeEventListener: function removeEventListener(type, callback) {
      var a = _listeners[type],
          i = a && a.indexOf(callback);
      i >= 0 && a.splice(i, 1);
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: toArray,
      selector: selector,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem,
      reverting: function reverting() {
        return _reverting;
      },
      context: function context(toAdd) {
        if (toAdd && _context) {
          _context.data.push(toAdd);

          toAdd._ctx = _context;
        }

        return _context;
      },
      suppressOverwrites: function suppressOverwrites(value) {
        return _suppressOverwrites = value;
      }
    }
  };

  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });

  _ticker.add(Timeline.updateRoot);

  _quickTween = _gsap.to({}, {
    duration: 0
  });

  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return temp[name] = 1;
            });

            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      }
    };
  };

  var gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt, v;
      this.tween = tween;

      for (p in vars) {
        v = target.getAttribute(p) || "";
        pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
        pt.op = p;
        pt.b = v;

        this._props.push(p);
      }
    },
    render: function render(ratio, data) {
      var pt = data._pt;

      while (pt) {
        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);
        pt = pt._next;
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;

      while (i--) {
        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;
  Tween.version = Timeline.version = gsap.version = "3.12.2";
  _coreReady = 1;
  _windowExists() && _wake();
  var Power0 = _easeMap.Power0,
      Power1 = _easeMap.Power1,
      Power2 = _easeMap.Power2,
      Power3 = _easeMap.Power3,
      Power4 = _easeMap.Power4,
      Linear = _easeMap.Linear,
      Quad = _easeMap.Quad,
      Cubic = _easeMap.Cubic,
      Quart = _easeMap.Quart,
      Quint = _easeMap.Quint,
      Strong = _easeMap.Strong,
      Elastic = _easeMap.Elastic,
      Back = _easeMap.Back,
      SteppedEase = _easeMap.SteppedEase,
      Bounce = _easeMap.Bounce,
      Sine = _easeMap.Sine,
      Expo = _easeMap.Expo,
      Circ = _easeMap.Circ;

  var _win$1,
      _doc$1,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      _reverting$1,
      _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      _bigNum$1 = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;

    var target = this.target,
        style = target.style;

    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};

      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }

      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }

      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }

      property = _transformProp;
    }

    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
      _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
      _revertStyle = function _revertStyle() {
    var props = this.props,
        target = this.target,
        style = target.style,
        cache = target._gsap,
        i,
        p;

    for (i = 0; i < props.length; i += 3) {
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
    }

    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }

      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }

      i = _reverting$1();

      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);

        cache.uncache = 1;
      }
    }
  },
      _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || gsap.core.getCache(target);
    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type);
    return e.style ? e : _doc$1.createElement(type);
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || "";
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$1 = window;
      _doc$1 = _win$1.document;
      _docElement = _doc$1.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";
      _supports3D = !!_checkPropPrefix("perspective");
      _reverting$1 = gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;

    _docElement.appendChild(svg);

    svg.appendChild(this);
    this.style.display = "block";

    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox;
        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }

    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }

    _docElement.removeChild(svg);

    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;

    try {
      bounds = target.getBBox();
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }

    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;

      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }

      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          property = "-" + property;
        }

        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
      _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;

    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }

    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
    }

    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$1 || !parent.appendChild) {
      parent = _doc$1.body;
    }

    cache = parent._gsap;

    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static");
      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];

      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    if (!start || start === "none") {
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor");
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        endValues;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }

    a = [start, end];

    _colorStringFilter(a);

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          }

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : "";
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }

    _relExp.test(end) && (pt.e = 0);
    this._pt = pt;
    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp);

        if (cache) {
          cache.svg && target.removeAttribute("transform");

          _parseTransform(target, 1);

          cache.uncache = 1;

          _removeIndependentTransforms(style);
        }
      }
    }
  },
      _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    }
  },
      _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);

    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix;
      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (!parent || !target.offsetParent) {
        addedToDOM = 1;
        nextSibling = target.nextElementSibling;

        _docElement.appendChild(target);
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }

    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }

    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px";

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        cs = getComputedStyle(target),
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));

    if (cs.translate) {
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }

      style.scale = style.rotate = style.translate = "none";
    }

    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      if (cache.uncache) {
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin");
      }

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0];
      b = matrix[1];
      c = matrix[2];
      d = matrix[3];
      x = a12 = matrix[4];
      y = a22 = matrix[5];

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;
        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        }
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        }

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        }

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;

      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }

    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp);
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
      _assign = function _assign(target, source) {
    for (var p in source) {
      target[p] = source[p];
    }

    return target;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    var startCache = _assign({}, target._gsap),
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        style = target.style,
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;

    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);

      _removeProperty(target, _transformProp);

      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _assign(endCache, startCache);
  };

  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });

    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;

      if (arguments.length < 4) {
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }

      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });

  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startAt = tween.vars.startAt,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority,
          inlineProps;
      _pluginInitted || _initCore();
      this.styles = this.styles || _getStyleSaver(target);
      inlineProps = this.styles.props;
      this.tween = tween;

      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }

        endValue = vars[p];

        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          continue;
        }

        type = typeof endValue;
        specialProp = _specialProps[p];

        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }

        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }

        if (specialProp) {
          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
        } else if (p.substr(0, 2) === "--") {
          startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
          endValue += "";
          _colorExp.lastIndex = 0;

          if (!_colorExp.test(startValue)) {
            startUnit = getUnit(startValue);
            endUnit = getUnit(endValue);
          }

          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
          this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
          props.push(p);
          inlineProps.push(p, 0, style[p]);
        } else if (type !== "undefined") {
          if (startAt && p in startAt) {
            startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
            _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
            getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || "");
            (startValue + "").charAt(1) === "=" && (startValue = _get(target, p));
          } else {
            startValue = _get(target, p);
          }

          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
          relative && (endValue = endValue.substr(2));
          endNum = parseFloat(endValue);

          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                startNum = 0;
              }

              inlineProps.push("visibility", 0, style.visibility);

              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }

            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];
              ~p.indexOf(",") && (p = p.split(",")[0]);
            }
          }

          isTransformRelated = p in _transformProps;

          if (isTransformRelated) {
            this.styles.save(p);

            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);
              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);
              transformPropTween.dep = 1;
            }

            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
              this._pt.u = 0;
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
              endValue = _convertKeywordsToPercentages(endValue);

              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0;
                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }

              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);

              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);

              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);

              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }

          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0);
            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;

            if (startUnit !== endUnit && endUnit !== "%") {
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
            } else if (p !== "parseTransform") {
              _missingPlugin(p, endValue);

              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
          }

          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
          props.push(p);
        }
      }

      hasPriority && _sortPropTweensByPriority(this);
    },
    render: function render(ratio, data) {
      if (data.tween._time || !_reverting$1()) {
        var pt = data._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }
      } else {
        data.styles.revert();
      }
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap.utils.checkPrefix = _checkPropPrefix;
  gsap.core.getStyleSaver = _getStyleSaver;

  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });

    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });

    _propertyAliases[all[13]] = positionAndScale + "," + rotation;

    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });

  gsap.registerPlugin(CSSPlugin);

  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,
      TweenMaxWithCSS = gsapWithCSS.core.Tween;

  exports.Back = Back;
  exports.Bounce = Bounce;
  exports.CSSPlugin = CSSPlugin;
  exports.Circ = Circ;
  exports.Cubic = Cubic;
  exports.Elastic = Elastic;
  exports.Expo = Expo;
  exports.Linear = Linear;
  exports.Power0 = Power0;
  exports.Power1 = Power1;
  exports.Power2 = Power2;
  exports.Power3 = Power3;
  exports.Power4 = Power4;
  exports.Quad = Quad;
  exports.Quart = Quart;
  exports.Quint = Quint;
  exports.Sine = Sine;
  exports.SteppedEase = SteppedEase;
  exports.Strong = Strong;
  exports.TimelineLite = Timeline;
  exports.TimelineMax = Timeline;
  exports.TweenLite = Tween;
  exports.TweenMax = TweenMaxWithCSS;
  exports.default = gsapWithCSS;
  exports.gsap = gsapWithCSS;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnimation = void 0;
const all_1 = require("./animations/all");
function getAnimation(type, el, delay) {
    var _a;
    if (!all_1.animations[type]) {
        console.warn(`animation type "${type}" does not exist`);
        return null;
    }
    return (_a = all_1.animations[type]) === null || _a === void 0 ? void 0 : _a.call(all_1.animations, el, delay);
}
exports.getAnimation = getAnimation;

},{"./animations/all":16}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBreakpoint = void 0;
function getBreakpoint() {
    const before = window.getComputedStyle(document.querySelector('body'), ':before');
    const breakpoint = before.getPropertyValue('content').replace(/[\"\']/g, '');
    return {
        desktop: breakpoint === 'desktop',
        phone: breakpoint === 'phone',
        tablet: breakpoint === 'tablet',
        value: breakpoint,
    };
}
exports.getBreakpoint = getBreakpoint;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBrowser = void 0;
function getBrowser() {
    const ua = window.navigator.userAgent;
    const browser = {
        mobile: !!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),
        phone: !!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),
        android: /Android/i.test(ua),
        ios: ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) || (navigator.userAgent.includes('Mac') && 'ontouchend' in document),
        mac: navigator.platform.toUpperCase().indexOf('MAC') >= 0,
        ie: ua.indexOf('MSIE ') > 0 || !!ua.match(/Trident.*rv\:11\./),
        edge: /Edge/.test(navigator.userAgent),
        firefox: ua.toLowerCase().indexOf('firefox') > -1,
        safari: /iP(ad|hone|od).+Version\/[\d\.]+.*Safari/i.test(navigator.userAgent) || Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || (((p) => p.toString() === '[object SafariRemoteNotification]')(!window.safari || safari.pushNotification)),
        chrome: (ua.toLowerCase().indexOf('chrome') > -1) && (navigator.vendor.toLowerCase().indexOf('google') > -1),
        touch: ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0),
    };
    const htmlClassList = document.querySelector('html').classList;
    htmlClassList.toggle('mac', browser.ios || browser.mac);
    htmlClassList.toggle('mobile', browser.mobile);
    htmlClassList.toggle('phone', browser.phone && browser.touch);
    htmlClassList.toggle('ios', browser.ios);
    htmlClassList.toggle('firefox', browser.firefox);
    htmlClassList.toggle('safari', browser.safari);
    htmlClassList.toggle('ie', browser.ie);
    htmlClassList.toggle('touch', browser.touch);
    htmlClassList.toggle('no-touch', !browser.touch);
    htmlClassList.remove('no-js');
    return browser;
}
exports.getBrowser = getBrowser;

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pages = exports.components = void 0;
const Page_1 = require("./pages/Page");
const LightboxNav_1 = require("./components/Lightbox/LightboxNav");
const LightboxTranscript_1 = require("./components/Lightbox/LightboxTranscript");
const LightboxSlider_1 = require("./components/Lightbox/LightboxSlider");
const Load_1 = require("./components/Load");
const Modal_1 = require("./components/Modal");
const More_1 = require("./components/More");
const Accordeon_1 = require("./components/Accordeon");
const AccordeonList_1 = require("./components/AccordeonList");
const Player_1 = require("./components/Player/Player");
const Video_1 = require("./components/Player/Video");
const FilterLetters_1 = require("./components/FilterLetters");
exports.components = {
    Accordeon: Accordeon_1.Accordeon,
    AccordeonList: AccordeonList_1.AccordeonList,
    FilterLetters: FilterLetters_1.FilterLetters,
    Load: Load_1.Load,
    Modal: Modal_1.Modal,
    More: More_1.More,
    Player: Player_1.Player,
    Video: Video_1.Video,
    LightboxNav: LightboxNav_1.LightboxNav,
    LightboxTranscript: LightboxTranscript_1.LightboxTranscript,
    LightboxSlider: LightboxSlider_1.LightboxSlider,
};
exports.pages = { Page: Page_1.Page };

},{"./components/Accordeon":20,"./components/AccordeonList":21,"./components/FilterLetters":24,"./components/Lightbox/LightboxNav":26,"./components/Lightbox/LightboxSlider":27,"./components/Lightbox/LightboxTranscript":28,"./components/Load":29,"./components/Modal":30,"./components/More":31,"./components/Player/Player":33,"./components/Player/Video":42,"./pages/Page":45}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Handler = void 0;
class Handler {
    constructor() {
        this.events = {};
    }
    on(eventName, handler) {
        if (!this.events[eventName]) {
            this.events[eventName] = [];
        }
        this.events[eventName].push(handler);
        return this;
    }
    off(eventName, handler) {
        if (typeof eventName === 'undefined') {
            this.events = {};
            return this;
        }
        if (typeof handler === 'undefined' && this.events[eventName]) {
            this.events[eventName] = [];
            return this;
        }
        if (!this.events[eventName]) {
            return this;
        }
        const index = this.events[eventName].indexOf(handler);
        if (index > -1) {
            this.events[eventName].splice(index, 1);
        }
        return this;
    }
    trigger(eventName, ...args) {
        if (!this.events[eventName]) {
            return;
        }
        this.events[eventName].forEach(event => event(...args));
    }
    destroy() {
        this.events = {};
    }
}
exports.Handler = Handler;

},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
const AudioPlayer_1 = require("./components/AudioPlayer");
class Menu {
    constructor(view) {
        this.view = view;
        this.isOpen = false;
        this.isAnimating = false;
        this.onAnimationEnd = () => {
            this.isAnimating = false;
            if (!this.isOpen) {
                this.view.style.display = 'none';
            }
        };
        this.onToggle = () => {
            this.isOpen ? this.close() : this.open();
        };
        this.open = () => {
            if (this.isAnimating)
                return;
            this.isAnimating = true;
            this.isOpen = true;
            this.view.style.display = 'flex';
            document.body.classList.add('has-menu-open');
            AudioPlayer_1.AudioPlayer.closeAudioPlayer();
        };
        this.close = () => {
            if (this.isAnimating)
                return;
            this.isAnimating = true;
            this.isOpen = false;
            document.body.classList.remove('has-menu-open');
        };
        this.elToggle = document.querySelector('.js-toggle-menu');
        this.closeBtn = this.view.querySelector('.js-menu-close');
        this.wrapEl = document.getElementById('wrapper');
        this.bind();
    }
    onState() {
        this.isOpen && this.close();
    }
    bind() {
        this.elToggle && this.elToggle.addEventListener('click', this.onToggle);
        this.closeBtn && this.closeBtn.addEventListener('click', this.close);
        this.wrapEl.addEventListener('transitionend', () => {
            this.onAnimationEnd();
        });
    }
}
exports.Menu = Menu;

},{"./components/AudioPlayer":22}],11:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushStates = exports.PushStatesEvents = void 0;
const Utils_1 = require("./Utils");
const Scroll_1 = __importDefault(require("./Scroll"));
const Handler_1 = require("./Handler");
class PushStatesEvents {
}
exports.PushStatesEvents = PushStatesEvents;
PushStatesEvents.CHANGE = 'state';
PushStatesEvents.PROGRESS = 'progress';
class PushStates extends Handler_1.Handler {
    static setTitle(title) {
        const content = document.getElementById('content');
        const dataTitle = content.querySelector('[data-title]');
        document.title = title || dataTitle.dataset.title;
    }
    static goTo(location, replace) {
        const pathname = location.replace(window.location.protocol + window.location.host, '');
        const isDifferent = pathname !== window.location.pathname;
        if (replace) {
            window.history.replaceState({ randomData: Math.random() }, document.title, pathname);
        }
        else {
            window.history.pushState({ randomData: Math.random() }, document.title, pathname);
        }
        PushStates.instance.onState();
        return isDifferent;
    }
    static changePath(location, replace, title) {
        PushStates.noChange = true;
        const changed = PushStates.goTo(location, replace || true);
        PushStates.noChange = false;
        if (changed) {
            PushStates.setTitle(title || document.title);
        }
    }
    static bind(target, elementItself) {
        if (!elementItself) {
            PushStates.instance.bindLinks(target);
        }
        else {
            PushStates.instance.bindLink(target);
        }
    }
    static back(url) {
        if (window.history.length - PushStates.initialHistoryLength > 0) {
            window.history.back();
        }
        else if (url) {
            window.history.replaceState({ randomData: Math.random() }, document.title, url);
            PushStates.instance.onState();
        }
        else {
            window.history.replaceState({ randomData: Math.random() }, document.title, '/');
            PushStates.instance.onState();
        }
    }
    static reload() {
        PushStates.instance.trigger(PushStatesEvents.CHANGE);
    }
    constructor() {
        super();
        this.onClick = (e) => {
            e.preventDefault();
            const self = e.currentTarget;
            const state = self.getAttribute('href').replace(`http://${window.location.host}`, '');
            const type = self.dataset.history;
            if (type === 'back') {
                PushStates.back(state);
            }
            else if (type === 'replace') {
                window.history.replaceState({ randomData: Math.random() }, document.title, state);
                this.onState();
            }
            else {
                Scroll_1.default.resetScrollCache(state);
                window.history.pushState({ randomData: Math.random() }, document.title, state);
                this.onState();
            }
        };
        this.onState = () => {
            this.setActiveLinks();
            if (!PushStates.noChange) {
                this.trigger(PushStatesEvents.CHANGE);
            }
        };
        this.bindLinks();
        window.addEventListener('popstate', this.onState, { passive: true });
        window.history.scrollRestoration = 'manual';
        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);
        PushStates.instance = this;
        PushStates.initialHistoryLength = window.history.length;
        this.currentUrl = (0, Utils_1.normalizeUrl)(window.location.pathname + window.location.search);
        this.setActiveLinks();
    }
    load() {
        if (this.request) {
            this.request.abort();
        }
        const { pathname } = window.location;
        const search = window.location.search || '';
        const url = pathname + search;
        window.clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
            if (this.request) {
                window.location.reload();
            }
        }, PushStates.TIME_LIMIT);
        return new Promise((resolve, reject) => {
            this.request = new XMLHttpRequest();
            this.request.open('GET', url);
            this.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            this.request.onload = () => {
                if (this.request.status === 200) {
                    this.loadedData = this.request.responseText;
                    this.currentUrl = (0, Utils_1.normalizeUrl)(url);
                    this.trigger(PushStatesEvents.PROGRESS, 1);
                    resolve();
                }
                else {
                    reject(Error(this.request.statusText));
                    if (this.request.statusText !== 'abort') {
                        window.location.reload();
                    }
                }
                this.request = null;
                window.clearTimeout(this.timeout);
            };
            this.request.onerror = () => {
                reject(Error('Network Error'));
                window.clearTimeout(this.timeout);
                this.request = null;
            };
            this.request.onprogress = e => {
                if (e.lengthComputable) {
                    this.trigger(PushStatesEvents.PROGRESS, e.loaded / e.total);
                }
            };
            this.request.send();
        });
    }
    isRendered(pathname) {
        return this.currentUrl === (0, Utils_1.normalizeUrl)(pathname || window.location.pathname + window.location.search);
    }
    render() {
        const data = this.loadedData.trim();
        const containers = document.querySelectorAll('.js-replace[id], #content');
        let renderedCount = 0;
        if (containers.length > 0) {
            containers.forEach((container, index) => {
                const force = index === 0 && containers.length === 1;
                renderedCount += this.renderElement(container, data, force) ? 1 : 0;
            });
        }
        if (renderedCount === 0 && containers.length > 0) {
            this.renderElement(document.getElementById('content'), data, true);
        }
        this.bindLinks();
        this.setActiveLinks();
        window.document.dispatchEvent(new Event('ajax_loaded'));
        window.history.scrollRestoration = 'manual';
        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);
    }
    renderElement(el, data, forcePlain) {
        let code = null;
        if (!el.id) {
            console.warn('Rendered element must have an `id` attribute!');
            return false;
        }
        const container = `#${el.id}`;
        if (!!forcePlain && data.indexOf('<article') === 0 && el.id === 'content') {
            code = data;
        }
        else {
            const parser = new DOMParser();
            const htmlDocument = parser.parseFromString(data, 'text/html');
            const foundElement = htmlDocument.documentElement.querySelector(container);
            code = foundElement ? foundElement.innerHTML : null;
        }
        if (!code) {
            console.info(`Couldn't rerender #${el.id} element`);
            return false;
        }
        const containerEl = document.getElementById(el.id);
        containerEl.style.display = 'none';
        while (containerEl.firstChild)
            containerEl.removeChild(containerEl.firstChild);
        containerEl.innerHTML = code || data;
        containerEl.style.display = 'block';
        return true;
    }
    bindLink(target) {
        target.removeEventListener('click', this.onClick);
        target.addEventListener('click', this.onClick);
    }
    bindLinks(target) {
        const t = target !== null && target !== void 0 ? target : document.body;
        const links = t.querySelectorAll('a:not([data-history="false"]):not([data-component="More"]):not([data-api]):not([download]):not([data-modal]):not([href^="#"]):not([href$=".jpg"]):not([target="_blank"]):not([href^="mailto:"]):not([href^="tel:"]):not([data-poczta]):not([data-login]):not([data-lang]):not([data-more])');
        links.forEach(el => {
            el.removeEventListener('click', this.onClick);
            el.addEventListener('click', this.onClick);
        });
    }
    setActiveLinks() {
        [...document.querySelectorAll('a[href]')].map(el => el.classList.remove('is-active'));
        [...document.querySelectorAll(`a[href^="${window.location.pathname}"]`)]
            .forEach(el => el.classList.add('is-active'));
        const path = `/${window.location.pathname.split('/')[1]}`;
        [...document.querySelectorAll(`.nav a[href^="${path}"]`)]
            .forEach(el => {
            (el === null || el === void 0 ? void 0 : el.href) !== '/' && el.classList.add('is-active');
        });
    }
}
exports.PushStates = PushStates;
PushStates.TIME_LIMIT = 10000;
PushStates.noChange = false;

},{"./Handler":9,"./Scroll":12,"./Utils":15}],12:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const gsap_1 = require("gsap/dist/gsap");
const ScrollTrigger_1 = require("gsap/dist/ScrollTrigger");
const ScrollToPlugin_1 = require("gsap/dist/ScrollToPlugin");
const Animate_1 = require("./Animate");
const all_1 = require("./animations/all");
gsap_1.gsap.registerPlugin(ScrollTrigger_1.ScrollTrigger, ScrollToPlugin_1.ScrollToPlugin);
class Scroll {
    constructor() {
        this.onHashClickHandler = e => {
            e.preventDefault();
            e.stopPropagation();
            const { hash } = e.currentTarget;
            const target = document.querySelector(hash);
            target
                ? _a.scrollTo({ el: target })
                : console.warn('There is no %s element', hash);
        };
    }
    static resize() {
        ScrollTrigger_1.ScrollTrigger.refresh();
    }
    static enable() {
        _a.enabled = true;
    }
    static disable() {
        _a.enabled = false;
    }
    static start() {
        window.addEventListener('scroll', _a.onScroll);
    }
    static stop() {
        window.removeEventListener('scroll', _a.onScroll);
    }
    static resetScrollCache(pathname) {
        _a.scrollCache[pathname] = 0;
    }
    static scrollToCached() {
        const y = _a.scrollCache[window.location.pathname] || 0;
        _a.scrollTo({ y, duration: 0 });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            ScrollTrigger_1.ScrollTrigger.clearScrollMemory('manual');
            this.bindHashClick();
            this.setup();
            _a.resize();
        });
    }
    setup() {
        console.log('scroll setup', gsap_1.gsap.version);
        _a.matchMedia = gsap_1.gsap.matchMedia();
        [...document.querySelectorAll('[data-animation]')]
            .map((el) => ({
            el,
            type: el.dataset.animation,
            delay: parseInt(el.dataset.delay, 10) || 0,
        })).forEach((item) => {
            if (all_1.animations[item.type]) {
                ScrollTrigger_1.ScrollTrigger.create({
                    trigger: item.el,
                    toggleActions: 'play pause resume reset',
                    animation: (0, Animate_1.getAnimation)(item.type, item.el, item.delay || 0),
                });
            }
            else {
                console.warn(`animation type "${item.type}" does not exist`, item.el);
            }
        });
        [...document.querySelectorAll('[data-scroll]')]
            .map((el) => ({
            el,
            type: el.dataset.scroll,
            delay: parseInt(el.dataset.delay, 10) || 0,
        })).forEach((item) => {
            if (all_1.scrolls[item.type]) {
                all_1.scrolls[item.type](item.el, item.delay);
            }
            else {
                console.warn(`scroll type "${item.type}" does not exist`, item.el);
            }
        });
        [...document.querySelectorAll('[data-parallax]')]
            .map((el) => ({
            el,
            parallax: parseInt(el.dataset.parallax, 10),
            delay: el.dataset.delay || 0,
        })).forEach((item) => {
            gsap_1.gsap.fromTo(item.el, { y: -item.parallax * (window.innerWidth / 1280) }, {
                y: () => item.parallax * (window.innerWidth / 1280),
                ease: 'none',
                scrollTrigger: {
                    trigger: item.el,
                    scrub: true,
                },
            });
        });
    }
    revertAnimations() {
        var _b;
        (_b = _a.matchMedia) === null || _b === void 0 ? void 0 : _b.revert();
    }
    bindHashClick() {
        document.querySelectorAll('a[href^="#"]:not(a[href="#"])').forEach((el) => {
            el.addEventListener('click', this.onHashClickHandler);
        });
    }
}
_a = Scroll;
Scroll.matchMedia = null;
Scroll.enabled = true;
Scroll.scrollCache = {};
Scroll.onScroll = () => {
    if (!_a.enabled) {
        return;
    }
    _a.scrollCache[window.location.pathname] = window.scrollY;
};
Scroll.scrollTo = ({ el, y, duration = 1, ease = 'none', offsetY = 0, }) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise(resolve => {
        gsap_1.gsap.to(window, {
            scrollTo: {
                y: y !== null && y !== void 0 ? y : el,
                x: 0,
                offsetY,
            },
            duration,
            ease,
            onComplete: () => resolve(),
        });
    });
});
Scroll.scrollToTop = (fast) => __awaiter(void 0, void 0, void 0, function* () {
    yield _a.scrollTo({
        y: 0,
        el: document.querySelector('[data-page]'),
        duration: fast ? 0 : 2,
    });
});
exports.default = Scroll;

},{"./Animate":5,"./animations/all":16,"gsap/dist/ScrollToPlugin":2,"gsap/dist/ScrollTrigger":3,"gsap/dist/gsap":4}],13:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Site_1 = require("./Site");
const API_1 = require("./widgets/API");
const PushStates_1 = require("./PushStates");
const Templates_1 = require("./templates/Templates");
const Utils = __importStar(require("./Utils"));
class Search {
    constructor(view) {
        this.view = view;
        this.onFormReset = () => {
            this.input.value = '';
            this.animationHide();
            this.view.classList.remove('has-value');
        };
        this.onFormSubmit = (e) => {
            e.preventDefault();
            const pathname = this.form.getAttribute('action') || window.location.pathname;
            const params = Utils.getQueryString(this.form);
            PushStates_1.PushStates.goTo(`${pathname}?${params}`);
        };
        this.onType = (e) => {
            e.preventDefault();
            const { value } = this.input;
            this.view.classList.toggle('has-value', value.length > 0);
            if (value.length < this.settings.liveMinLen) {
                this.animationHide();
                return;
            }
            clearTimeout(this.timer);
            this.timer = setTimeout(() => {
                const formData = { url: this.form.getAttribute('data-api-url') };
                API_1.API.callIt(formData, this.form, (data, el, response) => {
                    this.liveResponse(data, el, response);
                });
            }, this.settings.timeout);
        };
        this.init();
    }
    onState() {
        this.onFormReset();
        clearTimeout(this.timer);
    }
    init() {
        this.settings = {
            liveMinLen: 3,
            timeout: 250,
        };
        this.searchBg = this.view.querySelector('.js-search-bg');
        this.searchContent = this.view.querySelector('.js-search-content');
        this.btnClose = document.querySelector('.js-search-close');
        this.input = this.view.querySelector('#search-inp');
        this.form = this.view.querySelector('.js-form');
        this.live = this.view.querySelector('.js-livesearch');
        this.liveTemplate = Templates_1.Templates.get(Templates_1.TemplateNames.LIVESEARCH);
        this.input.addEventListener('keyup', this.onType);
        this.bind();
    }
    bind() {
        this.form.addEventListener('reset', this.onFormReset);
        this.form.addEventListener('submit', this.onFormSubmit);
    }
    liveResponse(data, el, response) {
        if (response.results) {
            this.live.innerHTML = this.liveTemplate.render(response);
            this.showLiveResults();
            PushStates_1.PushStates.bind(this.live);
        }
        else {
            this.quickHide();
        }
    }
    showLiveResults() {
        this.view.classList.add('is-livesearch-shown');
        this.liveList = this.view.querySelector('.js-livesearch-list');
        this.liveLi = this.view.querySelectorAll('.js-livesearch-item');
        const height = Math.min(this.liveList.clientHeight, window.innerHeight * 0.75);
        gsap_1.gsap.timeline()
            .to(this.liveList.parentElement, {
            duration: !this.isLiveShown ? 0.8 : 0,
            height,
            ease: Site_1.easing,
        })
            .fromTo(this.liveLi, { y: window.innerHeight }, {
            y: 0,
            duration: 0.9,
            stagger: 0.1,
            ease: Site_1.easing,
        });
        this.isLiveShown = true;
    }
    quickHide() {
        if (!this.liveList)
            return;
        gsap_1.gsap.to(this.liveList.parentElement, {
            height: 0,
            duration: 0.01,
            delay: 0.8,
            onComplete: () => {
                this.input.value = '';
                this.live.innerHTML = '';
            },
        });
    }
    animationHide() {
        if (!this.isLiveShown)
            return;
        [...this.liveLi].reverse().forEach((item, index) => {
            gsap_1.gsap.to(item, {
                y: window.innerHeight,
                rotate: index % 2 === 0 ? 15 : -15,
                duration: 0.8,
                delay: index * 0.1,
                ease: Site_1.easing,
                onComplete: () => {
                    item.remove();
                    if (index === this.liveLi.length)
                        gsap_1.gsap.set(this.liveList.parentElement, { height: 0 });
                },
            });
        });
        this.isLiveShown = false;
    }
}
exports.Search = Search;

},{"./PushStates":11,"./Site":14,"./Utils":15,"./templates/Templates":46,"./widgets/API":47,"gsap/dist/gsap":4}],14:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.breakpoint = exports.browser = exports.easing = exports.pixelRatio = exports.lang = exports.debug = exports.local = void 0;
const gsap_1 = require("gsap/dist/gsap");
const ScrollTrigger_1 = require("gsap/dist/ScrollTrigger");
const CustomEase_1 = require("gsap/dist/CustomEase");
const Scroll_1 = __importDefault(require("./Scroll"));
const Classes_1 = require("./Classes");
const Utils_1 = require("./Utils");
const Browser_1 = require("./Browser");
const Breakpoint_1 = require("./Breakpoint");
const PushStates_1 = require("./PushStates");
const Page_1 = require("./pages/Page");
const Menu_1 = require("./Menu");
const Search_1 = require("./Search");
const AudioPlayer_1 = require("./components/AudioPlayer");
const Lightbox_1 = require("./components/Lightbox/Lightbox");
const All_1 = __importDefault(require("./widgets/All"));
exports.local = !!window.location.hostname.match(/(localhost|\.lh|192\.168\.)/g);
exports.debug = window.location.search.indexOf('debug') >= 0;
gsap_1.gsap.registerPlugin(CustomEase_1.CustomEase);
class Site {
    constructor() {
        this.isInitialized = false;
        this.onResize = (isOrientationChanged) => {
            var _a;
            const oldBreakpoint = exports.breakpoint ? exports.breakpoint.value : null;
            exports.breakpoint = (0, Breakpoint_1.getBreakpoint)();
            const width = window.innerWidth;
            const height = window.innerHeight;
            const changed = oldBreakpoint !== exports.breakpoint.value;
            !exports.browser.touch && (0, Utils_1.setAppHeight)();
            isOrientationChanged && (0, Utils_1.setAppHeight)();
            (_a = this.currentPage) === null || _a === void 0 ? void 0 : _a.resize(width, height, exports.breakpoint, changed);
            (!exports.browser.touch || changed) && (Scroll_1.default === null || Scroll_1.default === void 0 ? void 0 : Scroll_1.default.resize());
        };
        this.onState = () => {
            var _a, _b;
            const isRendered = this.pushStates.isRendered();
            const pageChangedState = this.currentPage.onState();
            const lightboxChangedState = this.lightbox.onState(isRendered);
            (_a = this.menu) === null || _a === void 0 ? void 0 : _a.onState();
            (_b = this.search) === null || _b === void 0 ? void 0 : _b.onState();
            if (!isRendered && !pageChangedState && !lightboxChangedState) {
                Promise.all([
                    this.pushStates.load(),
                    this.currentPage.animateOut(),
                ]).then(this.render);
            }
        };
        this.render = () => __awaiter(this, void 0, void 0, function* () {
            if (this.currentPage) {
                this.currentPage.off();
                this.currentPage.destroy();
                this.currentPage = null;
            }
            console.groupEnd();
            console.group();
            document.body.classList.add('is-rendering');
            PushStates_1.PushStates.setTitle();
            this.pushStates.render();
            yield this.setCurrentPage();
            this.onPageLoaded();
        });
        this.onPageLoaded = () => __awaiter(this, void 0, void 0, function* () {
            document.body.classList.remove('is-not-ready', 'is-rendering');
            this.currentPage.animateIn(0);
            !this.isInitialized && Scroll_1.default.scrollToTop(true);
            Scroll_1.default.scrollToCached();
            this.scroll.load();
            Scroll_1.default.start();
            PushStates_1.PushStates.setTitle();
            this.audioPlayer.bindButtons();
            this.isInitialized = true;
        });
        this.onPageAppend = (el) => {
            PushStates_1.PushStates.bind(el);
            this.scroll.load();
        };
    }
    init() {
        console.group();
        exports.breakpoint = (0, Breakpoint_1.getBreakpoint)();
        exports.browser = (0, Browser_1.getBrowser)();
        exports.easing = CustomEase_1.CustomEase.create('custom', '0.5, 0, 0.1, 1');
        exports.lang = document.documentElement.getAttribute('lang');
        exports.pixelRatio = Math.min(2, window.devicePixelRatio || 1);
        this.bind();
        (0, Utils_1.setAppHeight)();
        exports.debug && (0, Utils_1.stats)();
        this.pushStates = new PushStates_1.PushStates();
        this.pushStates.on(PushStates_1.PushStatesEvents.CHANGE, this.onState);
        this.scroll = new Scroll_1.default();
        this.lightbox = new Lightbox_1.Lightbox();
        this.menu = new Menu_1.Menu(document.querySelector('.js-menu'));
        this.search = new Search_1.Search(document.getElementById('search'));
        this.audioPlayer = new AudioPlayer_1.AudioPlayer(document.querySelector('.js-audioplayer'));
        if (exports.browser.ie) {
            console.warn('This browser is outdated!');
            return;
        }
        PushStates_1.PushStates.setTitle();
        Promise.all([
            this.setCurrentPage(),
        ]).then(this.onPageLoaded);
    }
    bind() {
        window.addEventListener('DOMContentLoaded', () => {
            document.body.classList.add('is-loaded');
        });
        window.addEventListener('resize', () => {
            document.body.classList.add('is-resizing');
            clearTimeout(this.resizingTimeout);
            this.resizingTimeout = setTimeout(() => {
                this.onResize();
                document.body.classList.remove('is-resizing');
            }, 250);
        });
        window.addEventListener('orientationchange', (0, Utils_1.debounce)(() => this.onResize(true)));
    }
    setCurrentPage() {
        var _a;
        const pageList = document.querySelectorAll('[data-page]');
        let pageEl = pageList[0];
        let pageName = pageEl.dataset.page || 'Page';
        const pageOptions = pageEl.dataset.options;
        if (Classes_1.pages[pageName] === undefined) {
            if (pageName !== 'undefined') {
                console.warn('There is no "%s" in Pages!', pageName);
            }
            pageName = 'Page';
        }
        if (pageList.length > 1) {
            console.warn('Only one [data-page] element, please!');
        }
        else if (pageList.length === 0) {
            const articleEl = document.getElementById('content').querySelector('article');
            const contentEl = document.getElementById('content');
            pageEl = articleEl || contentEl.firstChild;
        }
        document.body.classList.toggle('is-404', Boolean(document.body.querySelector('[data-not-found]')));
        const page = new Classes_1.pages[pageName](pageEl, pageOptions);
        this.currentPage = page;
        page.on(Page_1.PageEvents.CHANGE, this.onPageAppend);
        All_1.default.bind();
        this.setActiveLinks();
        ScrollTrigger_1.ScrollTrigger.refresh();
        (_a = this.lightbox) === null || _a === void 0 ? void 0 : _a.check();
        return page.preload();
    }
    setActiveLinks() {
        const anchors = document.querySelectorAll('a[href]');
        const pathname = window.location.pathname.replace(/\/+$/, '');
        [...anchors].forEach(anchor => {
            anchor.classList.remove('is-active');
        });
        document.querySelectorAll(`a[href="${pathname}/"], a[href="${pathname}"]`).forEach(link => link === null || link === void 0 ? void 0 : link.classList.add('is-active'));
    }
}
window.addEventListener('load', () => {
    const site = new Site();
    site.init();
});

},{"./Breakpoint":6,"./Browser":7,"./Classes":8,"./Menu":10,"./PushStates":11,"./Scroll":12,"./Search":13,"./Utils":15,"./components/AudioPlayer":22,"./components/Lightbox/Lightbox":25,"./pages/Page":45,"./widgets/All":48,"gsap/dist/CustomEase":1,"gsap/dist/ScrollTrigger":3,"gsap/dist/gsap":4}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStorageItem = exports.setStorageItem = exports.removeTags = exports.getQueryString = exports.normalizeUrl = exports.isEmpty = exports.wait = exports.zeroPad = exports.serializeObject = exports.getScript = exports.keys = exports.nFormatter = exports.getImgFromMapbox = exports.lat2tile = exports.lon2tile = exports.clearThree = exports.drawImageProp = exports.stats = exports.setAppHeight = exports.debounce = exports.generateUID = void 0;
function generateUID() {
    return `${(new Date()).getTime()}${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`;
}
exports.generateUID = generateUID;
const debounce = (callback, timeout = 300) => {
    let timeoutId = null;
    return (...args) => {
        window.clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => {
            callback.apply(null, args);
        }, timeout);
    };
};
exports.debounce = debounce;
function setAppHeight() {
    document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);
}
exports.setAppHeight = setAppHeight;
function stats() {
    const stats = new Stats();
    stats.showPanel(0);
    stats.dom.style.pointerEvents = 'none';
    document.body.appendChild(stats.dom);
    function animate() {
        stats.begin();
        stats.end();
        requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
    return stats;
}
exports.stats = stats;
function drawImageProp(ctx, img, iw, ih, x, y, w, h, offsetX, offsetY) {
    if (arguments.length === 4) {
        x = y = 0;
        w = ctx.canvas.width;
        h = ctx.canvas.height;
    }
    offsetX = typeof offsetX === 'number' ? offsetX : 0.5;
    offsetY = typeof offsetY === 'number' ? offsetY : 0.5;
    if (offsetX < 0) {
        offsetX = 0;
    }
    if (offsetY < 0) {
        offsetY = 0;
    }
    if (offsetX > 1) {
        offsetX = 1;
    }
    if (offsetY > 1) {
        offsetY = 1;
    }
    const r = Math.min(w / iw, h / ih);
    let nw = iw * r;
    let nh = ih * r;
    let cx;
    let cy;
    let cw;
    let ch;
    let ar = 1;
    if (nw < w) {
        ar = w / nw;
    }
    if (Math.abs(ar - 1) < 1e-14 && nh < h) {
        ar = h / nh;
    }
    nw *= ar;
    nh *= ar;
    cw = iw / (nw / w);
    ch = ih / (nh / h);
    cx = (iw - cw) * offsetX;
    cy = (ih - ch) * offsetY;
    if (cx < 0) {
        cx = 0;
    }
    if (cy < 0) {
        cy = 0;
    }
    if (cw > iw) {
        cw = iw;
    }
    if (ch > ih) {
        ch = ih;
    }
    ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);
}
exports.drawImageProp = drawImageProp;
const clearThree = (obj) => {
    if (!obj) {
        return;
    }
    if (!obj.children) {
        return;
    }
    while (obj.children.length > 0) {
        (0, exports.clearThree)(obj.children[0]);
        obj.remove(obj.children[0]);
    }
    if (obj.geometry) {
        obj.geometry.dispose();
    }
    if (obj.material) {
        Object.keys(obj.material).forEach(prop => {
            if (!obj.material[prop]) {
                return;
            }
            if (obj.material[prop] !== null && typeof obj.material[prop].dispose === 'function') {
                obj.material[prop].dispose();
            }
        });
        obj.material.dispose();
    }
};
exports.clearThree = clearThree;
function lon2tile(lon, zoom) {
    return Math.floor(((lon + 180) / 360) * Math.pow(2, zoom));
}
exports.lon2tile = lon2tile;
function lat2tile(lat, zoom) {
    return Math.floor(((1
        - Math.log(Math.tan((lat * Math.PI) / 180)
            + 1 / Math.cos((lat * Math.PI) / 180))
            / Math.PI)
        / 2)
        * Math.pow(2, zoom));
}
exports.lat2tile = lat2tile;
function getImgFromMapbox(zoom, lon, lat, style, token) {
    const z = Math.floor(zoom - 0.5);
    const x = lon2tile(lon, z);
    const y = lat2tile(lat, z);
    const img = `<img src="https://api.mapbox.com/styles/v1/${style}/tiles/256/${z}/${x}/${y}?access_token=${token}" loading="lazy" alt="">`;
    return img;
}
exports.getImgFromMapbox = getImgFromMapbox;
function nFormatter(num, digits) {
    const lookup = [
        { value: 1, symbol: '' },
        { value: 1e3, symbol: 'k' },
        { value: 1e6, symbol: 'MI' },
        { value: 1e9, symbol: 'G' },
        { value: 1e12, symbol: 'T' },
        { value: 1e15, symbol: 'P' },
        { value: 1e18, symbol: 'E' },
    ];
    const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
    const item = lookup.slice().reverse().find(itemInner => num >= itemInner.value);
    return item ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol : '0';
}
exports.nFormatter = nFormatter;
exports.keys = {
    enter: 13,
    esc: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    minus: 109,
    plus: 107,
};
function getScript(source, callback) {
    let script = document.createElement('script');
    const prior = document.getElementsByTagName('script')[0];
    script.async = 1;
    script.onload = script.onreadystatechange = function (_, isAbort) {
        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
            script.onload = script.onreadystatechange = null;
            script = undefined;
            if (!isAbort && callback)
                setTimeout(callback, 0);
        }
    };
    script.src = source;
    prior.parentNode.insertBefore(script, prior);
}
exports.getScript = getScript;
const serializeObject = (form) => {
    const obj = {};
    Array.prototype.slice.call(form.elements).forEach(field => {
        if (!field.name || field.disabled || ['file', 'reset', 'submit', 'button'].indexOf(field.type) > -1)
            return;
        if (field.type === 'select-multiple') {
            const options = [];
            Array.prototype.slice.call(field.options).forEach(option => {
                if (!option.selected)
                    return;
                options.push(option.value);
            });
            if (options.length) {
                obj[field.name] = options;
            }
            return;
        }
        if (['checkbox', 'radio'].indexOf(field.type) > -1 && !field.checked)
            return;
        obj[field.name] = field.value;
    });
    return obj;
};
exports.serializeObject = serializeObject;
const zeroPad = (num, places) => {
    const zero = places - num.toString().length + 1;
    return Array(+(zero > 0 && zero)).join('0') + num;
};
exports.zeroPad = zeroPad;
const wait = (time) => new Promise(resolve => {
    setTimeout(() => resolve(), time);
});
exports.wait = wait;
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}
exports.isEmpty = isEmpty;
function normalizeUrl(url) {
    return `/${url.replace(/#.*$/, '').replace(/^\/|\/$/g, '')}`;
}
exports.normalizeUrl = normalizeUrl;
const getQueryString = (forms) => {
    const formData = new FormData();
    (Array.isArray(forms) ? forms : [forms])
        .filter((e, i, a) => a.indexOf(e) === i)
        .forEach(form => {
        new URLSearchParams(new FormData(form))
            .forEach((value, key) => formData.append(key, value));
    });
    const formParams = new URLSearchParams(formData);
    const keysForDel = [];
    formParams.forEach((value, key) => {
        if (!value)
            keysForDel.push(key);
    });
    keysForDel.forEach(key => formParams.delete(key));
    const finalFormData = new URLSearchParams();
    formParams.forEach((value, key) => {
        if (finalFormData.has(key)) {
            finalFormData.set(key, `${finalFormData.get(key)},${value}`);
        }
        else
            finalFormData.set(key, value);
    });
    return decodeURIComponent(finalFormData.toString());
};
exports.getQueryString = getQueryString;
function removeTags(str) {
    if ((str === null) || (str === ''))
        return false;
    str = str.toString();
    return str.replace(/(<([^>]+)>)/ig, '');
}
exports.removeTags = removeTags;
function setStorageItem(key, value) {
    try {
        localStorage.setItem(key, value);
    }
    catch (error) {
        console.warn(error);
    }
}
exports.setStorageItem = setStorageItem;
function getStorageItem(key) {
    return localStorage.getItem(key);
}
exports.getStorageItem = getStorageItem;

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrolls = exports.animations = void 0;
const fadeUp_1 = require("./fadeUp");
const hero_1 = require("./scroll/hero");
const interviews_1 = require("./scroll/interviews");
exports.animations = { fadeUp: fadeUp_1.fadeUp };
exports.scrolls = { hero: hero_1.hero, interviews: interviews_1.interviews };

},{"./fadeUp":17,"./scroll/hero":18,"./scroll/interviews":19}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fadeUp = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Site_1 = require("../Site");
const fadeUp = (el, delay = 0) => {
    gsap_1.gsap.killTweensOf(el, { opacity: true, y: true });
    return gsap_1.gsap.fromTo(el, { opacity: 0, y: 60 }, { duration: 1.4, opacity: 1, y: 0, ease: Site_1.easing, delay });
};
exports.fadeUp = fadeUp;

},{"../Site":14,"gsap/dist/gsap":4}],18:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hero = void 0;
const gsap_1 = __importDefault(require("gsap"));
const hero = el => {
    gsap_1.default.to(el.children, {
        y: () => el.clientHeight / -2,
        ease: 'none',
        scrollTrigger: {
            trigger: el,
            scrub: true,
            start: 'top top',
            end: 'bottom top',
        },
    });
};
exports.hero = hero;

},{"gsap":4}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.interviews = void 0;
const gsap_1 = require("gsap/dist/gsap");
const interviews = el => {
    const controls = el.querySelector('.interviews-grid__controls');
    const moreInterviews = el.querySelector('.interviews__more');
    if (controls) {
        const mm = gsap_1.gsap.matchMedia();
        mm.add('(orientation: landscape)', () => {
            gsap_1.gsap.to(controls, {
                ease: 'none',
                scrollTrigger: {
                    trigger: el,
                    pin: controls,
                    pinSpacing: false,
                    start: 'top top',
                    end: () => { var _a; return `bottom ${controls.offsetHeight + ((_a = moreInterviews === null || moreInterviews === void 0 ? void 0 : moreInterviews.offsetHeight) !== null && _a !== void 0 ? _a : 0)}px`; },
                    onToggle: self => el.classList.toggle('is-pinned', self.isActive),
                    invalidateOnRefresh: true,
                },
            });
        });
    }
};
exports.interviews = interviews;

},{"gsap/dist/gsap":4}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Accordeon = void 0;
const Component_1 = require("./Component");
class Accordeon extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.onToggleClick = e => {
            e.preventDefault();
            e.stopPropagation();
            this.view.classList.toggle('is-closed');
        };
        this.bind();
        this.setHeight();
    }
    bind() {
        const button = this.view.querySelector('.js-accordeon-button');
        button && button.addEventListener('click', this.onToggleClick);
    }
    setHeight() {
        const copy = this.view.querySelector('.js-accordeon-copy');
        if (copy) {
            copy.removeAttribute('style');
            copy.style.height = `${copy.scrollHeight}px`;
        }
    }
}
exports.Accordeon = Accordeon;

},{"./Component":23}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccordeonList = void 0;
const Component_1 = require("./Component");
class AccordeonList extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.onToggleClick = (e, item) => {
            e.preventDefault();
            e.stopPropagation();
            if (item.classList.contains('is-closed')) {
                this.allItems.forEach(itemToclose => {
                    this.close(itemToclose);
                });
                this.open(item);
            }
            else {
                this.close(item);
            }
        };
        this.onLinkToggle = (isClosed, element) => {
            element.tabIndex = isClosed ? -1 : 0;
        };
        this.bind();
        this.setupListeners();
    }
    bind() {
        this.allItems = [...this.view.querySelectorAll('.js-accordeon-item')].map(el => {
            this.setHeight(el);
            const element = el;
            return element;
        });
    }
    setupListeners() {
        const { closeOthers } = this.view.dataset;
        this.allItems.forEach(item => {
            const button = item.querySelector('.js-accordeon-button');
            button && button.addEventListener('click', e => this.onToggleClick(e, item));
            closeOthers && this.setupMutationObserver(item);
        });
    }
    setupMutationObserver(item) {
        const link = item.querySelector('a.button');
        if (link) {
            this.onLinkToggle(item.classList.contains('is-closed'), link);
            const observer = new MutationObserver(() => this.onLinkToggle(item.classList.contains('is-closed'), link));
            observer.observe(item, { attributes: true });
        }
    }
    close(item) {
        item.classList.add('is-closed');
    }
    open(item) {
        item.classList.remove('is-closed');
    }
    setHeight(item) {
        const copy = item.querySelector('.js-accordeon-copy');
        if (copy) {
            copy.removeAttribute('style');
            copy.style.height = `${copy.scrollHeight}px`;
        }
    }
}
exports.AccordeonList = AccordeonList;

},{"./Component":23}],22:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioPlayer = exports.AudioPlayerStatesText = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Site_1 = require("../Site");
const Video_1 = require("./Player/Video");
const Lightbox_1 = require("./Lightbox/Lightbox");
class AudioPlayerStatesText {
}
exports.AudioPlayerStatesText = AudioPlayerStatesText;
AudioPlayerStatesText.RANDOM = 'Play random interview';
AudioPlayerStatesText.PLAYING = 'Playing interview';
AudioPlayerStatesText.PAUSED = 'Play interview';
class AudioPlayer extends Video_1.Video {
    static closeAudioPlayer() {
        AudioPlayer.instance.minimize();
    }
    static openAudioPlayer() {
        AudioPlayer.instance.expand();
    }
    static getId() {
        return AudioPlayer.currentAudioId;
    }
    static isAudioPlayerPaused() {
        return AudioPlayer.instance.isPaused();
    }
    static updateColors(color) {
        AudioPlayer.instance.updateColors(color);
    }
    constructor(view) {
        super(view);
        this.view = view;
        this.isExpanded = false;
        this.bindButtons = () => {
            document.querySelectorAll('[data-audio-player]').forEach(button => {
                button.addEventListener('click', this.onBtnClick);
            });
        };
        this.onBtnClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            const id = e.currentTarget.dataset.audioPlayer;
            if (!id)
                return;
            if (id !== AudioPlayer.currentAudioId) {
                this.setNewAudio(id, true);
            }
            else {
                this.isPaused() ? this.play() : this.pause();
            }
        };
        this.init = () => {
            if (!this.apiUrl)
                return;
            this.setNewAudio();
        };
        this.togglePlayerButtons = (isPlaying) => {
            this.playerButtons = document.querySelectorAll(`[data-audio-player="${AudioPlayer.currentAudioId}"]`);
            this.playerButtons.forEach(btn => btn.classList.toggle('is-playing', isPlaying));
        };
        this.bindAudioPlayer = () => {
            this.ui.thumbnail && this.ui.thumbnail.addEventListener('click', this.onThumbnailClick);
            this.ui.minimize && this.ui.minimize.addEventListener('click', this.onMinimizeClick);
            this.elements.nextBtn && this.elements.nextBtn.addEventListener('click', this.onNextClick);
            this.elements.prevBtn && this.elements.prevBtn.addEventListener('click', this.onPrevClick);
        };
        this.setNewAudio = (id, play) => {
            this.loadAudio(id).then((data) => {
                this.updatePlayer(data);
                Lightbox_1.Lightbox.checkPlayerState();
                play && this.play();
            });
        };
        this.onNextClick = () => {
            const { nextId } = this.elements.nextBtn.dataset;
            this.setNewAudio(nextId, true);
        };
        this.onPrevClick = () => {
            const { prevId } = this.elements.prevBtn.dataset;
            this.setNewAudio(prevId, true);
        };
        this.onThumbnailClick = () => {
            if (Lightbox_1.Lightbox.isOpen)
                return;
            this.isExpanded ? this.minimize() : this.expand();
            this.view.classList.toggle('is-expanded');
        };
        this.onMinimizeClick = () => this.minimize();
        this.minimize = () => {
            gsap_1.gsap.to(this.ui.playerBar, {
                yPercent: 0,
                duration: 0.7,
                ease: Site_1.easing,
                onComplete: () => {
                    this.setTitleInCassette(this.elements.title.innerText);
                    this.isExpanded = false;
                },
            });
        };
        this.expand = () => {
            gsap_1.gsap.to(this.ui.playerBar, {
                yPercent: -100,
                duration: 0.7,
                ease: Site_1.easing,
                onStart: () => {
                    this.setTitleInCassette(this.isPaused() ? AudioPlayerStatesText.PAUSED : AudioPlayerStatesText.PLAYING);
                },
                onComplete: () => {
                    this.isExpanded = true;
                },
            });
        };
        this.setTitleInCassette = (text) => {
            [...this.cassetteTitle.querySelectorAll('span')].forEach(span => {
                span.innerText = text;
            });
        };
        this.updatePlayer = (data) => {
            var _a, _b;
            AudioPlayer.currentAudioId = data.id;
            this.media.src = data.src[0].src;
            this.elements.title.innerText = data.title;
            this.elements.urlLink.href = data.urlInterview;
            this.elements.nextBtn.dataset.nextId = ((_a = data.nextId) === null || _a === void 0 ? void 0 : _a.toString()) || '';
            this.elements.prevBtn.dataset.prevId = ((_b = data.prevId) === null || _b === void 0 ? void 0 : _b.toString()) || '';
        };
        this.updateColors = (color) => {
            this.view.style.setProperty('--lightbox-color', `var(--color-${color})`);
            const classes = this.view.className.split(' ').filter(c => !c.startsWith('audioplayer--'));
            this.view.className = classes.join(' ').trim();
            this.view.classList.add(`audioplayer--${color}`);
        };
        AudioPlayer.instance = this;
        this.ui.thumbnail = this.view.querySelector('.js-player-thumbnail');
        this.ui.minimize = this.view.querySelector('.js-player-minimize');
        this.cassetteTitle = this.view.querySelector('.js-player-marquee');
        this.apiUrl = this.view.dataset.apiUrl;
        this.elements = {
            urlLink: this.view.querySelector('.js-player-url'),
            nextBtn: this.view.querySelector('.js-player-next'),
            prevBtn: this.view.querySelector('.js-player-prev'),
            title: this.view.querySelector('.js-player-title'),
        };
        this.init();
        this.bindAudioPlayer();
    }
    onPlay() {
        super.onPlay();
        this.setTitleInCassette(AudioPlayerStatesText.PLAYING);
        this.togglePlayerButtons(true);
    }
    onPause() {
        super.onPause();
        this.setTitleInCassette(AudioPlayerStatesText.PAUSED);
        this.togglePlayerButtons(false);
    }
    loadAudio(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const isWorkspace = window.location.pathname.indexOf('/workspace/') >= 0;
            const url = isWorkspace
                ? `${this.apiUrl}${id ? `0${id}` : '01'}.json`
                : `${this.apiUrl}${id ? `?id=${id}` : ''}`;
            try {
                const response = yield fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Elder-Api': 'true',
                    },
                });
                const data = yield response.json();
                this.view.classList.remove('is-fetching');
                return data;
            }
            catch (error) {
                this.view.classList.remove('is-fetching');
                throw new Error(error);
            }
        });
    }
}
exports.AudioPlayer = AudioPlayer;

},{"../Site":14,"./Lightbox/Lightbox":25,"./Player/Video":42,"gsap/dist/gsap":4}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = exports.ComponentEvents = void 0;
const Handler_1 = require("../Handler");
const Utils_1 = require("../Utils");
class ComponentEvents {
}
exports.ComponentEvents = ComponentEvents;
ComponentEvents.CHANGE = 'change';
class Component extends Handler_1.Handler {
    constructor(view) {
        super();
        this.view = view;
        this.resize = (wdt, hgt) => { };
        this.uuid = (0, Utils_1.generateUID)();
        if (!view) {
            console.warn('component built without view');
        }
    }
    onState() {
        return false;
    }
    animateIn(index, delay) { }
    animateOut() {
        return Promise.resolve(null);
    }
    destroy() {
        super.destroy();
    }
}
exports.Component = Component;

},{"../Handler":9,"../Utils":15}],24:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterLetters = void 0;
const Scroll_1 = __importDefault(require("../Scroll"));
const Component_1 = require("./Component");
class FilterLetters extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.onButtonClick = (e) => {
            const button = e.currentTarget;
            const { letter } = button.dataset;
            const letterItem = [...this.scrolledItems].find(item => this.getFirstLetter(item) === letter.toLowerCase());
            if (!letterItem) {
                console.warn('There is no item starting with letter "%s"!', letter);
                return;
            }
            Scroll_1.default.scrollTo({
                el: letterItem,
                offsetY: this.view.closest('.js-controls').clientHeight - 1,
            });
        };
        this.settings = Object.assign(Object.assign({}, this.settings), JSON.parse(this.view.getAttribute('data-options')));
        this.contentElement = document.querySelector(this.settings.contentSelector);
        this.buttons = this.view.querySelectorAll('.js-letter');
        this.scrolledItems = this.contentElement.querySelectorAll('.js-tile');
        this.bind();
    }
    bind() {
        [...this.buttons].map(btn => btn.addEventListener('click', this.onButtonClick));
    }
    getFirstLetter(item) {
        return item.dataset.name.toLowerCase().charAt(0);
    }
}
exports.FilterLetters = FilterLetters;

},{"../Scroll":12,"./Component":23}],25:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lightbox = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Templates_1 = require("../../templates/Templates");
const PushStates_1 = require("../../PushStates");
const Site_1 = require("../../Site");
const Classes_1 = require("../../Classes");
const AudioPlayer_1 = require("../../components/AudioPlayer");
class Lightbox {
    static checkPlayerState() {
        Lightbox.instance.checkPlayerState();
    }
    static getId() {
        return Lightbox.currentId;
    }
    constructor() {
        this.shown = false;
        this.build = (data) => {
            const template = Templates_1.Templates.get(Templates_1.TemplateNames.LIGHTBOX);
            const html = template.render(data);
            this.view.innerHTML = html;
            PushStates_1.PushStates.bind(this.view);
            AudioPlayer_1.AudioPlayer.instance.bindButtons();
            Lightbox.currentId = data.id;
            this.buildComponents(this.view.querySelectorAll('[data-component]'));
            this.playerBtn = this.view.querySelector('.js-player-btn');
            this.checkPlayerState();
            this.tryToSetColor();
        };
        this.tryToSetColor = () => {
            const lightboxItem = this.view.firstElementChild;
            if (!lightboxItem)
                return;
            const color = lightboxItem.getAttribute('data-theme-color');
            if (color && (AudioPlayer_1.AudioPlayer.getId() === Lightbox.getId()))
                AudioPlayer_1.AudioPlayer.updateColors(color);
        };
        this.bind = () => {
            document.addEventListener('keydown', this.onKeyDown);
        };
        this.onKeyDown = (e) => {
        };
        Lightbox.instance = this;
        this.view = document.getElementById('lightbox');
        this.hide(true);
        this.bind();
    }
    load(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.view.classList.add('is-fetching');
            this.controller = new AbortController();
            const isWorkspace = window.location.pathname.indexOf('/workspace/') >= 0;
            const url = isWorkspace
                ? `${window.location.origin}/workspace/json/lightbox/${window.location.pathname.split('/')[3]}.json`
                : window.location.href + window.location.search;
            try {
                const response = yield fetch(url, {
                    method: 'POST',
                    signal: (_a = this.controller) === null || _a === void 0 ? void 0 : _a.signal,
                    body: new URLSearchParams(payload),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Elder-Api': 'true',
                    },
                });
                const data = yield response.json();
                this.view.classList.remove('is-fetching');
                this.controller = null;
                return data;
            }
            catch (error) {
                this.view.classList.remove('is-fetching');
                throw new Error(error);
            }
        });
    }
    check() {
        this.toggleByPathname();
    }
    onState(isRendered) {
        return this.toggleByPathname(isRendered);
    }
    destroy() {
        var _a;
        this.view.innerHTML = '';
        (_a = this.components) === null || _a === void 0 ? void 0 : _a.forEach(c => c.destroy());
        this.components = null;
    }
    buildComponents(componentsList) {
        this.components = [];
        this.components = [...componentsList].map(el => {
            const element = el;
            const name = element.dataset.component;
            if (name !== undefined && Classes_1.components[name]) {
                let options = {};
                if (element.dataset.options) {
                    options = JSON.parse(element.dataset.options);
                }
                const component = new Classes_1.components[name](element, options);
                return component;
            }
            window.console.warn('There is no `%s` component!', name);
            return null;
        }).filter(Boolean);
    }
    toggleByPathname(isRendered) {
        const patternFound = this.matchPathnamePattern();
        if (patternFound) {
            Promise.all([
                this.hide(),
                this.load(),
            ]).then(results => {
                const data = results.filter(Boolean).reduce((p, c) => (Object.assign(Object.assign({}, p), c)));
                (data === null || data === void 0 ? void 0 : data.title) && PushStates_1.PushStates.setTitle(data.title);
                this.currentPath = window.location.pathname;
                this.build(data);
                if (!this.shown) {
                    this.show();
                }
                this.animateIn();
            }).catch(() => {
                this.hide();
            });
            return true;
        }
        if (this.shown) {
            const animate = isRendered;
            !!animate && this.animateOut();
            this.hide(!animate);
        }
        return false;
    }
    hide(fast) {
        var _a;
        if (this.animating)
            return Promise.resolve();
        (_a = this.controller) === null || _a === void 0 ? void 0 : _a.abort();
        Lightbox.isOpen = false;
        return new Promise((resolve, reject) => {
            this.animating = true;
            this.view.classList.add('is-closing');
            gsap_1.gsap.to(this.view, {
                duration: fast ? 0 : 0.01,
                opacity: 0,
                delay: fast ? 0 : 1,
                ease: 'none',
                onStart: () => {
                    document.body.classList.remove('has-lightbox');
                    this.view.classList.remove('is-showing');
                },
                onComplete: () => {
                    this.view.style.display = 'none';
                    this.shown = false;
                    this.animating = false;
                    this.view.innerHTML = '';
                    resolve();
                },
            });
        });
    }
    show() {
        if (this.animating)
            return;
        if (this.shown) {
            return;
        }
        Promise.all([this.shown ? this.hide() : null]).then(() => {
            this.animating = true;
            this.shown = true;
            Lightbox.isOpen = true;
            gsap_1.gsap.to(this.view, {
                duration: 0.3,
                opacity: 1,
                ease: 'none',
                onStart: () => {
                    document.body.classList.add('has-lightbox');
                    this.view.classList.remove('is-closing');
                    this.view.style.display = 'block';
                },
                onComplete: () => {
                    this.view.classList.add('is-showing');
                    AudioPlayer_1.AudioPlayer.openAudioPlayer();
                    this.animating = false;
                },
            });
        });
    }
    checkPlayerState() {
        var _a, _b;
        if (AudioPlayer_1.AudioPlayer.getId() === Lightbox.getId() && !AudioPlayer_1.AudioPlayer.isAudioPlayerPaused()) {
            (_a = this.playerBtn) === null || _a === void 0 ? void 0 : _a.classList.add('is-playing');
        }
        else {
            (_b = this.playerBtn) === null || _b === void 0 ? void 0 : _b.classList.remove('is-playing');
        }
        this.tryToSetColor();
    }
    matchPathnamePattern() {
        return /^\/(workspace\/lightbox|interviews)\/[a-z0-9-]/gmi
            .test(window.location.pathname + window.location.search);
    }
    animateIn(fast) {
        return new Promise(resolve => {
            gsap_1.gsap.timeline({
                onComplete: () => {
                    this.view.classList.add('is-visible');
                    resolve();
                },
                defaults: { ease: Site_1.easing, duration: !fast ? 1 : 0 },
            });
            navigator.vibrate([1, 400, 1]);
        });
    }
    animateOut(fast) {
        if (!this.view.classList.contains('is-visible')) {
            return Promise.resolve();
        }
        return new Promise(resolve => {
            gsap_1.gsap.timeline({
                onComplete: () => {
                    this.view.classList.remove('is-visible');
                    resolve();
                },
                defaults: { ease: 'expo.inOut' },
            });
        });
    }
}
exports.Lightbox = Lightbox;

},{"../../Classes":8,"../../PushStates":11,"../../Site":14,"../../components/AudioPlayer":22,"../../templates/Templates":46,"gsap/dist/gsap":4}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightboxNav = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Site_1 = require("../../Site");
const Component_1 = require("../../components/Component");
class LightboxNav extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.bind = () => {
            [...this.navButtons].forEach(btn => btn.addEventListener('click', this.onBtnClick));
        };
        this.onBtnClick = (e) => {
            const { currentTarget: button } = e;
            const tabSlug = button.getAttribute('aria-controls');
            const tabToOpen = [...this.navTabs].find(tab => tab.id === tabSlug);
            this.showTab(tabToOpen);
            [...this.navButtons].forEach(btn => {
                btn.classList.remove('is-active');
                btn.setAttribute('aria-selected', 'false');
            });
            button.classList.add('is-active');
            button.setAttribute('aria-selected', 'true');
        };
        this.showTab = (tab) => {
            this.closeTab(this.activeTab).then(() => {
                if (!tab) {
                    this.lightboxEl.classList.add('is-default');
                    this.lightboxEl.classList.remove('is-not-default');
                    this.activeTab = null;
                    return;
                }
                gsap_1.gsap.fromTo(tab, { yPercent: 100 }, {
                    yPercent: 0,
                    duration: 0.6,
                    ease: Site_1.easing,
                    clearProps: 'all',
                    onStart: () => tab.classList.add('is-visible'),
                    onComplete: () => {
                        this.activeTab = tab;
                    },
                });
            });
        };
        this.closeTab = (tab) => new Promise(resolve => {
            if (!tab) {
                this.lightboxEl.classList.add('is-not-default');
                this.lightboxEl.classList.remove('is-default');
                resolve();
            }
            else {
                gsap_1.gsap.fromTo(tab, { yPercent: 0 }, {
                    yPercent: 100,
                    duration: 0.3,
                    ease: Site_1.easing,
                    clearProps: 'all',
                    onComplete: () => {
                        tab.classList.remove('is-visible');
                        resolve();
                    },
                });
            }
        });
        this.lightboxEl = document.getElementById('lightbox');
        this.navButtons = this.view.querySelectorAll('button');
        this.navTabs = document.querySelectorAll('.js-lightbox-tab');
        this.bind();
    }
}
exports.LightboxNav = LightboxNav;

},{"../../Site":14,"../../components/Component":23,"gsap/dist/gsap":4}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightboxSlider = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Component_1 = require("../../components/Component");
const Site_1 = require("../../Site");
class LightboxSlider extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.init = () => {
            this.goTo(0, true);
        };
        this.bind = () => {
            this.arrowNext.addEventListener('click', () => this.goTo(this.activeSlideIndex + 1));
            this.arrowPrev.addEventListener('click', () => this.goTo(this.activeSlideIndex - 1));
        };
        this.goTo = (index, fast) => {
            const direction = index > this.activeSlideIndex ? 1 : -1;
            this.hideSlide(this.activeSlide, direction, fast);
            this.showSlide(this.slides[index], direction, fast);
        };
        this.hideSlide = (slide, direction, fast) => {
            if (!slide)
                return;
            gsap_1.gsap.fromTo(slide, { xPercent: 0 }, {
                xPercent: direction * -100,
                duration: fast ? 0 : 0.25,
                ease: Site_1.easing,
                onComplete: () => {
                    slide.style.display = 'none';
                },
            });
        };
        this.showSlide = (slide, direction, fast) => {
            gsap_1.gsap.fromTo(slide, { xPercent: direction * 100 }, {
                xPercent: 0,
                duration: fast ? 0.01 : 0.4,
                ease: Site_1.easing,
                onStart: () => {
                    slide.style.display = 'block';
                },
                onComplete: () => {
                    this.activeSlide = slide;
                    this.activeSlideIndex = [...this.slides].findIndex(el => el === slide);
                    this.updateArrows();
                },
            });
        };
        this.wrap = this.view.querySelector('.js-slider-wrap');
        this.slides = this.wrap.querySelectorAll('.js-slide');
        this.arrowPrev = this.view.querySelector('.js-slider-prev');
        this.arrowNext = this.view.querySelector('.js-slider-next');
        this.init();
        this.bind();
    }
    updateArrows() {
        this.arrowPrev.querySelector('.js-text').innerText = `0${this.activeSlideIndex}`;
        this.arrowNext.querySelector('.js-text').innerText = `0${this.activeSlideIndex + 2}`;
        switch (this.activeSlideIndex) {
            case 0:
                this.view.classList.add('is-first');
                this.view.classList.remove('is-last');
                break;
            case this.slides.length - 1:
                this.view.classList.remove('is-first');
                this.view.classList.add('is-last');
                break;
            default:
                this.view.classList.remove('is-first', 'is-last');
        }
    }
}
exports.LightboxSlider = LightboxSlider;

},{"../../Site":14,"../../components/Component":23,"gsap/dist/gsap":4}],28:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightboxTranscript = void 0;
const gsap_1 = __importDefault(require("gsap"));
const Component_1 = require("../../components/Component");
const Utils = __importStar(require("../../Utils"));
gsap_1.default.registerPlugin(ScrollToPlugin);
class LightboxTranscript extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.isMainLang = true;
        this.bind = () => {
            this.searchInput.addEventListener('input', e => this.onKeyUp(e));
            this.searchForm.addEventListener('submit', e => this.onSubmit(e));
            this.langButton && this.langButton.addEventListener('click', this.onLangButtonClick);
            this.transcriptNavNextButton && this.transcriptNavNextButton.addEventListener('click', () => this.goTo(1));
            this.transcriptNavPrevButton && this.transcriptNavPrevButton.addEventListener('click', () => this.goTo(-1));
            this.transcriptNavCloseButton && this.transcriptNavCloseButton.addEventListener('click', this.closeNav);
        };
        this.onKeyUp = (e) => {
            const inputValue = this.searchInput.value;
            this.updateInput(inputValue);
        };
        this.updateInput = (value) => {
            this.fakeSpan.innerText = value;
            const spanWidth = this.fakeSpan.scrollWidth;
            this.inputWrap.style.width = `${spanWidth}px`;
        };
        this.goTo = (dir) => {
            this.currentMarkIndex += dir;
            if (this.currentMarkIndex > this.foundElements.length)
                this.currentMarkIndex = 1;
            if (this.currentMarkIndex < 1)
                this.currentMarkIndex = this.foundElements.length;
            this.updateTranscriptNav();
        };
        this.closeNav = () => {
            this.transcriptNavigation.classList.remove('is-active');
            this.searchInput.value = '';
            this.updateInput('');
            this.clearMarkedElements();
        };
        this.onSubmit = (e) => {
            e.preventDefault();
            this.findWordInTranscript();
        };
        this.findWordInTranscript = () => {
            const inputValue = this.searchInput.value;
            const searchElements = this.activeLanguageWrap.querySelectorAll('.transcript__text');
            [...searchElements].forEach(elem => {
                elem.innerHTML = elem.innerHTML.replace(new RegExp(`${inputValue}(?!([^<]+)?<)`, 'gi'), '<mark>$&</mark>');
            });
            this.foundElements = this.activeLanguageWrap.querySelectorAll('mark');
            if (this.foundElements.length) {
                this.transcriptNavigation.classList.add('is-active');
                this.currentMarkIndex = 1;
                this.updateTranscriptNav();
            }
        };
        this.updateTranscriptNav = () => {
            this.transcriptNavigation.querySelector('.js-transcript-counters').innerHTML = `${this.currentMarkIndex}/${this.foundElements.length}`;
            const selectedMark = this.foundElements[this.currentMarkIndex - 1];
            gsap_1.default.to(this.transcriptScrollContainer, {
                scrollTo: {
                    y: selectedMark,
                    offsetY: this.searchForm.clientHeight,
                },
                duration: 0.01,
                ease: 'power3.inOut',
            });
        };
        this.onLangButtonClick = (e) => {
            const button = e.currentTarget;
            const oldSlug = button.getAttribute(`data-${!this.isMainLang ? 'alternate' : 'main'}-lang`);
            const newSlug = button.getAttribute(`data-${this.isMainLang ? 'alternate' : 'main'}-lang`);
            button.innerText = oldSlug;
            this.isMainLang = !this.isMainLang;
            this.activeLanguageWrap.classList.remove('is-active');
            const newActiveWrap = [...this.langWrappers].find(wrap => wrap.getAttribute('data-lang') === newSlug);
            newActiveWrap.classList.add('is-active');
            this.activeLanguageWrap = newActiveWrap;
        };
        this.clearMarkedElements = () => {
            if (!this.foundElements.length)
                return;
            [...this.foundElements].forEach(elem => {
                elem.replaceWith(Utils.removeTags(elem.innerHTML));
            });
            this.foundElements = null;
        };
        this.searchForm = this.view.querySelector('.js-transcript-search');
        this.inputWrap = this.view.querySelector('.js-transcript-input-wrap');
        this.searchInput = this.searchForm.querySelector('input');
        this.fakeSpan = this.view.querySelector('.js-transcript-span');
        this.langButton = this.view.querySelector('.js-transcript-switch');
        this.langWrappers = this.view.querySelectorAll('.js-transcript-lang');
        this.activeLanguageWrap = this.view.querySelector('.js-transcript-lang.is-active');
        this.transcriptNavigation = this.view.querySelector('.js-transcript-nav');
        this.transcriptNavNextButton = this.view.querySelector('.js-transcript-next');
        this.transcriptNavPrevButton = this.view.querySelector('.js-transcript-prev');
        this.transcriptNavCloseButton = this.view.querySelector('.js-transcript-close');
        this.transcriptScrollContainer = this.view.querySelector('.js-scrolled');
        this.bind();
    }
}
exports.LightboxTranscript = LightboxTranscript;

},{"../../Utils":15,"../../components/Component":23,"gsap":4}],29:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Load = void 0;
const gsap_1 = __importDefault(require("gsap"));
const ScrollTrigger_1 = require("gsap/dist/ScrollTrigger");
const Scroll_1 = __importDefault(require("../Scroll"));
const Utils = __importStar(require("../Utils"));
const Component_1 = require("./Component");
const PushStates_1 = require("../PushStates");
class Load extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.isPending = false;
        this.isFinished = false;
        this.showContent = () => {
            this.isContentHidden = false;
            gsap_1.default.fromTo(this.contentElement, { opacity: 0 }, {
                opacity: 1,
                duration: 0.45,
                ease: 'sine',
            });
        };
        this.onViewBtnClick = (e) => {
            const { currentTarget: button } = e;
            const { view } = button.dataset;
            this.hideContent().then(() => {
                this.contentElement.classList.remove('is-list-view', 'is-grid-view');
                this.contentElement.classList.add(`is-${view}-view`);
            }).then(this.showContent);
        };
        this.onSubmit = (e) => {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }
            let loadPath = this.view.getAttribute('action') || this.view.dataset.api || window.location.pathname;
            let extraForms = this.settings.extra ? [...document.querySelectorAll(this.settings.extra)] : null;
            const extraFormsMobile = this.settings.extraMobile
                ? [...document.querySelectorAll(this.settings.extraMobile)]
                : null;
            if (extraFormsMobile && window.matchMedia('(orientation: portrait) and (max-width: 659px)').matches) {
                extraForms = extraFormsMobile;
            }
            const formData = Utils.getQueryString([...extraForms, this.view]);
            if (formData) {
                loadPath += `?${formData}`;
            }
            Promise.all([this.hideContent(), this.load(loadPath)]).then(() => {
                this.showContent();
            });
        };
        this.updateFiltered = () => {
            if (!this.filteredEl)
                return;
            const selectedInputs = [...this.view.querySelectorAll('input')].filter(input => input.checked);
            const filteredItems = selectedInputs.map(input => `
            <li class="filtered__label">
                <label for="${input.id}">${input.dataset.name}<i class="icon-close"></i></label>
            </li>`);
            this.filteredEl.innerHTML = filteredItems.join('');
            this.bindFiltered();
        };
        this.bindFiltered = () => {
            if (this.settings.live)
                return;
            [...this.filteredEl.querySelectorAll('label')].forEach(label => label.addEventListener('click', () => {
                setTimeout(() => this.view.dispatchEvent(new Event('submit')), 10);
            }));
        };
        this.scrollToContainer = () => {
            const elem = document.querySelector(this.settings.scrollTo);
            if (!elem) {
                console.error(`element ${this.settings.scrollTo} doesn't exist!`);
                return;
            }
            Scroll_1.default.scrollTo({
                el: elem,
                duration: 1,
            });
        };
        this.onReset = (e) => {
            e.preventDefault();
            [...this.view.querySelectorAll('input')].forEach(input => {
                input.checked = false;
            });
        };
        this.settings = {
            contentSelector: '.js-load-content',
            live: false,
        };
        this.settings = Object.assign(this.settings, JSON.parse(this.view.getAttribute('data-options')));
        this.isContentHidden = false;
        this.contentElement = document.querySelector(this.settings.contentSelector);
        this.viewsButtons = this.view.querySelectorAll('[data-view]');
        this.resetButton = this.view.querySelector('.js-reset');
        if (this.settings.total)
            this.totalElement = this.view.querySelector(this.settings.total);
        if (this.settings.filtered)
            this.filteredEl = document.querySelector(this.settings.filtered);
        this.updateFiltered();
        this.bind();
    }
    destroy() {
        super.destroy();
    }
    bind() {
        this.view.addEventListener('submit', this.onSubmit);
        if (this.settings.live) {
            [...this.view.querySelectorAll('input, select')].forEach(el => {
                el.addEventListener('change', () => {
                    window.clearTimeout(this.liveTimeout);
                    this.liveTimeout = setTimeout(() => this.view.dispatchEvent(new Event('submit')), 10);
                });
            });
        }
        [...this.viewsButtons].forEach(btn => btn.addEventListener('click', this.onViewBtnClick));
        this.resetButton && this.resetButton.addEventListener('click', this.onReset);
    }
    hideContent() {
        return new Promise(resolve => {
            if (!this.isContentHidden) {
                gsap_1.default.to(this.contentElement, {
                    opacity: 0,
                    duration: 0.25,
                    ease: 'sine',
                    onComplete: () => {
                        this.isContentHidden = true;
                        resolve();
                    },
                });
            }
            else {
                resolve();
            }
        });
    }
    load(url) {
        if (!!this.isPending || !!this.isFinished) {
            return;
        }
        window.clearTimeout(this.liveTimeout);
        this.isPending = true;
        this.view.classList.add('is-pending');
        PushStates_1.PushStates.changePath(url, true);
        ScrollTrigger_1.ScrollTrigger.refresh();
        if (this.settings.filtered)
            this.updateFiltered();
        if (this.settings.scrollTo)
            this.scrollToContainer();
        return fetch(url, {
            method: 'GET',
            headers: { 'Content-Type': 'text/html' },
        })
            .then(response => response.text())
            .then(response => {
            const selector = this.settings.contentSelector;
            const newDiv = document.createElement('div');
            newDiv.innerHTML = response;
            const elLoadedContent = newDiv.querySelector(selector).innerHTML;
            this.contentElement.innerHTML = elLoadedContent;
            if (this.settings.total) {
                const total = newDiv.querySelector(this.settings.total).innerHTML;
                this.totalElement.innerHTML = total;
            }
            this.trigger(Component_1.ComponentEvents.CHANGE, this.contentElement);
        })
            .catch(error => {
            console.warn(`error: ${error}`, error);
        })
            .finally(() => {
            this.view.classList.remove('is-pending');
            ScrollTrigger_1.ScrollTrigger.refresh();
            PushStates_1.PushStates.bind(this.contentElement);
            setTimeout(() => {
                this.isPending = false;
            }, 250);
        });
    }
}
exports.Load = Load;

},{"../PushStates":11,"../Scroll":12,"../Utils":15,"./Component":23,"gsap":4,"gsap/dist/ScrollTrigger":3}],30:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Component_1 = require("./Component");
const Scroll_1 = __importDefault(require("../Scroll"));
class Modal extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.isOpen = false;
        this.createTimeline = () => {
            const wrapper = this.view.querySelector('.js-modal-wrap');
            const bar = this.view.querySelector('.js-modal-wrap-bar');
            if (!wrapper)
                return;
            this.tl = gsap_1.gsap.timeline({
                ease: 'none',
                scrollTrigger: {
                    trigger: wrapper,
                    scroller: this.view,
                    invalidateOnRefresh: true,
                    start: () => { var _a; return `top ${(_a = bar === null || bar === void 0 ? void 0 : bar.offsetHeight) !== null && _a !== void 0 ? _a : 0}px`; },
                    onToggle: self => this.view.classList.toggle('is-scrolled', self.isActive),
                },
            });
        };
        this.cleanupTimeline = () => {
            this.tl.kill();
            this.view.classList.remove('is-scrolled');
        };
        this.onTriggerClick = () => {
            this.isOpen ? this.close() : this.open();
        };
        this.close = () => {
            this.view.classList.remove('is-open');
            document.body.classList.remove('has-open-modal');
            this.isOpen = false;
            this.cleanupTimeline();
        };
        this.open = () => {
            this.view.classList.add('is-open');
            document.body.classList.add('has-open-modal');
            this.isOpen = true;
            this.createTimeline();
            Scroll_1.default.scrollTo({
                el: this.view,
                duration: window.matchMedia('(orientation: landscape)').matches ? 0.75 : 0,
                ease: 'sine.out',
                offsetY: window.matchMedia('(orientation: landscape)').matches ? this.view.parentElement.clientHeight : -1,
            });
        };
        this.triggerBtn = document.querySelector(`[aria-controls="${this.view.id}"]`);
        this.closerBtn = this.view.querySelector('.js-modal-close');
        this.form = this.view.querySelector('form');
        this.bind();
    }
    bind() {
        this.triggerBtn && this.triggerBtn.addEventListener('click', this.onTriggerClick);
        this.form && this.form.addEventListener('submit', this.close);
        this.closerBtn && this.closerBtn.addEventListener('click', this.close);
    }
}
exports.Modal = Modal;

},{"../Scroll":12,"./Component":23,"gsap/dist/gsap":4}],31:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.More = void 0;
const gsap_1 = __importDefault(require("gsap"));
const ScrollTrigger_1 = require("gsap/dist/ScrollTrigger");
const Component_1 = require("../components/Component");
const Site_1 = require("../Site");
const PushStates_1 = require("../PushStates");
const All_1 = __importDefault(require("../widgets/All"));
class More extends Component_1.Component {
    constructor(view) {
        super(view);
        this.view = view;
        this.onClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.load();
        };
        this.linkEl = (this.view.nodeName === 'A') ? this.view : this.view.querySelector('a');
        this.settings = Object.assign({ itemSelector: 'li', infinite: false, updateURL: false }, JSON.parse(this.view.dataset.options));
        this.contentEl = document.querySelector(this.settings.contentSelector);
        console.assert(!!this.contentEl, 'There is no wrap element to load more content!', true);
        if (!this.contentEl) {
            this.view.style.display = 'none';
            return;
        }
        this.linkEl.addEventListener('click', this.onClick);
        if (this.settings.infinite) {
            this.scrollTrigger = ScrollTrigger_1.ScrollTrigger.create({
                trigger: this.view,
                start: 'bottom bottom',
                onEnter: () => this.load(),
            });
        }
    }
    destroy() {
        var _a;
        (_a = this.scrollTrigger) === null || _a === void 0 ? void 0 : _a.kill();
        super.destroy();
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pending)
                return;
            const url = this.linkEl.href;
            const tie = url.indexOf('?') < 0 ? '?' : '&';
            const params = new URLSearchParams({ partial: 'true' });
            this.pending = true;
            this.view.classList.add('is-doing-request');
            this.settings.updateURL && PushStates_1.PushStates.changePath(url);
            fetch(url + tie + params, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'text/html',
                },
            })
                .then(response => response.text())
                .then(response => {
                var _a, _b;
                const selector = this.settings.contentSelector;
                const existingItems = this.contentEl.querySelectorAll(this.settings.itemSelector);
                [...existingItems].map(i => i.classList.add('is-existing'));
                const height = this.contentEl.clientHeight;
                const newDiv = document.createElement('div');
                newDiv.innerHTML = response;
                const elLoadedContent = newDiv.querySelector(selector).innerHTML;
                this.contentEl.insertAdjacentHTML('beforeend', elLoadedContent);
                const id = this.view.getAttribute('id');
                const newButton = newDiv.querySelector(id ? `#${id}` : '[data-component="More"] a');
                const newURL = newButton === null || newButton === void 0 ? void 0 : newButton.getAttribute('href');
                if (newButton && newURL !== '') {
                    this.linkEl.setAttribute('href', newURL);
                    (_a = this.scrollTrigger) === null || _a === void 0 ? void 0 : _a.refresh();
                }
                else {
                    this.view.parentElement.remove();
                    (_b = this.scrollTrigger) === null || _b === void 0 ? void 0 : _b.kill();
                }
                this.trigger(Component_1.ComponentEvents.CHANGE, this.contentEl);
                const items = this.contentEl.querySelectorAll(`${this.settings.itemSelector}:not(.is-existing)`);
                const tl = gsap_1.default.timeline();
                [...items].forEach((item, index) => {
                    tl.from(item, { opacity: 0, duration: 0.5, y: 50, ease: Site_1.easing }, index * 0.1);
                });
                gsap_1.default.fromTo(this.contentEl, { height }, {
                    height: 'auto',
                    duration: 0.4,
                    ease: Site_1.easing,
                });
            })
                .catch(error => {
                console.warn(`error: ${error}`, error);
            })
                .finally(() => {
                this.view.classList.remove('is-doing-request');
                All_1.default.bind();
                setTimeout(() => {
                    this.pending = false;
                }, 250);
            });
        });
    }
}
exports.More = More;

},{"../PushStates":11,"../Site":14,"../components/Component":23,"../widgets/All":48,"gsap":4,"gsap/dist/ScrollTrigger":3}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerTime = void 0;
const Player_utils_1 = require("./Player.utils");
class PlayerTime {
    constructor(playerEl) {
        this.currentTimeEl = playerEl.querySelector('.js-player-time');
        this.durationTimeEl = playerEl.querySelector('.js-player-duration');
    }
    destroy() {
        this.currentTimeEl = null;
        this.durationTimeEl = null;
    }
    update(metadata, isLong) {
        if (this.durationTimeEl) {
            this.durationTimeEl.innerText = (0, Player_utils_1.parseToTime)(metadata.duration, isLong);
        }
        if (this.currentTimeEl && typeof metadata.current === 'number') {
            this.currentTimeEl.innerText = (0, Player_utils_1.parseToTime)(metadata.current || 0, isLong);
        }
    }
}
exports.PlayerTime = PlayerTime;

},{"./Player.utils":35}],33:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const ScrollTrigger_1 = require("gsap/dist/ScrollTrigger");
const Component_1 = require("../Component");
const Utils = __importStar(require("../../Utils"));
const Player_types_1 = require("./Player.types");
const PlayerTimeline_1 = require("./PlayerTimeline");
const PlayerPopups_1 = require("./PlayerPopups");
const Player_Time_1 = require("./Player.Time");
const PlayerPoster_1 = require("./PlayerPoster");
const PlayerVolume_1 = require("./PlayerVolume");
const PlayerFullscreen_1 = require("./PlayerFullscreen");
const Video_types_1 = require("./Video.types");
const PlayerSettings_1 = require("./PlayerSettings");
const Templates_1 = require("../../templates/Templates");
const PushStates_1 = require("../../PushStates");
class Player extends Component_1.Component {
    static pauseAll(omitUID) {
        for (const uid in Player.instances) {
            if (typeof omitUID === 'undefined' || omitUID !== uid) {
                Player.instances[uid].pause();
            }
        }
    }
    static pauseAllIn(el) {
        for (const uid in Player.instances) {
            const item = Player.instances[uid];
            if (el.contains(item.view)) {
                item.pause();
            }
        }
    }
    constructor(view, options) {
        super(view);
        this.view = view;
        this.userPaused = false;
        this.isReady = false;
        this.wasPaused = false;
        this.resize = () => { };
        this.onToggleClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.toggle();
        };
        this.onDoubleClick = (e) => {
            var _a, _b;
            e.preventDefault();
            e.stopPropagation();
            (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.fullscreen) === null || _b === void 0 ? void 0 : _b.toggle();
        };
        this.onKeyDown = e => {
            var _a, _b, _c, _d;
            if (document.querySelector('#transcript-search') === document.activeElement) {
                return;
            }
            switch (e.key) {
                case ' ':
                case 'k':
                    e.preventDefault();
                    e.stopPropagation();
                    this.toggle();
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    e.stopPropagation();
                    this.skipForward();
                    break;
                case 'l':
                    e.preventDefault();
                    e.stopPropagation();
                    this.skipForward(true);
                    break;
                case 'ArrowLeft':
                    e.preventDefault();
                    e.stopPropagation();
                    this.skipBackward();
                    break;
                case 'j':
                    e.preventDefault();
                    e.stopPropagation();
                    this.skipBackward(true);
                    break;
                case 'm':
                    e.preventDefault();
                    e.stopPropagation();
                    this.toggleMute();
                    break;
                case '>':
                    e.preventDefault();
                    e.stopPropagation();
                    this.speedUp();
                    break;
                case '<':
                    e.preventDefault();
                    e.stopPropagation();
                    this.speedDown();
                    break;
                case 'Home':
                case '0':
                    e.preventDefault();
                    e.stopPropagation();
                    this.restart();
                    break;
                case 'End':
                    e.preventDefault();
                    e.stopPropagation();
                    this.end();
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    e.stopPropagation();
                    this.volumeUp();
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    e.stopPropagation();
                    this.volumeDown();
                    break;
                case 'f':
                    e.preventDefault();
                    e.stopPropagation();
                    (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.fullscreen) === null || _b === void 0 ? void 0 : _b.toggle();
                    break;
                case 'c':
                    e.preventDefault();
                    e.stopPropagation();
                    (_d = (_c = this.ui) === null || _c === void 0 ? void 0 : _c.captions) === null || _d === void 0 ? void 0 : _d.toggle();
                    break;
                default:
                    break;
            }
        };
        this.onFullscreenEnter = () => {
            var _a, _b;
            (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.captions) === null || _b === void 0 ? void 0 : _b.showNative();
        };
        this.onFullscreenExit = () => {
            var _a, _b;
            (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.captions) === null || _b === void 0 ? void 0 : _b.hideNative();
        };
        this.settings = Object.assign(Object.assign({ autoplay: false, loop: false, muted: false, controls: false, volume: 1, width: 480, height: 270, size: Player_types_1.PlayerSize.AUTO, readyTime: 0.001, hotkeys: false, pauseOnScroll: false }, JSON.parse(view.dataset.options || '{}')), options);
        this.uid = Utils.generateUID();
        this.setup();
        this.resize();
        if (typeof Player.instances === 'undefined') {
            Player.instances = {};
        }
        Player.instances[this.uid] = this;
        this.view.classList.add('is-initialized');
    }
    hide() { this.view.style.display = 'none'; }
    show() { this.view.style.display = 'block'; }
    setVolume(volume) {
        this.ui.volume.update(volume);
        this.ui.volume.toggle(volume < 0.05);
        Utils.setStorageItem(Video_types_1.PlayerStorage.VOLUME, `${volume}`);
    }
    setSpeed(speed) {
        var _a;
        (_a = this.ui.settings) === null || _a === void 0 ? void 0 : _a.updateSpeed(speed);
        Utils.setStorageItem(Video_types_1.PlayerStorage.SPEED, `${speed}`);
    }
    destroy() {
        var _a, _b, _c, _d;
        delete Player.instances[this.uid];
        if (this.ui) {
            (_a = this.ui.time) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this.ui.timeline) === null || _b === void 0 ? void 0 : _b.destroy();
            (_c = this.ui.volume) === null || _c === void 0 ? void 0 : _c.destroy();
            this.ui.popups.destroy();
            (_d = this.ui.settings) === null || _d === void 0 ? void 0 : _d.destroy();
            this.ui.time = null;
            this.ui.timeline = null;
            this.ui.volume = null;
            this.ui.playPauseBtn = null;
            this.ui.bottomPanel = null;
            this.ui.toggleBtn = null;
        }
        this.unbind();
        this.unload();
        this.view.classList.remove('is-initialized');
        super.destroy();
    }
    buildUI() {
        var _a;
        const template = Templates_1.Templates.get(Templates_1.TemplateNames.PLAYER);
        const html = template.render({});
        this.view.insertAdjacentHTML('beforeend', html);
        this.ui = {
            fullscreen: new PlayerFullscreen_1.PlayerFullscreen(this.view.querySelector('.js-player-fullscreen'), this.view),
            timeline: new PlayerTimeline_1.PlayerTimeline(this.view.querySelector('.js-player-timeline'), this.view),
            popups: new PlayerPopups_1.PlayerPopups(this.view.querySelector('.js-player-popups')),
            volume: new PlayerVolume_1.PlayerVolume(this.view.querySelector('.js-player-volume'), this.view),
            time: new Player_Time_1.PlayerTime(this.view),
            poster: new PlayerPoster_1.PlayerPoster(this.view.querySelector('.js-player-poster'), this.view),
            bottomPanel: this.view.querySelector('.js-player-bottom'),
            playPauseBtn: this.view.querySelector('.js-player-playpause'),
            toggleBtn: this.view.querySelector('.js-player-toggle'),
            playerBar: this.view.querySelector('.js-player-bar'),
            rewindBtn: this.view.querySelector('.js-player-rewind'),
            forwardBtn: this.view.querySelector('.js-player-forward'),
        };
        this.view.classList.toggle('has-autoplay', this.settings.autoplay);
        this.view.classList.toggle('has-autoplay', this.settings.autoplay);
        this.view.classList.add('has-controls');
        this.settings.muted && ((_a = this.ui.volume) === null || _a === void 0 ? void 0 : _a.toggle(true));
        this.ui.poster.load(this.settings);
        PushStates_1.PushStates.bind(this.view);
    }
    bind() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        (_a = this.ui.timeline) === null || _a === void 0 ? void 0 : _a.on(PlayerTimeline_1.PlayerTimelineEvents.SEEK, (position) => this.seek(position));
        (_b = this.ui.volume) === null || _b === void 0 ? void 0 : _b.on(PlayerVolume_1.PlayerVolumeEvents.CHANGE, (volume) => this.setVolume(volume));
        (_c = this.ui.volume) === null || _c === void 0 ? void 0 : _c.on(PlayerVolume_1.PlayerVolumeEvents.MUTE, () => this.toggleMute(true));
        (_d = this.ui.volume) === null || _d === void 0 ? void 0 : _d.on(PlayerVolume_1.PlayerVolumeEvents.UNMUTE, () => this.toggleMute(false));
        (_e = this.ui.settings) === null || _e === void 0 ? void 0 : _e.on(PlayerSettings_1.PlayerSettingsEvents.SPEED, speed => this.setSpeed(speed));
        (_f = this.ui.playPauseBtn) === null || _f === void 0 ? void 0 : _f.addEventListener('click', this.onToggleClick);
        (_g = this.ui.toggleBtn) === null || _g === void 0 ? void 0 : _g.addEventListener('click', this.onToggleClick);
        (_h = this.ui.toggleBtn) === null || _h === void 0 ? void 0 : _h.addEventListener('dblclick', this.onDoubleClick);
        (_j = this.ui.rewindBtn) === null || _j === void 0 ? void 0 : _j.addEventListener('click', () => this.goRewind());
        (_k = this.ui.forwardBtn) === null || _k === void 0 ? void 0 : _k.addEventListener('click', () => this.goForward());
        !!this.settings.hotkeys && document.addEventListener('keydown', this.onKeyDown);
        (_l = this.ui.fullscreen) === null || _l === void 0 ? void 0 : _l.on(PlayerFullscreen_1.PlayerFullscreenEvents.ENTER, this.onFullscreenEnter);
        (_m = this.ui.fullscreen) === null || _m === void 0 ? void 0 : _m.on(PlayerFullscreen_1.PlayerFullscreenEvents.EXIT, this.onFullscreenExit);
        this.settings.pauseOnScroll && this.pauseOnScroll();
        window.addEventListener('beforeunload', () => this.onBeforeunload());
        window.addEventListener('pagehide', () => this.onBeforeunload());
        this.bindPlayer();
    }
    unbind() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.timeline) === null || _b === void 0 ? void 0 : _b.off();
        (_d = (_c = this.ui) === null || _c === void 0 ? void 0 : _c.volume) === null || _d === void 0 ? void 0 : _d.off();
        (_f = (_e = this.ui) === null || _e === void 0 ? void 0 : _e.playPauseBtn) === null || _f === void 0 ? void 0 : _f.removeEventListener('click', this.onToggleClick);
        (_h = (_g = this.ui) === null || _g === void 0 ? void 0 : _g.toggleBtn) === null || _h === void 0 ? void 0 : _h.removeEventListener('click', this.onToggleClick);
        (_k = (_j = this.ui) === null || _j === void 0 ? void 0 : _j.toggleBtn) === null || _k === void 0 ? void 0 : _k.removeEventListener('dblclick', this.onDoubleClick);
        !!this.settings.hotkeys && document.removeEventListener('keydown', this.onKeyDown);
        (_l = this.ui.fullscreen) === null || _l === void 0 ? void 0 : _l.off();
        (_m = this.st) === null || _m === void 0 ? void 0 : _m.kill();
        window.removeEventListener('beforeunload', () => this.onBeforeunload());
        window.removeEventListener('pagehide', () => this.onBeforeunload());
        this.unbindPlayer();
    }
    onCanplay() {
        this.view.classList.add('is-canplay');
        this.view.classList.remove('is-error');
    }
    onPlay() {
        this.view.classList.add('is-played');
        this.view.classList.remove('is-ended', 'is-error', 'is-share-open');
        Player.pauseAll(this.uid);
        this.updateMediaSession();
    }
    onPlaying() {
        this.view.classList.add('is-playing');
        this.view.classList.remove('is-loading', 'is-error');
        this.trigger(Player_types_1.PlayerEvents.PLAY);
        navigator.mediaSession.playbackState = 'playing';
    }
    onPause() {
        this.view.classList.remove('is-playing', 'is-share-open');
        this.trigger(Player_types_1.PlayerEvents.PAUSE);
        navigator.mediaSession.playbackState = 'paused';
    }
    onWaiting() {
        this.view.classList.remove('is-playing');
        this.view.classList.add('is-loading');
    }
    onEnd() {
        this.view.classList.remove('is-playing', 'is-played', 'is-started', 'is-loading');
        this.view.classList.add('is-ended');
        if (!this.settings.autoplay) {
            this.trigger(Player_types_1.PlayerEvents.END);
        }
    }
    onBeforeunload() { }
    pauseOnScroll() {
        this.st = ScrollTrigger_1.ScrollTrigger.create({
            trigger: this.view,
            onToggle: self => {
                var _a;
                !self.isActive && !((_a = this.ui.fullscreen) === null || _a === void 0 ? void 0 : _a.isFullscreen()) && this.pause();
            },
        });
    }
    updateMediaSession() {
        if ('mediaSession' in navigator && this.settings.metadata) {
            navigator.mediaSession.metadata = new MediaMetadata(Object.assign({}, this.settings.metadata));
            navigator.mediaSession.setActionHandler('play', () => this.play());
            navigator.mediaSession.setActionHandler('pause', () => this.pause());
            navigator.mediaSession.setActionHandler('seekbackward', () => this.skipBackward(true));
            navigator.mediaSession.setActionHandler('seekforward', () => this.skipForward(true));
            navigator.mediaSession.setActionHandler('seekto', () => { });
        }
    }
}
exports.Player = Player;
Player.instances = {};

},{"../../PushStates":11,"../../Utils":15,"../../templates/Templates":46,"../Component":23,"./Player.Time":32,"./Player.types":34,"./PlayerFullscreen":36,"./PlayerPopups":37,"./PlayerPoster":38,"./PlayerSettings":39,"./PlayerTimeline":40,"./PlayerVolume":41,"./Video.types":43,"gsap/dist/ScrollTrigger":3}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerSize = exports.PlayerEvents = void 0;
class PlayerEvents {
}
exports.PlayerEvents = PlayerEvents;
PlayerEvents.END = 'end';
PlayerEvents.NEXT = 'next';
PlayerEvents.PREV = 'prev';
PlayerEvents.TIME_UPDATE = 'timeUpdate';
PlayerEvents.PLAY = 'play';
PlayerEvents.PAUSE = 'pause';
class PlayerSize {
}
exports.PlayerSize = PlayerSize;
PlayerSize.COVER = 'cover';
PlayerSize.CONTAIN = 'contain';
PlayerSize.AUTO = 'auto';

},{}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseToTime = exports.decodeURL = void 0;
function decodeURL(src) {
    const decode = (s) => {
        try {
            const d = window.atob(s);
            return /^wq|x@$/g.test(d) ? d.replace(/^wq|x@$/g, '') : s;
        }
        catch (e) {
            return s;
        }
    };
    return /\.mp4$/.test(src) ? src : decode(src);
}
exports.decodeURL = decodeURL;
function parseToTime(totalSeconds, isLong) {
    const totalSec = parseInt(`${totalSeconds}`, 10);
    const hours = parseInt(`${totalSec / 3600}`, 10) % 24;
    const minutes = parseInt(`${totalSec / 60}`, 10) % 60;
    const seconds = totalSec % 60;
    return `${(hours < 10 ? `0${hours}` : hours)}:${(minutes < 10 ? `0${minutes}` : minutes)}:${seconds < 10 ? `0${seconds}` : seconds}`;
}
exports.parseToTime = parseToTime;

},{}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerFullscreen = exports.htmlDocument = exports.PlayerFullscreenEvents = void 0;
const Handler_1 = require("../../Handler");
const Site_1 = require("../../Site");
class PlayerFullscreenEvents {
}
exports.PlayerFullscreenEvents = PlayerFullscreenEvents;
PlayerFullscreenEvents.EXIT = 'exit';
PlayerFullscreenEvents.ENTER = 'enter';
exports.htmlDocument = document;
class PlayerFullscreen extends Handler_1.Handler {
    static getFullscreenElement() {
        return exports.htmlDocument.fullscreenElement || exports.htmlDocument.mozFullScreenElement || exports.htmlDocument.webkitFullscreenElement || exports.htmlDocument.msFullscreenElement;
    }
    constructor(btnEl, playerEl) {
        super();
        this.btnEl = btnEl;
        this.playerEl = playerEl;
        this.onBtnClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (PlayerFullscreen.getFullscreenElement()) {
                this.exitFullscreen();
            }
            else if (Site_1.browser.mobile || Site_1.browser.ios) {
                const mediaElement = this.playerEl.querySelector('video.is-current');
                this.trigger(PlayerFullscreenEvents.ENTER);
                (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitEnterFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitEnterFullscreen());
                (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.enterFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.enterFullscreen());
                this.playerEl.classList.add('is-fullscreen');
            }
            else {
                this.goFullscreen(this.playerEl);
            }
        };
        this.onFullscreenChange = () => {
            if (PlayerFullscreen.getFullscreenElement()) {
                return;
            }
            this.playerEl.classList.remove('is-fullscreen');
            this.trigger(PlayerFullscreenEvents.EXIT);
        };
        this.onVideoFullscreenExit = () => {
            this.playerEl.classList.remove('is-fullscreen');
            this.trigger(PlayerFullscreenEvents.EXIT);
        };
        this.onOrientationChange = e => {
            if (Site_1.browser.mobile) {
                const mediaElement = this.playerEl.querySelector('video.is-current');
                if (e.matches) {
                    this.playerEl.classList.add('is-fullscreen');
                    this.trigger(PlayerFullscreenEvents.ENTER);
                    (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitEnterFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitEnterFullscreen());
                    (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.enterFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.enterFullscreen());
                }
                else {
                    (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitExitFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.webkitExitFullscreen());
                    (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.exitFullscreen) && (mediaElement === null || mediaElement === void 0 ? void 0 : mediaElement.exitFullscreen());
                }
            }
        };
        this.btnEl = btnEl;
        this.playerEl = playerEl;
        this.bind();
    }
    destroy() {
        this.unbind();
    }
    isFullscreen() {
        return PlayerFullscreen.getFullscreenElement();
    }
    toggle() {
        if (this.isFullscreen()) {
            this.exitFullscreen();
        }
        else {
            this.goFullscreen(this.playerEl);
        }
    }
    exitFullscreen() {
        if (exports.htmlDocument.exitFullscreen) {
            exports.htmlDocument.exitFullscreen();
        }
        else if (exports.htmlDocument.mozCancelFullScreen) {
            exports.htmlDocument.mozCancelFullScreen();
        }
        else if (exports.htmlDocument.webkitExitFullscreen) {
            exports.htmlDocument.webkitExitFullscreen();
        }
    }
    goFullscreen(element) {
        let promise;
        if (element.requestFullscreen) {
            promise = element.requestFullscreen();
        }
        else if (element.mozRequestFullScreen) {
            promise = element.mozRequestFullScreen();
        }
        else if (element.webkitRequestFullscreen) {
            promise = element.webkitRequestFullscreen();
        }
        else if (element.msRequestFullscreen) {
            promise = element.msRequestFullscreen();
        }
        promise.then(() => {
            this.playerEl.classList.add('is-fullscreen');
        }).catch(err => {
            console.error(`Error attempting to enable fullscreen mode: ${err.message} (${err.name})`);
        });
    }
    bind() {
        var _a;
        (_a = this.btnEl) === null || _a === void 0 ? void 0 : _a.addEventListener('click', this.onBtnClick);
        document.addEventListener('fullscreenchange', this.onFullscreenChange);
        const mm = window.matchMedia('(orientation: landscape) and (max-height: 1023px)');
        mm.addEventListener('change', this.onOrientationChange);
        [...this.playerEl.querySelectorAll('video')].forEach(video => {
            video.addEventListener('webkitendfullscreen', this.onVideoFullscreenExit, false);
        });
    }
    unbind() {
        var _a;
        (_a = this.btnEl) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this.onBtnClick);
        document.removeEventListener('fullscreenchange', this.onFullscreenChange);
    }
}
exports.PlayerFullscreen = PlayerFullscreen;

},{"../../Handler":9,"../../Site":14}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerPopups = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Handler_1 = require("../../Handler");
const Site_1 = require("../../Site");
class PlayerPopups extends Handler_1.Handler {
    constructor(view) {
        super();
        this.view = view;
        this.view = view;
        this.popups = view ? [...this.view.children] : null;
    }
    loadData({ related }) {
        this.related = related;
    }
    check(current) {
        var _a;
        if (!current) {
            return;
        }
        (_a = this.related) === null || _a === void 0 ? void 0 : _a.forEach((element, key) => {
            if (!element.timeStart) {
                return;
            }
            if (current < element.timeStart || current > element.timeStart + PlayerPopups.DURATION) {
                if (element.shown) {
                    element.shown = false;
                    this.hidePopup(this.popups[key]);
                }
                return;
            }
            if (element.shown) {
                return;
            }
            this.popups[key].style.display = 'block';
            element.shown = true;
            this.showPopup(this.popups[key]);
        });
    }
    showPopup(popupEl) {
        gsap_1.gsap.fromTo(popupEl, {
            y: -20,
            opacity: 0,
            scale: 0.9,
            transformOrigin: 'bottom',
        }, {
            y: 0,
            scale: 1,
            opacity: 1,
            duration: 0.7,
            delay: 0.15,
            pointerEvents: 'all',
            ease: Site_1.easing,
        });
    }
    hidePopup(popupEl) {
        gsap_1.gsap.to(popupEl, {
            y: 20,
            opacity: 0,
            height: 0,
            duration: 0.7,
            scale: 0.9,
            pointerEvents: 'none',
            ease: Site_1.easing,
            clearProps: 'height,scale',
            onComplete: () => {
                popupEl.style.display = 'none';
            },
        });
    }
}
exports.PlayerPopups = PlayerPopups;
PlayerPopups.DURATION = 3;

},{"../../Handler":9,"../../Site":14,"gsap/dist/gsap":4}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerPoster = void 0;
const Site_1 = require("../../Site");
class PlayerPoster {
    constructor(view, playerEl) {
        this.view = view;
        this.playerEl = playerEl;
        this.view = view;
        this.playerEl = playerEl;
    }
    load(data) {
        if (data.poster) {
            const poster = !!Site_1.browser.mobile
                && data.posterMobile
                && data.posterMobile !== ''
                ? data.posterMobile
                : data.poster;
            this.view.style.backgroundImage = `url(${poster})`;
        }
        this.playerEl.classList.toggle('has-poster', !!data.poster);
    }
}
exports.PlayerPoster = PlayerPoster;

},{"../../Site":14}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerSettings = exports.PlayerSettingsEvents = void 0;
const Handler_1 = require("../../Handler");
class PlayerSettingsEvents {
}
exports.PlayerSettingsEvents = PlayerSettingsEvents;
PlayerSettingsEvents.SPEED = 'speed';
class PlayerSettings extends Handler_1.Handler {
    static constrainSpeed(speed) {
        return Math.max(PlayerSettings.MIN_SPEED, Math.min(PlayerSettings.MAX_SPEED, speed));
    }
    constructor(view, playerEl) {
        super();
        this.view = view;
        this.playerEl = playerEl;
        this.isInitialSetup = true;
        this.onSpeedBtnClick = (e) => {
            this.trigger(PlayerSettingsEvents.SPEED, parseFloat(e.currentTarget.dataset.playbackRate));
        };
        this.view = view;
        this.playerEl = playerEl;
        this.listButtons = [...view.querySelectorAll('[data-playback-rate]')];
        this.bind();
    }
    destroy() {
        this.unbind();
        this.view = null;
        this.playerEl = null;
        this.listButtons = null;
    }
    updateSpeed(speed) {
        if (!this.isInitialSetup) {
            this.view.classList.add('is-updating');
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));
        }
        this.isInitialSetup = false;
        this.listButtons.forEach(btn => {
            btn.parentElement.classList.toggle('is-active', parseFloat(btn.dataset.playbackRate) === speed);
        });
    }
    bind() {
        this.listButtons.forEach(btn => btn.addEventListener('click', this.onSpeedBtnClick));
    }
    unbind() {
        this.listButtons.forEach(btn => btn.removeEventListener('click', this.onSpeedBtnClick));
    }
}
exports.PlayerSettings = PlayerSettings;
PlayerSettings.MAX_SPEED = 2;
PlayerSettings.MIN_SPEED = 0.25;
PlayerSettings.SPEED_STEP = 0.25;

},{"../../Handler":9}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerTimeline = exports.PlayerTimelineEvents = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Handler_1 = require("../../Handler");
const Site_1 = require("../../Site");
class PlayerTimelineEvents {
}
exports.PlayerTimelineEvents = PlayerTimelineEvents;
PlayerTimelineEvents.SEEK = 'seek';
class PlayerTimeline extends Handler_1.Handler {
    constructor(view, playerEl) {
        super();
        this.view = view;
        this.playerEl = playerEl;
        this.onMouseDown = (e) => {
            e.stopPropagation();
            this.isScrubbing = true;
        };
        this.onMouseMove = (e) => {
            const { seek } = this.getPosition(e);
            if (this.hoverEl)
                this.hoverEl.style.width = `${seek * 100}%`;
            if (this.isScrubbing) {
                e.stopPropagation();
                this.trigger(PlayerTimelineEvents.SEEK, seek, true);
                gsap_1.gsap.killTweensOf(this.currentEl);
                gsap_1.gsap.set(this.currentEl, { width: `${seek * 100}%` });
                this.playerEl.classList.add('is-scrubbing');
            }
        };
        this.onMouseUp = (e) => {
            if (this.isScrubbing) {
                e.stopPropagation();
                const { seek } = this.getPosition(e);
                this.trigger(PlayerTimelineEvents.SEEK, seek);
            }
            this.isScrubbing = false;
            this.playerEl.classList.remove('is-scrubbing');
        };
        this.onMouseLeave = () => {
            this.isScrubbing = false;
            this.playerEl.classList.remove('is-scrubbing');
        };
        this.onClick = (e) => {
            e.stopPropagation();
            const { seek } = this.getPosition(e);
            this.trigger(PlayerTimelineEvents.SEEK, seek);
            gsap_1.gsap.killTweensOf(this.currentEl);
            gsap_1.gsap.set(this.currentEl, { width: `${seek * 100}%` });
        };
        this.view = view;
        this.hoverEl = view.querySelector('.js-player-hover');
        this.currentEl = view.querySelector('.js-player-progress');
        this.loadedEl = view.querySelector('.js-player-loaded');
        this.bind();
    }
    destroy() {
        this.unbind();
        this.hoverEl = null;
        this.currentEl = null;
        this.loadedEl = null;
    }
    reset() {
        this.currentEl.style.width = '0';
        this.loadedEl.style.width = '0';
    }
    update(metadata, quick) {
        const { duration, buffered, current } = metadata;
        if (!duration) {
            return;
        }
        if (buffered && this.loadedEl) {
            gsap_1.gsap.to(this.loadedEl, {
                width: `${(Math.max(buffered, current || 0) / duration) * 100}%`,
                duration: !quick ? 0.3 : 0,
            });
        }
        if (typeof current === 'number') {
            gsap_1.gsap.to(this.currentEl, {
                width: `${((current || 0) / duration) * 100}%`,
                duration: !quick ? 0.3 : 0,
                ease: 'none',
            });
        }
    }
    addHotspots(data, duration) {
        var _a;
        (_a = data.related) === null || _a === void 0 ? void 0 : _a.forEach(({ timeStart, color }) => {
            const hotspot = document.createElement('div');
            hotspot.classList.add('player__hotspot');
            hotspot.style.left = `${((timeStart || 0) / duration) * 100}%`;
            hotspot.style.backgroundColor = color;
            this.view.appendChild(hotspot);
        });
    }
    bind() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        !Site_1.browser.touch && ((_a = this.playerEl) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseup', this.onMouseUp));
        !Site_1.browser.touch && ((_b = this.playerEl) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseleave', this.onMouseLeave));
        !Site_1.browser.touch && ((_c = this.playerEl) === null || _c === void 0 ? void 0 : _c.addEventListener('mousemove', this.onMouseMove));
        Site_1.browser.touch && ((_d = this.playerEl) === null || _d === void 0 ? void 0 : _d.addEventListener('touchmove', this.onMouseMove));
        Site_1.browser.touch && ((_e = this.playerEl) === null || _e === void 0 ? void 0 : _e.addEventListener('touchend', this.onMouseUp));
        !Site_1.browser.touch && ((_f = this.view) === null || _f === void 0 ? void 0 : _f.addEventListener('click', this.onClick));
        !Site_1.browser.touch && ((_g = this.view) === null || _g === void 0 ? void 0 : _g.addEventListener('mousedown', this.onMouseDown));
        Site_1.browser.touch && ((_h = this.view) === null || _h === void 0 ? void 0 : _h.addEventListener('touchstart', this.onMouseDown));
    }
    unbind() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        (_a = this.playerEl) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', this.onMouseUp);
        (_b = this.playerEl) === null || _b === void 0 ? void 0 : _b.removeEventListener('mouseleave', this.onMouseLeave);
        (_c = this.playerEl) === null || _c === void 0 ? void 0 : _c.removeEventListener('mousemove', this.onMouseMove);
        (_d = this.playerEl) === null || _d === void 0 ? void 0 : _d.removeEventListener('touchmove', this.onMouseMove);
        (_e = this.playerEl) === null || _e === void 0 ? void 0 : _e.removeEventListener('touchend', this.onMouseUp);
        (_f = this.view) === null || _f === void 0 ? void 0 : _f.removeEventListener('mousedown', this.onMouseDown);
        (_g = this.view) === null || _g === void 0 ? void 0 : _g.removeEventListener('touchstart', this.onMouseDown);
        (_h = this.view) === null || _h === void 0 ? void 0 : _h.removeEventListener('click', this.onClick);
    }
    getPosition(e) {
        var _a, _b;
        const pageX = e.pageX || ((_a = e.touches[0]) === null || _a === void 0 ? void 0 : _a.pageX) || ((_b = e.changedTouches[0]) === null || _b === void 0 ? void 0 : _b.pageX);
        const x = pageX - this.view.getBoundingClientRect().left;
        const width = this.view.clientWidth;
        const seek = Math.max(0, Math.min(1, x / width));
        return { x, width, seek };
    }
}
exports.PlayerTimeline = PlayerTimeline;

},{"../../Handler":9,"../../Site":14,"gsap/dist/gsap":4}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerVolume = exports.PlayerVolumeEvents = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Handler_1 = require("../../Handler");
const Site_1 = require("../../Site");
class PlayerVolumeEvents {
}
exports.PlayerVolumeEvents = PlayerVolumeEvents;
PlayerVolumeEvents.CHANGE = 'change';
PlayerVolumeEvents.MUTE = 'mute';
PlayerVolumeEvents.UNMUTE = 'unmute';
class PlayerVolume extends Handler_1.Handler {
    constructor(view, playerEl) {
        super();
        this.view = view;
        this.playerEl = playerEl;
        this.isInitialSetup = true;
        this.onVolumeButtonClick = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.trigger(this.isMuted ? PlayerVolumeEvents.UNMUTE : PlayerVolumeEvents.MUTE);
        };
        this.onVolumeBarClick = (e) => {
            e.stopPropagation();
            const value = Math.max(0, Math.min(1, 1 - e.offsetY / this.barEl.clientHeight));
            this.trigger(PlayerVolumeEvents.CHANGE, value);
        };
        this.onMouseDown = (e) => {
            e.stopPropagation();
            this.isScrubbing = true;
        };
        this.onMouseMove = (e) => {
            if (this.isScrubbing) {
                e.stopPropagation();
                const posY = e.clientY - this.barEl.getBoundingClientRect().top;
                const value = Math.max(0, Math.min(1, 1 - posY / this.barEl.clientHeight));
                this.trigger(PlayerVolumeEvents.CHANGE, value);
            }
        };
        this.onMouseUp = () => {
            this.isScrubbing = false;
        };
        this.onMouseLeave = () => {
            this.isScrubbing = false;
        };
        this.view = view;
        this.playerEl = playerEl;
        this.buttonEl = this.view.querySelector('.js-volume-btn');
        this.barEl = this.view.querySelector('.js-volume-bar');
        this.valueEl = this.view.querySelector('.js-volume-value');
        this.bind();
    }
    update(volume) {
        this.volume = volume;
        this.valueEl && gsap_1.gsap.to(this.valueEl, {
            scaleY: volume,
            duration: this.isScrubbing ? 0.0001 : 0.2,
            ease: Site_1.easing,
        });
        if (!this.isInitialSetup) {
            this.view.classList.add('is-updating');
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));
        }
        this.isInitialSetup = false;
    }
    toggle(muted) {
        this.isMuted = muted;
        this.playerEl.classList.toggle('is-muted', this.isMuted);
        this.valueEl && gsap_1.gsap.to(this.valueEl, { scaleY: this.isMuted ? 0 : this.volume, duration: 0.2, ease: Site_1.easing });
    }
    destroy() {
        this.unbind();
        this.view = null;
        this.playerEl = null;
        this.buttonEl = null;
        this.barEl = null;
        this.valueEl = null;
    }
    bind() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.buttonEl) === null || _a === void 0 ? void 0 : _a.addEventListener('click', this.onVolumeButtonClick);
        (_b = this.barEl) === null || _b === void 0 ? void 0 : _b.addEventListener('click', this.onVolumeBarClick);
        (_c = this.barEl) === null || _c === void 0 ? void 0 : _c.addEventListener('mousedown', this.onMouseDown);
        (_d = this.playerEl) === null || _d === void 0 ? void 0 : _d.addEventListener('mousemove', this.onMouseMove);
        (_e = this.playerEl) === null || _e === void 0 ? void 0 : _e.addEventListener('mouseup', this.onMouseUp);
        (_f = this.playerEl) === null || _f === void 0 ? void 0 : _f.addEventListener('mouseleave', this.onMouseLeave);
    }
    unbind() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.buttonEl) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this.onVolumeButtonClick);
        (_b = this.barEl) === null || _b === void 0 ? void 0 : _b.removeEventListener('click', this.onVolumeBarClick);
        (_c = this.barEl) === null || _c === void 0 ? void 0 : _c.removeEventListener('mousedown', this.onMouseDown);
        (_d = this.playerEl) === null || _d === void 0 ? void 0 : _d.removeEventListener('mousemove', this.onMouseMove);
        (_e = this.playerEl) === null || _e === void 0 ? void 0 : _e.removeEventListener('mouseup', this.onMouseUp);
        (_f = this.playerEl) === null || _f === void 0 ? void 0 : _f.removeEventListener('mouseleave', this.onMouseLeave);
    }
}
exports.PlayerVolume = PlayerVolume;

},{"../../Handler":9,"../../Site":14,"gsap/dist/gsap":4}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video = void 0;
const Player_utils_1 = require("../../components/Player/Player.utils");
const Player_types_1 = require("../../components/Player/Player.types");
const Video_types_1 = require("../../components/Player/Video.types");
const Site_1 = require("../../Site");
const Player_1 = require("../../components/Player/Player");
const Utils_1 = require("../../Utils");
const VideoCaptions_1 = require("./VideoCaptions");
const PlayerSettings_1 = require("./PlayerSettings");
class Video extends Player_1.Player {
    preload() {
        const state = !Site_1.browser.safari
            ? Video_types_1.MediaState.HAVE_ENOUGH_DATA
            : Video_types_1.MediaState.HAVE_METADATA;
        return new Promise(resolve => {
            if (!!Site_1.browser.mobile || !this.settings.autoplay) {
                resolve(true);
            }
            else if (this.media.readyState >= state) {
                resolve(true);
            }
            else {
                this.media.addEventListener('loadeddata', () => {
                    if (this.media.readyState >= state) {
                        resolve(true);
                    }
                });
            }
        });
    }
    destroy() {
        this.cacheTimePosition(true);
        this.media.pause();
        this.media.src = '';
        this.media.load();
        super.destroy();
    }
    load(data) {
        var _a;
        const src = !!Site_1.browser.mobile && data.srcMobile && data.srcMobile !== '' ? data.srcMobile : data.src;
        this.media.pause();
        this.media.src = (0, Player_utils_1.decodeURL)(src);
        this.media.load();
        this.view.classList.remove('is-ended', 'is-started', 'is-played', 'is-playing');
        this.ui && ((_a = this.ui.timeline) === null || _a === void 0 ? void 0 : _a.reset());
        this.settings.autoplay && this.play();
        this.settings.ratio = data.ratio;
        this.settings.ratioMobile = data.ratioMobile;
        this.resize();
        this.settings.poster = data.poster;
        this.settings.posterMobile = data.posterMobile;
        this.ui.poster.load(data);
        this.settings.cacheTime && this.seekToCached();
        return Promise.resolve(true);
    }
    play() {
        var _a, _b;
        if (this.media && this.media.paused) {
            if (this.getCurrentTime() >= this.getDuration()) {
                (_b = (_a = this.ui) === null || _a === void 0 ? void 0 : _a.timeline) === null || _b === void 0 ? void 0 : _b.update({ current: 0, duration: this.getDuration() }, true);
                this.seek(0);
            }
            const playPromise = this.media.play();
            if (playPromise !== undefined) {
                (playPromise).then(() => {
                    this.view.classList.remove('autoplay-failed');
                }).catch(() => {
                    this.view.classList.add('autoplay-failed');
                });
            }
            setTimeout(() => {
                this.view.classList.add('should-play');
            }, 1000);
        }
    }
    pause() {
        if (!this.media || this.media.paused) {
            return;
        }
        this.media.pause();
    }
    toggle(play) {
        const playing = !this.media.paused;
        if (typeof play !== 'undefined') {
            if (!!play && !playing) {
                this.play();
            }
            else if (!play && !!playing) {
                this.pause();
            }
        }
        else {
            playing ? this.pause() : this.play();
        }
        return !playing;
    }
    unload() {
        if (this.media) {
            this.media.pause();
            this.media.src = '';
            this.media.load();
        }
    }
    seek(value) {
        if (!this.getDuration()) {
            return;
        }
        this.media.currentTime = this.getStart() + this.getDuration() * value;
    }
    seekToTime(time) {
        this.media.currentTime = this.getStart() + time;
    }
    skipForward(more) {
        this.seekToTime(this.getCurrentTime() + (more ? 10 : 5));
    }
    skipBackward(more) {
        this.seekToTime(this.getCurrentTime() - (more ? 10 : 5));
    }
    goRewind() {
        this.media.currentTime -= 15;
    }
    goForward() {
        this.media.currentTime += 15;
    }
    end() {
        this.seek(1);
        this.pause();
    }
    restart() {
        this.seek(0);
        this.play();
    }
    setVolume(value) {
        this.media.volume = value;
        this.media.muted = value === 0;
        super.setVolume(value);
    }
    toggleMute(mute) {
        if (typeof mute !== 'undefined') {
            this.media.muted = mute;
        }
        else {
            this.media.muted = !this.media.muted;
        }
        !this.media.muted && this.media.volume < 0.05 && (this.media.volume = 1);
        this.ui.volume.update(this.media.volume);
        this.ui.volume.toggle(this.media.muted);
    }
    volumeUp() {
        if (this.media.muted) {
            this.toggleMute(false);
            this.setVolume(0.05);
        }
        else {
            this.setVolume(Math.min(1, this.media.volume + 0.05));
        }
    }
    volumeDown() {
        this.setVolume(Math.max(0, this.media.volume - 0.05));
    }
    setSpeed(speed) {
        const constrainedSpeed = PlayerSettings_1.PlayerSettings.constrainSpeed(speed);
        this.media.playbackRate = constrainedSpeed;
        super.setSpeed(constrainedSpeed);
    }
    speedUp() {
        this.setSpeed(this.media.playbackRate + PlayerSettings_1.PlayerSettings.SPEED_STEP);
    }
    speedDown() {
        this.setSpeed(this.media.playbackRate - PlayerSettings_1.PlayerSettings.SPEED_STEP);
    }
    setHotspots(data) {
        this.ui.timeline.addHotspots(data, this.getDuration());
        this.ui.popups.loadData(data);
    }
    isPaused() {
        return this.media.paused;
    }
    setup() {
        var _a;
        this.createPlayer();
        this.settings.ratio = parseFloat(`${this.settings.ratio}`);
        this.settings.ratioMobile = parseFloat(`${this.settings.ratioMobile}`);
        if (!this.settings.srcMobile || this.settings.srcMobile === '') {
            delete this.settings.ratioMobile;
            delete this.settings.srcMobile;
        }
        if (!!Site_1.browser.mobile && this.settings.srcMobile && this.settings.srcMobile !== this.media.src) {
            this.media.src = (0, Player_utils_1.decodeURL)(this.settings.srcMobile);
            this.media.load();
        }
        else if (!Site_1.browser.mobile && this.settings.src && this.settings.src !== this.media.src) {
            this.media.src = (0, Player_utils_1.decodeURL)(this.settings.src);
            this.media.load();
        }
        this.settings.volume && (this.media.volume = this.settings.volume);
        this.settings.muted = this.media.muted;
        if (this.media.loop) {
            this.settings.loop = true;
        }
        if (this.settings.loop) {
            this.media.loop = true;
        }
        const media = this.media;
        if (media.poster && !this.settings.poster) {
            this.settings.poster = media.poster;
            if (this.media.controls) {
                media.poster = '';
            }
        }
        if (!!this.media.controls || this.settings.controls) {
            this.buildUI();
            this.media.controls = false;
            this.media.removeAttribute('controls');
        }
        this.bind();
        !this.seekToParams() && this.settings.cacheTime && this.seekToCached();
        const cachedVolume = (0, Utils_1.getStorageItem)(Video_types_1.PlayerStorage.VOLUME);
        this.ui && ((_a = this.ui.volume) === null || _a === void 0 ? void 0 : _a.toggle(this.settings.muted));
        this.setVolume(parseFloat(cachedVolume) || this.media.volume);
        const cachedSpeed = (0, Utils_1.getStorageItem)(Video_types_1.PlayerStorage.SPEED);
        this.setSpeed(parseFloat(cachedSpeed) || 1);
    }
    createPlayer() {
        this.media = this.view.querySelector('audio, video');
        if (!this.media) {
            console.error('Video/Audio component must contain html `<audio>` or `<video>` element');
            return;
        }
        this.isAudio = this.media.tagName === 'AUDIO';
    }
    buildUI() {
        super.buildUI();
        this.loadCaptions();
    }
    loadCaptions() {
        const captionsEl = this.view.querySelector('.js-player-cc');
        captionsEl && this.ui && (this.ui.captions = new VideoCaptions_1.VideoCaptions(captionsEl, this.view));
    }
    bindPlayer() {
        this.media.addEventListener('loadeddata', () => this.onLoaded());
        this.media.addEventListener('loadedmetadata', () => this.onLoaded());
        this.media.addEventListener('durationchange', () => this.onDurationChange());
        this.media.addEventListener('updateMediaState', () => this.onDurationChange());
        this.media.addEventListener('progress', () => this.onProgress());
        this.media.addEventListener('updateMediaState', () => this.onProgress());
        this.media.addEventListener('timeupdate', () => this.onTimeupdate());
        this.media.addEventListener('play', () => this.onPlay());
        this.media.addEventListener('canplay', () => this.onCanplay());
        this.media.addEventListener('playing', () => this.onPlaying());
        this.media.addEventListener('pause', () => this.onPause());
        this.media.addEventListener('waiting', () => this.onWaiting());
        this.media.addEventListener('ended', () => this.onEnd());
        this.media.addEventListener('error', e => this.onError(e));
        if (this.media.readyState >= Video_types_1.MediaState.HAVE_CURRENT_DATA) {
            this.onLoaded();
        }
    }
    unbindPlayer() {
        this.media.removeEventListener('loadeddata', () => this.onLoaded());
        this.media.removeEventListener('loadedmetadata', () => this.onLoaded());
        this.media.removeEventListener('durationchange', () => this.onDurationChange());
        this.media.removeEventListener('updateMediaState', () => this.onDurationChange());
        this.media.removeEventListener('progress', () => this.onProgress());
        this.media.removeEventListener('updateMediaState', () => this.onProgress());
        this.media.removeEventListener('timeupdate', () => this.onTimeupdate());
        this.media.removeEventListener('play', () => this.onPlay());
        this.media.removeEventListener('canplay', () => this.onCanplay());
        this.media.removeEventListener('playing', () => this.onPlaying());
        this.media.removeEventListener('pause', () => this.onPause());
        this.media.removeEventListener('waiting', () => this.onWaiting());
        this.media.removeEventListener('ended', () => this.onEnd());
        this.media.removeEventListener('error', e => this.onError(e));
    }
    onLoaded() {
        var _a;
        this.ui && ((_a = this.ui.captions) === null || _a === void 0 ? void 0 : _a.load(this.media));
        this.updateTime();
    }
    onDurationChange() {
        this.updateTime();
    }
    onProgress() {
        this.updateTime();
    }
    onTimeupdate() {
        this.constrainTime();
        this.updateTime();
    }
    onError(e) {
        if (this.view && e.target.networkState && e.target.networkState === 3) {
            console.warn(`Can't load media ${e.target.src}`);
            this.view.classList.add('is-error');
        }
    }
    onBeforeunload() {
        this.cacheTimePosition(true);
    }
    updateTime() {
        if (!this.media) {
            return;
        }
        const current = this.getCurrentTime();
        const duration = this.getDuration();
        const { buffered } = this.media;
        const bufferedTime = buffered && buffered.length ? buffered.end(0) : 0;
        this.ui.time.update({ duration, current }, this.settings.timeFormatLong);
        this.ui.timeline.update({ duration, buffered: bufferedTime, current });
        this.ui.popups.check(current);
        this.view.classList.toggle('is-started', current > this.settings.readyTime);
        this.cacheTimePosition();
        this.trigger(Player_types_1.PlayerEvents.TIME_UPDATE, current);
    }
    seekToParams() {
        const time = (new URLSearchParams(window.location.search)).get('time');
        if (time) {
            this.seekToTime(parseInt(time, 10));
            return true;
        }
        return false;
    }
    seekToCached() {
        const path = (0, Utils_1.normalizeUrl)(window.location.pathname);
        const cachedTime = (0, Utils_1.getStorageItem)(Video_types_1.PlayerStorage.SEEK + path);
        cachedTime && this.seekToTime(parseFloat(cachedTime));
    }
    cacheTimePosition(force) {
        const path = (0, Utils_1.normalizeUrl)(window.location.pathname);
        const time = this.getCurrentTime() >= this.getDuration() - 1 ? 0 : this.getCurrentTime();
        (!Site_1.browser.ios || force) && (0, Utils_1.setStorageItem)(Video_types_1.PlayerStorage.SEEK + path, `${time}`);
    }
    getDuration() {
        return this.settings.duration || this.media.duration;
    }
    getStart() {
        return this.settings.timeFrom || 0;
    }
    getCurrentTime() {
        return this.media.currentTime - this.getStart();
    }
    constrainTime() {
        if (!this.media) {
            return;
        }
        if (this.media.currentTime < this.getStart()) {
            this.media.currentTime = this.getStart();
            this.pause();
        }
        if (this.media.currentTime === this.getStart() + this.getDuration()) {
            this.pause();
            this.onEnd();
            return;
        }
        if (this.media.currentTime > this.getStart() + this.getDuration()) {
            this.media.currentTime = this.getStart() + this.getDuration();
        }
    }
}
exports.Video = Video;

},{"../../Site":14,"../../Utils":15,"../../components/Player/Player":33,"../../components/Player/Player.types":34,"../../components/Player/Player.utils":35,"../../components/Player/Video.types":43,"./PlayerSettings":39,"./VideoCaptions":44}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerStorage = exports.MediaState = void 0;
var MediaState;
(function (MediaState) {
    MediaState[MediaState["HAVE_NOTHING"] = 0] = "HAVE_NOTHING";
    MediaState[MediaState["HAVE_METADATA"] = 1] = "HAVE_METADATA";
    MediaState[MediaState["HAVE_CURRENT_DATA"] = 2] = "HAVE_CURRENT_DATA";
    MediaState[MediaState["HAVE_FUTURE_DATA"] = 3] = "HAVE_FUTURE_DATA";
    MediaState[MediaState["HAVE_ENOUGH_DATA"] = 4] = "HAVE_ENOUGH_DATA";
})(MediaState || (exports.MediaState = MediaState = {}));
class PlayerStorage {
}
exports.PlayerStorage = PlayerStorage;
PlayerStorage.CC_ACTIVE = 'active';
PlayerStorage.CC_INDEX = 'captions';
PlayerStorage.CC_NOT_ACTIVE = 'not-active';
PlayerStorage.CC = 'cc';
PlayerStorage.SEEK = 'seek';
PlayerStorage.SPEED = 'speed';
PlayerStorage.VOLUME = 'volume';

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoCaptions = void 0;
const Utils_1 = require("../../Utils");
const Video_types_1 = require("./Video.types");
class VideoCaptions {
    constructor(view, playerEl) {
        this.view = view;
        this.playerEl = playerEl;
        this.onCueEnter = (e) => {
            this.captions && (this.captions.style.display = 'block');
            this.captions && (this.captions.innerHTML = `<span>${e.currentTarget.text}</span>`);
        };
        this.onCueExit = () => {
            this.captions && (this.captions.style.display = 'none');
        };
        this.onToggleBtnClick = (e) => {
            e.stopPropagation();
            this.toggle();
        };
        this.onCCTrackClick = e => {
            e.preventDefault();
            e.stopPropagation();
            const index = parseInt(e.currentTarget.dataset.index || -1, 10);
            index < 0 ? this.unloadCC() : this.loadCC(index);
        };
        this.view = view;
        this.playerEl = playerEl;
        this.btn = view.querySelector('.js-player-cc-btn');
        this.captions = playerEl.querySelector('.js-player-cc-text');
        this.listButtons = [...view.querySelectorAll('.js-player-cc-item')];
        this.bind();
    }
    destroy() {
        this.unbind();
        this.view = null;
        this.playerEl = null;
        this.btn = null;
        this.captions = null;
        this.listButtons = null;
        this.unloadCC();
        this.tracks = null;
        this.currentIndex = null;
    }
    load(media) {
        if (!Array.isArray(media) && media.textTracks.length > 0) {
            this.playerEl.classList.add('has-cc');
            this.tracks = media.textTracks;
            [...this.tracks].forEach((track) => { track.mode = 'hidden'; });
        }
        else {
            this.playerEl.classList.remove('has-cc');
        }
        this.checkLocalStorage();
    }
    toggle() {
        this.isActive = !this.isActive;
        (0, Utils_1.setStorageItem)(Video_types_1.PlayerStorage.CC, this.isActive ? Video_types_1.PlayerStorage.CC_ACTIVE : Video_types_1.PlayerStorage.CC_NOT_ACTIVE);
        if (this.isActive) {
            this.loadCC(this.currentIndex >= 0 ? this.currentIndex : 0);
        }
        else {
            this.unloadCC();
        }
        this.view.classList.add('is-updating');
        clearTimeout(this.timeout);
        this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));
    }
    showNative() {
        this.tracks && [...this.tracks].forEach((track) => {
            track.mode = track.mode === 'hidden' ? 'showing' : 'disabled';
        });
    }
    hideNative() {
        this.tracks && [...this.tracks].forEach((track) => {
            track.mode = track.mode === 'showing' ? 'hidden' : 'disabled';
        });
    }
    loadCC(index) {
        if (Array.isArray(this.tracks)) {
            return;
        }
        this.isActive = true;
        this.currentIndex = index;
        (0, Utils_1.setStorageItem)(Video_types_1.PlayerStorage.CC_INDEX, `${index}`);
        (0, Utils_1.setStorageItem)(Video_types_1.PlayerStorage.CC, Video_types_1.PlayerStorage.CC_ACTIVE);
        this.loadTracklist(this.tracks);
        this.updateButtons();
    }
    loadTracklist(tracklist) {
        if (!tracklist) {
            return;
        }
        [...tracklist].forEach((track, i) => {
            track.mode = i === this.currentIndex ? 'hidden' : 'disabled';
        });
        const track = tracklist[this.currentIndex];
        const { cues } = track;
        for (let i = 0; i < cues.length; ++i) {
            const cue = cues[i];
            cue.onenter = this.onCueEnter;
            cue.onexit = this.onCueExit;
        }
    }
    unloadCC() {
        this.isActive = false;
        this.tracks && [...this.tracks].forEach((track) => { track.mode = 'disabled'; });
        this.updateButtons();
        (0, Utils_1.setStorageItem)(Video_types_1.PlayerStorage.CC, Video_types_1.PlayerStorage.CC_NOT_ACTIVE);
    }
    updateButtons() {
        this.listButtons.forEach((btn, i) => {
            const isCurrent = (!this.isActive && i === 0) || (this.isActive && i - 1 === this.currentIndex);
            btn.parentElement.classList.toggle('is-active', isCurrent);
        });
        this.playerEl.classList.toggle('has-captions-on', this.isActive);
    }
    checkLocalStorage() {
        if ((0, Utils_1.getStorageItem)(Video_types_1.PlayerStorage.CC) === Video_types_1.PlayerStorage.CC_ACTIVE) {
            this.loadCC(parseInt(Video_types_1.PlayerStorage.CC_INDEX, 10) || 0);
        }
    }
    bind() {
        var _a, _b;
        (_a = this.btn) === null || _a === void 0 ? void 0 : _a.addEventListener('click', this.onToggleBtnClick);
        (_b = this.listButtons) === null || _b === void 0 ? void 0 : _b.forEach(btn => btn.addEventListener('click', this.onCCTrackClick));
    }
    unbind() {
        var _a, _b;
        (_a = this.btn) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this.onToggleBtnClick);
        (_b = this.listButtons) === null || _b === void 0 ? void 0 : _b.forEach(btn => btn.removeEventListener('click', this.onCCTrackClick));
    }
}
exports.VideoCaptions = VideoCaptions;

},{"../../Utils":15,"./Video.types":43}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.PageEvents = void 0;
const gsap_1 = require("gsap/dist/gsap");
const Handler_1 = require("../Handler");
const Classes_1 = require("../Classes");
const Images_1 = require("../widgets/Images");
class PageEvents {
}
exports.PageEvents = PageEvents;
PageEvents.PROGRESS = 'progress';
PageEvents.COMPLETE = 'complete';
PageEvents.CHANGE = 'append';
class Page extends Handler_1.Handler {
    constructor(view, options) {
        super();
        this.view = view;
        this.onComponentChange = (el) => {
            this.buildComponents(el.querySelectorAll('[data-component]'));
            this.trigger(PageEvents.CHANGE, el);
        };
        this.view.style.opacity = '0';
        this.components = [];
        this.buildComponents(this.view.parentNode.querySelectorAll('[data-component]'));
    }
    preload() {
        return Images_1.Images.preload(this.view.querySelectorAll('img.preload'))
            .then(() => {
            this.trigger(PageEvents.COMPLETE);
        });
    }
    onState() {
        let changed = !!false;
        for (let i = 0; i < this.components.length; i += 1) {
            const component = this.components[i];
            const componentChanged = component.onState();
            if (!changed && !!componentChanged) {
                changed = true;
            }
        }
        return changed;
    }
    animateIn(delay) {
        return new Promise(resolve => {
            for (let i = 0; i < this.components.length; i += 1) {
                this.components[i].animateIn(i, delay);
            }
            gsap_1.gsap.to(this.view, {
                duration: 0.3,
                opacity: 1,
                onComplete: () => resolve(),
            });
        });
    }
    animateOut() {
        const pageAnimationPromise = new Promise(resolve => {
            gsap_1.gsap.to(this.view, {
                duration: 0.2,
                onComplete: () => {
                    document.body.scrollTop = 0;
                },
                opacity: 0,
            });
            resolve();
        });
        const componentAnimations = this.components.map(obj => obj.animateOut());
        return new Promise(resolve => {
            const allPromises = componentAnimations.concat(pageAnimationPromise);
            Promise.all(allPromises).then(() => {
                resolve();
            });
        });
    }
    resize(wdt, hgt, breakpoint, bpChanged) {
        this.components.forEach(item => {
            item.resize(wdt, hgt);
        });
    }
    destroy() {
        this.components.forEach(item => item.destroy());
        this.components = [];
        this.view = null;
        super.destroy();
    }
    buildComponents(componentsList) {
        this.components = [];
        this.components = [...componentsList].map(el => {
            const element = el;
            const name = element.dataset.component;
            if (name !== undefined && Classes_1.components[name]) {
                let options;
                if (element.dataset.options) {
                    options = JSON.parse(element.dataset.options);
                }
                const component = new Classes_1.components[name](element, options);
                return component;
            }
            window.console.warn('There is no `%s` component!', name);
        }).filter(Boolean);
    }
    callAll(fn, ...args) {
        for (let i = 0; i < this.components.length; i += 1) {
            const component = this.components[i];
            if (typeof component[fn] === 'function') {
                component[fn](...args);
            }
        }
    }
}
exports.Page = Page;

},{"../Classes":8,"../Handler":9,"../widgets/Images":52,"gsap/dist/gsap":4}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Templates = exports.TemplateNames = void 0;
class TemplateNames {
}
exports.TemplateNames = TemplateNames;
TemplateNames.LIGHTBOX = 'lightbox';
TemplateNames.LIVESEARCH = 'livesearch';
TemplateNames.PLAYER = 'player';
class Templates {
    static get(name) {
        const tmpl = document.querySelector(`#tmpl-${name}`);
        if (!tmpl) {
            console.warn('There is no `%s` template!', name);
            return null;
        }
        return Twig.twig({ data: tmpl.innerHTML });
    }
}
exports.Templates = Templates;

},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const PushStates_1 = require("../PushStates");
const Recaptcha_1 = require("./Recaptcha");
const Utils_1 = require("../Utils");
class API {
    static bind() {
        if (document.querySelectorAll('[data-api]:not(form)')) {
            document.querySelectorAll('[data-api]:not(form)').forEach(apiEl => {
                apiEl.removeEventListener('click', API.onAction);
                apiEl.addEventListener('click', API.onAction);
            });
        }
        if (document.querySelectorAll('form[data-api]')) {
            document.querySelectorAll('form[data-api]').forEach(apiFormEl => {
                apiFormEl.removeEventListener('submit', API.onAction);
                apiFormEl.addEventListener('submit', API.onAction);
                apiFormEl.setAttribute('novalidate', 'novalidate');
                apiFormEl.querySelectorAll('input[required').forEach(input => {
                    input.addEventListener('blur', () => {
                        const data = Object.assign({}, JSON.parse(apiFormEl.getAttribute('data-api')));
                        API.beforeCalls.validateBlur(data, apiFormEl);
                    });
                });
            });
        }
    }
    static callIt(dataApi, el, customCallback) {
        const data = API.preprocessData(dataApi, el);
        el.classList.add('is-doing-request');
        const action = data.action || 'POST';
        delete data.action;
        const url = data.url || window.location.pathname;
        delete data.url;
        return new Promise((resolve, reject) => {
            el.classList.remove('is-doing-request');
            const dataBody = new URLSearchParams(data);
            fetch(url, {
                method: action,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: dataBody,
            })
                .then(response => response.json())
                .then(response => {
                if (data.callback) {
                    API.onSuccess(data, el, response);
                }
                if (customCallback && typeof customCallback === 'function') {
                    customCallback(data, el, response);
                }
                resolve(response);
            })
                .catch(error => {
                console.warn(`API error: ${error}`, data);
                reject(error);
            });
        });
    }
    static preprocessData(data, el) {
        if (el.matches('form')) {
            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;
            data = Object.assign(data, (0, Utils_1.serializeObject)(el));
        }
        if (el.matches('[href]')) {
            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;
        }
        if (data.formSelector) {
            data = Object.assign(data, (0, Utils_1.serializeObject)(document.querySelector(data.formSelector)));
            delete data.formSelector;
        }
        if (data.params) {
            data = Object.assign(data, data.params);
            delete data.params;
        }
        return data;
    }
}
exports.API = API;
API.beforeCalls = {
    validate(data, el) {
        let passed = true;
        let message = '';
        if (el.classList.contains('is-done')) {
            el.classList.remove('is-done');
            return;
        }
        el.querySelectorAll('.js-error').forEach(errorEl => {
            errorEl.innerHTML = '';
            errorEl.classList.remove('is-error');
        });
        el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {
            switch (input.type) {
                case 'email':
                    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    const { value } = input;
                    if (!re.test(value) || !value.length) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = value.length > 0 ? "It seems there's an issue with the email you entered. <br> Please double-check and try again." : 'Required field';
                        input.closest('fieldset').querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.closest('fieldset').querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'password':
                    const pass = input.value;
                    if (pass.length > 5) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = pass.length > 0 ? 'invalid-pass' : 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                case 'checkbox':
                    if (!input.checked) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'text':
                    if (input.value.length > 0) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                default:
                    break;
            }
        });
        el.querySelectorAll('textarea[required]').forEach(textarea => {
            if (textarea.value.length > 0) {
                textarea.parentElement.classList.remove('is-error');
                textarea.parentElement.querySelector('.js-error').innerHTML = '';
            }
            else {
                passed = false;
                textarea.parentElement.classList.add('is-error');
                message = 'Required field';
                textarea.parentElement.querySelector('.js-error').innerHTML = message;
            }
        });
        if (passed) {
            Promise.all([Recaptcha_1.Recaptcha ? Recaptcha_1.Recaptcha.check(el) : null]).then(() => {
                API.callIt(data, el);
                el.querySelectorAll('.js-error').forEach(errorEl => {
                    errorEl.innerHTML = '';
                    errorEl.classList.remove('is-error');
                });
                el.classList.remove('has-errors');
            });
        }
        else {
            el.classList.add('has-errors');
        }
    },
    validateBlur(data, el) {
        let passed = true;
        let message = '';
        if (el.classList.contains('is-done')) {
            el.classList.remove('is-done');
            return;
        }
        el.querySelectorAll('.js-error').forEach(errorEl => {
            errorEl.innerHTML = '';
            errorEl.classList.remove('is-error');
        });
        el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {
            switch (input.type) {
                case 'email':
                    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    const { value } = input;
                    if (!re.test(value) || !value.length) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';
                        input.closest('fieldset').querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.closest('fieldset').querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'password':
                    const pass = input.value;
                    if (pass.length > 5) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = pass.length > 0 ? 'invalid-pass' : 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                case 'checkbox':
                    if (!input.checked) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'text':
                    if (input.value.length > 0) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                default:
                    break;
            }
        });
        el.querySelectorAll('textarea[required]').forEach(textarea => {
            if (textarea.value.length > 0) {
                textarea.parentElement.classList.remove('is-error');
                textarea.parentElement.querySelector('.js-error').innerHTML = '';
            }
            else {
                passed = false;
                textarea.parentElement.classList.add('is-error');
                message = 'Required field';
                textarea.parentElement.querySelector('.js-error').innerHTML = message;
            }
        });
        if (passed) {
            el.querySelectorAll('.js-error').forEach(errorEl => {
                errorEl.innerHTML = '';
                errorEl.classList.remove('is-error');
            });
            el.classList.remove('has-errors');
        }
        else {
            el.classList.add('has-errors');
        }
    },
};
API.callbacks = {
    onSubscribe(data, el, response) {
        let $message = el.querySelector('.js-message');
        if (!$message) {
            const div = document.createElement('div');
            div.classList.add('js-message', 'message');
            el.append(div);
            $message = el.querySelector('.js-message');
        }
        const html = (response.message);
        $message.innerHTML = html;
        el.classList.add('is-completed');
        el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));
    },
    onSendMessage(data, el, response) {
        let $message = el.querySelector('.js-message');
        if (!$message) {
            el.append('<div class="js-message message">');
            $message = el.querySelector('.js-message');
        }
        const html = (response.message);
        $message.innerHTML = html;
        el.classList.add('is-completed');
        el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));
    },
    reload: () => {
        PushStates_1.PushStates.reload();
    },
};
API.onAction = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const el = e.currentTarget;
    const data = Object.assign({}, JSON.parse(el.getAttribute('data-api')));
    if (data.beforeCall) {
        if (data.beforeCall in API.beforeCalls) {
            API.beforeCalls[data.beforeCall](data, el);
            return;
        }
    }
    API.callIt(data, el);
};
API.onSuccess = (data, el, response) => {
    if (data.callback) {
        if (data.callback in API.callbacks) {
            API.callbacks[data.callback](data, el, response);
        }
    }
};
API.refresh = () => {
    const forms = [...document.querySelectorAll('form')];
    forms.forEach(form => {
        const inputs = form.querySelectorAll('input');
        const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];
        const errorMessages = form.querySelectorAll('.js-error');
        form.classList.remove('is-doing-request', 'is-completed', 'has-errors');
        for (const message of errorMessages) {
            message.innerHTML = '';
        }
        for (const input of inputs) {
            input.value = '';
        }
        for (const err of errors) {
            err.classList.remove('is-error', 'has-errors');
        }
    });
};

},{"../PushStates":11,"../Utils":15,"./Recaptcha":53}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Api_1 = require("./Api");
const CSSAnimate_1 = require("./CSSAnimate");
const Expand_1 = require("./Expand");
const Images_1 = require("./Images");
const Recaptcha_1 = require("./Recaptcha");
class Widgets {
    static bind() {
        Api_1.API.bind();
        CSSAnimate_1.CSSAnimate.bind();
        Expand_1.Expand.bind();
        Images_1.Images.bind();
        Recaptcha_1.Recaptcha.bind();
    }
}
exports.default = Widgets;

},{"./Api":49,"./CSSAnimate":50,"./Expand":51,"./Images":52,"./Recaptcha":53}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const PushStates_1 = require("../PushStates");
const Recaptcha_1 = require("./Recaptcha");
const Utils_1 = require("../Utils");
class API {
    static bind() {
        if (document.querySelectorAll('[data-api]:not(form)')) {
            document.querySelectorAll('[data-api]:not(form)').forEach(apiEl => {
                apiEl.removeEventListener('click', API.onAction);
                apiEl.addEventListener('click', API.onAction);
            });
        }
        if (document.querySelectorAll('form[data-api]')) {
            document.querySelectorAll('form[data-api]').forEach(apiFormEl => {
                apiFormEl.removeEventListener('submit', API.onAction);
                apiFormEl.addEventListener('submit', API.onAction);
                apiFormEl.setAttribute('novalidate', 'novalidate');
                apiFormEl.querySelectorAll('input[required').forEach(input => {
                    input.addEventListener('blur', () => {
                        const data = Object.assign({}, JSON.parse(apiFormEl.getAttribute('data-api')));
                        API.beforeCalls.validateBlur(data, apiFormEl);
                    });
                });
            });
        }
    }
    static callIt(dataApi, el, customCallback) {
        const data = API.preprocessData(dataApi, el);
        el.classList.add('is-doing-request');
        const action = data.action || 'POST';
        delete data.action;
        const url = data.url || window.location.pathname;
        delete data.url;
        return new Promise((resolve, reject) => {
            el.classList.remove('is-doing-request');
            const dataBody = new URLSearchParams(data);
            fetch(url, {
                method: action,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: dataBody,
            })
                .then(response => response.json())
                .then(response => {
                if (data.callback) {
                    API.onSuccess(data, el, response);
                }
                if (customCallback && typeof customCallback === 'function') {
                    customCallback(data, el, response);
                }
                resolve(response);
            })
                .catch(error => {
                console.warn(`API error: ${error}`, data);
                reject(error);
            });
        });
    }
    static preprocessData(data, el) {
        if (el.matches('form')) {
            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;
            data = Object.assign(data, (0, Utils_1.serializeObject)(el));
        }
        if (el.matches('[href]')) {
            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;
        }
        if (data.formSelector) {
            data = Object.assign(data, (0, Utils_1.serializeObject)(document.querySelector(data.formSelector)));
            delete data.formSelector;
        }
        if (data.params) {
            data = Object.assign(data, data.params);
            delete data.params;
        }
        return data;
    }
}
exports.API = API;
API.beforeCalls = {
    validate(data, el) {
        let passed = true;
        let message = '';
        if (el.classList.contains('is-done')) {
            el.classList.remove('is-done');
            return;
        }
        el.querySelectorAll('.js-error').forEach(errorEl => {
            errorEl.innerHTML = '';
            errorEl.classList.remove('is-error');
        });
        el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {
            switch (input.type) {
                case 'email':
                    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    const { value } = input;
                    if (!re.test(value) || !value.length) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = value.length > 0 ? "It seems there's an issue with the email you entered. <br> Please double-check and try again." : 'Required field';
                        input.closest('fieldset').querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.closest('fieldset').querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'password':
                    const pass = input.value;
                    if (pass.length > 5) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = pass.length > 0 ? 'invalid-pass' : 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                case 'checkbox':
                    if (!input.checked) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'text':
                    if (input.value.length > 0) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                default:
                    break;
            }
        });
        el.querySelectorAll('textarea[required]').forEach(textarea => {
            if (textarea.value.length > 0) {
                textarea.parentElement.classList.remove('is-error');
                textarea.parentElement.querySelector('.js-error').innerHTML = '';
            }
            else {
                passed = false;
                textarea.parentElement.classList.add('is-error');
                message = 'Required field';
                textarea.parentElement.querySelector('.js-error').innerHTML = message;
            }
        });
        if (passed) {
            Promise.all([Recaptcha_1.Recaptcha ? Recaptcha_1.Recaptcha.check(el) : null]).then(() => {
                API.callIt(data, el);
                el.querySelectorAll('.js-error').forEach(errorEl => {
                    errorEl.innerHTML = '';
                    errorEl.classList.remove('is-error');
                });
                el.classList.remove('has-errors');
            });
        }
        else {
            el.classList.add('has-errors');
        }
    },
    validateBlur(data, el) {
        let passed = true;
        let message = '';
        if (el.classList.contains('is-done')) {
            el.classList.remove('is-done');
            return;
        }
        el.querySelectorAll('.js-error').forEach(errorEl => {
            errorEl.innerHTML = '';
            errorEl.classList.remove('is-error');
        });
        el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {
            switch (input.type) {
                case 'email':
                    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    const { value } = input;
                    if (!re.test(value) || !value.length) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';
                        input.closest('fieldset').querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.closest('fieldset').querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'password':
                    const pass = input.value;
                    if (pass.length > 5) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = pass.length > 0 ? 'invalid-pass' : 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                case 'checkbox':
                    if (!input.checked) {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    else {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    break;
                case 'text':
                    if (input.value.length > 0) {
                        input.parentElement.classList.remove('is-error');
                        input.parentElement.querySelector('.js-error').innerHTML = '';
                    }
                    else {
                        passed = false;
                        input.parentElement.classList.add('is-error');
                        message = 'Required field';
                        input.parentElement.querySelector('.js-error').innerHTML = message;
                    }
                    break;
                default:
                    break;
            }
        });
        el.querySelectorAll('textarea[required]').forEach(textarea => {
            if (textarea.value.length > 0) {
                textarea.parentElement.classList.remove('is-error');
                textarea.parentElement.querySelector('.js-error').innerHTML = '';
            }
            else {
                passed = false;
                textarea.parentElement.classList.add('is-error');
                message = 'Required field';
                textarea.parentElement.querySelector('.js-error').innerHTML = message;
            }
        });
        if (passed) {
            el.querySelectorAll('.js-error').forEach(errorEl => {
                errorEl.innerHTML = '';
                errorEl.classList.remove('is-error');
            });
            el.classList.remove('has-errors');
        }
        else {
            el.classList.add('has-errors');
        }
    },
};
API.callbacks = {
    onSubscribe(data, el, response) {
        let $message = el.querySelector('.js-message');
        if (!$message) {
            const div = document.createElement('div');
            div.classList.add('js-message', 'message');
            el.append(div);
            $message = el.querySelector('.js-message');
        }
        const html = (response.message);
        $message.innerHTML = html;
        el.classList.add('is-completed');
        el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));
    },
    onSendMessage(data, el, response) {
        let $message = el.querySelector('.js-message');
        if (!$message) {
            el.append('<div class="js-message message">');
            $message = el.querySelector('.js-message');
        }
        const html = (response.message);
        $message.innerHTML = html;
        el.classList.add('is-completed');
        el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));
    },
    reload: () => {
        PushStates_1.PushStates.reload();
    },
};
API.onAction = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const el = e.currentTarget;
    const data = Object.assign({}, JSON.parse(el.getAttribute('data-api')));
    if (data.beforeCall) {
        if (data.beforeCall in API.beforeCalls) {
            API.beforeCalls[data.beforeCall](data, el);
            return;
        }
    }
    API.callIt(data, el);
};
API.onSuccess = (data, el, response) => {
    if (data.callback) {
        if (data.callback in API.callbacks) {
            API.callbacks[data.callback](data, el, response);
        }
    }
};
API.refresh = () => {
    const forms = [...document.querySelectorAll('form')];
    forms.forEach(form => {
        const inputs = form.querySelectorAll('input');
        const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];
        const errorMessages = form.querySelectorAll('.js-error');
        form.classList.remove('is-doing-request', 'is-completed', 'has-errors');
        for (const message of errorMessages) {
            message.innerHTML = '';
        }
        for (const input of inputs) {
            input.value = '';
        }
        for (const err of errors) {
            err.classList.remove('is-error', 'has-errors');
        }
    });
};

},{"../PushStates":11,"../Utils":15,"./Recaptcha":53}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSSAnimate = void 0;
class CSSAnimate {
    static bind() {
        [...document.querySelectorAll('[data-cssanimate]')].forEach(el => {
            const selector = el.dataset.cssanimate;
            const target = selector ? el.querySelector(selector) : el;
            target === null || target === void 0 ? void 0 : target.addEventListener('transitionend', CSSAnimate.onAnimationEnd);
            target === null || target === void 0 ? void 0 : target.addEventListener('animationend', CSSAnimate.onAnimationEnd);
            el.addEventListener('mouseenter', CSSAnimate.onMouseEnter);
        });
    }
}
exports.CSSAnimate = CSSAnimate;
CSSAnimate.onAnimationEnd = e => {
    e.target.closest('[data-cssanimate]').classList.remove('is-animating');
};
CSSAnimate.onMouseEnter = e => {
    e.currentTarget.classList.add('is-animating');
};

},{}],51:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expand = void 0;
class Expand {
    static bind() {
        this.setMaxHeight();
        [...document.querySelectorAll('[data-expand][id]')].forEach(element => {
            const toggleButton = document.querySelector(`[aria-controls="${element.id}"]`);
            toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.addEventListener('click', _a.onAriaControlsClick);
        });
    }
}
exports.Expand = Expand;
_a = Expand;
Expand.resize = () => {
    _a.setMaxHeight();
};
Expand.unbind = () => {
    [...document.querySelectorAll('[data-expand][id]')].forEach(element => {
        const toggleButton = element.querySelector('[aria-controls]');
        toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.removeEventListener('click', _a.onAriaControlsClick);
    });
};
Expand.onAriaControlsClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const target = e.currentTarget;
    const isExpanded = target.getAttribute('aria-expanded') === 'true';
    isExpanded ? _a.collapse(target) : _a.expand(target);
};
Expand.expand = (target) => {
    target.setAttribute('aria-expanded', 'true');
    target.parentElement.classList.add('is-expanded');
    target.querySelector('.js-expand-text').innerText = target.getAttribute('data-expanded-text');
    document.getElementById(target.getAttribute('aria-controls')).classList.add('is-expanded');
};
Expand.collapse = (target) => {
    target.setAttribute('aria-expanded', 'false');
    target.parentElement.classList.remove('is-expanded');
    target.querySelector('.js-expand-text').innerText = target.getAttribute('data-hidden-text');
    document.getElementById(target.getAttribute('aria-controls')).classList.remove('is-expanded');
};
Expand.setMaxHeight = () => {
    [...document.querySelectorAll('[data-expand][id]')].forEach(element => {
        const { height } = element.children[0].getBoundingClientRect();
        element.style.maxHeight = `${height}px`;
    });
};

},{}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Images = void 0;
class Images {
    static preload(imgElements) {
        if (!imgElements || !imgElements.length) {
            return Promise.resolve();
        }
        return new Promise(resolve => {
            imagesLoaded(imgElements).on('always', () => resolve());
        });
    }
    static bind() {
        imagesLoaded && imagesLoaded(document.body, Images.onLoaded);
    }
}
exports.Images = Images;
Images.onLoaded = instance => {
    [...instance.images].forEach(({ img, isLoaded }) => {
        var _a, _b;
        if (isLoaded) {
            img.classList.remove('is-loading');
            img.classList.add('is-loaded');
            (_a = img.closest('figure')) === null || _a === void 0 ? void 0 : _a.classList.add('is-loaded');
            (_b = img.closest('.image')) === null || _b === void 0 ? void 0 : _b.classList.add('is-loaded');
        }
    });
};

},{}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recaptcha = void 0;
const Utils_1 = require("../Utils");
class Recaptcha {
    static bind(selector) {
        const target = typeof selector === 'undefined' ? document.body : selector;
        if (!document.querySelector('[data-recaptchakey]')) {
            return;
        }
        Recaptcha.SITE_KEY = Recaptcha.SITE_KEY
            || document.querySelector('[data-recaptchakey]').dataset.recaptchakey;
        if (!target.querySelector(Recaptcha.inputSelector)) {
            return;
        }
        if (typeof grecaptcha === 'undefined') {
            (0, Utils_1.getScript)(`//www.google.com/recaptcha/api.js?render=${Recaptcha.SITE_KEY}`, () => Recaptcha.attach(target.querySelector(Recaptcha.inputSelector)));
        }
        else {
            Recaptcha.attach(target.querySelector(Recaptcha.inputSelector));
        }
    }
    static check(form) {
        return new Promise(resolve => {
            const action = form.getAttribute('action').split('/').pop().replace(/[^0-9a-z]/gi, '') || 'action';
            grecaptcha.execute(Recaptcha.SITE_KEY, { action })
                .then(token => {
                Recaptcha.onExecute(form, token);
                resolve(token);
            });
        });
    }
    static attach(target) {
        grecaptcha.ready(() => {
            target.closest('form').data = { Recaptcha };
            target.closest('form').classList.add('has-recaptcha');
        });
    }
    static onExecute(form, token) {
        if (!form.querySelector('[name=token]')) {
            form.append('<input name="token" type="hidden" value="">');
        }
        const input = form.querySelector('[name=token]');
        input.value = token;
    }
}
exports.Recaptcha = Recaptcha;
Recaptcha.inputSelector = '[data-recaptcha]';

},{"../Utils":15}]},{},[14])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
