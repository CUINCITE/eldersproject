{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gsap/dist/CustomEase.js","node_modules/gsap/dist/ScrollToPlugin.js","node_modules/gsap/dist/ScrollTrigger.js","node_modules/gsap/dist/gsap.js","src/ts/Animate.ts","src/ts/Breakpoint.ts","src/ts/Browser.ts","src/ts/Classes.ts","src/ts/Handler.ts","src/ts/Menu.ts","src/ts/PushStates.ts","src/ts/Scroll.ts","src/ts/Search.ts","src/ts/Site.ts","src/ts/Utils.ts","src/ts/animations/all.ts","src/ts/animations/fadeUp.ts","src/ts/animations/scroll/hero.ts","src/ts/animations/scroll/interviews.ts","src/ts/components/Accordeon.ts","src/ts/components/AccordeonList.ts","src/ts/components/AudioPlayer.ts","src/ts/components/Component.ts","src/ts/components/Lightbox/Lightbox.ts","src/ts/components/Lightbox/LightboxNav.ts","src/ts/components/Lightbox/LightboxSlider.ts","src/ts/components/Lightbox/LightboxTranscript.ts","src/ts/components/Load.ts","src/ts/components/Modal.ts","src/ts/components/More.ts","src/ts/components/Player/Player.Time.ts","src/ts/components/Player/Player.ts","src/ts/components/Player/Player.types.ts","src/ts/components/Player/Player.utils.ts","src/ts/components/Player/PlayerFullscreen.ts","src/ts/components/Player/PlayerPopups.ts","src/ts/components/Player/PlayerPoster.ts","src/ts/components/Player/PlayerSettings.ts","src/ts/components/Player/PlayerTimeline.ts","src/ts/components/Player/PlayerVolume.ts","src/ts/components/Player/Video.ts","src/ts/components/Player/Video.types.ts","src/ts/components/Player/VideoCaptions.ts","src/ts/pages/Page.ts","src/ts/templates/Templates.ts","src/ts/widgets/API.ts","src/ts/widgets/All.ts","src/ts/widgets/Api.ts","src/ts/widgets/CSSAnimate.ts","src/ts/widgets/Expand.ts","src/ts/widgets/Images.ts","src/ts/widgets/Recaptcha.ts"],"names":[],"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\tvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t    _DEG2RAD = Math.PI / 180,\n\t    _sin = Math.sin,\n\t    _cos = Math.cos,\n\t    _abs = Math.abs,\n\t    _sqrt = Math.sqrt,\n\t    _isNumber = function _isNumber(value) {\n\t  return typeof value === \"number\";\n\t},\n\t    _roundingNum = 1e5,\n\t    _round = function _round(value) {\n\t  return Math.round(value * _roundingNum) / _roundingNum || 0;\n\t};\n\tfunction transformRawPath(rawPath, a, b, c, d, tx, ty) {\n\t  var j = rawPath.length,\n\t      segment,\n\t      l,\n\t      i,\n\t      x,\n\t      y;\n\n\t  while (--j > -1) {\n\t    segment = rawPath[j];\n\t    l = segment.length;\n\n\t    for (i = 0; i < l; i += 2) {\n\t      x = segment[i];\n\t      y = segment[i + 1];\n\t      segment[i] = x * a + y * c + tx;\n\t      segment[i + 1] = x * b + y * d + ty;\n\t    }\n\t  }\n\n\t  rawPath._dirty = 1;\n\t  return rawPath;\n\t}\n\n\tfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n\t  if (lastX === x && lastY === y) {\n\t    return;\n\t  }\n\n\t  rx = _abs(rx);\n\t  ry = _abs(ry);\n\n\t  var angleRad = angle % 360 * _DEG2RAD,\n\t      cosAngle = _cos(angleRad),\n\t      sinAngle = _sin(angleRad),\n\t      PI = Math.PI,\n\t      TWOPI = PI * 2,\n\t      dx2 = (lastX - x) / 2,\n\t      dy2 = (lastY - y) / 2,\n\t      x1 = cosAngle * dx2 + sinAngle * dy2,\n\t      y1 = -sinAngle * dx2 + cosAngle * dy2,\n\t      x1_sq = x1 * x1,\n\t      y1_sq = y1 * y1,\n\t      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n\t  if (radiiCheck > 1) {\n\t    rx = _sqrt(radiiCheck) * rx;\n\t    ry = _sqrt(radiiCheck) * ry;\n\t  }\n\n\t  var rx_sq = rx * rx,\n\t      ry_sq = ry * ry,\n\t      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n\t  if (sq < 0) {\n\t    sq = 0;\n\t  }\n\n\t  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n\t      cx1 = coef * (rx * y1 / ry),\n\t      cy1 = coef * -(ry * x1 / rx),\n\t      sx2 = (lastX + x) / 2,\n\t      sy2 = (lastY + y) / 2,\n\t      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n\t      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n\t      ux = (x1 - cx1) / rx,\n\t      uy = (y1 - cy1) / ry,\n\t      vx = (-x1 - cx1) / rx,\n\t      vy = (-y1 - cy1) / ry,\n\t      temp = ux * ux + uy * uy,\n\t      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n\t      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n\t  isNaN(angleExtent) && (angleExtent = PI);\n\n\t  if (!sweepFlag && angleExtent > 0) {\n\t    angleExtent -= TWOPI;\n\t  } else if (sweepFlag && angleExtent < 0) {\n\t    angleExtent += TWOPI;\n\t  }\n\n\t  angleStart %= TWOPI;\n\t  angleExtent %= TWOPI;\n\n\t  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n\t      rawPath = [],\n\t      angleIncrement = angleExtent / segments,\n\t      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n\t      ma = cosAngle * rx,\n\t      mb = sinAngle * rx,\n\t      mc = sinAngle * -ry,\n\t      md = cosAngle * ry,\n\t      i;\n\n\t  for (i = 0; i < segments; i++) {\n\t    angle = angleStart + i * angleIncrement;\n\t    x1 = _cos(angle);\n\t    y1 = _sin(angle);\n\t    ux = _cos(angle += angleIncrement);\n\t    uy = _sin(angle);\n\t    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n\t  }\n\n\t  for (i = 0; i < rawPath.length; i += 2) {\n\t    x1 = rawPath[i];\n\t    y1 = rawPath[i + 1];\n\t    rawPath[i] = x1 * ma + y1 * mc + cx;\n\t    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n\t  }\n\n\t  rawPath[i - 2] = x;\n\t  rawPath[i - 1] = y;\n\t  return rawPath;\n\t}\n\n\tfunction stringToRawPath(d) {\n\t  var a = (d + \"\").replace(_scientific, function (m) {\n\t    var n = +m;\n\t    return n < 0.0001 && n > -0.0001 ? 0 : n;\n\t  }).match(_svgPathExp) || [],\n\t      path = [],\n\t      relativeX = 0,\n\t      relativeY = 0,\n\t      twoThirds = 2 / 3,\n\t      elements = a.length,\n\t      points = 0,\n\t      errorMessage = \"ERROR: malformed path: \" + d,\n\t      i,\n\t      j,\n\t      x,\n\t      y,\n\t      command,\n\t      isRelative,\n\t      segment,\n\t      startX,\n\t      startY,\n\t      difX,\n\t      difY,\n\t      beziers,\n\t      prevCommand,\n\t      flag1,\n\t      flag2,\n\t      line = function line(sx, sy, ex, ey) {\n\t    difX = (ex - sx) / 3;\n\t    difY = (ey - sy) / 3;\n\t    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n\t  };\n\n\t  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n\t    console.log(errorMessage);\n\t    return path;\n\t  }\n\n\t  for (i = 0; i < elements; i++) {\n\t    prevCommand = command;\n\n\t    if (isNaN(a[i])) {\n\t      command = a[i].toUpperCase();\n\t      isRelative = command !== a[i];\n\t    } else {\n\t      i--;\n\t    }\n\n\t    x = +a[i + 1];\n\t    y = +a[i + 2];\n\n\t    if (isRelative) {\n\t      x += relativeX;\n\t      y += relativeY;\n\t    }\n\n\t    if (!i) {\n\t      startX = x;\n\t      startY = y;\n\t    }\n\n\t    if (command === \"M\") {\n\t      if (segment) {\n\t        if (segment.length < 8) {\n\t          path.length -= 1;\n\t        } else {\n\t          points += segment.length;\n\t        }\n\t      }\n\n\t      relativeX = startX = x;\n\t      relativeY = startY = y;\n\t      segment = [x, y];\n\t      path.push(segment);\n\t      i += 2;\n\t      command = \"L\";\n\t    } else if (command === \"C\") {\n\t      if (!segment) {\n\t        segment = [0, 0];\n\t      }\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n\t      i += 6;\n\t    } else if (command === \"S\") {\n\t      difX = relativeX;\n\t      difY = relativeY;\n\n\t      if (prevCommand === \"C\" || prevCommand === \"S\") {\n\t        difX += relativeX - segment[segment.length - 4];\n\t        difY += relativeY - segment[segment.length - 3];\n\t      }\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n\t      i += 4;\n\t    } else if (command === \"Q\") {\n\t      difX = relativeX + (x - relativeX) * twoThirds;\n\t      difY = relativeY + (y - relativeY) * twoThirds;\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      relativeX += a[i + 3] * 1;\n\t      relativeY += a[i + 4] * 1;\n\t      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n\t      i += 4;\n\t    } else if (command === \"T\") {\n\t      difX = relativeX - segment[segment.length - 4];\n\t      difY = relativeY - segment[segment.length - 3];\n\t      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n\t      i += 2;\n\t    } else if (command === \"H\") {\n\t      line(relativeX, relativeY, relativeX = x, relativeY);\n\t      i += 1;\n\t    } else if (command === \"V\") {\n\t      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n\t      i += 1;\n\t    } else if (command === \"L\" || command === \"Z\") {\n\t      if (command === \"Z\") {\n\t        x = startX;\n\t        y = startY;\n\t        segment.closed = true;\n\t      }\n\n\t      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n\t        line(relativeX, relativeY, x, y);\n\n\t        if (command === \"L\") {\n\t          i += 2;\n\t        }\n\t      }\n\n\t      relativeX = x;\n\t      relativeY = y;\n\t    } else if (command === \"A\") {\n\t      flag1 = a[i + 4];\n\t      flag2 = a[i + 5];\n\t      difX = a[i + 6];\n\t      difY = a[i + 7];\n\t      j = 7;\n\n\t      if (flag1.length > 1) {\n\t        if (flag1.length < 3) {\n\t          difY = difX;\n\t          difX = flag2;\n\t          j--;\n\t        } else {\n\t          difY = flag2;\n\t          difX = flag1.substr(2);\n\t          j -= 2;\n\t        }\n\n\t        flag2 = flag1.charAt(1);\n\t        flag1 = flag1.charAt(0);\n\t      }\n\n\t      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n\t      i += j;\n\n\t      if (beziers) {\n\t        for (j = 0; j < beziers.length; j++) {\n\t          segment.push(beziers[j]);\n\t        }\n\t      }\n\n\t      relativeX = segment[segment.length - 2];\n\t      relativeY = segment[segment.length - 1];\n\t    } else {\n\t      console.log(errorMessage);\n\t    }\n\t  }\n\n\t  i = segment.length;\n\n\t  if (i < 6) {\n\t    path.pop();\n\t    i = 0;\n\t  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n\t    segment.closed = true;\n\t  }\n\n\t  path.totalPoints = points + i;\n\t  return path;\n\t}\n\tfunction rawPathToString(rawPath) {\n\t  if (_isNumber(rawPath[0])) {\n\t    rawPath = [rawPath];\n\t  }\n\n\t  var result = \"\",\n\t      l = rawPath.length,\n\t      sl,\n\t      s,\n\t      i,\n\t      segment;\n\n\t  for (s = 0; s < l; s++) {\n\t    segment = rawPath[s];\n\t    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n\t    sl = segment.length;\n\n\t    for (i = 2; i < sl; i++) {\n\t      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n\t    }\n\n\t    if (segment.closed) {\n\t      result += \"z\";\n\t    }\n\t  }\n\n\t  return result;\n\t}\n\n\t/*!\n\t * CustomEase 3.12.2\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2023, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\n\tvar gsap,\n\t    _coreInitted,\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _initCore = function _initCore() {\n\t  gsap = _getGSAP();\n\n\t  if (gsap) {\n\t    gsap.registerEase(\"_CE\", CustomEase.create);\n\t    _coreInitted = 1;\n\t  } else {\n\t    console.warn(\"Please gsap.registerPlugin(CustomEase)\");\n\t  }\n\t},\n\t    _bigNum = 1e20,\n\t    _round$1 = function _round(value) {\n\t  return ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000;\n\t},\n\t    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n\t    _needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,\n\t    _findMinimum = function _findMinimum(values) {\n\t  var l = values.length,\n\t      min = _bigNum,\n\t      i;\n\n\t  for (i = 1; i < l; i += 6) {\n\t    +values[i] < min && (min = +values[i]);\n\t  }\n\n\t  return min;\n\t},\n\t    _normalize = function _normalize(values, height, originY) {\n\t  if (!originY && originY !== 0) {\n\t    originY = Math.max(+values[values.length - 1], +values[1]);\n\t  }\n\n\t  var tx = +values[0] * -1,\n\t      ty = -originY,\n\t      l = values.length,\n\t      sx = 1 / (+values[l - 2] + tx),\n\t      sy = -height || (Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0]) ? _findMinimum(values) + ty : +values[l - 1] + ty),\n\t      i;\n\n\t  if (sy) {\n\t    sy = 1 / sy;\n\t  } else {\n\t    sy = -sx;\n\t  }\n\n\t  for (i = 0; i < l; i += 2) {\n\t    values[i] = (+values[i] + tx) * sx;\n\t    values[i + 1] = (+values[i + 1] + ty) * sy;\n\t  }\n\t},\n\t    _bezierToPoints = function _bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n\t  var x12 = (x1 + x2) / 2,\n\t      y12 = (y1 + y2) / 2,\n\t      x23 = (x2 + x3) / 2,\n\t      y23 = (y2 + y3) / 2,\n\t      x34 = (x3 + x4) / 2,\n\t      y34 = (y3 + y4) / 2,\n\t      x123 = (x12 + x23) / 2,\n\t      y123 = (y12 + y23) / 2,\n\t      x234 = (x23 + x34) / 2,\n\t      y234 = (y23 + y34) / 2,\n\t      x1234 = (x123 + x234) / 2,\n\t      y1234 = (y123 + y234) / 2,\n\t      dx = x4 - x1,\n\t      dy = y4 - y1,\n\t      d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),\n\t      d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),\n\t      length;\n\n\t  if (!points) {\n\t    points = [{\n\t      x: x1,\n\t      y: y1\n\t    }, {\n\t      x: x4,\n\t      y: y4\n\t    }];\n\t    index = 1;\n\t  }\n\n\t  points.splice(index || points.length - 1, 0, {\n\t    x: x1234,\n\t    y: y1234\n\t  });\n\n\t  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n\t    length = points.length;\n\n\t    _bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n\n\t    _bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));\n\t  }\n\n\t  return points;\n\t};\n\n\tvar CustomEase = function () {\n\t  function CustomEase(id, data, config) {\n\t    _coreInitted || _initCore();\n\t    this.id = id;\n\t     this.setData(data, config);\n\t  }\n\n\t  var _proto = CustomEase.prototype;\n\n\t  _proto.setData = function setData(data, config) {\n\t    config = config || {};\n\t    data = data || \"0,0,1,1\";\n\t    var values = data.match(_numExp),\n\t        closest = 1,\n\t        points = [],\n\t        lookup = [],\n\t        precision = config.precision || 1,\n\t        fast = precision <= 1,\n\t        l,\n\t        a1,\n\t        a2,\n\t        i,\n\t        inc,\n\t        j,\n\t        point,\n\t        prevPoint,\n\t        p;\n\t    this.data = data;\n\n\t    if (_needsParsingExp.test(data) || ~data.indexOf(\"M\") && data.indexOf(\"C\") < 0) {\n\t      values = stringToRawPath(data)[0];\n\t    }\n\n\t    l = values.length;\n\n\t    if (l === 4) {\n\t      values.unshift(0, 0);\n\t      values.push(1, 1);\n\t      l = 8;\n\t    } else if ((l - 2) % 6) {\n\t      throw \"Invalid CustomEase\";\n\t    }\n\n\t    if (+values[0] !== 0 || +values[l - 2] !== 1) {\n\t      _normalize(values, config.height, config.originY);\n\t    }\n\n\t    this.segment = values;\n\n\t    for (i = 2; i < l; i += 6) {\n\t      a1 = {\n\t        x: +values[i - 2],\n\t        y: +values[i - 1]\n\t      };\n\t      a2 = {\n\t        x: +values[i + 4],\n\t        y: +values[i + 5]\n\t      };\n\t      points.push(a1, a2);\n\n\t      _bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);\n\t    }\n\n\t    l = points.length;\n\n\t    for (i = 0; i < l; i++) {\n\t      point = points[i];\n\t      prevPoint = points[i - 1] || point;\n\n\t      if ((point.x > prevPoint.x || prevPoint.y !== point.y && prevPoint.x === point.x || point === prevPoint) && point.x <= 1) {\n\t        prevPoint.cx = point.x - prevPoint.x;\n\t        prevPoint.cy = point.y - prevPoint.y;\n\t        prevPoint.n = point;\n\t        prevPoint.nx = point.x;\n\n\t        if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) {\n\t          fast = 0;\n\t        }\n\n\t        if (prevPoint.cx < closest) {\n\t          if (!prevPoint.cx) {\n\t            prevPoint.cx = 0.001;\n\n\t            if (i === l - 1) {\n\t              prevPoint.x -= 0.001;\n\t              closest = Math.min(closest, 0.001);\n\t              fast = 0;\n\t            }\n\t          } else {\n\t            closest = prevPoint.cx;\n\t          }\n\t        }\n\t      } else {\n\t        points.splice(i--, 1);\n\t        l--;\n\t      }\n\t    }\n\n\t    l = 1 / closest + 1 | 0;\n\t    inc = 1 / l;\n\t    j = 0;\n\t    point = points[0];\n\n\t    if (fast) {\n\t      for (i = 0; i < l; i++) {\n\t        p = i * inc;\n\n\t        if (point.nx < p) {\n\t          point = points[++j];\n\t        }\n\n\t        a1 = point.y + (p - point.x) / point.cx * point.cy;\n\t        lookup[i] = {\n\t          x: p,\n\t          cx: inc,\n\t          y: a1,\n\t          cy: 0,\n\t          nx: 9\n\t        };\n\n\t        if (i) {\n\t          lookup[i - 1].cy = a1 - lookup[i - 1].y;\n\t        }\n\t      }\n\n\t      lookup[l - 1].cy = points[points.length - 1].y - a1;\n\t    } else {\n\t      for (i = 0; i < l; i++) {\n\t        if (point.nx < i * inc) {\n\t          point = points[++j];\n\t        }\n\n\t        lookup[i] = point;\n\t      }\n\n\t      if (j < points.length - 1) {\n\t        lookup[i - 1] = points[points.length - 2];\n\t      }\n\t    }\n\n\t    this.ease = function (p) {\n\t      var point = lookup[p * l | 0] || lookup[l - 1];\n\n\t      if (point.nx < p) {\n\t        point = point.n;\n\t      }\n\n\t      return point.y + (p - point.x) / point.cx * point.cy;\n\t    };\n\n\t    this.ease.custom = this;\n\t    this.id && gsap && gsap.registerEase(this.id, this.ease);\n\t    return this;\n\t  };\n\n\t  _proto.getSVGData = function getSVGData(config) {\n\t    return CustomEase.getSVGData(this, config);\n\t  };\n\n\t  CustomEase.create = function create(id, data, config) {\n\t    return new CustomEase(id, data, config).ease;\n\t  };\n\n\t  CustomEase.register = function register(core) {\n\t    gsap = core;\n\n\t    _initCore();\n\t  };\n\n\t  CustomEase.get = function get(id) {\n\t    return gsap.parseEase(id);\n\t  };\n\n\t  CustomEase.getSVGData = function getSVGData(ease, config) {\n\t    config = config || {};\n\t    var width = config.width || 100,\n\t        height = config.height || 100,\n\t        x = config.x || 0,\n\t        y = (config.y || 0) + height,\n\t        e = gsap.utils.toArray(config.path)[0],\n\t        a,\n\t        slope,\n\t        i,\n\t        inc,\n\t        tx,\n\t        ty,\n\t        precision,\n\t        threshold,\n\t        prevX,\n\t        prevY;\n\n\t    if (config.invert) {\n\t      height = -height;\n\t      y = 0;\n\t    }\n\n\t    if (typeof ease === \"string\") {\n\t      ease = gsap.parseEase(ease);\n\t    }\n\n\t    if (ease.custom) {\n\t      ease = ease.custom;\n\t    }\n\n\t    if (ease instanceof CustomEase) {\n\t      a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));\n\t    } else {\n\t      a = [x, y];\n\t      precision = Math.max(5, (config.precision || 1) * 200);\n\t      inc = 1 / precision;\n\t      precision += 2;\n\t      threshold = 5 / precision;\n\t      prevX = _round$1(x + inc * width);\n\t      prevY = _round$1(y + ease(inc) * -height);\n\t      slope = (prevY - y) / (prevX - x);\n\n\t      for (i = 2; i < precision; i++) {\n\t        tx = _round$1(x + i * inc * width);\n\t        ty = _round$1(y + ease(i * inc) * -height);\n\n\t        if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) {\n\t          a.push(prevX, prevY);\n\t          slope = (ty - prevY) / (tx - prevX);\n\t        }\n\n\t        prevX = tx;\n\t        prevY = ty;\n\t      }\n\n\t      a = \"M\" + a.join(\",\");\n\t    }\n\n\t    e && e.setAttribute(\"d\", a);\n\t    return a;\n\t  };\n\n\t  return CustomEase;\n\t}();\n\t_getGSAP() && gsap.registerPlugin(CustomEase);\n\tCustomEase.version = \"3.12.2\";\n\n\texports.CustomEase = CustomEase;\n\texports.default = CustomEase;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\t/*!\n\t * ScrollToPlugin 3.12.2\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2023, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\tvar gsap,\n\t    _coreInitted,\n\t    _window,\n\t    _docEl,\n\t    _body,\n\t    _toArray,\n\t    _config,\n\t    ScrollTrigger,\n\t    _windowExists = function _windowExists() {\n\t  return typeof window !== \"undefined\";\n\t},\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _isString = function _isString(value) {\n\t  return typeof value === \"string\";\n\t},\n\t    _isFunction = function _isFunction(value) {\n\t  return typeof value === \"function\";\n\t},\n\t    _max = function _max(element, axis) {\n\t  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n\t      scroll = \"scroll\" + dim,\n\t      client = \"client\" + dim;\n\t  return element === _window || element === _docEl || element === _body ? Math.max(_docEl[scroll], _body[scroll]) - (_window[\"inner\" + dim] || _docEl[client] || _body[client]) : element[scroll] - element[\"offset\" + dim];\n\t},\n\t    _buildGetter = function _buildGetter(e, axis) {\n\t  var p = \"scroll\" + (axis === \"x\" ? \"Left\" : \"Top\");\n\n\t  if (e === _window) {\n\t    if (e.pageXOffset != null) {\n\t      p = \"page\" + axis.toUpperCase() + \"Offset\";\n\t    } else {\n\t      e = _docEl[p] != null ? _docEl : _body;\n\t    }\n\t  }\n\n\t  return function () {\n\t    return e[p];\n\t  };\n\t},\n\t    _clean = function _clean(value, index, target, targets) {\n\t  _isFunction(value) && (value = value(index, target, targets));\n\n\t  if (typeof value !== \"object\") {\n\t    return _isString(value) && value !== \"max\" && value.charAt(1) !== \"=\" ? {\n\t      x: value,\n\t      y: value\n\t    } : {\n\t      y: value\n\t    };\n\t  } else if (value.nodeType) {\n\t    return {\n\t      y: value,\n\t      x: value\n\t    };\n\t  } else {\n\t    var result = {},\n\t        p;\n\n\t    for (p in value) {\n\t      result[p] = p !== \"onAutoKill\" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];\n\t    }\n\n\t    return result;\n\t  }\n\t},\n\t    _getOffset = function _getOffset(element, container) {\n\t  element = _toArray(element)[0];\n\n\t  if (!element || !element.getBoundingClientRect) {\n\t    return console.warn(\"scrollTo target doesn't exist. Using 0\") || {\n\t      x: 0,\n\t      y: 0\n\t    };\n\t  }\n\n\t  var rect = element.getBoundingClientRect(),\n\t      isRoot = !container || container === _window || container === _body,\n\t      cRect = isRoot ? {\n\t    top: _docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0),\n\t    left: _docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)\n\t  } : container.getBoundingClientRect(),\n\t      offsets = {\n\t    x: rect.left - cRect.left,\n\t    y: rect.top - cRect.top\n\t  };\n\n\t  if (!isRoot && container) {\n\t    offsets.x += _buildGetter(container, \"x\")();\n\t    offsets.y += _buildGetter(container, \"y\")();\n\t  }\n\n\t  return offsets;\n\t},\n\t    _parseVal = function _parseVal(value, target, axis, currentVal, offset) {\n\t  return !isNaN(value) && typeof value !== \"object\" ? parseFloat(value) - offset : _isString(value) && value.charAt(1) === \"=\" ? parseFloat(value.substr(2)) * (value.charAt(0) === \"-\" ? -1 : 1) + currentVal - offset : value === \"max\" ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset);\n\t},\n\t    _initCore = function _initCore() {\n\t  gsap = _getGSAP();\n\n\t  if (_windowExists() && gsap && typeof document !== \"undefined\" && document.body) {\n\t    _window = window;\n\t    _body = document.body;\n\t    _docEl = document.documentElement;\n\t    _toArray = gsap.utils.toArray;\n\t    gsap.config({\n\t      autoKillThreshold: 7\n\t    });\n\t    _config = gsap.config();\n\t    _coreInitted = 1;\n\t  }\n\t};\n\n\tvar ScrollToPlugin = {\n\t  version: \"3.12.2\",\n\t  name: \"scrollTo\",\n\t  rawVars: 1,\n\t  register: function register(core) {\n\t    gsap = core;\n\n\t    _initCore();\n\t  },\n\t  init: function init(target, value, tween, index, targets) {\n\t    _coreInitted || _initCore();\n\t    var data = this,\n\t        snapType = gsap.getProperty(target, \"scrollSnapType\");\n\t    data.isWin = target === _window;\n\t    data.target = target;\n\t    data.tween = tween;\n\t    value = _clean(value, index, target, targets);\n\t    data.vars = value;\n\t    data.autoKill = !!value.autoKill;\n\t    data.getX = _buildGetter(target, \"x\");\n\t    data.getY = _buildGetter(target, \"y\");\n\t    data.x = data.xPrev = data.getX();\n\t    data.y = data.yPrev = data.getY();\n\t    ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);\n\t    gsap.getProperty(target, \"scrollBehavior\") === \"smooth\" && gsap.set(target, {\n\t      scrollBehavior: \"auto\"\n\t    });\n\n\t    if (snapType && snapType !== \"none\") {\n\t      data.snap = 1;\n\t      data.snapInline = target.style.scrollSnapType;\n\t      target.style.scrollSnapType = \"none\";\n\t    }\n\n\t    if (value.x != null) {\n\t      data.add(data, \"x\", data.x, _parseVal(value.x, target, \"x\", data.x, value.offsetX || 0), index, targets);\n\n\t      data._props.push(\"scrollTo_x\");\n\t    } else {\n\t      data.skipX = 1;\n\t    }\n\n\t    if (value.y != null) {\n\t      data.add(data, \"y\", data.y, _parseVal(value.y, target, \"y\", data.y, value.offsetY || 0), index, targets);\n\n\t      data._props.push(\"scrollTo_y\");\n\t    } else {\n\t      data.skipY = 1;\n\t    }\n\t  },\n\t  render: function render(ratio, data) {\n\t    var pt = data._pt,\n\t        target = data.target,\n\t        tween = data.tween,\n\t        autoKill = data.autoKill,\n\t        xPrev = data.xPrev,\n\t        yPrev = data.yPrev,\n\t        isWin = data.isWin,\n\t        snap = data.snap,\n\t        snapInline = data.snapInline,\n\t        x,\n\t        y,\n\t        yDif,\n\t        xDif,\n\t        threshold;\n\n\t    while (pt) {\n\t      pt.r(ratio, pt.d);\n\t      pt = pt._next;\n\t    }\n\n\t    x = isWin || !data.skipX ? data.getX() : xPrev;\n\t    y = isWin || !data.skipY ? data.getY() : yPrev;\n\t    yDif = y - yPrev;\n\t    xDif = x - xPrev;\n\t    threshold = _config.autoKillThreshold;\n\n\t    if (data.x < 0) {\n\t      data.x = 0;\n\t    }\n\n\t    if (data.y < 0) {\n\t      data.y = 0;\n\t    }\n\n\t    if (autoKill) {\n\t      if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, \"x\")) {\n\t        data.skipX = 1;\n\t      }\n\n\t      if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, \"y\")) {\n\t        data.skipY = 1;\n\t      }\n\n\t      if (data.skipX && data.skipY) {\n\t        tween.kill();\n\t        data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);\n\t      }\n\t    }\n\n\t    if (isWin) {\n\t      _window.scrollTo(!data.skipX ? data.x : x, !data.skipY ? data.y : y);\n\t    } else {\n\t      data.skipY || (target.scrollTop = data.y);\n\t      data.skipX || (target.scrollLeft = data.x);\n\t    }\n\n\t    if (snap && (ratio === 1 || ratio === 0)) {\n\t      y = target.scrollTop;\n\t      x = target.scrollLeft;\n\t      snapInline ? target.style.scrollSnapType = snapInline : target.style.removeProperty(\"scroll-snap-type\");\n\t      target.scrollTop = y + 1;\n\t      target.scrollLeft = x + 1;\n\t      target.scrollTop = y;\n\t      target.scrollLeft = x;\n\t    }\n\n\t    data.xPrev = data.x;\n\t    data.yPrev = data.y;\n\t    ScrollTrigger && ScrollTrigger.update();\n\t  },\n\t  kill: function kill(property) {\n\t    var both = property === \"scrollTo\";\n\n\t    if (both || property === \"scrollTo_x\") {\n\t      this.skipX = 1;\n\t    }\n\n\t    if (both || property === \"scrollTo_y\") {\n\t      this.skipY = 1;\n\t    }\n\t  }\n\t};\n\tScrollToPlugin.max = _max;\n\tScrollToPlugin.getOffset = _getOffset;\n\tScrollToPlugin.buildGetter = _buildGetter;\n\t_getGSAP() && gsap.registerPlugin(ScrollToPlugin);\n\n\texports.ScrollToPlugin = ScrollToPlugin;\n\texports.default = ScrollToPlugin;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /*!\n   * Observer 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var gsap,\n      _coreInitted,\n      _clamp,\n      _win,\n      _doc,\n      _docEl,\n      _body,\n      _isTouch,\n      _pointerType,\n      ScrollTrigger,\n      _root,\n      _normalizer,\n      _eventTypes,\n      _context,\n      _getGSAP = function _getGSAP() {\n    return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n  },\n      _startup = 1,\n      _observers = [],\n      _scrollers = [],\n      _proxies = [],\n      _getTime = Date.now,\n      _bridge = function _bridge(name, value) {\n    return value;\n  },\n      _integrate = function _integrate() {\n    var core = ScrollTrigger.core,\n        data = core.bridge || {},\n        scrollers = core._scrollers,\n        proxies = core._proxies;\n    scrollers.push.apply(scrollers, _scrollers);\n    proxies.push.apply(proxies, _proxies);\n    _scrollers = scrollers;\n    _proxies = proxies;\n\n    _bridge = function _bridge(name, value) {\n      return data[name](value);\n    };\n  },\n      _getProxyProp = function _getProxyProp(element, property) {\n    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n  },\n      _isViewport = function _isViewport(el) {\n    return !!~_root.indexOf(el);\n  },\n      _addListener = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _scrollLeft = \"scrollLeft\",\n      _scrollTop = \"scrollTop\",\n      _onScroll = function _onScroll() {\n    return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n  },\n      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n    var cachingFunc = function cachingFunc(value) {\n      if (value || value === 0) {\n        _startup && (_win.history.scrollRestoration = \"manual\");\n        var isNormalizing = _normalizer && _normalizer.isPressed;\n        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0);\n        f(value);\n        cachingFunc.cacheID = _scrollers.cache;\n        isNormalizing && _bridge(\"ss\", value);\n      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n        cachingFunc.cacheID = _scrollers.cache;\n        cachingFunc.v = f();\n      }\n\n      return cachingFunc.v + cachingFunc.offset;\n    };\n\n    cachingFunc.offset = 0;\n    return f && cachingFunc;\n  },\n      _horizontal = {\n    s: _scrollLeft,\n    p: \"left\",\n    p2: \"Left\",\n    os: \"right\",\n    os2: \"Right\",\n    d: \"width\",\n    d2: \"Width\",\n    a: \"x\",\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n    })\n  },\n      _vertical = {\n    s: _scrollTop,\n    p: \"top\",\n    p2: \"Top\",\n    os: \"bottom\",\n    os2: \"Bottom\",\n    d: \"height\",\n    d2: \"Height\",\n    a: \"y\",\n    op: _horizontal,\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n    })\n  },\n      _getTarget = function _getTarget(t, self) {\n    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n  },\n      _getScrollFunc = function _getScrollFunc(element, _ref) {\n    var s = _ref.s,\n        sc = _ref.sc;\n    _isViewport(element) && (element = _doc.scrollingElement || _docEl);\n\n    var i = _scrollers.indexOf(element),\n        offset = sc === _vertical.sc ? 1 : 2;\n\n    !~i && (i = _scrollers.push(element) - 1);\n    _scrollers[i + offset] || _addListener(element, \"scroll\", _onScroll);\n    var prev = _scrollers[i + offset],\n        func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {\n      return arguments.length ? element[s] = value : element[s];\n    })));\n    func.target = element;\n    prev || (func.smooth = gsap.getProperty(element, \"scrollBehavior\") === \"smooth\");\n    return func;\n  },\n      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n    var v1 = value,\n        v2 = value,\n        t1 = _getTime(),\n        t2 = t1,\n        min = minTimeRefresh || 50,\n        dropToZeroTime = Math.max(500, min * 3),\n        update = function update(value, force) {\n      var t = _getTime();\n\n      if (force || t - t1 > min) {\n        v2 = v1;\n        v1 = value;\n        t2 = t1;\n        t1 = t;\n      } else if (useDelta) {\n        v1 += value;\n      } else {\n        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n      }\n    },\n        reset = function reset() {\n      v2 = v1 = useDelta ? 0 : v1;\n      t2 = t1 = 0;\n    },\n        getVelocity = function getVelocity(latestValue) {\n      var tOld = t2,\n          vOld = v2,\n          t = _getTime();\n\n      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n    };\n\n    return {\n      update: update,\n      reset: reset,\n      getVelocity: getVelocity\n    };\n  },\n      _getEvent = function _getEvent(e, preventDefault) {\n    preventDefault && !e._gsapAllow && e.preventDefault();\n    return e.changedTouches ? e.changedTouches[0] : e;\n  },\n      _getAbsoluteMax = function _getAbsoluteMax(a) {\n    var max = Math.max.apply(Math, a),\n        min = Math.min.apply(Math, a);\n    return Math.abs(max) >= Math.abs(min) ? max : min;\n  },\n      _setScrollTrigger = function _setScrollTrigger() {\n    ScrollTrigger = gsap.core.globals().ScrollTrigger;\n    ScrollTrigger && ScrollTrigger.core && _integrate();\n  },\n      _initCore = function _initCore(core) {\n    gsap = core || _getGSAP();\n\n    if (gsap && typeof document !== \"undefined\" && document.body) {\n      _win = window;\n      _doc = document;\n      _docEl = _doc.documentElement;\n      _body = _doc.body;\n      _root = [_win, _doc, _docEl, _body];\n      _clamp = gsap.utils.clamp;\n\n      _context = gsap.core.context || function () {};\n\n      _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\";\n      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n      _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n      setTimeout(function () {\n        return _startup = 0;\n      }, 500);\n\n      _setScrollTrigger();\n\n      _coreInitted = 1;\n    }\n\n    return _coreInitted;\n  };\n\n  _horizontal.op = _vertical;\n  _scrollers.cache = 0;\n  var Observer = function () {\n    function Observer(vars) {\n      this.init(vars);\n    }\n\n    var _proto = Observer.prototype;\n\n    _proto.init = function init(vars) {\n      _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n      ScrollTrigger || _setScrollTrigger();\n      var tolerance = vars.tolerance,\n          dragMinimum = vars.dragMinimum,\n          type = vars.type,\n          target = vars.target,\n          lineHeight = vars.lineHeight,\n          debounce = vars.debounce,\n          preventDefault = vars.preventDefault,\n          onStop = vars.onStop,\n          onStopDelay = vars.onStopDelay,\n          ignore = vars.ignore,\n          wheelSpeed = vars.wheelSpeed,\n          event = vars.event,\n          onDragStart = vars.onDragStart,\n          onDragEnd = vars.onDragEnd,\n          onDrag = vars.onDrag,\n          onPress = vars.onPress,\n          onRelease = vars.onRelease,\n          onRight = vars.onRight,\n          onLeft = vars.onLeft,\n          onUp = vars.onUp,\n          onDown = vars.onDown,\n          onChangeX = vars.onChangeX,\n          onChangeY = vars.onChangeY,\n          onChange = vars.onChange,\n          onToggleX = vars.onToggleX,\n          onToggleY = vars.onToggleY,\n          onHover = vars.onHover,\n          onHoverEnd = vars.onHoverEnd,\n          onMove = vars.onMove,\n          ignoreCheck = vars.ignoreCheck,\n          isNormalizer = vars.isNormalizer,\n          onGestureStart = vars.onGestureStart,\n          onGestureEnd = vars.onGestureEnd,\n          onWheel = vars.onWheel,\n          onEnable = vars.onEnable,\n          onDisable = vars.onDisable,\n          onClick = vars.onClick,\n          scrollSpeed = vars.scrollSpeed,\n          capture = vars.capture,\n          allowClicks = vars.allowClicks,\n          lockAxis = vars.lockAxis,\n          onLockAxis = vars.onLockAxis;\n      this.target = target = _getTarget(target) || _docEl;\n      this.vars = vars;\n      ignore && (ignore = gsap.utils.toArray(ignore));\n      tolerance = tolerance || 1e-9;\n      dragMinimum = dragMinimum || 0;\n      wheelSpeed = wheelSpeed || 1;\n      scrollSpeed = scrollSpeed || 1;\n      type = type || \"wheel,touch,pointer\";\n      debounce = debounce !== false;\n      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22);\n\n      var id,\n          onStopDelayedCall,\n          dragged,\n          moved,\n          wheeled,\n          locked,\n          axis,\n          self = this,\n          prevDeltaX = 0,\n          prevDeltaY = 0,\n          scrollFuncX = _getScrollFunc(target, _horizontal),\n          scrollFuncY = _getScrollFunc(target, _vertical),\n          scrollX = scrollFuncX(),\n          scrollY = scrollFuncY(),\n          limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\",\n          isViewport = _isViewport(target),\n          ownerDoc = target.ownerDocument || _doc,\n          deltaX = [0, 0, 0],\n          deltaY = [0, 0, 0],\n          onClickTime = 0,\n          clickCapture = function clickCapture() {\n        return onClickTime = _getTime();\n      },\n          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n      },\n          onStopFunc = function onStopFunc() {\n        self._vx.reset();\n\n        self._vy.reset();\n\n        onStopDelayedCall.pause();\n        onStop && onStop(self);\n      },\n          update = function update() {\n        var dx = self.deltaX = _getAbsoluteMax(deltaX),\n            dy = self.deltaY = _getAbsoluteMax(deltaY),\n            changedX = Math.abs(dx) >= tolerance,\n            changedY = Math.abs(dy) >= tolerance;\n\n        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY);\n\n        if (changedX) {\n          onRight && self.deltaX > 0 && onRight(self);\n          onLeft && self.deltaX < 0 && onLeft(self);\n          onChangeX && onChangeX(self);\n          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n          prevDeltaX = self.deltaX;\n          deltaX[0] = deltaX[1] = deltaX[2] = 0;\n        }\n\n        if (changedY) {\n          onDown && self.deltaY > 0 && onDown(self);\n          onUp && self.deltaY < 0 && onUp(self);\n          onChangeY && onChangeY(self);\n          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n          prevDeltaY = self.deltaY;\n          deltaY[0] = deltaY[1] = deltaY[2] = 0;\n        }\n\n        if (moved || dragged) {\n          onMove && onMove(self);\n\n          if (dragged) {\n            onDrag(self);\n            dragged = false;\n          }\n\n          moved = false;\n        }\n\n        locked && !(locked = false) && onLockAxis && onLockAxis(self);\n\n        if (wheeled) {\n          onWheel(self);\n          wheeled = false;\n        }\n\n        id = 0;\n      },\n          onDelta = function onDelta(x, y, index) {\n        deltaX[index] += x;\n        deltaY[index] += y;\n\n        self._vx.update(x);\n\n        self._vy.update(y);\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n        if (lockAxis && !axis) {\n          self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n          locked = true;\n        }\n\n        if (axis !== \"y\") {\n          deltaX[2] += x;\n\n          self._vx.update(x, true);\n        }\n\n        if (axis !== \"x\") {\n          deltaY[2] += y;\n\n          self._vy.update(y, true);\n        }\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          _onDrag = function _onDrag(e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y,\n            isDragging = self.isDragging;\n        self.x = x;\n        self.y = y;\n\n        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {\n          onDrag && (dragged = true);\n          isDragging || (self.isDragging = true);\n          onTouchOrPointerDelta(dx, dy);\n          isDragging || onDragStart && onDragStart(self);\n        }\n      },\n          _onPress = self.onPress = function (e) {\n        if (_ignoreCheck(e, 1) || e && e.button) {\n          return;\n        }\n\n        self.axis = axis = null;\n        onStopDelayedCall.pause();\n        self.isPressed = true;\n        e = _getEvent(e);\n        prevDeltaX = prevDeltaY = 0;\n        self.startX = self.x = e.clientX;\n        self.startY = self.y = e.clientY;\n\n        self._vx.reset();\n\n        self._vy.reset();\n\n        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);\n\n        self.deltaX = self.deltaY = 0;\n        onPress && onPress(self);\n      },\n          _onRelease = self.onRelease = function (e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n\n        var isTrackingDrag = !isNaN(self.y - self.startY),\n            wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),\n            eventData = _getEvent(e);\n\n        if (!wasDragging && isTrackingDrag) {\n          self._vx.reset();\n\n          self._vy.reset();\n\n          if (preventDefault && allowClicks) {\n            gsap.delayedCall(0.08, function () {\n              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n                if (e.target.click) {\n                  e.target.click();\n                } else if (ownerDoc.createEvent) {\n                  var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                  syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                  e.target.dispatchEvent(syntheticEvent);\n                }\n              }\n            });\n          }\n        }\n\n        self.isDragging = self.isGesturing = self.isPressed = false;\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n        onDragEnd && wasDragging && onDragEnd(self);\n        onRelease && onRelease(self, wasDragging);\n      },\n          _onGestureStart = function _onGestureStart(e) {\n        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n      },\n          _onGestureEnd = function _onGestureEnd() {\n        return (self.isGesturing = false) || onGestureEnd(self);\n      },\n          onScroll = function onScroll(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = scrollFuncX(),\n            y = scrollFuncY();\n        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n        scrollX = x;\n        scrollY = y;\n        onStop && onStopDelayedCall.restart(true);\n      },\n          _onWheel = function _onWheel(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        onWheel && (wheeled = true);\n        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n      },\n          _onMove = function _onMove(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y;\n        self.x = x;\n        self.y = y;\n        moved = true;\n        (dx || dy) && onTouchOrPointerDelta(dx, dy);\n      },\n          _onHover = function _onHover(e) {\n        self.event = e;\n        onHover(self);\n      },\n          _onHoverEnd = function _onHoverEnd(e) {\n        self.event = e;\n        onHoverEnd(self);\n      },\n          _onClick = function _onClick(e) {\n        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n      };\n\n      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n      self.deltaX = self.deltaY = 0;\n      self._vx = _getVelocityProp(0, 50, true);\n      self._vy = _getVelocityProp(0, 50, true);\n      self.scrollX = scrollFuncX;\n      self.scrollY = scrollFuncY;\n      self.isDragging = self.isGesturing = self.isPressed = false;\n\n      _context(this);\n\n      self.enable = function (e) {\n        if (!self.isEnabled) {\n          _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, preventDefault, capture);\n          type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, preventDefault, capture);\n\n          if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);\n\n            _addListener(ownerDoc, _eventTypes[2], _onRelease);\n\n            _addListener(ownerDoc, _eventTypes[3], _onRelease);\n\n            allowClicks && _addListener(target, \"click\", clickCapture, false, true);\n            onClick && _addListener(target, \"click\", _onClick);\n            onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n            onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n            onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n            onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n            onMove && _addListener(target, _pointerType + \"move\", _onMove);\n          }\n\n          self.isEnabled = true;\n          e && e.type && _onPress(e);\n          onEnable && onEnable(self);\n        }\n\n        return self;\n      };\n\n      self.disable = function () {\n        if (self.isEnabled) {\n          _observers.filter(function (o) {\n            return o !== self && _isViewport(o.target);\n          }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          if (self.isPressed) {\n            self._vx.reset();\n\n            self._vy.reset();\n\n            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n          }\n\n          _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n\n          _removeListener(target, \"wheel\", _onWheel, capture);\n\n          _removeListener(target, _eventTypes[0], _onPress, capture);\n\n          _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n\n          _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n\n          _removeListener(target, \"click\", clickCapture, true);\n\n          _removeListener(target, \"click\", _onClick);\n\n          _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n\n          _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n\n          _removeListener(target, _pointerType + \"enter\", _onHover);\n\n          _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n\n          _removeListener(target, _pointerType + \"move\", _onMove);\n\n          self.isEnabled = self.isPressed = self.isDragging = false;\n          onDisable && onDisable(self);\n        }\n      };\n\n      self.kill = self.revert = function () {\n        self.disable();\n\n        var i = _observers.indexOf(self);\n\n        i >= 0 && _observers.splice(i, 1);\n        _normalizer === self && (_normalizer = 0);\n      };\n\n      _observers.push(self);\n\n      isNormalizer && _isViewport(target) && (_normalizer = self);\n      self.enable(event);\n    };\n\n    _createClass(Observer, [{\n      key: \"velocityX\",\n      get: function get() {\n        return this._vx.getVelocity();\n      }\n    }, {\n      key: \"velocityY\",\n      get: function get() {\n        return this._vy.getVelocity();\n      }\n    }]);\n\n    return Observer;\n  }();\n  Observer.version = \"3.12.2\";\n\n  Observer.create = function (vars) {\n    return new Observer(vars);\n  };\n\n  Observer.register = _initCore;\n\n  Observer.getAll = function () {\n    return _observers.slice();\n  };\n\n  Observer.getById = function (id) {\n    return _observers.filter(function (o) {\n      return o.vars.id === id;\n    })[0];\n  };\n\n  _getGSAP() && gsap.registerPlugin(Observer);\n\n  /*!\n   * ScrollTrigger 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n\n  var gsap$1,\n      _coreInitted$1,\n      _win$1,\n      _doc$1,\n      _docEl$1,\n      _body$1,\n      _root$1,\n      _resizeDelay,\n      _toArray,\n      _clamp$1,\n      _time2,\n      _syncInterval,\n      _refreshing,\n      _pointerIsDown,\n      _transformProp,\n      _i,\n      _prevWidth,\n      _prevHeight,\n      _autoRefresh,\n      _sort,\n      _suppressOverwrites,\n      _ignoreResize,\n      _normalizer$1,\n      _ignoreMobileResize,\n      _baseScreenHeight,\n      _baseScreenWidth,\n      _fixIOSBug,\n      _context$1,\n      _scrollRestoration,\n      _div100vh,\n      _100vh,\n      _limitCallbacks,\n      _startup$1 = 1,\n      _getTime$1 = Date.now,\n      _time1 = _getTime$1(),\n      _lastScrollTime = 0,\n      _enabled = 0,\n      _parseClamp = function _parseClamp(value, type, self) {\n    var clamp = _isString(value) && (value.substr(0, 6) === \"clamp(\" || value.indexOf(\"max\") > -1);\n    self[\"_\" + type + \"Clamp\"] = clamp;\n    return clamp ? value.substr(6, value.length - 7) : value;\n  },\n      _keepClamp = function _keepClamp(value, clamp) {\n    return clamp && (!_isString(value) || value.substr(0, 6) !== \"clamp(\") ? \"clamp(\" + value + \")\" : value;\n  },\n      _rafBugFix = function _rafBugFix() {\n    return _enabled && requestAnimationFrame(_rafBugFix);\n  },\n      _pointerDownHandler = function _pointerDownHandler() {\n    return _pointerIsDown = 1;\n  },\n      _pointerUpHandler = function _pointerUpHandler() {\n    return _pointerIsDown = 0;\n  },\n      _passThrough = function _passThrough(v) {\n    return v;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _getGSAP$1 = function _getGSAP() {\n    return gsap$1 || _windowExists() && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;\n  },\n      _isViewport$1 = function _isViewport(e) {\n    return !!~_root$1.indexOf(e);\n  },\n      _getViewportDimension = function _getViewportDimension(dimensionProperty) {\n    return (dimensionProperty === \"Height\" ? _100vh : _win$1[\"inner\" + dimensionProperty]) || _docEl$1[\"client\" + dimensionProperty] || _body$1[\"client\" + dimensionProperty];\n  },\n      _getBoundsFunc = function _getBoundsFunc(element) {\n    return _getProxyProp(element, \"getBoundingClientRect\") || (_isViewport$1(element) ? function () {\n      _winOffsets.width = _win$1.innerWidth;\n      _winOffsets.height = _100vh;\n      return _winOffsets;\n    } : function () {\n      return _getBounds(element);\n    });\n  },\n      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n    var d = _ref.d,\n        d2 = _ref.d2,\n        a = _ref.a;\n    return (a = _getProxyProp(scroller, \"getBoundingClientRect\")) ? function () {\n      return a()[d];\n    } : function () {\n      return (isViewport ? _getViewportDimension(d2) : scroller[\"client\" + d2]) || 0;\n    };\n  },\n      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {\n      return _winOffsets;\n    };\n  },\n      _maxScroll = function _maxScroll(element, _ref2) {\n    var s = _ref2.s,\n        d2 = _ref2.d2,\n        d = _ref2.d,\n        a = _ref2.a;\n    return Math.max(0, (s = \"scroll\" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport$1(element) ? (_docEl$1[s] || _body$1[s]) - _getViewportDimension(d2) : element[s] - element[\"offset\" + d2]);\n  },\n      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n    for (var i = 0; i < _autoRefresh.length; i += 3) {\n      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n    }\n  },\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _endAnimation = function _endAnimation(animation, reversed, pause) {\n    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n  },\n      _callback = function _callback(self, func) {\n    if (self.enabled) {\n      var result = func(self);\n      result && result.totalTime && (self.callbackAnimation = result);\n    }\n  },\n      _abs = Math.abs,\n      _left = \"left\",\n      _top = \"top\",\n      _right = \"right\",\n      _bottom = \"bottom\",\n      _width = \"width\",\n      _height = \"height\",\n      _Right = \"Right\",\n      _Left = \"Left\",\n      _Top = \"Top\",\n      _Bottom = \"Bottom\",\n      _padding = \"padding\",\n      _margin = \"margin\",\n      _Width = \"Width\",\n      _Height = \"Height\",\n      _px = \"px\",\n      _getComputedStyle = function _getComputedStyle(element) {\n    return _win$1.getComputedStyle(element);\n  },\n      _makePositionable = function _makePositionable(element) {\n    var position = _getComputedStyle(element).position;\n\n    element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _getBounds = function _getBounds(element, withoutTransforms) {\n    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap$1.to(element, {\n      x: 0,\n      y: 0,\n      xPercent: 0,\n      yPercent: 0,\n      rotation: 0,\n      rotationX: 0,\n      rotationY: 0,\n      scale: 1,\n      skewX: 0,\n      skewY: 0\n    }).progress(1),\n        bounds = element.getBoundingClientRect();\n    tween && tween.progress(0).kill();\n    return bounds;\n  },\n      _getSize = function _getSize(element, _ref3) {\n    var d2 = _ref3.d2;\n    return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n  },\n      _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n    var a = [],\n        labels = timeline.labels,\n        duration = timeline.duration(),\n        p;\n\n    for (p in labels) {\n      a.push(labels[p] / duration);\n    }\n\n    return a;\n  },\n      _getClosestLabel = function _getClosestLabel(animation) {\n    return function (value) {\n      return gsap$1.utils.snap(_getLabelRatioArray(animation), value);\n    };\n  },\n      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n    var snap = gsap$1.utils.snap(snapIncrementOrArray),\n        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {\n      return a - b;\n    });\n    return a ? function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var i;\n\n      if (!direction) {\n        return snap(value);\n      }\n\n      if (direction > 0) {\n        value -= threshold;\n\n        for (i = 0; i < a.length; i++) {\n          if (a[i] >= value) {\n            return a[i];\n          }\n        }\n\n        return a[i - 1];\n      } else {\n        i = a.length;\n        value += threshold;\n\n        while (i--) {\n          if (a[i] <= value) {\n            return a[i];\n          }\n        }\n      }\n\n      return a[0];\n    } : function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var snapped = snap(value);\n      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n    };\n  },\n      _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n    return function (value, st) {\n      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n    };\n  },\n      _multiListener = function _multiListener(func, element, types, callback) {\n    return types.split(\",\").forEach(function (type) {\n      return func(element, type, callback);\n    });\n  },\n      _addListener$1 = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener$1 = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _wheelListener = function _wheelListener(func, el, scrollFunc) {\n    scrollFunc = scrollFunc && scrollFunc.wheelHandler;\n\n    if (scrollFunc) {\n      func(el, \"wheel\", scrollFunc);\n      func(el, \"touchmove\", scrollFunc);\n    }\n  },\n      _markerDefaults = {\n    startColor: \"green\",\n    endColor: \"red\",\n    indent: 0,\n    fontSize: \"16px\",\n    fontWeight: \"normal\"\n  },\n      _defaults = {\n    toggleActions: \"play\",\n    anticipatePin: 0\n  },\n      _keywords = {\n    top: 0,\n    left: 0,\n    center: 0.5,\n    bottom: 1,\n    right: 1\n  },\n      _offsetToPx = function _offsetToPx(value, size) {\n    if (_isString(value)) {\n      var eqIndex = value.indexOf(\"=\"),\n          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\n      if (~eqIndex) {\n        value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n        value = value.substr(0, eqIndex - 1);\n      }\n\n      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n    }\n\n    return value;\n  },\n      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n    var startColor = _ref4.startColor,\n        endColor = _ref4.endColor,\n        fontSize = _ref4.fontSize,\n        indent = _ref4.indent,\n        fontWeight = _ref4.fontWeight;\n\n    var e = _doc$1.createElement(\"div\"),\n        useFixedPosition = _isViewport$1(container) || _getProxyProp(container, \"pinType\") === \"fixed\",\n        isScroller = type.indexOf(\"scroller\") !== -1,\n        parent = useFixedPosition ? _body$1 : container,\n        isStart = type.indexOf(\"start\") !== -1,\n        color = isStart ? startColor : endColor,\n        css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\n    css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n    matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n    e._isStart = isStart;\n    e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n    e.style.cssText = css;\n    e.innerText = name || name === 0 ? type + \"-\" + name : type;\n    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n    e._offset = e[\"offset\" + direction.op.d2];\n\n    _positionMarker(e, 0, direction, isStart);\n\n    return e;\n  },\n      _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n    var vars = {\n      display: \"block\"\n    },\n        side = direction[flipped ? \"os2\" : \"p2\"],\n        oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n    marker._isFlipped = flipped;\n    vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n    vars[direction.a] = flipped ? \"1px\" : 0;\n    vars[\"border\" + side + _Width] = 1;\n    vars[\"border\" + oppositeSide + _Width] = 0;\n    vars[direction.p] = start + \"px\";\n    gsap$1.set(marker, vars);\n  },\n      _triggers = [],\n      _ids = {},\n      _rafID,\n      _sync = function _sync() {\n    return _getTime$1() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));\n  },\n      _onScroll$1 = function _onScroll() {\n    if (!_normalizer$1 || !_normalizer$1.isPressed || _normalizer$1.startX > _body$1.clientWidth) {\n      _scrollers.cache++;\n\n      if (_normalizer$1) {\n        _rafID || (_rafID = requestAnimationFrame(_updateAll));\n      } else {\n        _updateAll();\n      }\n\n      _lastScrollTime || _dispatch(\"scrollStart\");\n      _lastScrollTime = _getTime$1();\n    }\n  },\n      _setBaseDimensions = function _setBaseDimensions() {\n    _baseScreenWidth = _win$1.innerWidth;\n    _baseScreenHeight = _win$1.innerHeight;\n  },\n      _onResize = function _onResize() {\n    _scrollers.cache++;\n    !_refreshing && !_ignoreResize && !_doc$1.fullscreenElement && !_doc$1.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win$1.innerWidth || Math.abs(_win$1.innerHeight - _baseScreenHeight) > _win$1.innerHeight * 0.25) && _resizeDelay.restart(true);\n  },\n      _listeners = {},\n      _emptyArray = [],\n      _softRefresh = function _softRefresh() {\n    return _removeListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n  },\n      _dispatch = function _dispatch(type) {\n    return _listeners[type] && _listeners[type].map(function (f) {\n      return f();\n    }) || _emptyArray;\n  },\n      _savedStyles = [],\n      _revertRecorded = function _revertRecorded(media) {\n    for (var i = 0; i < _savedStyles.length; i += 5) {\n      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {\n        _savedStyles[i].style.cssText = _savedStyles[i + 1];\n        _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n        _savedStyles[i + 3].uncache = 1;\n      }\n    }\n  },\n      _revertAll = function _revertAll(kill, media) {\n    var trigger;\n\n    for (_i = 0; _i < _triggers.length; _i++) {\n      trigger = _triggers[_i];\n\n      if (trigger && (!media || trigger._ctx === media)) {\n        if (kill) {\n          trigger.kill(1);\n        } else {\n          trigger.revert(true, true);\n        }\n      }\n    }\n\n    media && _revertRecorded(media);\n    media || _dispatch(\"revert\");\n  },\n      _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {\n    _scrollers.cache++;\n    (force || !_refreshingAll) && _scrollers.forEach(function (obj) {\n      return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);\n    });\n    _isString(scrollRestoration) && (_win$1.history.scrollRestoration = _scrollRestoration = scrollRestoration);\n  },\n      _refreshingAll,\n      _refreshID = 0,\n      _queueRefreshID,\n      _queueRefreshAll = function _queueRefreshAll() {\n    if (_queueRefreshID !== _refreshID) {\n      var id = _queueRefreshID = _refreshID;\n      requestAnimationFrame(function () {\n        return id === _refreshID && _refreshAll(true);\n      });\n    }\n  },\n      _refresh100vh = function _refresh100vh() {\n    _body$1.appendChild(_div100vh);\n\n    _100vh = _div100vh.offsetHeight || _win$1.innerHeight;\n\n    _body$1.removeChild(_div100vh);\n  },\n      _refreshAll = function _refreshAll(force, skipRevert) {\n    if (_lastScrollTime && !force) {\n      _addListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh);\n\n      return;\n    }\n\n    _refresh100vh();\n\n    _refreshingAll = ScrollTrigger$1.isRefreshing = true;\n\n    _scrollers.forEach(function (obj) {\n      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());\n    });\n\n    var refreshInits = _dispatch(\"refreshInit\");\n\n    _sort && ScrollTrigger$1.sort();\n    skipRevert || _revertAll();\n\n    _scrollers.forEach(function (obj) {\n      if (_isFunction(obj)) {\n        obj.smooth && (obj.target.style.scrollBehavior = \"auto\");\n        obj(0);\n      }\n    });\n\n    _triggers.slice(0).forEach(function (t) {\n      return t.refresh();\n    });\n\n    _triggers.forEach(function (t, i) {\n      if (t._subPinOffset && t.pin) {\n        var prop = t.vars.horizontal ? \"offsetWidth\" : \"offsetHeight\",\n            original = t.pin[prop];\n        t.revert(true, 1);\n        t.adjustPinSpacing(t.pin[prop] - original);\n        t.refresh();\n      }\n    });\n\n    _triggers.forEach(function (t) {\n      var max = _maxScroll(t.scroller, t._dir);\n\n      (t.vars.end === \"max\" || t._endClamp && t.end > max) && t.setPositions(t.start, Math.max(t.start + 1, max), true);\n    });\n\n    refreshInits.forEach(function (result) {\n      return result && result.render && result.render(-1);\n    });\n\n    _scrollers.forEach(function (obj) {\n      if (_isFunction(obj)) {\n        obj.smooth && requestAnimationFrame(function () {\n          return obj.target.style.scrollBehavior = \"smooth\";\n        });\n        obj.rec && obj(obj.rec);\n      }\n    });\n\n    _clearScrollMemory(_scrollRestoration, 1);\n\n    _resizeDelay.pause();\n\n    _refreshID++;\n    _refreshingAll = 2;\n\n    _updateAll(2);\n\n    _triggers.forEach(function (t) {\n      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);\n    });\n\n    _refreshingAll = ScrollTrigger$1.isRefreshing = false;\n\n    _dispatch(\"refresh\");\n  },\n      _lastScroll = 0,\n      _direction = 1,\n      _primary,\n      _updateAll = function _updateAll(force) {\n    if (!_refreshingAll || force === 2) {\n      ScrollTrigger$1.isUpdating = true;\n      _primary && _primary.update(0);\n\n      var l = _triggers.length,\n          time = _getTime$1(),\n          recordVelocity = time - _time1 >= 50,\n          scroll = l && _triggers[0].scroll();\n\n      _direction = _lastScroll > scroll ? -1 : 1;\n      _refreshingAll || (_lastScroll = scroll);\n\n      if (recordVelocity) {\n        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n          _lastScrollTime = 0;\n\n          _dispatch(\"scrollEnd\");\n        }\n\n        _time2 = _time1;\n        _time1 = time;\n      }\n\n      if (_direction < 0) {\n        _i = l;\n\n        while (_i-- > 0) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n\n        _direction = 1;\n      } else {\n        for (_i = 0; _i < l; _i++) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n      }\n\n      ScrollTrigger$1.isUpdating = false;\n    }\n\n    _rafID = 0;\n  },\n      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\", \"float\", \"zIndex\", \"gridColumnStart\", \"gridColumnEnd\", \"gridRowStart\", \"gridRowEnd\", \"gridArea\", \"justifySelf\", \"alignSelf\", \"placeSelf\", \"order\"],\n      _stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n      _swapPinOut = function _swapPinOut(pin, spacer, state) {\n    _setState(state);\n\n    var cache = pin._gsap;\n\n    if (cache.spacerIsNative) {\n      _setState(cache.spacerState);\n    } else if (pin._gsap.swappedIn) {\n      var parent = spacer.parentNode;\n\n      if (parent) {\n        parent.insertBefore(pin, spacer);\n        parent.removeChild(spacer);\n      }\n    }\n\n    pin._gsap.swappedIn = false;\n  },\n      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n    if (!pin._gsap.swappedIn) {\n      var i = _propNamesToCopy.length,\n          spacerStyle = spacer.style,\n          pinStyle = pin.style,\n          p;\n\n      while (i--) {\n        p = _propNamesToCopy[i];\n        spacerStyle[p] = cs[p];\n      }\n\n      spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n      cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n      pinStyle[_bottom] = pinStyle[_right] = \"auto\";\n      spacerStyle.flexBasis = cs.flexBasis || \"auto\";\n      spacerStyle.overflow = \"visible\";\n      spacerStyle.boxSizing = \"border-box\";\n      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;\n      spacerStyle[_height] = _getSize(pin, _vertical) + _px;\n      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\n      _setState(spacerState);\n\n      pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n      pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n      pinStyle[_padding] = cs[_padding];\n\n      if (pin.parentNode !== spacer) {\n        pin.parentNode.insertBefore(spacer, pin);\n        spacer.appendChild(pin);\n      }\n\n      pin._gsap.swappedIn = true;\n    }\n  },\n      _capsExp = /([A-Z])/g,\n      _setState = function _setState(state) {\n    if (state) {\n      var style = state.t.style,\n          l = state.length,\n          i = 0,\n          p,\n          value;\n      (state.t._gsap || gsap$1.core.getCache(state.t)).uncache = 1;\n\n      for (; i < l; i += 2) {\n        value = state[i + 1];\n        p = state[i];\n\n        if (value) {\n          style[p] = value;\n        } else if (style[p]) {\n          style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n        }\n      }\n    }\n  },\n      _getState = function _getState(element) {\n    var l = _stateProps.length,\n        style = element.style,\n        state = [],\n        i = 0;\n\n    for (; i < l; i++) {\n      state.push(_stateProps[i], style[_stateProps[i]]);\n    }\n\n    state.t = element;\n    return state;\n  },\n      _copyState = function _copyState(state, override, omitOffsets) {\n    var result = [],\n        l = state.length,\n        i = omitOffsets ? 8 : 0,\n        p;\n\n    for (; i < l; i += 2) {\n      p = state[i];\n      result.push(p, p in override ? override[p] : state[i + 1]);\n    }\n\n    result.t = state.t;\n    return result;\n  },\n      _winOffsets = {\n    left: 0,\n    top: 0\n  },\n      _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {\n    _isFunction(value) && (value = value(self));\n\n    if (_isString(value) && value.substr(0, 3) === \"max\") {\n      value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n    }\n\n    var time = containerAnimation ? containerAnimation.time() : 0,\n        p1,\n        p2,\n        element;\n    containerAnimation && containerAnimation.seek(0);\n    isNaN(value) || (value = +value);\n\n    if (!_isNumber(value)) {\n      _isFunction(trigger) && (trigger = trigger(self));\n      var offsets = (value || \"0\").split(\" \"),\n          bounds,\n          localOffset,\n          globalOffset,\n          display;\n      element = _getTarget(trigger, self) || _body$1;\n      bounds = _getBounds(element) || {};\n\n      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n        display = element.style.display;\n        element.style.display = \"block\";\n        bounds = _getBounds(element);\n        display ? element.style.display = display : element.style.removeProperty(\"display\");\n      }\n\n      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n      globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n      scrollerSize -= scrollerSize - globalOffset;\n    } else {\n      containerAnimation && (value = gsap$1.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));\n      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);\n    }\n\n    if (clampZeroProp) {\n      self[clampZeroProp] = value || -0.001;\n      value < 0 && (value = 0);\n    }\n\n    if (marker) {\n      var position = value + scrollerSize,\n          isStart = marker._isStart;\n      p1 = \"scroll\" + direction.d2;\n\n      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body$1[p1], _docEl$1[p1]) : marker.parentNode[p1]) <= position + 1);\n\n      if (useFixedPosition) {\n        scrollerBounds = _getBounds(markerScroller);\n        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n      }\n    }\n\n    if (containerAnimation && element) {\n      p1 = _getBounds(element);\n      containerAnimation.seek(scrollerMax);\n      p2 = _getBounds(element);\n      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n      value = value / containerAnimation._caScrollDist * scrollerMax;\n    }\n\n    containerAnimation && containerAnimation.seek(time);\n    return containerAnimation ? value : Math.round(value);\n  },\n      _prefixExp = /(webkit|moz|length|cssText|inset)/i,\n      _reparent = function _reparent(element, parent, top, left) {\n    if (element.parentNode !== parent) {\n      var style = element.style,\n          p,\n          cs;\n\n      if (parent === _body$1) {\n        element._stOrig = style.cssText;\n        cs = _getComputedStyle(element);\n\n        for (p in cs) {\n          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n            style[p] = cs[p];\n          }\n        }\n\n        style.top = top;\n        style.left = left;\n      } else {\n        style.cssText = element._stOrig;\n      }\n\n      gsap$1.core.getCache(element).uncache = 1;\n      parent.appendChild(element);\n    }\n  },\n      _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {\n    var last1 = initialValue,\n        last2 = last1;\n    return function (value) {\n      var current = Math.round(getValueFunc());\n\n      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {\n        value = current;\n        onInterrupt && onInterrupt();\n      }\n\n      last2 = last1;\n      last1 = value;\n      return value;\n    };\n  },\n      _shiftMarker = function _shiftMarker(marker, direction, value) {\n    var vars = {};\n    vars[direction.p] = \"+=\" + value;\n    gsap$1.set(marker, vars);\n  },\n      _getTweenCreator = function _getTweenCreator(scroller, direction) {\n    var getScroll = _getScrollFunc(scroller, direction),\n        prop = \"_scroll\" + direction.p2,\n        getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n      var tween = getTween.tween,\n          onComplete = vars.onComplete,\n          modifiers = {};\n      initialValue = initialValue || getScroll();\n\n      var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {\n        tween.kill();\n        getTween.tween = 0;\n      });\n\n      change2 = change1 && change2 || 0;\n      change1 = change1 || scrollTo - initialValue;\n      tween && tween.kill();\n      vars[prop] = scrollTo;\n      vars.modifiers = modifiers;\n\n      modifiers[prop] = function () {\n        return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);\n      };\n\n      vars.onUpdate = function () {\n        _scrollers.cache++;\n\n        _updateAll();\n      };\n\n      vars.onComplete = function () {\n        getTween.tween = 0;\n        onComplete && onComplete.call(tween);\n      };\n\n      tween = getTween.tween = gsap$1.to(scroller, vars);\n      return tween;\n    };\n\n    scroller[prop] = getScroll;\n\n    getScroll.wheelHandler = function () {\n      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n    };\n\n    _addListener$1(scroller, \"wheel\", getScroll.wheelHandler);\n\n    ScrollTrigger$1.isTouch && _addListener$1(scroller, \"touchmove\", getScroll.wheelHandler);\n    return getTween;\n  };\n\n  var ScrollTrigger$1 = function () {\n    function ScrollTrigger(vars, animation) {\n      _coreInitted$1 || ScrollTrigger.register(gsap$1) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n\n      _context$1(this);\n\n      this.init(vars, animation);\n    }\n\n    var _proto = ScrollTrigger.prototype;\n\n    _proto.init = function init(vars, animation) {\n      this.progress = this.start = 0;\n      this.vars && this.kill(true, true);\n\n      if (!_enabled) {\n        this.update = this.refresh = this.kill = _passThrough;\n        return;\n      }\n\n      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n        trigger: vars\n      } : vars, _defaults);\n\n      var _vars = vars,\n          onUpdate = _vars.onUpdate,\n          toggleClass = _vars.toggleClass,\n          id = _vars.id,\n          onToggle = _vars.onToggle,\n          onRefresh = _vars.onRefresh,\n          scrub = _vars.scrub,\n          trigger = _vars.trigger,\n          pin = _vars.pin,\n          pinSpacing = _vars.pinSpacing,\n          invalidateOnRefresh = _vars.invalidateOnRefresh,\n          anticipatePin = _vars.anticipatePin,\n          onScrubComplete = _vars.onScrubComplete,\n          onSnapComplete = _vars.onSnapComplete,\n          once = _vars.once,\n          snap = _vars.snap,\n          pinReparent = _vars.pinReparent,\n          pinSpacer = _vars.pinSpacer,\n          containerAnimation = _vars.containerAnimation,\n          fastScrollEnd = _vars.fastScrollEnd,\n          preventOverlaps = _vars.preventOverlaps,\n          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,\n          isToggle = !scrub && scrub !== 0,\n          scroller = _getTarget(vars.scroller || _win$1),\n          scrollerCache = gsap$1.core.getCache(scroller),\n          isViewport = _isViewport$1(scroller),\n          useFixedPosition = (\"pinType\" in vars ? vars.pinType : _getProxyProp(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\",\n          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n          toggleActions = isToggle && vars.toggleActions.split(\" \"),\n          markers = \"markers\" in vars ? vars.markers : _defaults.markers,\n          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n          self = this,\n          onRefreshInit = vars.onRefreshInit && function () {\n        return vars.onRefreshInit(self);\n      },\n          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),\n          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),\n          lastSnap = 0,\n          lastRefresh = 0,\n          prevProgress = 0,\n          scrollFunc = _getScrollFunc(scroller, direction),\n          tweenTo,\n          pinCache,\n          snapFunc,\n          scroll1,\n          scroll2,\n          start,\n          end,\n          markerStart,\n          markerEnd,\n          markerStartTrigger,\n          markerEndTrigger,\n          markerVars,\n          executingOnRefresh,\n          change,\n          pinOriginalState,\n          pinActiveState,\n          pinState,\n          spacer,\n          offset,\n          pinGetter,\n          pinSetter,\n          pinStart,\n          pinChange,\n          spacingStart,\n          spacerState,\n          markerStartSetter,\n          pinMoves,\n          markerEndSetter,\n          cs,\n          snap1,\n          snap2,\n          scrubTween,\n          scrubSmooth,\n          snapDurClamp,\n          snapDelayedCall,\n          prevScroll,\n          prevAnimProgress,\n          caMarkerSetter,\n          customRevertReturn;\n\n      self._startClamp = self._endClamp = false;\n      self._dir = direction;\n      anticipatePin *= 45;\n      self.scroller = scroller;\n      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n      scroll1 = scrollFunc();\n      self.vars = vars;\n      animation = animation || vars.animation;\n\n      if (\"refreshPriority\" in vars) {\n        _sort = 1;\n        vars.refreshPriority === -9999 && (_primary = self);\n      }\n\n      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n        top: _getTweenCreator(scroller, _vertical),\n        left: _getTweenCreator(scroller, _horizontal)\n      };\n      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\n      self.scrubDuration = function (value) {\n        scrubSmooth = _isNumber(value) && value;\n\n        if (!scrubSmooth) {\n          scrubTween && scrubTween.progress(1).kill();\n          scrubTween = 0;\n        } else {\n          scrubTween ? scrubTween.duration(value) : scrubTween = gsap$1.to(animation, {\n            ease: \"expo\",\n            totalProgress: \"+=0\",\n            duration: scrubSmooth,\n            paused: true,\n            onComplete: function onComplete() {\n              return onScrubComplete && onScrubComplete(self);\n            }\n          });\n        }\n      };\n\n      if (animation) {\n        animation.vars.lazy = false;\n        animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true);\n        self.animation = animation.pause();\n        animation.scrollTrigger = self;\n        self.scrubDuration(scrub);\n        snap1 = 0;\n        id || (id = animation.vars.id);\n      }\n\n      if (snap) {\n        if (!_isObject(snap) || snap.push) {\n          snap = {\n            snapTo: snap\n          };\n        }\n\n        \"scrollBehavior\" in _body$1.style && gsap$1.set(isViewport ? [_body$1, _docEl$1] : scroller, {\n          scrollBehavior: \"auto\"\n        });\n\n        _scrollers.forEach(function (o) {\n          return _isFunction(o) && o.target === (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller) && (o.smooth = false);\n        });\n\n        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {\n          return _snapDirectional(snap.snapTo)(value, _getTime$1() - lastRefresh < 500 ? 0 : st.direction);\n        } : gsap$1.utils.snap(snap.snapTo);\n        snapDurClamp = snap.duration || {\n          min: 0.1,\n          max: 2\n        };\n        snapDurClamp = _isObject(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);\n        snapDelayedCall = gsap$1.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {\n          var scroll = scrollFunc(),\n              refreshedRecently = _getTime$1() - lastRefresh < 500,\n              tween = tweenTo.tween;\n\n          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n            var progress = (scroll - start) / change,\n                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,\n                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime$1() - _time2) * 1000 || 0,\n                change1 = gsap$1.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),\n                naturalEnd = progress + (snap.inertia === false ? 0 : change1),\n                endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),\n                endScroll = Math.round(start + endValue * change),\n                _snap = snap,\n                onStart = _snap.onStart,\n                _onInterrupt = _snap.onInterrupt,\n                _onComplete = _snap.onComplete;\n\n            if (scroll <= end && scroll >= start && endScroll !== scroll) {\n              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n                return;\n              }\n\n              if (snap.inertia === false) {\n                change1 = endValue - progress;\n              }\n\n              tweenTo(endScroll, {\n                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n                ease: snap.ease || \"power3\",\n                data: _abs(endScroll - scroll),\n                onInterrupt: function onInterrupt() {\n                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n                },\n                onComplete: function onComplete() {\n                  self.update();\n                  lastSnap = scrollFunc();\n                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                  onSnapComplete && onSnapComplete(self);\n                  _onComplete && _onComplete(self);\n                }\n              }, scroll, change1 * change, endScroll - scroll - change1 * change);\n              onStart && onStart(self, tweenTo.tween);\n            }\n          } else if (self.isActive && lastSnap !== scroll) {\n            snapDelayedCall.restart(true);\n          }\n        }).pause();\n      }\n\n      id && (_ids[id] = self);\n      trigger = self.trigger = _getTarget(trigger || pin !== true && pin);\n      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n      customRevertReturn && (customRevertReturn = customRevertReturn(self));\n      pin = pin === true ? trigger : _getTarget(pin);\n      _isString(toggleClass) && (toggleClass = {\n        targets: trigger,\n        className: toggleClass\n      });\n\n      if (pin) {\n        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding);\n        self.pin = pin;\n        pinCache = gsap$1.core.getCache(pin);\n\n        if (!pinCache.spacer) {\n          if (pinSpacer) {\n            pinSpacer = _getTarget(pinSpacer);\n            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement);\n            pinCache.spacerIsNative = !!pinSpacer;\n            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n          }\n\n          pinCache.spacer = spacer = pinSpacer || _doc$1.createElement(\"div\");\n          spacer.classList.add(\"pin-spacer\");\n          id && spacer.classList.add(\"pin-spacer-\" + id);\n          pinCache.pinState = pinOriginalState = _getState(pin);\n        } else {\n          pinOriginalState = pinCache.pinState;\n        }\n\n        vars.force3D !== false && gsap$1.set(pin, {\n          force3D: true\n        });\n        self.spacer = spacer = pinCache.spacer;\n        cs = _getComputedStyle(pin);\n        spacingStart = cs[pinSpacing + direction.os2];\n        pinGetter = gsap$1.getProperty(pin);\n        pinSetter = gsap$1.quickSetter(pin, direction.a, _px);\n\n        _swapPinIn(pin, spacer, cs);\n\n        pinState = _getState(pin);\n      }\n\n      if (markers) {\n        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n        markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n        markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n        offset = markerStartTrigger[\"offset\" + direction.op.d2];\n\n        var content = _getTarget(_getProxyProp(scroller, \"content\") || scroller);\n\n        markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        containerAnimation && (caMarkerSetter = gsap$1.quickSetter([markerStart, markerEnd], direction.a, _px));\n\n        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, \"fixedMarkers\") === true)) {\n          _makePositionable(isViewport ? _body$1 : scroller);\n\n          gsap$1.set([markerStartTrigger, markerEndTrigger], {\n            force3D: true\n          });\n          markerStartSetter = gsap$1.quickSetter(markerStartTrigger, direction.a, _px);\n          markerEndSetter = gsap$1.quickSetter(markerEndTrigger, direction.a, _px);\n        }\n      }\n\n      if (containerAnimation) {\n        var oldOnUpdate = containerAnimation.vars.onUpdate,\n            oldParams = containerAnimation.vars.onUpdateParams;\n        containerAnimation.eventCallback(\"onUpdate\", function () {\n          self.update(0, 0, 1);\n          oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);\n        });\n      }\n\n      self.previous = function () {\n        return _triggers[_triggers.indexOf(self) - 1];\n      };\n\n      self.next = function () {\n        return _triggers[_triggers.indexOf(self) + 1];\n      };\n\n      self.revert = function (revert, temp) {\n        if (!temp) {\n          return self.kill(true);\n        }\n\n        var r = revert !== false || !self.enabled,\n            prevRefreshing = _refreshing;\n\n        if (r !== self.isReverted) {\n          if (r) {\n            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0);\n            prevProgress = self.progress;\n            prevAnimProgress = animation && animation.progress();\n          }\n\n          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n            return m.style.display = r ? \"none\" : \"block\";\n          });\n\n          if (r) {\n            _refreshing = self;\n            self.update(r);\n          }\n\n          if (pin && (!pinReparent || !self.isActive)) {\n            if (r) {\n              _swapPinOut(pin, spacer, pinOriginalState);\n            } else {\n              _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);\n            }\n          }\n\n          r || self.update(r);\n          _refreshing = prevRefreshing;\n          self.isReverted = r;\n        }\n      };\n\n      self.refresh = function (soft, force, position, pinOffset) {\n        if ((_refreshing || !self.enabled) && !force) {\n          return;\n        }\n\n        if (pin && soft && _lastScrollTime) {\n          _addListener$1(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\n          return;\n        }\n\n        !_refreshingAll && onRefreshInit && onRefreshInit(self);\n        _refreshing = self;\n\n        if (tweenTo.tween && !position) {\n          tweenTo.tween.kill();\n          tweenTo.tween = 0;\n        }\n\n        scrubTween && scrubTween.pause();\n        invalidateOnRefresh && animation && animation.revert({\n          kill: false\n        }).invalidate();\n        self.isReverted || self.revert(true, true);\n        self._subPinOffset = false;\n\n        var size = getScrollerSize(),\n            scrollerBounds = getScrollerOffsets(),\n            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),\n            isFirstRefresh = change <= 0.01,\n            offset = 0,\n            otherPinOffset = pinOffset || 0,\n            parsedEnd = _isObject(position) ? position.end : vars.end,\n            parsedEndTrigger = vars.endTrigger || trigger,\n            parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"),\n            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),\n            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,\n            i = triggerIndex,\n            cs,\n            bounds,\n            scroll,\n            isVertical,\n            override,\n            curTrigger,\n            curPin,\n            oppositeScroll,\n            initted,\n            revertedPins,\n            forcedOverflow,\n            markerStartOffset,\n            markerEndOffset;\n\n        if (markers && _isObject(position)) {\n          markerStartOffset = gsap$1.getProperty(markerStartTrigger, direction.p);\n          markerEndOffset = gsap$1.getProperty(markerEndTrigger, direction.p);\n        }\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self);\n          curPin = curTrigger.pin;\n\n          if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {\n            revertedPins || (revertedPins = []);\n            revertedPins.unshift(curTrigger);\n            curTrigger.revert(true, true);\n          }\n\n          if (curTrigger !== _triggers[i]) {\n            triggerIndex--;\n            i--;\n          }\n        }\n\n        _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n        parsedStart = _parseClamp(parsedStart, \"start\", self);\n        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && \"_startClamp\") || (pin ? -0.001 : 0);\n        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\n        if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n          if (~parsedEnd.indexOf(\" \")) {\n            parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n          } else {\n            offset = _offsetToPx(parsedEnd.substr(2), size);\n            parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap$1.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset;\n            parsedEndTrigger = trigger;\n          }\n        }\n\n        parsedEnd = _parseClamp(parsedEnd, \"end\", self);\n        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && \"_endClamp\")) || -0.001;\n        offset = 0;\n        i = triggerIndex;\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curPin = curTrigger.pin;\n\n          if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {\n            cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);\n\n            if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {\n              offset += cs * (1 - curTrigger.progress);\n            }\n\n            curPin === pin && (otherPinOffset += cs);\n          }\n        }\n\n        start += offset;\n        end += offset;\n        self._startClamp && (self._startClamp += offset);\n\n        if (self._endClamp && !_refreshingAll) {\n          self._endClamp = end || -0.001;\n          end = Math.min(end, _maxScroll(scroller, direction));\n        }\n\n        change = end - start || (start -= 0.01) && 0.001;\n\n        if (isFirstRefresh) {\n          prevProgress = gsap$1.utils.clamp(0, 1, gsap$1.utils.normalize(start, end, prevScroll));\n        }\n\n        self._pinPush = otherPinOffset;\n\n        if (markerStart && offset) {\n          cs = {};\n          cs[direction.a] = \"+=\" + offset;\n          pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n          gsap$1.set([markerStart, markerEnd], cs);\n        }\n\n        if (pin) {\n          cs = _getComputedStyle(pin);\n          isVertical = direction === _vertical;\n          scroll = scrollFunc();\n          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n\n          if (!max && end > 1) {\n            forcedOverflow = (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller).style;\n            forcedOverflow = {\n              style: forcedOverflow,\n              value: forcedOverflow[\"overflow\" + direction.a.toUpperCase()]\n            };\n\n            if (isViewport && _getComputedStyle(_body$1)[\"overflow\" + direction.a.toUpperCase()] !== \"scroll\") {\n              forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = \"scroll\";\n            }\n          }\n\n          _swapPinIn(pin, spacer, cs);\n\n          pinState = _getState(pin);\n          bounds = _getBounds(pin, true);\n          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();\n\n          if (pinSpacing) {\n            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];\n            spacerState.t = spacer;\n            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n            i && spacerState.push(direction.d, i + _px);\n\n            _setState(spacerState);\n\n            if (pinnedContainer) {\n              _triggers.forEach(function (t) {\n                if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {\n                  t._subPinOffset = true;\n                }\n              });\n            }\n\n            useFixedPosition && scrollFunc(prevScroll);\n          }\n\n          if (useFixedPosition) {\n            override = {\n              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n              boxSizing: \"border-box\",\n              position: \"fixed\"\n            };\n            override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n            override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n            override[_padding] = cs[_padding];\n            override[_padding + _Top] = cs[_padding + _Top];\n            override[_padding + _Right] = cs[_padding + _Right];\n            override[_padding + _Bottom] = cs[_padding + _Bottom];\n            override[_padding + _Left] = cs[_padding + _Left];\n            pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n            _refreshingAll && scrollFunc(0);\n          }\n\n          if (animation) {\n            initted = animation._initted;\n\n            _suppressOverwrites(1);\n\n            animation.render(animation.duration(), true, true);\n            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n            pinMoves = Math.abs(change - pinChange) > 1;\n            useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2);\n            animation.render(0, true, true);\n            initted || animation.invalidate(true);\n            animation.parent || animation.totalTime(animation.totalTime());\n\n            _suppressOverwrites(0);\n          } else {\n            pinChange = change;\n          }\n\n          forcedOverflow && (forcedOverflow.value ? forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty(\"overflow-\" + direction.a));\n        } else if (trigger && scrollFunc() && !containerAnimation) {\n          bounds = trigger.parentNode;\n\n          while (bounds && bounds !== _body$1) {\n            if (bounds._pinOffset) {\n              start -= bounds._pinOffset;\n              end -= bounds._pinOffset;\n            }\n\n            bounds = bounds.parentNode;\n          }\n        }\n\n        revertedPins && revertedPins.forEach(function (t) {\n          return t.revert(false, true);\n        });\n        self.start = start;\n        self.end = end;\n        scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc();\n\n        if (!containerAnimation && !_refreshingAll) {\n          scroll1 < prevScroll && scrollFunc(prevScroll);\n          self.scroll.rec = 0;\n        }\n\n        self.revert(false, true);\n        lastRefresh = _getTime$1();\n\n        if (snapDelayedCall) {\n          lastSnap = -1;\n          snapDelayedCall.restart(true);\n        }\n\n        _refreshing = 0;\n        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true);\n\n        if (isFirstRefresh || prevProgress !== self.progress || containerAnimation) {\n          animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap$1.utils.normalize(start, end, 0) : prevProgress, true);\n          self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;\n        }\n\n        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n        scrubTween && scrubTween.invalidate();\n\n        if (!isNaN(markerStartOffset)) {\n          markerStartOffset -= gsap$1.getProperty(markerStartTrigger, direction.p);\n          markerEndOffset -= gsap$1.getProperty(markerEndTrigger, direction.p);\n\n          _shiftMarker(markerStartTrigger, direction, markerStartOffset);\n\n          _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));\n\n          _shiftMarker(markerEndTrigger, direction, markerEndOffset);\n\n          _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));\n        }\n\n        isFirstRefresh && !_refreshingAll && self.update();\n\n        if (onRefresh && !_refreshingAll && !executingOnRefresh) {\n          executingOnRefresh = true;\n          onRefresh(self);\n          executingOnRefresh = false;\n        }\n      };\n\n      self.getVelocity = function () {\n        return (scrollFunc() - scroll2) / (_getTime$1() - _time2) * 1000 || 0;\n      };\n\n      self.endAnimation = function () {\n        _endAnimation(self.callbackAnimation);\n\n        if (animation) {\n          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n        }\n      };\n\n      self.labelToScroll = function (label) {\n        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n      };\n\n      self.getTrailing = function (name) {\n        var i = _triggers.indexOf(self),\n            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n\n        return (_isString(name) ? a.filter(function (t) {\n          return t.vars.preventOverlaps === name;\n        }) : a).filter(function (t) {\n          return self.direction > 0 ? t.end <= start : t.start >= end;\n        });\n      };\n\n      self.update = function (reset, recordVelocity, forceFake) {\n        if (containerAnimation && !forceFake && !reset) {\n          return;\n        }\n\n        var scroll = _refreshingAll === true ? prevScroll : self.scroll(),\n            p = reset ? 0 : (scroll - start) / change,\n            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n            prevProgress = self.progress,\n            isActive,\n            wasActive,\n            toggleState,\n            action,\n            stateChanged,\n            toggled,\n            isAtMax,\n            isTakingAction;\n\n        if (recordVelocity) {\n          scroll2 = scroll1;\n          scroll1 = containerAnimation ? scrollFunc() : scroll;\n\n          if (snap) {\n            snap2 = snap1;\n            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n          }\n        }\n\n        anticipatePin && !clipped && pin && !_refreshing && !_startup$1 && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime$1() - _time2) * anticipatePin && (clipped = 0.0001);\n\n        if (clipped !== prevProgress && self.enabled) {\n          isActive = self.isActive = !!clipped && clipped < 1;\n          wasActive = !!prevProgress && prevProgress < 1;\n          toggled = isActive !== wasActive;\n          stateChanged = toggled || !!clipped !== !!prevProgress;\n          self.direction = clipped > prevProgress ? 1 : -1;\n          self.progress = clipped;\n\n          if (stateChanged && !_refreshing) {\n            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3;\n\n            if (isToggle) {\n              action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState];\n              isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n            }\n          }\n\n          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {\n            return t.endAnimation();\n          }));\n\n          if (!isToggle) {\n            if (scrubTween && !_refreshing && !_startup$1) {\n              scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start);\n\n              if (scrubTween.resetTo) {\n                scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n              } else {\n                scrubTween.vars.totalProgress = clipped;\n                scrubTween.invalidate().restart();\n              }\n            } else if (animation) {\n              animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));\n            }\n          }\n\n          if (pin) {\n            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\n            if (!useFixedPosition) {\n              pinSetter(_round(pinStart + pinChange * clipped));\n            } else if (stateChanged) {\n              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction);\n\n              if (pinReparent) {\n                if (!reset && (isActive || isAtMax)) {\n                  var bounds = _getBounds(pin, true),\n                      _offset = scroll - start;\n\n                  _reparent(pin, _body$1, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);\n                } else {\n                  _reparent(pin, spacer);\n                }\n              }\n\n              _setState(isActive || isAtMax ? pinActiveState : pinState);\n\n              pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n            }\n          }\n\n          snap && !tweenTo.tween && !_refreshing && !_startup$1 && snapDelayedCall.restart(true);\n          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {\n            return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n          });\n          onUpdate && !isToggle && !reset && onUpdate(self);\n\n          if (stateChanged && !_refreshing) {\n            if (isToggle) {\n              if (isTakingAction) {\n                if (action === \"complete\") {\n                  animation.pause().totalProgress(1);\n                } else if (action === \"reset\") {\n                  animation.restart(true).pause();\n                } else if (action === \"restart\") {\n                  animation.restart(true);\n                } else {\n                  animation[action]();\n                }\n              }\n\n              onUpdate && onUpdate(self);\n            }\n\n            if (toggled || !_limitCallbacks) {\n              onToggle && toggled && _callback(self, onToggle);\n              callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0);\n\n              if (!toggled) {\n                toggleState = clipped === 1 ? 1 : 3;\n                callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              }\n            }\n\n            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n              _endAnimation(self.callbackAnimation);\n\n              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === \"reverse\" ? 1 : !clipped, 1);\n            }\n          } else if (isToggle && onUpdate && !_refreshing) {\n            onUpdate(self);\n          }\n        }\n\n        if (markerEndSetter) {\n          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n          markerEndSetter(n);\n        }\n\n        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n      };\n\n      self.enable = function (reset, refresh) {\n        if (!self.enabled) {\n          self.enabled = true;\n\n          _addListener$1(scroller, \"resize\", _onResize);\n\n          isViewport || _addListener$1(scroller, \"scroll\", _onScroll$1);\n          onRefreshInit && _addListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (reset !== false) {\n            self.progress = prevProgress = 0;\n            scroll1 = scroll2 = lastSnap = scrollFunc();\n          }\n\n          refresh !== false && self.refresh();\n        }\n      };\n\n      self.getTween = function (snap) {\n        return snap && tweenTo ? tweenTo.tween : scrubTween;\n      };\n\n      self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {\n        if (containerAnimation) {\n          var st = containerAnimation.scrollTrigger,\n              duration = containerAnimation.duration(),\n              _change = st.end - st.start;\n\n          newStart = st.start + _change * newStart / duration;\n          newEnd = st.start + _change * newEnd / duration;\n        }\n\n        self.refresh(false, false, {\n          start: _keepClamp(newStart, keepClamp && !!self._startClamp),\n          end: _keepClamp(newEnd, keepClamp && !!self._endClamp)\n        }, pinOffset);\n        self.update();\n      };\n\n      self.adjustPinSpacing = function (amount) {\n        if (spacerState && amount) {\n          var i = spacerState.indexOf(direction.d) + 1;\n          spacerState[i] = parseFloat(spacerState[i]) + amount + _px;\n          spacerState[1] = parseFloat(spacerState[1]) + amount + _px;\n\n          _setState(spacerState);\n        }\n      };\n\n      self.disable = function (reset, allowAnimation) {\n        if (self.enabled) {\n          reset !== false && self.revert(true, true);\n          self.enabled = self.isActive = false;\n          allowAnimation || scrubTween && scrubTween.pause();\n          prevScroll = 0;\n          pinCache && (pinCache.uncache = 1);\n          onRefreshInit && _removeListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (snapDelayedCall) {\n            snapDelayedCall.pause();\n            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n          }\n\n          if (!isViewport) {\n            var i = _triggers.length;\n\n            while (i--) {\n              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n                return;\n              }\n            }\n\n            _removeListener$1(scroller, \"resize\", _onResize);\n\n            isViewport || _removeListener$1(scroller, \"scroll\", _onScroll$1);\n          }\n        }\n      };\n\n      self.kill = function (revert, allowAnimation) {\n        self.disable(revert, allowAnimation);\n        scrubTween && !allowAnimation && scrubTween.kill();\n        id && delete _ids[id];\n\n        var i = _triggers.indexOf(self);\n\n        i >= 0 && _triggers.splice(i, 1);\n        i === _i && _direction > 0 && _i--;\n        i = 0;\n\n        _triggers.forEach(function (t) {\n          return t.scroller === self.scroller && (i = 1);\n        });\n\n        i || _refreshingAll || (self.scroll.rec = 0);\n\n        if (animation) {\n          animation.scrollTrigger = null;\n          revert && animation.revert({\n            kill: false\n          });\n          allowAnimation || animation.kill();\n        }\n\n        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n          return m.parentNode && m.parentNode.removeChild(m);\n        });\n        _primary === self && (_primary = 0);\n\n        if (pin) {\n          pinCache && (pinCache.uncache = 1);\n          i = 0;\n\n          _triggers.forEach(function (t) {\n            return t.pin === pin && i++;\n          });\n\n          i || (pinCache.spacer = 0);\n        }\n\n        vars.onKill && vars.onKill(self);\n      };\n\n      _triggers.push(self);\n\n      self.enable(false, false);\n      customRevertReturn && customRevertReturn(self);\n\n      if (animation && animation.add && !change) {\n        var updateFunc = self.update;\n\n        self.update = function () {\n          self.update = updateFunc;\n          start || end || self.refresh();\n        };\n\n        gsap$1.delayedCall(0.01, self.update);\n        change = 0.01;\n        start = end = 0;\n      } else {\n        self.refresh();\n      }\n\n      pin && _queueRefreshAll();\n    };\n\n    ScrollTrigger.register = function register(core) {\n      if (!_coreInitted$1) {\n        gsap$1 = core || _getGSAP$1();\n        _windowExists() && window.document && ScrollTrigger.enable();\n        _coreInitted$1 = _enabled;\n      }\n\n      return _coreInitted$1;\n    };\n\n    ScrollTrigger.defaults = function defaults(config) {\n      if (config) {\n        for (var p in config) {\n          _defaults[p] = config[p];\n        }\n      }\n\n      return _defaults;\n    };\n\n    ScrollTrigger.disable = function disable(reset, kill) {\n      _enabled = 0;\n\n      _triggers.forEach(function (trigger) {\n        return trigger[kill ? \"kill\" : \"disable\"](reset);\n      });\n\n      _removeListener$1(_win$1, \"wheel\", _onScroll$1);\n\n      _removeListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n      clearInterval(_syncInterval);\n\n      _removeListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n      _removeListener$1(_body$1, \"touchstart\", _passThrough);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n      _resizeDelay.kill();\n\n      _iterateAutoRefresh(_removeListener$1);\n\n      for (var i = 0; i < _scrollers.length; i += 3) {\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n      }\n    };\n\n    ScrollTrigger.enable = function enable() {\n      _win$1 = window;\n      _doc$1 = document;\n      _docEl$1 = _doc$1.documentElement;\n      _body$1 = _doc$1.body;\n\n      if (gsap$1) {\n        _toArray = gsap$1.utils.toArray;\n        _clamp$1 = gsap$1.utils.clamp;\n        _context$1 = gsap$1.core.context || _passThrough;\n        _suppressOverwrites = gsap$1.core.suppressOverwrites || _passThrough;\n        _scrollRestoration = _win$1.history.scrollRestoration || \"auto\";\n        _lastScroll = _win$1.pageYOffset;\n        gsap$1.core.globals(\"ScrollTrigger\", ScrollTrigger);\n\n        if (_body$1) {\n          _enabled = 1;\n          _div100vh = document.createElement(\"div\");\n          _div100vh.style.height = \"100vh\";\n          _div100vh.style.position = \"absolute\";\n\n          _refresh100vh();\n\n          _rafBugFix();\n\n          Observer.register(gsap$1);\n          ScrollTrigger.isTouch = Observer.isTouch;\n          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent);\n\n          _addListener$1(_win$1, \"wheel\", _onScroll$1);\n\n          _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];\n\n          if (gsap$1.matchMedia) {\n            ScrollTrigger.matchMedia = function (vars) {\n              var mm = gsap$1.matchMedia(),\n                  p;\n\n              for (p in vars) {\n                mm.add(p, vars[p]);\n              }\n\n              return mm;\n            };\n\n            gsap$1.addEventListener(\"matchMediaInit\", function () {\n              return _revertAll();\n            });\n            gsap$1.addEventListener(\"matchMediaRevert\", function () {\n              return _revertRecorded();\n            });\n            gsap$1.addEventListener(\"matchMedia\", function () {\n              _refreshAll(0, 1);\n\n              _dispatch(\"matchMedia\");\n            });\n            gsap$1.matchMedia(\"(orientation: portrait)\", function () {\n              _setBaseDimensions();\n\n              return _setBaseDimensions;\n            });\n          } else {\n            console.warn(\"Requires GSAP 3.11.0 or later\");\n          }\n\n          _setBaseDimensions();\n\n          _addListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n          var bodyStyle = _body$1.style,\n              border = bodyStyle.borderTopStyle,\n              AnimationProto = gsap$1.core.Animation.prototype,\n              bounds,\n              i;\n          AnimationProto.revert || Object.defineProperty(AnimationProto, \"revert\", {\n            value: function value() {\n              return this.time(-0.01, true);\n            }\n          });\n          bodyStyle.borderTopStyle = \"solid\";\n          bounds = _getBounds(_body$1);\n          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0;\n          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;\n          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\");\n          _syncInterval = setInterval(_sync, 250);\n          gsap$1.delayedCall(0.5, function () {\n            return _startup$1 = 0;\n          });\n\n          _addListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n          _addListener$1(_body$1, \"touchstart\", _passThrough);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n          _transformProp = gsap$1.utils.checkPrefix(\"transform\");\n\n          _stateProps.push(_transformProp);\n\n          _coreInitted$1 = _getTime$1();\n          _resizeDelay = gsap$1.delayedCall(0.2, _refreshAll).pause();\n          _autoRefresh = [_doc$1, \"visibilitychange\", function () {\n            var w = _win$1.innerWidth,\n                h = _win$1.innerHeight;\n\n            if (_doc$1.hidden) {\n              _prevWidth = w;\n              _prevHeight = h;\n            } else if (_prevWidth !== w || _prevHeight !== h) {\n              _onResize();\n            }\n          }, _doc$1, \"DOMContentLoaded\", _refreshAll, _win$1, \"load\", _refreshAll, _win$1, \"resize\", _onResize];\n\n          _iterateAutoRefresh(_addListener$1);\n\n          _triggers.forEach(function (trigger) {\n            return trigger.enable(0, 1);\n          });\n\n          for (i = 0; i < _scrollers.length; i += 3) {\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n          }\n        }\n      }\n    };\n\n    ScrollTrigger.config = function config(vars) {\n      \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n      var ms = vars.syncInterval;\n      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n      \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n\n      if (\"autoRefreshEvents\" in vars) {\n        _iterateAutoRefresh(_removeListener$1) || _iterateAutoRefresh(_addListener$1, vars.autoRefreshEvents || \"none\");\n        _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n      }\n    };\n\n    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n      var t = _getTarget(target),\n          i = _scrollers.indexOf(t),\n          isViewport = _isViewport$1(t);\n\n      if (~i) {\n        _scrollers.splice(i, isViewport ? 6 : 2);\n      }\n\n      if (vars) {\n        isViewport ? _proxies.unshift(_win$1, vars, _body$1, vars, _docEl$1, vars) : _proxies.unshift(t, vars);\n      }\n    };\n\n    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n      _triggers.forEach(function (t) {\n        return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);\n      });\n    };\n\n    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n      var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),\n          offset = bounds[horizontal ? _width : _height] * ratio || 0;\n      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win$1.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win$1.innerHeight;\n    };\n\n    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n      _isString(element) && (element = _getTarget(element));\n      var bounds = element.getBoundingClientRect(),\n          size = bounds[horizontal ? _width : _height],\n          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n      return horizontal ? (bounds.left + offset) / _win$1.innerWidth : (bounds.top + offset) / _win$1.innerHeight;\n    };\n\n    ScrollTrigger.killAll = function killAll(allowListeners) {\n      _triggers.slice(0).forEach(function (t) {\n        return t.vars.id !== \"ScrollSmoother\" && t.kill();\n      });\n\n      if (allowListeners !== true) {\n        var listeners = _listeners.killAll || [];\n        _listeners = {};\n        listeners.forEach(function (f) {\n          return f();\n        });\n      }\n    };\n\n    return ScrollTrigger;\n  }();\n  ScrollTrigger$1.version = \"3.12.2\";\n\n  ScrollTrigger$1.saveStyles = function (targets) {\n    return targets ? _toArray(targets).forEach(function (target) {\n      if (target && target.style) {\n        var i = _savedStyles.indexOf(target);\n\n        i >= 0 && _savedStyles.splice(i, 5);\n\n        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap$1.core.getCache(target), _context$1());\n      }\n    }) : _savedStyles;\n  };\n\n  ScrollTrigger$1.revert = function (soft, media) {\n    return _revertAll(!soft, media);\n  };\n\n  ScrollTrigger$1.create = function (vars, animation) {\n    return new ScrollTrigger$1(vars, animation);\n  };\n\n  ScrollTrigger$1.refresh = function (safe) {\n    return safe ? _onResize() : (_coreInitted$1 || ScrollTrigger$1.register()) && _refreshAll(true);\n  };\n\n  ScrollTrigger$1.update = function (force) {\n    return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);\n  };\n\n  ScrollTrigger$1.clearScrollMemory = _clearScrollMemory;\n\n  ScrollTrigger$1.maxScroll = function (element, horizontal) {\n    return _maxScroll(element, horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getScrollFunc = function (element, horizontal) {\n    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getById = function (id) {\n    return _ids[id];\n  };\n\n  ScrollTrigger$1.getAll = function () {\n    return _triggers.filter(function (t) {\n      return t.vars.id !== \"ScrollSmoother\";\n    });\n  };\n\n  ScrollTrigger$1.isScrolling = function () {\n    return !!_lastScrollTime;\n  };\n\n  ScrollTrigger$1.snapDirectional = _snapDirectional;\n\n  ScrollTrigger$1.addEventListener = function (type, callback) {\n    var a = _listeners[type] || (_listeners[type] = []);\n    ~a.indexOf(callback) || a.push(callback);\n  };\n\n  ScrollTrigger$1.removeEventListener = function (type, callback) {\n    var a = _listeners[type],\n        i = a && a.indexOf(callback);\n    i >= 0 && a.splice(i, 1);\n  };\n\n  ScrollTrigger$1.batch = function (targets, vars) {\n    var result = [],\n        varsCopy = {},\n        interval = vars.interval || 0.016,\n        batchMax = vars.batchMax || 1e9,\n        proxyCallback = function proxyCallback(type, callback) {\n      var elements = [],\n          triggers = [],\n          delay = gsap$1.delayedCall(interval, function () {\n        callback(elements, triggers);\n        elements = [];\n        triggers = [];\n      }).pause();\n      return function (self) {\n        elements.length || delay.restart(true);\n        elements.push(self.trigger);\n        triggers.push(self);\n        batchMax <= elements.length && delay.progress(1);\n      };\n    },\n        p;\n\n    for (p in vars) {\n      varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n    }\n\n    if (_isFunction(batchMax)) {\n      batchMax = batchMax();\n\n      _addListener$1(ScrollTrigger$1, \"refresh\", function () {\n        return batchMax = vars.batchMax();\n      });\n    }\n\n    _toArray(targets).forEach(function (target) {\n      var config = {};\n\n      for (p in varsCopy) {\n        config[p] = varsCopy[p];\n      }\n\n      config.trigger = target;\n      result.push(ScrollTrigger$1.create(config));\n    });\n\n    return result;\n  };\n\n  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n  },\n      _allowNativePanning = function _allowNativePanning(target, direction) {\n    if (direction === true) {\n      target.style.removeProperty(\"touch-action\");\n    } else {\n      target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\";\n    }\n\n    target === _docEl$1 && _allowNativePanning(_body$1, direction);\n  },\n      _overflow = {\n    auto: 1,\n    scroll: 1\n  },\n      _nestedScroll = function _nestedScroll(_ref5) {\n    var event = _ref5.event,\n        target = _ref5.target,\n        axis = _ref5.axis;\n\n    var node = (event.changedTouches ? event.changedTouches[0] : event).target,\n        cache = node._gsap || gsap$1.core.getCache(node),\n        time = _getTime$1(),\n        cs;\n\n    if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n      while (node && node !== _body$1 && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {\n        node = node.parentNode;\n      }\n\n      cache._isScroll = node && node !== target && !_isViewport$1(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n      cache._isScrollT = time;\n    }\n\n    if (cache._isScroll || axis === \"x\") {\n      event.stopPropagation();\n      event._gsapAllow = true;\n    }\n  },\n      _inputObserver = function _inputObserver(target, type, inputs, nested) {\n    return Observer.create({\n      target: target,\n      capture: true,\n      debounce: false,\n      lockAxis: true,\n      type: type,\n      onWheel: nested = nested && _nestedScroll,\n      onPress: nested,\n      onDrag: nested,\n      onScroll: nested,\n      onEnable: function onEnable() {\n        return inputs && _addListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, false, true);\n      },\n      onDisable: function onDisable() {\n        return _removeListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, true);\n      }\n    });\n  },\n      _inputExp = /(input|label|select|textarea)/i,\n      _inputIsFocused,\n      _captureInputs = function _captureInputs(e) {\n    var isInput = _inputExp.test(e.target.tagName);\n\n    if (isInput || _inputIsFocused) {\n      e._gsapAllow = true;\n      _inputIsFocused = isInput;\n    }\n  },\n      _getScrollNormalizer = function _getScrollNormalizer(vars) {\n    _isObject(vars) || (vars = {});\n    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n    vars.type || (vars.type = \"wheel,touch\");\n    vars.debounce = !!vars.debounce;\n    vars.id = vars.id || \"normalizer\";\n\n    var _vars2 = vars,\n        normalizeScrollX = _vars2.normalizeScrollX,\n        momentum = _vars2.momentum,\n        allowNestedScroll = _vars2.allowNestedScroll,\n        onRelease = _vars2.onRelease,\n        self,\n        maxY,\n        target = _getTarget(vars.target) || _docEl$1,\n        smoother = gsap$1.core.globals().ScrollSmoother,\n        smootherInstance = smoother && smoother.get(),\n        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),\n        scrollFuncY = _getScrollFunc(target, _vertical),\n        scrollFuncX = _getScrollFunc(target, _horizontal),\n        scale = 1,\n        initialScale = (Observer.isTouch && _win$1.visualViewport ? _win$1.visualViewport.scale * _win$1.visualViewport.width : _win$1.outerWidth) / _win$1.innerWidth,\n        wheelRefresh = 0,\n        resolveMomentumDuration = _isFunction(momentum) ? function () {\n      return momentum(self);\n    } : function () {\n      return momentum || 2.8;\n    },\n        lastRefreshID,\n        skipTouchMove,\n        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),\n        resumeTouchMove = function resumeTouchMove() {\n      return skipTouchMove = false;\n    },\n        scrollClampX = _passThrough,\n        scrollClampY = _passThrough,\n        updateClamps = function updateClamps() {\n      maxY = _maxScroll(target, _vertical);\n      scrollClampY = _clamp$1(_fixIOSBug ? 1 : 0, maxY);\n      normalizeScrollX && (scrollClampX = _clamp$1(0, _maxScroll(target, _horizontal)));\n      lastRefreshID = _refreshID;\n    },\n        removeContentOffset = function removeContentOffset() {\n      content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + \"px\";\n      content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + parseFloat(content._gsap.y) + \", 0, 1)\";\n      scrollFuncY.offset = scrollFuncY.cacheID = 0;\n    },\n        ignoreDrag = function ignoreDrag() {\n      if (skipTouchMove) {\n        requestAnimationFrame(resumeTouchMove);\n\n        var offset = _round(self.deltaY / 2),\n            scroll = scrollClampY(scrollFuncY.v - offset);\n\n        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n          scrollFuncY.offset = scroll - scrollFuncY.v;\n\n          var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);\n\n          content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\";\n          content._gsap.y = y + \"px\";\n          scrollFuncY.cacheID = _scrollers.cache;\n\n          _updateAll();\n        }\n\n        return true;\n      }\n\n      scrollFuncY.offset && removeContentOffset();\n      skipTouchMove = true;\n    },\n        tween,\n        startScrollX,\n        startScrollY,\n        onStopDelayedCall,\n        onResize = function onResize() {\n      updateClamps();\n\n      if (tween.isActive() && tween.vars.scrollY > maxY) {\n        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n      }\n    };\n\n    content && gsap$1.set(content, {\n      y: \"+=0\"\n    });\n\n    vars.ignoreCheck = function (e) {\n      return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag() || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n    };\n\n    vars.onPress = function () {\n      skipTouchMove = false;\n      var prevScale = scale;\n      scale = _round((_win$1.visualViewport && _win$1.visualViewport.scale || 1) / initialScale);\n      tween.pause();\n      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n      startScrollX = scrollFuncX();\n      startScrollY = scrollFuncY();\n      updateClamps();\n      lastRefreshID = _refreshID;\n    };\n\n    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {\n      scrollFuncY.offset && removeContentOffset();\n\n      if (!wasDragging) {\n        onStopDelayedCall.restart(true);\n      } else {\n        _scrollers.cache++;\n        var dur = resolveMomentumDuration(),\n            currentScroll,\n            endScroll;\n\n        if (normalizeScrollX) {\n          currentScroll = scrollFuncX();\n          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227;\n          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));\n          tween.vars.scrollX = scrollClampX(endScroll);\n        }\n\n        currentScroll = scrollFuncY();\n        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227;\n        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));\n        tween.vars.scrollY = scrollClampY(endScroll);\n        tween.invalidate().duration(dur).play(0.01);\n\n        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n          gsap$1.to({}, {\n            onUpdate: onResize,\n            duration: dur\n          });\n        }\n      }\n\n      onRelease && onRelease(self);\n    };\n\n    vars.onWheel = function () {\n      tween._ts && tween.pause();\n\n      if (_getTime$1() - wheelRefresh > 1000) {\n        lastRefreshID = 0;\n        wheelRefresh = _getTime$1();\n      }\n    };\n\n    vars.onChange = function (self, dx, dy, xArray, yArray) {\n      _refreshID !== lastRefreshID && updateClamps();\n      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1]));\n\n      if (dy) {\n        scrollFuncY.offset && removeContentOffset();\n        var isTouch = yArray[2] === dy,\n            y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],\n            yClamped = scrollClampY(y);\n        isTouch && y !== yClamped && (startScrollY += yClamped - y);\n        scrollFuncY(yClamped);\n      }\n\n      (dy || dx) && _updateAll();\n    };\n\n    vars.onEnable = function () {\n      _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n\n      ScrollTrigger$1.addEventListener(\"refresh\", onResize);\n\n      _addListener$1(_win$1, \"resize\", onResize);\n\n      if (scrollFuncY.smooth) {\n        scrollFuncY.target.style.scrollBehavior = \"auto\";\n        scrollFuncY.smooth = scrollFuncX.smooth = false;\n      }\n\n      inputObserver.enable();\n    };\n\n    vars.onDisable = function () {\n      _allowNativePanning(target, true);\n\n      _removeListener$1(_win$1, \"resize\", onResize);\n\n      ScrollTrigger$1.removeEventListener(\"refresh\", onResize);\n      inputObserver.kill();\n    };\n\n    vars.lockAxis = vars.lockAxis !== false;\n    self = new Observer(vars);\n    self.iOS = _fixIOSBug;\n    _fixIOSBug && !scrollFuncY() && scrollFuncY(1);\n    _fixIOSBug && gsap$1.ticker.add(_passThrough);\n    onStopDelayedCall = self._dc;\n    tween = gsap$1.to(self, {\n      ease: \"power4\",\n      paused: true,\n      scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n      scrollY: \"+=0.1\",\n      modifiers: {\n        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {\n          return tween.pause();\n        })\n      },\n      onUpdate: _updateAll,\n      onComplete: onStopDelayedCall.vars.onComplete\n    });\n    return self;\n  };\n\n  ScrollTrigger$1.sort = function (func) {\n    return _triggers.sort(func || function (a, b) {\n      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);\n    });\n  };\n\n  ScrollTrigger$1.observe = function (vars) {\n    return new Observer(vars);\n  };\n\n  ScrollTrigger$1.normalizeScroll = function (vars) {\n    if (typeof vars === \"undefined\") {\n      return _normalizer$1;\n    }\n\n    if (vars === true && _normalizer$1) {\n      return _normalizer$1.enable();\n    }\n\n    if (vars === false) {\n      return _normalizer$1 && _normalizer$1.kill();\n    }\n\n    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);\n    _normalizer$1 && _normalizer$1.target === normalizer.target && _normalizer$1.kill();\n    _isViewport$1(normalizer.target) && (_normalizer$1 = normalizer);\n    return normalizer;\n  };\n\n  ScrollTrigger$1.core = {\n    _getVelocityProp: _getVelocityProp,\n    _inputObserver: _inputObserver,\n    _scrollers: _scrollers,\n    _proxies: _proxies,\n    bridge: {\n      ss: function ss() {\n        _lastScrollTime || _dispatch(\"scrollStart\");\n        _lastScrollTime = _getTime$1();\n      },\n      ref: function ref() {\n        return _refreshing;\n      }\n    }\n  };\n  _getGSAP$1() && gsap$1.registerPlugin(ScrollTrigger$1);\n\n  exports.ScrollTrigger = ScrollTrigger$1;\n  exports.default = ScrollTrigger$1;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _reverting,\n      _context,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n  },\n      _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n  },\n      _revertConfig = {\n    suppressEvents: true\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n  },\n      _parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0),\n        end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function (obj, defaults) {\n      for (var p in defaults) {\n        p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n      }\n    };\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [tTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents && !_reverting) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _roundPrecise(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n    return function (raw) {\n      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        prevContext = _context,\n        context = animation._ctx,\n        params,\n        scope,\n        result;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _registerPluginQueue = [],\n      _createPlugin = function _createPlugin(config) {\n    if (_windowExists() && config) {\n      config = !config.name && config[\"default\"] || config;\n\n      var name = config.name,\n          isFunc = _isFunction(config),\n          Plugin = name && !isFunc && config.init ? function () {\n        this._props = [];\n      } : config,\n          instanceDefaults = {\n        init: _emptyFunc,\n        render: _renderPropTweens,\n        add: _addPropTween,\n        kill: _killPropTweensOf,\n        modifier: _addPluginModifier,\n        rawVars: 0\n      },\n          statics = {\n        targetTest: 0,\n        get: 0,\n        getSetter: _getSetter,\n        aliases: {},\n        register: 0\n      };\n\n      _wake();\n\n      if (config !== Plugin) {\n        if (_plugins[name]) {\n          return;\n        }\n\n        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n        _plugins[Plugin.prop = name] = Plugin;\n\n        if (config.targetTest) {\n          _harnessPlugins.push(Plugin);\n\n          _reservedProps[name] = 1;\n        }\n\n        name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n      }\n\n      _addGlobal(name, Plugin);\n\n      config.register && config.register(gsap, Plugin, PropTween);\n    } else {\n      config && _registerPluginQueue.push(config);\n    }\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n\n            _registerPluginQueue.forEach(_createPlugin);\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || Infinity;\n        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback, once, prioritize) {\n        var func = once ? function (t, d, f, v) {\n          callback(t, d, f, v);\n\n          _self.remove(func);\n        } : callback;\n\n        _self.remove(callback);\n\n        _listeners[prioritize ? \"unshift\" : \"push\"](func);\n\n        _wake();\n\n        return func;\n      },\n      remove: function remove(callback, i) {\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n\n      if (_context) {\n        this._ctx = _context;\n\n        _context.data.push(this);\n      }\n\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent && parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);\n\n      _setEnd(this);\n\n      return _recacheAncestors(this);\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.revert = function revert(config) {\n      if (config === void 0) {\n        config = _revertConfig;\n      }\n\n      var prevIsReverting = _reverting;\n      _reverting = config;\n\n      if (this._initted || this._startAt) {\n        this.timeline && this.timeline.revert(config);\n        this.totalTime(-0.01, config.suppressEvents);\n      }\n\n      this.data !== \"nested\" && config.kill !== false && this.kill();\n      _reverting = prevIsReverting;\n      return this;\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : tTime % dur ? dur : tTime;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate(soft) {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate(soft);\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this, soft);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _forceAllPropTweens,\n      _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl || keyframes && !vars.stagger) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n\n      if (prevStartAt) {\n        prevStartAt._zTime < 0 && prevStartAt.progress(1);\n        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);\n        prevStartAt._lazy = 0;\n      }\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: !prevStartAt && _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        tween._startAt._dp = 0;\n        tween._startAt._sat = tween;\n        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);\n\n        if (immediateRender) {\n          if (dur && time <= 0 && tTime <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        }\n      } else if (runBackwards && dur) {\n        if (!prevStartAt) {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          tween._startAt._dp = 0;\n          tween._startAt._sat = tween;\n          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n          tween._zTime = time;\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = tween._ptCache = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n    keyframes && time <= 0 && tl.render(_bigNum, true, true);\n  },\n      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],\n        pt,\n        rootPT,\n        lookup,\n        i;\n\n    if (!ptCache) {\n      ptCache = tween._ptCache[property] = [];\n      lookup = tween._ptLookup;\n      i = tween._targets.length;\n\n      while (i--) {\n        pt = lookup[i][property];\n\n        if (pt && pt.d && pt.d._pt) {\n          pt = pt.d._pt;\n\n          while (pt && pt.p !== property && pt.fp !== property) {\n            pt = pt._next;\n          }\n        }\n\n        if (!pt) {\n          _forceAllPropTweens = 1;\n          tween.vars[property] = \"+=0\";\n\n          _initTween(tween, time);\n\n          _forceAllPropTweens = 0;\n          return 1;\n        }\n\n        ptCache.push(pt);\n      }\n    }\n\n    i = ptCache.length;\n\n    while (i--) {\n      rootPT = ptCache[i];\n      pt = rootPT._pt || rootPT;\n      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n      pt.c = value - pt.s;\n      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));\n      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));\n    }\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\",\n        p,\n        a;\n\n    if (_isArray(obj)) {\n      a = allProps[prop] || (allProps[prop] = []);\n      obj.forEach(function (value, i) {\n        return a.push({\n          t: i / (obj.length - 1) * 100,\n          v: value,\n          e: ease\n        });\n      });\n    } else {\n      for (p in obj) {\n        a = allProps[p] || (allProps[p] = []);\n        p === \"ease\" || a.push({\n          t: parseFloat(prop),\n          v: obj[p],\n          e: ease\n        });\n      }\n    }\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\",\n      _staggerPropsToSkip = {};\n\n  _forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function (name) {\n    return _staggerPropsToSkip[name] = 1;\n  });\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {},\n          targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n          l = parsedTargets.length;\n          staggerFunc = stagger && distribute(stagger);\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = _copyExcluding(vars, _staggerPropsToSkip);\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n            tl._ease = _easeMap.none;\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        } else if (keyframes) {\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          }));\n\n          tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n          var time = 0,\n              a,\n              kf,\n              v;\n\n          if (_isArray(keyframes)) {\n            keyframes.forEach(function (frame) {\n              return tl.to(parsedTargets, frame, \">\");\n            });\n            tl.duration();\n          } else {\n            copy = {};\n\n            for (p in keyframes) {\n              p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n            }\n\n            for (p in copy) {\n              a = copy[p].sort(function (a, b) {\n                return a.t - b.t;\n              });\n              time = 0;\n\n              for (i = 0; i < a.length; i++) {\n                kf = a[i];\n                v = {\n                  ease: kf.e,\n                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                };\n                v[p] = kf.v;\n                tl.to(parsedTargets, v, time);\n                time += v.duration;\n              }\n            }\n\n            tl.duration() < duration && tl.to({}, {\n              duration: duration - tl.duration()\n            });\n          }\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay) || 0);\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          isNegative = totalTime < 0,\n          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && isNegative) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            this._tTime = tTime;\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (prevTime !== this._time) {\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate(soft) {\n      (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate(soft);\n      return _Animation2.prototype.invalidate.call(this, soft);\n    };\n\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n      _tickerActive || _ticker.wake();\n      this._ts || this.play();\n      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),\n          ratio;\n      this._initted || _initTween(this, time);\n      ratio = this._ease(time / this._dur);\n\n      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n        return this.resetTo(property, value, start, startIsRelative);\n      }\n\n      _alignPlayhead(this, 0);\n\n      this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n      return this.render(0);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n\n  var _media = [],\n      _listeners = {},\n      _emptyArray = [],\n      _lastMediaTime = 0,\n      _contextID = 0,\n      _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function (f) {\n      return f();\n    });\n  },\n      _onMediaChange = function _onMediaChange() {\n    var time = Date.now(),\n        matches = [];\n\n    if (time - _lastMediaTime > 2) {\n      _dispatch(\"matchMediaInit\");\n\n      _media.forEach(function (c) {\n        var queries = c.queries,\n            conditions = c.conditions,\n            match,\n            p,\n            anyMatch,\n            toggled;\n\n        for (p in queries) {\n          match = _win.matchMedia(queries[p]).matches;\n          match && (anyMatch = 1);\n\n          if (match !== conditions[p]) {\n            conditions[p] = match;\n            toggled = 1;\n          }\n        }\n\n        if (toggled) {\n          c.revert();\n          anyMatch && matches.push(c);\n        }\n      });\n\n      _dispatch(\"matchMediaRevert\");\n\n      matches.forEach(function (c) {\n        return c.onMatch(c);\n      });\n      _lastMediaTime = time;\n\n      _dispatch(\"matchMedia\");\n    }\n  };\n\n  var Context = function () {\n    function Context(func, scope) {\n      this.selector = scope && selector(scope);\n      this.data = [];\n      this._r = [];\n      this.isReverted = false;\n      this.id = _contextID++;\n      func && this.add(func);\n    }\n\n    var _proto5 = Context.prototype;\n\n    _proto5.add = function add(name, func, scope) {\n      if (_isFunction(name)) {\n        scope = func;\n        func = name;\n        name = _isFunction;\n      }\n\n      var self = this,\n          f = function f() {\n        var prev = _context,\n            prevSelector = self.selector,\n            result;\n        prev && prev !== self && prev.data.push(self);\n        scope && (self.selector = selector(scope));\n        _context = self;\n        result = func.apply(self, arguments);\n        _isFunction(result) && self._r.push(result);\n        _context = prev;\n        self.selector = prevSelector;\n        self.isReverted = false;\n        return result;\n      };\n\n      self.last = f;\n      return name === _isFunction ? f(self) : name ? self[name] = f : f;\n    };\n\n    _proto5.ignore = function ignore(func) {\n      var prev = _context;\n      _context = null;\n      func(this);\n      _context = prev;\n    };\n\n    _proto5.getTweens = function getTweens() {\n      var a = [];\n      this.data.forEach(function (e) {\n        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n      });\n      return a;\n    };\n\n    _proto5.clear = function clear() {\n      this._r.length = this.data.length = 0;\n    };\n\n    _proto5.kill = function kill(revert, matchMedia) {\n      var _this4 = this;\n\n      if (revert) {\n        var tweens = this.getTweens();\n        this.data.forEach(function (t) {\n          if (t.data === \"isFlip\") {\n            t.revert();\n            t.getChildren(true, true, false).forEach(function (tween) {\n              return tweens.splice(tweens.indexOf(tween), 1);\n            });\n          }\n        });\n        tweens.map(function (t) {\n          return {\n            g: t.globalTime(0),\n            t: t\n          };\n        }).sort(function (a, b) {\n          return b.g - a.g || -Infinity;\n        }).forEach(function (o) {\n          return o.t.revert(revert);\n        });\n        this.data.forEach(function (e) {\n          return !(e instanceof Tween) && e.revert && e.revert(revert);\n        });\n\n        this._r.forEach(function (f) {\n          return f(revert, _this4);\n        });\n\n        this.isReverted = true;\n      } else {\n        this.data.forEach(function (e) {\n          return e.kill && e.kill();\n        });\n      }\n\n      this.clear();\n\n      if (matchMedia) {\n        var i = _media.length;\n\n        while (i--) {\n          _media[i].id === this.id && _media.splice(i, 1);\n        }\n      }\n    };\n\n    _proto5.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    return Context;\n  }();\n\n  var MatchMedia = function () {\n    function MatchMedia(scope) {\n      this.contexts = [];\n      this.scope = scope;\n    }\n\n    var _proto6 = MatchMedia.prototype;\n\n    _proto6.add = function add(conditions, func, scope) {\n      _isObject(conditions) || (conditions = {\n        matches: conditions\n      });\n      var context = new Context(0, scope || this.scope),\n          cond = context.conditions = {},\n          mq,\n          p,\n          active;\n      _context && !context.selector && (context.selector = _context.selector);\n      this.contexts.push(context);\n      func = context.add(\"onMatch\", func);\n      context.queries = conditions;\n\n      for (p in conditions) {\n        if (p === \"all\") {\n          active = 1;\n        } else {\n          mq = _win.matchMedia(conditions[p]);\n\n          if (mq) {\n            _media.indexOf(context) < 0 && _media.push(context);\n            (cond[p] = mq.matches) && (active = 1);\n            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n          }\n        }\n      }\n\n      active && func(context);\n      return this;\n    };\n\n    _proto6.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    _proto6.kill = function kill(revert) {\n      this.contexts.forEach(function (c) {\n        return c.kill(revert, true);\n      });\n    };\n\n    return MatchMedia;\n  }();\n\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    quickTo: function quickTo(target, property, vars) {\n      var _merge2;\n\n      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})),\n          func = function func(value, start, startIsRelative) {\n        return tween.resetTo(property, value, start, startIsRelative);\n      };\n\n      func.tween = tween;\n      return func;\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    context: function context(func, scope) {\n      return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n      return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n      return _media.forEach(function (c) {\n        var cond = c.conditions,\n            found,\n            p;\n\n        for (p in cond) {\n          if (cond[p]) {\n            cond[p] = false;\n            found = 1;\n          }\n        }\n\n        found && c.revert();\n      }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n      var a = _listeners[type] || (_listeners[type] = []);\n      ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n      var a = _listeners[type],\n          i = a && a.indexOf(callback);\n      i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      reverting: function reverting() {\n        return _reverting;\n      },\n      context: function context(toAdd) {\n        if (toAdd && _context) {\n          _context.data.push(toAdd);\n\n          toAdd._ctx = _context;\n        }\n\n        return _context;\n      },\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt, v;\n      this.tween = tween;\n\n      for (p in vars) {\n        v = target.getAttribute(p) || \"\";\n        pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt.op = p;\n        pt.b = v;\n\n        this._props.push(p);\n      }\n    },\n    render: function render(ratio, data) {\n      var pt = data._pt;\n\n      while (pt) {\n        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.12.2\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _reverting$1,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n\n    var target = this.target,\n        style = target.style;\n\n    if (property in _transformProps && style) {\n      this.tfm = this.tfm || {};\n\n      if (property !== \"transform\") {\n        property = _propertyAliases[property] || property;\n        ~property.indexOf(\",\") ? property.split(\",\").forEach(function (a) {\n          return _this.tfm[a] = _get(target, a);\n        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);\n      } else {\n        return _propertyAliases.transform.split(\",\").forEach(function (p) {\n          return _saveStyle.call(_this, p, isNotCSS);\n        });\n      }\n\n      if (this.props.indexOf(_transformProp) >= 0) {\n        return;\n      }\n\n      if (target._gsap.svg) {\n        this.svgo = target.getAttribute(\"data-svg-origin\");\n        this.props.push(_transformOriginProp, isNotCSS, \"\");\n      }\n\n      property = _transformProp;\n    }\n\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n  },\n      _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n      style.removeProperty(\"translate\");\n      style.removeProperty(\"scale\");\n      style.removeProperty(\"rotate\");\n    }\n  },\n      _revertStyle = function _revertStyle() {\n    var props = this.props,\n        target = this.target,\n        style = target.style,\n        cache = target._gsap,\n        i,\n        p;\n\n    for (i = 0; i < props.length; i += 3) {\n      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n\n    if (this.tfm) {\n      for (p in this.tfm) {\n        cache[p] = this.tfm[p];\n      }\n\n      if (cache.svg) {\n        cache.renderTransform();\n        target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n      }\n\n      i = _reverting$1();\n\n      if ((!i || !i.isStart) && !style[_transformProp]) {\n        _removeIndependentTransforms(style);\n\n        cache.uncache = 1;\n      }\n    }\n  },\n      _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n      target: target,\n      props: [],\n      revert: _revertStyle,\n      save: _saveStyle\n    };\n    target._gsap || gsap.core.getCache(target);\n    properties && properties.split(\",\").forEach(function (p) {\n      return saver.save(p);\n    });\n    return saver;\n  },\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _reverting$1 = gsap.core.reverting;\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n\n          _removeIndependentTransforms(style);\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextElementSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        cs = getComputedStyle(target),\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n\n    if (cs.translate) {\n      if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n        style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n      }\n\n      style.scale = style.rotate = style.translate = \"none\";\n    }\n\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      if (cache.uncache) {\n        t2 = target.getBBox();\n        origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n        t1 = \"\";\n      } else {\n        t1 = !uncache && target.getAttribute(\"data-svg-origin\");\n      }\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority,\n          inlineProps;\n      _pluginInitted || _initCore();\n      this.styles = this.styles || _getStyleSaver(target);\n      inlineProps = this.styles.props;\n      this.tween = tween;\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n          inlineProps.push(p, 0, style[p]);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n            getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\");\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              inlineProps.push(\"visibility\", 0, style.visibility);\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            this.styles.save(p);\n\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n              this._pt.u = 0;\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit && endUnit !== \"%\") {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n            } else if (p !== \"parseTransform\") {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n          }\n\n          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    render: function render(ratio, data) {\n      if (data.tween._time || !_reverting$1()) {\n        var pt = data._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n      } else {\n        data.styles.revert();\n      }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n  gsap.core.getStyleSaver = _getStyleSaver;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","import { animations } from './animations/all';\n\nexport type AnimationType = (el: HTMLElement, delay?: number)=> gsap.core.Tween | gsap.core.Timeline;\n\n\nexport function getAnimation(type: string, el: HTMLElement, delay: number): gsap.core.Tween | gsap.core.Timeline | null {\n    if (!animations[type]) { console.warn(`animation type \"${type}\" does not exist`); return null; }\n    return animations[type]?.(el, delay);\n}\n","export interface IBreakpoint {\n    desktop: boolean;\n    tablet: boolean;\n    phone: boolean;\n    value: string;\n}\n\n\nexport function getBreakpoint(): IBreakpoint {\n    const before = window.getComputedStyle(document.querySelector('body'), ':before');\n    const breakpoint = before.getPropertyValue('content').replace(/[\\\"\\']/g, '');\n\n    return {\n        desktop: breakpoint === 'desktop',\n        phone: breakpoint === 'phone',\n        tablet: breakpoint === 'tablet',\n        value: breakpoint,\n    };\n}\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n\ndeclare let safari;\n\nexport interface IBrowser {\n    android?: boolean;\n    chrome?: boolean;\n    edge?: boolean;\n    firefox?: boolean;\n    ie?: boolean;\n    ios?: boolean;\n    mac?: boolean;\n    mobile?: boolean;\n    phone?: boolean;\n    opera?: boolean;\n    safari?: boolean;\n    touch?: boolean;\n}\n\n\nexport function getBrowser(): IBrowser {\n    const ua = window.navigator.userAgent;\n    const browser: IBrowser = {\n        mobile: !!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),\n        phone: !!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),\n        android: /Android/i.test(ua),\n        ios: ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) || (navigator.userAgent.includes('Mac') && 'ontouchend' in document),\n        mac: navigator.platform.toUpperCase().indexOf('MAC') >= 0,\n        ie: ua.indexOf('MSIE ') > 0 || !!ua.match(/Trident.*rv\\:11\\./),\n        edge: /Edge/.test(navigator.userAgent),\n        firefox: ua.toLowerCase().indexOf('firefox') > -1,\n        safari: /iP(ad|hone|od).+Version\\/[\\d\\.]+.*Safari/i.test(navigator.userAgent) || Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || (((p): boolean => p.toString() === '[object SafariRemoteNotification]')(!window.safari || safari.pushNotification)),\n        chrome: (ua.toLowerCase().indexOf('chrome') > -1) && (navigator.vendor.toLowerCase().indexOf('google') > -1),\n        touch: ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || ((navigator as any).msMaxTouchPoints > 0),\n    };\n\n    const htmlClassList = document.querySelector('html')!.classList;\n    htmlClassList.toggle('mac', browser.ios || browser.mac);\n    htmlClassList.toggle('mobile', browser.mobile);\n    htmlClassList.toggle('phone', browser.phone && browser.touch);\n    htmlClassList.toggle('ios', browser.ios);\n    htmlClassList.toggle('firefox', browser.firefox);\n    htmlClassList.toggle('safari', browser.safari);\n    htmlClassList.toggle('ie', browser.ie);\n    htmlClassList.toggle('touch', browser.touch);\n    htmlClassList.toggle('no-touch', !browser.touch);\n    htmlClassList.remove('no-js');\n\n    return browser;\n}\n\n\ndeclare global {\n    interface Window {\n        opr: any;\n        opera: any;\n        safari: any;\n        HTMLElement: any;\n    }\n}\n","import { Page } from './pages/Page';\nimport { LightboxNav } from './components/Lightbox/LightboxNav';\nimport { LightboxTranscript } from './components/Lightbox/LightboxTranscript';\nimport { LightboxSlider } from './components/Lightbox/LightboxSlider';\nimport { Load } from './components/Load';\nimport { Modal } from './components/Modal';\nimport { More } from './components/More';\nimport { Accordeon } from './components/Accordeon';\nimport { AccordeonList } from './components/AccordeonList';\nimport { Player } from './components/Player/Player';\nimport { Video } from './components/Player/Video';\n\nexport const components = {\n    Accordeon,\n    AccordeonList,\n    Load,\n    Modal,\n    More,\n    Player,\n    Video,\n    LightboxNav,\n    LightboxTranscript,\n    LightboxSlider,\n};\n\nexport const pages = { Page };\n","export abstract class Handler {\n    public events: Object;\n\n    constructor() {\n        this.events = {};\n    }\n\n\n    /**\n     * Attach an event handler function.\n     * @param  {string}   eventName please use static names\n     * @param  {Function} handler   callback function\n     * @return {Handler}            returns current object\n     */\n    public on(eventName: string, handler: Function): Handler {\n        if (!this.events[eventName]) {\n            this.events[eventName] = [];\n        }\n\n        this.events[eventName].push(handler);\n\n        return this;\n    }\n\n\n    /**\n     * Detach an event handler function.\n     * @param  {string}   eventName please use static names\n     * @param  {Function} handler   callback function\n     * @return {Handler}            returns current object\n     */\n    public off(eventName?: string, handler?: Function): Handler {\n        if (typeof eventName === 'undefined') {\n            this.events = {};\n\n            return this;\n        }\n\n        if (typeof handler === 'undefined' && this.events[eventName]) {\n            this.events[eventName] = [];\n\n            return this;\n        }\n\n        if (!this.events[eventName]) {\n            return this;\n        }\n\n        const index = this.events[eventName].indexOf(handler);\n\n        if (index > -1) {\n            this.events[eventName].splice(index, 1);\n        }\n\n        return this;\n    }\n\n\n    /**\n     * Call an event handler function.\n     * @param {string} eventName\n     * @param {[type]} ...extraParameters pass any parameters to callback function\n     */\n    public trigger(eventName: string, ...args): void {\n        if (!this.events[eventName]) { return; }\n        this.events[eventName].forEach(event => event(...args));\n    }\n\n\n    public destroy(): void {\n        this.events = {};\n    }\n}\n\n","import { AudioPlayer } from './components/AudioPlayer';\n\nexport class Menu {\n    private isOpen = false;\n\n    private elToggle: HTMLElement;\n    private closeBtn: HTMLButtonElement;\n    private wrapEl: HTMLElement;\n    private isAnimating = false;\n\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement) {\n        this.elToggle = document.querySelector('.js-toggle-menu');\n        this.closeBtn = this.view.querySelector('.js-menu-close');\n        this.wrapEl = document.getElementById('wrapper');\n\n        this.bind();\n    }\n\n\n\n    public onState(): void {\n        this.isOpen && this.close();\n    }\n\n\n\n    private bind(): void {\n        this.elToggle && this.elToggle.addEventListener('click', this.onToggle);\n        this.closeBtn && this.closeBtn.addEventListener('click', this.close);\n\n        // on close menu animation's end (related to whole #content toggle animation) set display: none for menu\n        this.wrapEl.addEventListener('transitionend', () => {\n            this.onAnimationEnd();\n        });\n    }\n\n\n\n    private onAnimationEnd = (): void => {\n        this.isAnimating = false;\n        if (!this.isOpen) {\n            this.view.style.display = 'none';\n        }\n    };\n\n\n\n    private onToggle = (): void => {\n        this.isOpen ? this.close() : this.open();\n    };\n\n\n\n    private open = (): void => {\n        if (this.isAnimating) return;\n\n        this.isAnimating = true;\n        this.isOpen = true;\n        this.view.style.display = 'flex';\n        document.body.classList.add('has-menu-open');\n        AudioPlayer.closeAudioPlayer();\n    };\n\n\n\n    private close = (): void => {\n        if (this.isAnimating) return;\n\n        this.isAnimating = true;\n        this.isOpen = false;\n        document.body.classList.remove('has-menu-open');\n    };\n}\n","/* eslint-disable max-classes-per-file */\nimport { normalizeUrl } from './Utils';\nimport Scroll from './Scroll';\nimport { Handler } from './Handler';\n\nexport class PushStatesEvents {\n    public static CHANGE = 'state';\n    public static PROGRESS = 'progress';\n}\n\n\nexport class PushStates extends Handler {\n    // eslint-disable-next-line no-use-before-define\n    public static instance: PushStates;\n    public static readonly TIME_LIMIT = 10000;\n    private static initialHistoryLength: number;\n    private static noChange = false;\n\n\n    /** change document title */\n    public static setTitle(title?: string): void {\n        const content: HTMLElement = document.getElementById('content');\n        const dataTitle: HTMLElement = content.querySelector('[data-title]');\n\n        document.title = title || dataTitle.dataset.title;\n    }\n\n\n    /** change loaction pathname and trigger History */\n    public static goTo(location: string, replace?: boolean): boolean {\n        const pathname = location.replace(window.location.protocol + window.location.host, '');\n        const isDifferent = pathname !== window.location.pathname;\n\n        if (replace) {\n            window.history.replaceState({ randomData: Math.random() }, document.title, pathname);\n        } else {\n            window.history.pushState({ randomData: Math.random() }, document.title, pathname);\n        }\n\n        PushStates.instance.onState();\n\n        return isDifferent;\n    }\n\n\n    /** only change loaction pathname without triggering History */\n    public static changePath(location: string, replace?: boolean, title?: string): void {\n        PushStates.noChange = true;\n        const changed = PushStates.goTo(location, replace || true);\n        PushStates.noChange = false;\n\n        if (changed) {\n            PushStates.setTitle(title || document.title);\n        }\n    }\n\n\n    /** bind links to be used with PushStates / History */\n    public static bind(target?: Element, elementItself?: boolean): void {\n        if (!elementItself) {\n            PushStates.instance.bindLinks(target);\n        } else {\n            PushStates.instance.bindLink(target as Element);\n        }\n    }\n\n\n    /**\n     * go back in browser history\n     * @param {string} optional fallback url (when browser deoesn't have any items in history)\n     */\n    public static back(url?: string): void {\n        if (window.history.length - PushStates.initialHistoryLength > 0) {\n            window.history.back();\n        } else if (url) {\n            window.history.replaceState({ randomData: Math.random() }, document.title, url);\n            PushStates.instance.onState();\n        } else {\n            window.history.replaceState({ randomData: Math.random() }, document.title, '/');\n            PushStates.instance.onState();\n        }\n    }\n\n\n    public static reload(): void {\n        PushStates.instance.trigger(PushStatesEvents.CHANGE);\n    }\n\n\n    private loadedData: string;\n    private request: XMLHttpRequest;\n    private timeout: ReturnType<typeof setTimeout>;\n    private currentPathname: string;\n\n\n    constructor() {\n        super();\n\n        this.bindLinks();\n\n        window.addEventListener('popstate', this.onState, { passive: true });\n\n        /**\n         * Set scrollRestoration to 'manual' so the scroll doesn't jump\n         * when back button is pressed.\n         */\n        window.history.scrollRestoration = 'manual';\n        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);\n\n        PushStates.instance = this;\n        PushStates.initialHistoryLength = window.history.length;\n        this.currentPathname = normalizeUrl(window.location.pathname);\n\n        this.setActiveLinks();\n    }\n\n\n    /**\n     * load new content via ajax based on current location:\n     * @return {Promise<boolean>} promise resolved when XMLHttpRequest is finished\n     */\n    public load(): Promise<void> {\n        // cancel old request:\n        if (this.request) {\n            this.request.abort();\n        }\n\n        // define url\n        const { pathname } = window.location;\n        const search: string = window.location.search || '';\n        const url = pathname + search;\n\n        // define timeout\n        window.clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            if (this.request) {\n                window.location.reload();\n            }\n        }, PushStates.TIME_LIMIT);\n\n        // return promise\n        // and do the request:\n        return new Promise<void>((resolve, reject) => {\n            // do the usual xhr stuff:\n            this.request = new XMLHttpRequest();\n            this.request.open('GET', url);\n            this.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n            // onload handler:\n            this.request.onload = () => {\n                if (this.request.status === 200) {\n                    this.loadedData = this.request.responseText;\n                    this.currentPathname = normalizeUrl(pathname);\n\n                    this.trigger(PushStatesEvents.PROGRESS, 1);\n                    resolve();\n                } else {\n                    reject(Error(this.request.statusText));\n\n                    if (this.request.statusText !== 'abort') {\n                        window.location.reload();\n                    }\n                }\n\n                this.request = null;\n                window.clearTimeout(this.timeout);\n            };\n\n            // catching errors:\n            this.request.onerror = () => {\n                reject(Error('Network Error'));\n                window.clearTimeout(this.timeout);\n                this.request = null;\n            };\n\n            // catch progress\n            this.request.onprogress = e => {\n                if (e.lengthComputable) {\n                    this.trigger(PushStatesEvents.PROGRESS, e.loaded / e.total);\n                }\n            };\n\n            // send request:\n            this.request.send();\n        });\n    }\n\n\n    /**\n     * tells if rendered html match current pathname\n     */\n    public isRendered(pathname?: string): boolean {\n        return this.currentPathname === normalizeUrl(pathname || window.location.pathname);\n    }\n\n\n    public static dupa(): void {\n        const gohno = {\n            pudfw: 'costam',\n            fdwhio: 'foo',\n        };\n    }\n\n\n    /** function called on successful data load */\n    public render(): void {\n        const data: string = this.loadedData.trim();\n        const containers = document.querySelectorAll('.js-replace[id], #content');\n        let renderedCount = 0;\n\n\n        // render each of containers\n        // if only one container, force `plain`\n        if (containers.length > 0) {\n            containers.forEach((container, index): void => {\n                const force = index === 0 && containers.length === 1;\n                renderedCount += this.renderElement(container as HTMLElement, data, force) ? 1 : 0;\n            });\n        }\n\n\n        // re-try rendering if none of containers were rendered:\n        if (renderedCount === 0 && containers.length > 0) {\n            this.renderElement(document.getElementById('content'), data, true);\n        }\n\n        this.bindLinks();\n        this.setActiveLinks();\n\n        // dispatch global event for serdelia CMS:\n        window.document.dispatchEvent(new Event('ajax_loaded'));\n\n        // fix browser scroll history cache\n        window.history.scrollRestoration = 'manual';\n        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);\n    }\n\n\n    private renderElement(el: HTMLElement, data: string, forcePlain?: boolean): boolean {\n        let code: string = null;\n\n        if (!el.id) { console.warn('Rendered element must have an `id` attribute!'); return false; }\n\n        const container = `#${el.id}`;\n\n        // if ajax returns only <article> element:\n        if (!!forcePlain && data.indexOf('<article') === 0 && el.id === 'content') {\n            code = data;\n        } else { // if ajax returns whole html:\n            const parser = new DOMParser();\n            const htmlDocument = parser.parseFromString(data, 'text/html');\n            const foundElement = htmlDocument.documentElement.querySelector(container);\n            code = foundElement ? foundElement.innerHTML : null;\n        }\n\n        if (!code) {\n            console.info(`Couldn't rerender #${el.id} element`);\n            return false;\n        }\n\n        const containerEl: HTMLElement = document.getElementById(el.id);\n\n        containerEl.style.display = 'none';\n        while (containerEl.firstChild) containerEl.removeChild(containerEl.firstChild);\n        containerEl.innerHTML = code || data;\n        containerEl.style.display = 'block';\n\n        return true;\n    }\n\n\n    /** bind links */\n    private bindLink(target: Element): void {\n        target.removeEventListener('click', this.onClick);\n        target.addEventListener('click', this.onClick);\n    }\n\n\n    /** bind links */\n    private bindLinks(target?: Element): void {\n        const t = target ?? document.body;\n\n        // eslint-disable-next-line max-len\n        const links = t.querySelectorAll('a:not([data-history=\"false\"]):not([data-api]):not([download]):not([data-modal]):not([href^=\"#\"]):not([href$=\".jpg\"]):not([target=\"_blank\"]):not([href^=\"mailto:\"]):not([href^=\"tel:\"]):not([data-poczta]):not([data-login]):not([data-lang])');\n\n        links.forEach(el => {\n            el.removeEventListener('click', this.onClick);\n            el.addEventListener('click', this.onClick);\n        });\n    }\n\n\n    /** links click handler */\n    private onClick = (e: Event): void => {\n        e.preventDefault();\n\n        const self: HTMLElement = e.currentTarget as HTMLElement;\n        const state: string = self.getAttribute('href').replace(`http://${window.location.host}`, '');\n        const type: string = self.dataset.history;\n\n        if (type === 'back') {\n            PushStates.back(state);\n        } else if (type === 'replace') {\n            window.history.replaceState({ randomData: Math.random() }, document.title, state);\n            this.onState();\n        } else {\n            Scroll.resetScrollCache(state);\n            window.history.pushState({ randomData: Math.random() }, document.title, state);\n            this.onState();\n        }\n    };\n\n\n    /** `statechange` event handler */\n    private onState = (): void => {\n        this.setActiveLinks();\n\n        if (!PushStates.noChange) {\n            this.trigger(PushStatesEvents.CHANGE);\n        }\n    };\n\n\n    /** mark links as active */\n    private setActiveLinks(): void {\n        [...document.querySelectorAll('a[href]')].map(el => el.classList.remove('is-active'));\n\n        if (document.querySelector(`a[href=\"${window.location.pathname}\"]`)) {\n            document.querySelector(`a[href=\"${window.location.pathname}\"]`).classList.add('is-active');\n        }\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport { gsap } from 'gsap/dist/gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport { ScrollToPlugin } from 'gsap/dist/ScrollToPlugin';\nimport { Component } from './components/Component';\nimport { browser } from './Site';\nimport { getAnimation } from './Animate';\nimport { animations, scrolls } from './animations/all';\n\n\nexport type ScrollToProps = {\n    el?: HTMLElement;\n    isSmooth?: boolean;\n    offsetY?: number;\n    duration?: number;\n    ease?: string;\n    y?: number;\n    onComplete?: ()=> void;\n}\n\ninterface IScrollData {\n    el: HTMLElement;\n    type: string;\n    delay?: number;\n    component?: Component;\n}\n\ninterface IParallaxData {\n    el: HTMLElement;\n    parallax: number,\n    delay?: number;\n    component?: Component;\n}\n\ngsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\n\n\n\nexport default class Scroll {\n\n    public static matchMedia: any = null;\n\n    private static enabled: boolean = true;\n    private static scrollCache: { [key: string]: number } = {};\n\n\n    public static resize(): void {\n        ScrollTrigger.refresh();\n    }\n\n\n    public static enable(): void {\n        Scroll.enabled = true;\n    }\n\n\n    public static disable(): void {\n        Scroll.enabled = false;\n    }\n\n\n    public static start(): void {\n        window.addEventListener('scroll', Scroll.onScroll);\n    }\n\n\n    public static stop(): void {\n        window.removeEventListener('scroll', Scroll.onScroll);\n    }\n\n\n\n    public static resetScrollCache(pathname): void {\n        Scroll.scrollCache[pathname] = 0;\n    }\n\n\n    private static onScroll = () => {\n        if (!Scroll.enabled) { return; }\n        Scroll.scrollCache[window.location.pathname] = window.scrollY;\n    };\n\n\n\n    public static scrollTo = async({\n        el,\n        y,\n        duration = 1,\n        ease = 'none',\n        offsetY = 0,\n    }: ScrollToProps): Promise<void> => new Promise(resolve => {\n        gsap.to(window, {\n            scrollTo: {\n                y: y ?? el,\n                x: 0,\n                offsetY,\n            },\n            duration,\n            ease,\n            onComplete: () => resolve(),\n        });\n    });\n\n\n\n    public static scrollToTop = async(fast?: boolean): Promise<void> => {\n        await Scroll.scrollTo({\n            y: 0,\n            el: document.querySelector('[data-page]'),\n            duration: fast ? 0 : 2,\n        });\n    };\n\n\n\n    public static scrollToCached(): void {\n        const y = Scroll.scrollCache[window.location.pathname] || 0;\n        Scroll.scrollTo({ y, duration: 0 });\n    }\n\n\n\n    public async load(): Promise<void> {\n        (ScrollTrigger as any).clearScrollMemory('manual');\n        this.bindHashClick();\n        this.setup();\n        Scroll.resize();\n    }\n\n\n\n    public setup(): void {\n\n        console.log('scroll setup', gsap.version);\n\n        // if (browser.safari) { return; }\n\n        Scroll.matchMedia = (gsap as any).matchMedia();\n        Scroll.matchMedia.add('(min-width: 1024px)', () => {\n\n\n            // general animations:\n            [...document.querySelectorAll('[data-animation]')]\n                .map((el: HTMLElement) => <IScrollData>{\n                    el,\n                    type: el.dataset.animation,\n                    delay: parseInt(el.dataset.delay, 10) || 0,\n                }).forEach((item: IScrollData) => {\n                    if (animations[item.type]) {\n                        ScrollTrigger.create({\n                            trigger: item.el,\n                            toggleActions: 'play pause resume reset',\n                            animation: getAnimation(item.type, item.el, item.delay || 0),\n                        });\n                    } else {\n                        console.warn(`animation type \"${item.type}\" does not exist`, item.el);\n                    }\n                });\n\n\n            // custom animations:\n            [...document.querySelectorAll('[data-scroll]')]\n                .map((el: HTMLElement) => <IScrollData>{\n                    el,\n                    type: el.dataset.scroll,\n                    delay: parseInt(el.dataset.delay, 10) || 0,\n                }).forEach((item: IScrollData) => {\n                    if (scrolls[item.type]) {\n                        scrolls[item.type](item.el, item.delay);\n                    } else {\n                        console.warn(`scroll type \"${item.type}\" does not exist`, item.el);\n                    }\n                });\n\n\n            // parallaxes:\n            [...document.querySelectorAll('[data-parallax]')]\n                .map((el: HTMLElement) => <IParallaxData> {\n                    el,\n                    parallax: parseInt(el.dataset.parallax, 10),\n                    delay: el.dataset.delay || 0,\n                }).forEach((item: IParallaxData) => {\n                    gsap.fromTo(item.el, { y: -item.parallax * (window.innerWidth / 1280) }, {\n                        y: () => item.parallax * (window.innerWidth / 1280),\n                        ease: 'none',\n                        scrollTrigger: {\n                            trigger: item.el,\n                            scrub: true,\n                        },\n                    });\n                });\n        });\n    }\n\n\n\n    public revertAnimations(): void {\n        Scroll.matchMedia?.revert();\n    }\n\n\n\n    private bindHashClick(): void {\n        document.querySelectorAll('a[href^=\"#\"]:not(a[href=\"#\"])').forEach((el: HTMLAnchorElement) => {\n            el.addEventListener('click', this.onHashClickHandler);\n        });\n    }\n\n\n\n    private onHashClickHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { hash } = (e.currentTarget as HTMLAnchorElement);\n        const target = document.querySelector(hash) as HTMLElement;\n\n        target\n            ? Scroll.scrollTo({ el: target })\n            : console.warn('There is no %s element', hash);\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from './Site';\nimport { API, IApiData } from './widgets/API';\n// import Widgets from 'widgets/All';\nimport { PushStates } from './PushStates';\nimport { Templates, TemplateNames } from './templates/Templates';\nimport * as Utils from './Utils';\n\nexport interface ISearchSettings {\n    liveMinLen?: number;\n    timeout?: number;\n}\n\n\nexport class Search {\n\n    private settings: ISearchSettings;\n    private toggleButtons: NodeListOf<HTMLElement>;\n    private searchBg: HTMLElement;\n    private searchContent: HTMLElement;\n    private btnClose: HTMLElement;\n    private live: HTMLElement;\n    private input: HTMLInputElement;\n    private form: HTMLFormElement;\n    private liveList: HTMLElement;\n    private liveBottom: HTMLElement;\n    private liveLi: NodeListOf<HTMLElement>;\n    private isLiveShown: boolean;\n    private timer;\n    private liveTemplate;\n    private isOpen: boolean;\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement) {\n        this.init();\n    }\n\n\n    private init(): void {\n        this.settings = {\n            liveMinLen: 3,\n            timeout: 250,\n        };\n\n        this.searchBg = this.view.querySelector('.js-search-bg');\n        this.searchContent = this.view.querySelector('.js-search-content');\n        this.btnClose = document.querySelector('.js-search-close');\n        this.input = this.view.querySelector('#search-inp');\n        this.form = this.view.querySelector('.js-form');\n        this.live = this.view.querySelector('.js-livesearch');\n        this.liveTemplate = Templates.get(TemplateNames.LIVESEARCH);\n\n        this.input.addEventListener('keyup', this.onType);\n\n        this.bind();\n    }\n\n\n\n    private bind(): void {\n        this.form.addEventListener('reset', this.onFormReset);\n        this.form.addEventListener('submit', this.onFormSubmit);\n    }\n\n\n\n    private onFormReset = (): void => {\n        this.animationHide();\n        this.view.classList.remove('has-value');\n    };\n\n\n\n    private onFormSubmit = (e): void => {\n        e.preventDefault();\n        const pathname = this.form.getAttribute('action') || window.location.pathname;\n        const params = Utils.getQueryString(this.form);\n\n        PushStates.goTo(`${pathname}?${params}`);\n    };\n\n\n\n    private onType = (e): void => {\n        e.preventDefault();\n\n        const { value } = this.input;\n\n        this.view.classList.toggle('has-value', value.length > 0);\n\n        if (value.length < this.settings.liveMinLen) {\n            this.animationHide();\n            return;\n        }\n\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n\n            const formData: IApiData = { url: this.form.getAttribute('data-api-url') };\n\n            API.callIt(formData, this.form, (data, el, response) => {\n                this.liveResponse(data, el, response);\n            });\n\n\n        }, this.settings.timeout);\n    };\n\n\n\n    private liveResponse(data, el, response): void {\n        if (response.results) {\n            this.live.innerHTML = this.liveTemplate.render(response);\n            // this.trigger(ComponentEvents.CHANGE, this.live);\n            this.showLiveResults();\n            PushStates.bind(this.live);\n            // Widgets.bind(this.live);\n        } else {\n            this.quickHide();\n        }\n    }\n\n\n\n    private showLiveResults(): void {\n        this.view.classList.add('is-livesearch-shown');\n        this.liveList = this.view.querySelector('.js-livesearch-list');\n        this.liveLi = this.view.querySelectorAll('.js-livesearch-item');\n\n        // set max-height of livesearch wrap - prevent growing outside viewport\n        const height = Math.min(this.liveList.clientHeight, window.innerHeight * 0.75);\n\n        gsap.timeline()\n            .to(this.liveList.parentElement, {\n                duration: !this.isLiveShown ? 0.8 : 0,\n                height,\n                ease: easing,\n            })\n            .fromTo(\n                this.liveLi,\n                { y: window.innerHeight },\n                {\n                    y: 0,\n                    duration: 0.9,\n                    stagger: 0.1,\n                    ease: easing,\n                },\n            );\n\n        this.isLiveShown = true;\n    }\n\n\n\n    private quickHide(): void {\n        if (!this.liveList) return;\n        gsap.to(this.liveList.parentElement, {\n            height: 0,\n            duration: 0.01,\n            delay: 0.8,\n            onComplete: () => {\n                this.input.value = '';\n                this.live.innerHTML = '';\n            },\n        });\n    }\n\n\n\n    private animationHide(): void {\n        if (!this.isLiveShown) return;\n        [...this.liveLi].reverse().forEach((item, index) => {\n            gsap.to(item, {\n                y: window.innerHeight,\n                rotate: index % 2 === 0 ? 15 : -15,\n                duration: 0.8,\n                delay: index * 0.1,\n                ease: easing,\n                onComplete: () => {\n                    item.remove();\n                    // after all tweens\n                    if (index === this.liveLi.length) gsap.set(this.liveList.parentElement, { height: 0 });\n                },\n            });\n        });\n\n\n        this.isLiveShown = false;\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { CustomEase } from 'gsap/dist/CustomEase';\nimport Scroll from './Scroll';\nimport { pages as Pages } from './Classes';\nimport { stats, debounce, setAppHeight } from './Utils';\nimport { IBrowser, getBrowser } from './Browser';\nimport { IBreakpoint, getBreakpoint } from './Breakpoint';\nimport { PushStates, PushStatesEvents } from './PushStates';\nimport { Page, PageEvents } from './pages/Page';\nimport { Menu } from './Menu';\nimport { Search } from './Search';\nimport { AudioPlayer } from './components/AudioPlayer';\nimport { Lightbox } from './components/Lightbox/Lightbox';\n\nimport Widgets from './widgets/All';\n\nexport const local = !!window.location.hostname.match(/(localhost|\\.lh|192\\.168\\.)/g);\nexport const debug = window.location.search.indexOf('debug') >= 0;\n\nexport let lang: string;\nexport let pixelRatio: number;\nexport let easing: string;\nexport let browser: IBrowser;\nexport let breakpoint: IBreakpoint;\n\ngsap.registerPlugin(CustomEase);\n\n\nclass Site {\n\n    private currentPage: Page;\n    private pushStates: PushStates;\n    private scroll: Scroll;\n    private menu: Menu;\n    private lightbox: Lightbox;\n    private search: Search;\n    private audioPlayer: AudioPlayer;\n\n    private isInitialized: boolean = false;\n    private resizingTimeout: ReturnType<typeof setTimeout>;\n\n\n\n    public init(): void {\n\n        console.group();\n\n        breakpoint = getBreakpoint();\n        browser = getBrowser();\n        easing = CustomEase.create('custom', '0.5, 0, 0.1, 1');\n        lang = document.documentElement.getAttribute('lang');\n        pixelRatio = Math.min(2, window.devicePixelRatio || 1);\n\n        this.bind();\n        setAppHeight();\n        debug && stats();\n\n        this.pushStates = new PushStates();\n        this.pushStates.on(PushStatesEvents.CHANGE, this.onState);\n\n        this.scroll = new Scroll();\n\n        this.lightbox = new Lightbox();\n        this.menu = new Menu(document.querySelector('.js-menu'));\n        this.search = new Search(document.getElementById('search'));\n\n        this.audioPlayer = new AudioPlayer(document.querySelector('.js-audioplayer'));\n\n        if (browser.ie) {\n            console.warn('This browser is outdated!');\n            return;\n        }\n\n        PushStates.setTitle();\n\n        Promise.all<void>([\n            this.setCurrentPage(),\n            // preload other components if needed\n        ]).then(this.onPageLoaded);\n    }\n\n\n    /**\n     * add some general event listeners\n     */\n    private bind(): void {\n\n        window.addEventListener('DOMContentLoaded', () => {\n            document.body!.classList.add('is-loaded');\n        });\n\n        // delayed resize to prevent transitions:\n        window.addEventListener('resize', () => {\n            document.body.classList.add('is-resizing');\n            clearTimeout(this.resizingTimeout);\n            this.resizingTimeout = setTimeout(() => {\n                this.onResize();\n                document.body.classList.remove('is-resizing');\n            }, 250);\n        });\n\n        window.addEventListener('orientationchange', debounce(() => this.onResize(true)));\n    }\n\n\n    /**\n     * resize handler\n     */\n    private onResize = (isOrientationChanged?: boolean): void => {\n\n        const oldBreakpoint = breakpoint ? breakpoint.value : null;\n        breakpoint = getBreakpoint();\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const changed = oldBreakpoint !== breakpoint.value;\n\n        !browser.touch && setAppHeight();\n        isOrientationChanged && setAppHeight();\n\n        this.currentPage?.resize(width, height, breakpoint, changed);\n        (!browser.touch || changed) && Scroll?.resize();\n    };\n\n\n    /**\n     * check if any component handle onState event\n     * if not, reload html:\n     */\n    private onState = () => {\n        const isRendered = this.pushStates.isRendered();\n        const pageChangedState = this.currentPage.onState();\n        const lightboxChangedState = this.lightbox.onState(isRendered);\n        this.menu?.onState();\n\n        if (!isRendered && !pageChangedState && !lightboxChangedState) {\n            Promise.all<void>([\n                this.pushStates.load(),\n                this.currentPage.animateOut(),\n            ]).then(this.render);\n        }\n    };\n\n\n    /**\n     * called after new html is loaded\n     * and old content is animated out:\n     */\n    private render = async(): Promise<void> => {\n        if (this.currentPage) {\n            this.currentPage.off();\n            this.currentPage.destroy();\n            this.currentPage = null;\n        }\n\n        console.groupEnd();\n        console.group();\n\n        document.body.classList.add('is-rendering');\n        PushStates.setTitle();\n        this.pushStates.render();\n        await this.setCurrentPage();\n        this.onPageLoaded();\n    };\n\n\n    /**\n     * when current page is loaded:\n     */\n    private onPageLoaded = async(): Promise<void> => {\n        document.body.classList.remove('is-not-ready', 'is-rendering');\n        this.currentPage.animateIn(0);\n        !this.isInitialized && Scroll.scrollToTop(true);\n        Scroll.scrollToCached();\n        this.scroll.load();\n        Scroll.start();\n        PushStates.setTitle();\n        this.isInitialized = true;\n    };\n\n\n\n    /**\n     * run new Page object\n     * (found by `data-page` attribute)\n     * bind it and store as currentPage:\n     */\n    private setCurrentPage(): Promise<void> {\n        const pageList: NodeList = document.querySelectorAll('[data-page]');\n        let pageEl: HTMLElement = pageList[0] as HTMLElement;\n        let pageName: string = pageEl.dataset.page || 'Page';\n        const pageOptions: Object = pageEl.dataset.options;\n\n        // page not found:\n        if (Pages[pageName] === undefined) {\n            if (pageName !== 'undefined') {\n                console.warn('There is no \"%s\" in Pages!', pageName);\n            }\n            pageName = 'Page';\n        }\n\n        // more than one data-page:\n        if (pageList.length > 1) {\n            console.warn('Only one [data-page] element, please!');\n\n        // page not defined in html:\n        } else if (pageList.length === 0) {\n            const articleEl = document.getElementById('content').querySelector('article');\n            const contentEl = document.getElementById('content');\n            pageEl = articleEl || contentEl!.firstChild as HTMLElement;\n        }\n\n        // set custom classes to body based on <article> parameters\n        document.body.classList.toggle('is-404', Boolean(document.body.querySelector('[data-not-found]')));\n\n        // create Page object:\n        const page: Page = new Pages[pageName](pageEl, pageOptions);\n        this.currentPage = page;\n\n        // bind events:\n        page.on(PageEvents.CHANGE, this.onPageAppend);\n\n        // bind widgets:\n        Widgets.bind();\n\n        // update links:\n        this.setActiveLinks();\n\n        this.lightbox?.check();\n\n        return page.preload();\n    }\n\n\n    /**\n     * deal with newly added elements\n     */\n    private onPageAppend = (el: HTMLElement): void => {\n        PushStates.bind(el);\n        this.scroll.load();\n    };\n\n\n    /**\n     * toggle active links with the page change\n     */\n    private setActiveLinks(): void {\n        const anchors = document.querySelectorAll('a[href]');\n        const pathname = window.location.pathname.replace(/\\/+$/, '');\n\n        [...anchors].forEach(anchor => {\n            anchor.classList.remove('is-active');\n        });\n\n        document.querySelectorAll(`a[href=\"${pathname}/\"], a[href=\"${pathname}\"]`).forEach(link => link?.classList.add('is-active'));\n    }\n}\n\n\n\nwindow.addEventListener('load', () => {\n    const site = new Site();\n    site.init();\n});\n","/* eslint-disable no-param-reassign */\n/* eslint-disable max-len */\n\n\nexport function generateUID(): string {\n    return `${(new Date()).getTime()}${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`;\n}\n\n\n\nexport const debounce = (callback: Function, timeout: number = 300) => {\n    let timeoutId = null;\n\n    return (...args) => {\n        window.clearTimeout(timeoutId);\n        timeoutId = window.setTimeout(() => {\n            // eslint-disable-next-line\n            callback.apply(null, args);\n        }, timeout);\n    };\n};\n\n\nexport function setAppHeight(): void {\n    document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);\n}\n\n\n// eslint-disable-next-line no-undef\nexport function stats(): Stats {\n    // eslint-disable-next-line no-undef\n    const stats = new Stats(); // eslint-disable-line no-shadow\n\n    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    stats.dom.style.pointerEvents = 'none';\n    document.body.appendChild(stats.dom);\n\n    function animate(): void {\n        stats.begin();\n        // monitored code goes here\n        stats.end();\n        requestAnimationFrame(animate);\n    }\n\n    requestAnimationFrame(animate);\n\n    return stats;\n}\n\n\n/**\n * Cover canvas with image\n * By Ken Fyrstenberg Nilsen\n * If image and context are only arguments rectangle will equal canvas\n * @param {CanvasRenderingContext2D} ctx\n * @param {HTMLImageElement}         img\n * @param {number}                   x\n * @param {number}                   y\n * @param {number}                   w\n * @param {number}                   h\n * @param {number}                   offsetX 0..1\n * @param {number}                   offsetY 0..1\n */\nexport function drawImageProp(ctx: CanvasRenderingContext2D, img: HTMLImageElement, iw: number, ih: number, x?: number, y?: number, w?: number, h?: number, offsetX?: number, offsetY?: number): void {\n    if (arguments.length === 4) {\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0;\n        w = ctx.canvas.width;\n        h = ctx.canvas.height;\n    }\n\n    // default offset is center\n    offsetX = typeof offsetX === 'number' ? offsetX : 0.5;\n    offsetY = typeof offsetY === 'number' ? offsetY : 0.5;\n\n    // keep bounds [0.0, 1.0]\n    if (offsetX < 0) { offsetX = 0; }\n    if (offsetY < 0) { offsetY = 0; }\n    if (offsetX > 1) { offsetX = 1; }\n    if (offsetY > 1) { offsetY = 1; }\n\n\n    const r = Math.min(w / iw, h / ih);\n    let nw = iw * r; // new prop. width\n    let nh = ih * r; // new prop. height\n    let cx; let cy; let cw; let ch; let\n        ar = 1;\n\n    // decide which gap to fill\n    if (nw < w) { ar = w / nw; }\n    if (Math.abs(ar - 1) < 1e-14 && nh < h) { ar = h / nh; } // updated\n    nw *= ar;\n    nh *= ar;\n\n    // calc source rectangle\n    cw = iw / (nw / w);\n    ch = ih / (nh / h);\n\n    cx = (iw - cw) * offsetX;\n    cy = (ih - ch) * offsetY;\n\n    // make sure source rectangle is valid\n    if (cx < 0) { cx = 0; }\n    if (cy < 0) { cy = 0; }\n    if (cw > iw) { cw = iw; }\n    if (ch > ih) { ch = ih; }\n\n    // fill image in dest. rectangle\n    ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n}\n\n\nexport const clearThree = (obj: any): void => {\n    if (!obj) { return; }\n    if (!obj.children) { return; }\n    while (obj.children.length > 0) {\n        clearThree(obj.children[0]);\n        obj.remove(obj.children[0]);\n    }\n\n    if (obj.geometry) { obj.geometry.dispose(); }\n\n    if (obj.material) {\n        Object.keys(obj.material).forEach(prop => {\n            if (!obj.material[prop]) {\n                return;\n            }\n            if (obj.material[prop] !== null && typeof obj.material[prop].dispose === 'function') {\n                obj.material[prop].dispose();\n            }\n        });\n        obj.material.dispose();\n    }\n};\n\nexport function lon2tile(lon: number, zoom: number): number {\n    return Math.floor(((lon + 180) / 360) * 2 ** zoom);\n}\n\n\nexport function lat2tile(lat: number, zoom: number): number {\n    return Math.floor(\n        ((1\n            - Math.log(\n                Math.tan((lat * Math.PI) / 180)\n                    + 1 / Math.cos((lat * Math.PI) / 180),\n            )\n                / Math.PI)\n            / 2)\n            * 2 ** zoom,\n    );\n}\n\n\nexport function getImgFromMapbox(zoom: number, lon: number, lat: number, style: string, token: string): string {\n    const z = Math.floor(zoom - 0.5);\n\n    const x = lon2tile(lon, z);\n    const y = lat2tile(lat, z);\n\n\n    const img = `<img src=\"https://api.mapbox.com/styles/v1/${style}/tiles/256/${z}/${x}/${y}?access_token=${token}\" loading=\"lazy\" alt=\"\">`;\n\n    return img;\n}\n\nexport function nFormatter(num: number, digits: number) {\n    const lookup = [\n        { value: 1, symbol: '' },\n        { value: 1e3, symbol: 'k' },\n        { value: 1e6, symbol: 'MI' },\n        { value: 1e9, symbol: 'G' },\n        { value: 1e12, symbol: 'T' },\n        { value: 1e15, symbol: 'P' },\n        { value: 1e18, symbol: 'E' },\n    ];\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    const item = lookup.slice().reverse().find(itemInner => num >= itemInner.value);\n    return item ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol : '0';\n}\n\n\nexport const keys = {\n    enter: 13,\n    esc: 27,\n    space: 32,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    pageUp: 33,\n    pageDown: 34,\n    end: 35,\n    home: 36,\n    minus: 109,\n    plus: 107,\n};\n\n/* eslint-disable */\nexport function getScript(source: string, callback: () => void) {\n    let script = document.createElement('script') as any;\n    const prior = document.getElementsByTagName('script')[0];\n    script.async = 1;\n    script.onload = script.onreadystatechange = function (_, isAbort) {\n        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n            script.onload = script.onreadystatechange = null;\n            script = undefined;\n\n            if (!isAbort && callback) setTimeout(callback, 0);\n        }\n    };\n\n    script.src = source;\n    prior.parentNode.insertBefore(script, prior);\n}\n/* eslint-enable */\n\n/*!\n * Serialize all form data into an object of key/value pairs\n * (c) 2020 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {Node}   form The form to serialize\n * @return {Object}      The serialized form data\n */\nexport const serializeObject = (form: HTMLFormElement) => {\n    const obj = {};\n    Array.prototype.slice.call(form.elements).forEach(field => {\n        if (!field.name || field.disabled || ['file', 'reset', 'submit', 'button'].indexOf(field.type) > -1) return;\n        if (field.type === 'select-multiple') {\n            const options = [];\n            Array.prototype.slice.call(field.options).forEach(option => {\n                if (!option.selected) return;\n                options.push(option.value);\n            });\n            if (options.length) {\n                obj[field.name] = options;\n            }\n            return;\n        }\n        if (['checkbox', 'radio'].indexOf(field.type) > -1 && !field.checked) return;\n        obj[field.name] = field.value;\n    });\n    return obj;\n};\n\n\nexport const zeroPad = (num: number, places: number): string => {\n    const zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\n\nexport const wait = (time: number): Promise<void> => new Promise(resolve => {\n    setTimeout(() => resolve(), time);\n});\n\n\nexport function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n\n\nexport function normalizeUrl(url: string): string {\n    return `/${url.replace(/#.*$/, '').replace(/^\\/|\\/$/g, '').replace(/\\?.*$/, '')}`;\n}\n\n\nexport const getQueryString = (forms: HTMLFormElement | HTMLFormElement[]): string => {\n\n    const formData = new FormData();\n\n    (Array.isArray(forms) ? forms : [forms])\n        .filter((e, i, a) => a.indexOf(e) === i) // remove duplicates\n        .forEach(form => {\n            new URLSearchParams(new FormData(form) as any)\n                .forEach((value, key) => formData.append(key, value));\n        });\n\n\n    const formParams = new URLSearchParams(formData as any);\n\n    // filter empty values from form\n    const keysForDel = [];\n    formParams.forEach((value, key) => {\n        if (!value) keysForDel.push(key);\n    });\n\n    // remove empty fields from query\n    keysForDel.forEach(key => formParams.delete(key));\n\n    // set new URLSearchParams Object for final converted data\n    const finalFormData: URLSearchParams = new URLSearchParams();\n\n    // when query has same name parameters with different values (eg multi checkboxes), merge values into one key (for URL prettify & backend purposes)\n    formParams.forEach((value, key) => {\n        if (finalFormData.has(key)) {\n            finalFormData.set(key, `${finalFormData.get(key)},${value}`);\n        } else finalFormData.set(key, value);\n    });\n\n\n    return decodeURIComponent(finalFormData.toString());\n};\n\n\n\nexport function removeTags(str) {\n    if ((str === null) || (str === '')) return false;\n    // eslint-disable-next-line no-param-reassign\n    str = str.toString();\n\n    // Regular expression to identify HTML tags in\n    // the input string. Replacing the identified\n    // HTML tag with a null string.\n    return str.replace(/(<([^>]+)>)/ig, '');\n}\n\n\n\nexport function setStorageItem(key: string, value: string): void {\n    try {\n        localStorage.setItem(key, value);\n    } catch (error) {\n        console.warn(error);\n    }\n}\n\n\nexport function getStorageItem(key: string): string {\n    return localStorage.getItem(key);\n}\n","// [data-animation]\nimport { fadeUp } from './fadeUp';\n\n// [data-scroll]\nimport { hero } from './scroll/hero';\nimport { interviews } from './scroll/interviews';\n\nexport const animations = { fadeUp };\n\nexport const scrolls = { hero, interviews };\n","import { gsap } from 'gsap/dist/gsap';\nimport { AnimationType } from '../Animate';\nimport { easing } from '../Site';\n\nexport const fadeUp: AnimationType = (el, delay = 0) => {\n    gsap.killTweensOf(el, { opacity: true, y: true });\n    return gsap.fromTo(el, { opacity: 0, y: 60 }, { duration: 1.4, opacity: 1, y: 0, ease: easing, delay });\n};\n","import gsap from 'gsap';\n\nexport const hero = el => {\n    gsap.to(el.children, {\n        y: () => el.clientHeight / -2,\n        ease: 'none',\n        scrollTrigger: {\n            trigger: el,\n            scrub: true,\n            start: 'top top',\n            end: 'bottom top',\n        },\n    });\n};\n","import { gsap } from 'gsap/dist/gsap';\n\nexport const interviews = el => {\n\n    const controls = el.querySelector('.interviews-grid__controls');\n    const moreInterviews = el.querySelector('.interviews__more');\n    let moreInterviewsHeight = 0;\n    if (moreInterviews) moreInterviewsHeight = moreInterviews.offsetHeight;\n\n    controls && gsap.to(controls, {\n\n        ease: 'none',\n        scrollTrigger: {\n            trigger: el,\n            pin: controls,\n            pinSpacing: false,\n            start: 'top top',\n            end: () => `bottom ${controls.offsetHeight + moreInterviewsHeight}px`,\n            onToggle: self => el.classList.toggle('is-pinned', self.isActive),\n            invalidateOnRefresh: true,\n        },\n    });\n\n};\n","import { Component } from './Component';\n\n\nexport class Accordeon extends Component {\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n        this.bind();\n        this.setHeight();\n    }\n\n    private bind(): void {\n        const button = this.view.querySelector('.js-accordeon-button');\n        button && button.addEventListener('click', this.onToggleClick);\n    }\n\n    private onToggleClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.view.classList.toggle('is-closed');\n    };\n\n    private setHeight(): void {\n        const copy: HTMLDivElement = this.view.querySelector('.js-accordeon-copy');\n\n        if (copy) {\n            copy.removeAttribute('style');\n            copy.style.height = `${copy.scrollHeight}px`;\n        }\n    }\n}\n","import { Component } from './Component';\n\n\nexport class AccordeonList extends Component {\n    private allItems: HTMLLIElement[];\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n        this.bind();\n        this.setupListeners();\n    }\n\n    private bind(): void {\n        this.allItems = [...this.view.querySelectorAll('.js-accordeon-item')].map(el => {\n            this.setHeight(el);\n            const element = <HTMLLIElement>el;\n            return element;\n        });\n    }\n\n    private setupListeners(): void {\n        const { closeOthers } = this.view.dataset;\n\n        this.allItems.forEach(item => {\n            const button = item.querySelector('.js-accordeon-button');\n            button && button.addEventListener('click', e => this.onToggleClick(e, item));\n\n            closeOthers && this.setupMutationObserver(item);\n        });\n    }\n\n    private setupMutationObserver(item): void {\n        const link = item.querySelector('a.button');\n\n        if (link) {\n            this.onLinkToggle(item.classList.contains('is-closed'), link);\n            const observer = new MutationObserver(() => this.onLinkToggle(item.classList.contains('is-closed'), link));\n            observer.observe(item, { attributes: true });\n        }\n    }\n\n    private onToggleClick = (e, item) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (item.classList.contains('is-closed')) {\n            this.allItems.forEach(itemToclose => {\n                this.close(itemToclose);\n            });\n\n            this.open(item);\n        } else {\n            this.close(item);\n        }\n    };\n\n    private onLinkToggle = (isClosed, element) => {\n        element.tabIndex = isClosed ? -1 : 0;\n    };\n\n    private close(item): void {\n        item.classList.add('is-closed');\n    }\n\n    private open(item): void {\n        item.classList.remove('is-closed');\n    }\n\n    private setHeight(item): void {\n        const copy: HTMLDivElement = item.querySelector('.js-accordeon-copy');\n\n        if (copy) {\n            copy.removeAttribute('style');\n            copy.style.height = `${copy.scrollHeight}px`;\n        }\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from '../Site';\nimport { Video } from './Player/Video';\n\n\nexport class AudioPlayerStatesText {\n    public static RANDOM = 'Play random interview';\n    public static PLAYING = 'Playing interview';\n    public static PAUSED = 'Play interview';\n}\n\nexport class AudioPlayer extends Video {\n\n    // eslint-disable-next-line no-use-before-define\n    public static instance: AudioPlayer;\n\n    public static closeAudioPlayer(): void {\n        AudioPlayer.instance.minimize();\n    }\n\n\n    private audioTitle: HTMLElement;\n    private isExpanded = false;\n    private cassetteTitle: HTMLElement;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        AudioPlayer.instance = this;\n\n        this.ui.thumbnail = this.view.querySelector('.player__thumbnail');\n        this.ui.minimize = this.view.querySelector('.player__minimize');\n        this.audioTitle = this.view.querySelector('.player__title');\n        this.cassetteTitle = this.view.querySelector('.player__marquee');\n\n        this.bindAudioPlayer();\n    }\n\n\n\n    protected onPlay(): void {\n        super.onPlay();\n        this.setTitleInCassette(AudioPlayerStatesText.PLAYING);\n    }\n\n\n\n    protected onPause(): void {\n        super.onPause();\n        this.setTitleInCassette(AudioPlayerStatesText.PAUSED);\n    }\n\n\n\n    private bindAudioPlayer = (): void => {\n        this.ui.thumbnail && this.ui.thumbnail.addEventListener('click', this.onThumbnailClick);\n        this.ui.minimize && this.ui.minimize.addEventListener('click', this.onMinimizeClick);\n    };\n\n\n\n    private onThumbnailClick = (): void => {\n        this.isExpanded ? this.minimize() : this.expand();\n        this.view.classList.toggle('is-expanded');\n    };\n\n\n\n    private onMinimizeClick = (): void => this.minimize();\n\n\n\n    private minimize = (): void => {\n        gsap.to(this.ui.playerBar, {\n            yPercent: 0,\n            duration: 0.7,\n            ease: easing,\n            onComplete: () => {\n                this.setTitleInCassette(this.audioTitle.innerText);\n                this.isExpanded = false;\n            },\n        });\n    };\n\n\n\n    private expand = (): void => {\n        gsap.to(this.ui.playerBar, {\n            yPercent: -100,\n            duration: 0.7,\n            ease: easing,\n            onStart: () => {\n                this.setTitleInCassette(this.isPaused() ? AudioPlayerStatesText.PAUSED : AudioPlayerStatesText.PLAYING);\n            },\n            onComplete: () => {\n                this.isExpanded = true;\n            },\n        });\n    };\n\n\n\n    private setTitleInCassette = (text: string): void => {\n        [...this.cassetteTitle.querySelectorAll('span')].forEach(span => {\n            span.innerText = text;\n        });\n    };\n}\n","import { Handler } from '../Handler';\nimport { generateUID } from '../Utils';\n\nexport class ComponentEvents {\n    public static readonly CHANGE: string = 'change';\n}\n\n\nexport abstract class Component extends Handler {\n    public uuid: string;\n\n    constructor(protected view: HTMLElement) {\n        super();\n        this.uuid = generateUID();\n        if (!view) { console.warn('component built without view'); }\n    }\n\n    public onState(): boolean {\n        return false;\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public animateIn(index?: number, delay?: number): void { }\n\n    public animateOut(): Promise<void> {\n        // if you don't want to animate component,\n        // just return empty Promise:\n        return Promise.resolve(null);\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public resize = (wdt: number, hgt: number): void => { };\n\n    public destroy(): void {\n        super.destroy();\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Templates } from '../../templates/Templates';\nimport { PushStates } from '../../PushStates';\nimport { LightboxData } from './Lightbox.types';\nimport { easing } from '../../Site';\nimport { Component } from '../../components/Component';\nimport { components } from '../../Classes';\n\n\n\nexport class Lightbox {\n    private components: Array<Component>;\n    private view: HTMLElement;\n    private shown = false;\n    private currentPath: string;\n\n    private animating: boolean;\n    private controller: AbortController;\n\n    constructor() {\n        this.view = document.getElementById('lightbox');\n\n        this.hide(true);\n\n\n        this.bind();\n    }\n\n\n\n    public async load(payload?: Object): Promise<LightboxData> {\n        this.view.classList.add('is-fetching');\n        this.controller = new AbortController();\n\n        const isWorkspace = window.location.pathname.indexOf('/workspace/') >= 0;\n        // const url = isWorkspace ? this.settings.api[type] : window.location.href + window.location.search;\n        const url = isWorkspace\n            ? `${window.location.origin}/workspace/json/lightbox/${window.location.pathname.split('/')[3]}.json`\n            : window.location.href + window.location.search;\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                signal: this.controller?.signal,\n                body: new URLSearchParams(payload as any),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Elder-Api': 'true',\n                },\n            });\n\n            const data = await response.json();\n            this.view.classList.remove('is-fetching');\n            this.controller = null;\n\n            return data;\n\n        } catch (error) {\n            this.view.classList.remove('is-fetching');\n            throw new Error(error);\n        }\n    }\n\n\n\n    public check(): void {\n        this.toggleByPathname();\n    }\n\n\n\n    public onState(isRendered?: boolean): boolean {\n        return this.toggleByPathname(isRendered);\n    }\n\n\n\n    public destroy(): void {\n        this.view.innerHTML = '';\n        this.components?.forEach(c => c.destroy());\n        this.components = null;\n    }\n\n\n\n    public build = (data: LightboxData): void => {\n        const template = Templates.get('lightbox');\n\n        const html = template.render(data);\n        this.view.innerHTML = html;\n\n        PushStates.bind(this.view);\n\n        this.buildComponents(this.view.querySelectorAll('[data-component]'));\n    };\n\n\n\n    private bind = (): void => {\n        document.addEventListener('keydown', this.onKeyDown);\n    };\n\n\n\n    private onKeyDown = (e): void => {\n        // ONLY for testing\n        if (e.key === 'r') this.shown ? this.hide() : this.show();\n    };\n\n\n\n    private buildComponents(componentsList: NodeList): void {\n        this.components = [];\n\n        this.components = [...componentsList].map(el => {\n            const element = <HTMLElement>el;\n            const name = element.dataset.component;\n            if (name !== undefined && components[name]) {\n                let options: Object = {};\n                if (element.dataset.options) {\n                    options = JSON.parse(element.dataset.options);\n                }\n                const component = new components[name](element, options);\n                return component;\n            }\n            window.console.warn('There is no `%s` component!', name);\n            return null;\n        }).filter(Boolean);\n    }\n\n\n\n    private toggleByPathname(isRendered?: boolean): boolean {\n        const patternFound = this.matchPathnamePattern();\n\n        if (patternFound) {\n            // show the interview lightbox:\n            if (!this.shown) { this.show(); }\n\n\n            Promise.all([\n                this.animateOut(),\n                this.load(),\n            ]).then(results => {\n                const data = results.filter(Boolean).reduce((p, c) => ({ ...p, ...c })) as LightboxData;\n\n                data?.title && PushStates.setTitle(data.title);\n                this.currentPath = window.location.pathname;\n\n                this.build(data);\n\n                this.animateIn();\n            }).catch(() => {\n                // this.hide();\n            });\n            return true;\n        }\n\n\n        // just hide:\n        if (this.shown) {\n            const animate = isRendered;\n            !!animate && this.animateOut();\n            this.hide(!animate);\n        }\n\n        return false;\n    }\n\n\n\n    private hide(fast?: boolean): Promise<void> {\n        this.controller?.abort();\n        return new Promise<void>((resolve, reject) => {\n            if (this.animating) {\n                reject();\n                return;\n            }\n\n            this.animating = true;\n            this.view.classList.add('is-closing');\n            gsap.to(this.view, {\n                duration: fast ? 0 : 0.01,\n                opacity: 0,\n\n                // CONNECTED WITH CSS - .is-closing\n                delay: fast ? 0 : 1,\n                ease: 'none',\n                onStart: () => {\n                    this.view.classList.remove('is-showing');\n                },\n                onComplete: (): void => {\n                    this.view.style.display = 'none';\n                    this.shown = false;\n                    this.animating = false;\n                    resolve();\n                },\n            });\n        });\n    }\n\n\n    private show(): void {\n\n        if (this.shown) { return; }\n\n        this.shown = true;\n\n        gsap.to(this.view, {\n            duration: 0.3,\n            opacity: 1,\n            ease: 'none',\n            onStart: () => {\n                this.view.classList.remove('is-closing');\n                this.view.style.display = 'block';\n            },\n            // that class runs CSS animation\n            onComplete: () => this.view.classList.add('is-showing'),\n        });\n    }\n\n\n\n    private matchPathnamePattern(): boolean {\n        return /^\\/(workspace\\/lightbox|interviews)\\/[a-z0-9-]/gmi\n            .test(window.location.pathname + window.location.search);\n    }\n\n\n\n    private animateIn(fast?: boolean): Promise<void> {\n        return new Promise<void>(resolve => {\n            gsap.timeline({\n                onComplete: () => {\n                    this.view.classList.add('is-visible');\n                    resolve();\n                },\n                defaults: { ease: easing, duration: !fast ? 1 : 0 },\n            });\n\n            navigator.vibrate([1, 400, 1]);\n        });\n    }\n\n\n\n    private animateOut(fast?: boolean): Promise<void> {\n\n        if (!this.view.classList.contains('is-visible')) {\n            return Promise.resolve();\n        }\n\n        return new Promise<void>(resolve => {\n            gsap.timeline({\n                onComplete: () => {\n                    this.view.classList.remove('is-visible');\n                    resolve();\n                },\n                defaults: { ease: 'expo.inOut' },\n            });\n        });\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from '../../Site';\nimport { Component } from '../../components/Component';\n\n\nexport class LightboxNav extends Component {\n\n    private navButtons: NodeListOf<HTMLButtonElement>;\n    private navTabs: NodeListOf<HTMLElement>;\n    private activeTab: HTMLElement;\n    private lightboxEl: HTMLElement;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.lightboxEl = document.getElementById('lightbox');\n        this.navButtons = this.view.querySelectorAll('button');\n        this.navTabs = document.querySelectorAll('.js-lightbox-tab');\n\n        this.bind();\n    }\n\n\n\n    private bind = (): void => {\n        [...this.navButtons].forEach(btn => btn.addEventListener('click', this.onBtnClick));\n    };\n\n\n\n    private onBtnClick = (e): void => {\n        const { currentTarget: button } = e;\n\n        const tabSlug: string = button.getAttribute('aria-controls');\n        const tabToOpen: HTMLElement = [...this.navTabs].find(tab => tab.id === tabSlug);\n\n        this.showTab(tabToOpen);\n\n        [...this.navButtons].forEach(btn => {\n            btn.classList.remove('is-active');\n            btn.setAttribute('aria-selected', 'false');\n        });\n        button.classList.add('is-active');\n        button.setAttribute('aria-selected', 'true');\n    };\n\n\n\n    private showTab = (tab: HTMLElement): void => {\n        this.closeTab(this.activeTab).then(() => {\n            if (!tab) {\n                // for animate image\n                this.lightboxEl.classList.add('is-default');\n                this.lightboxEl.classList.remove('is-not-default');\n                this.activeTab = null;\n                return;\n            }\n            gsap.fromTo(tab, { yPercent: 100 }, {\n                yPercent: 0,\n                duration: 0.6,\n                ease: easing,\n                clearProps: 'all',\n                onStart: () => tab.classList.add('is-visible'),\n                onComplete: () => {\n                    this.activeTab = tab;\n                },\n            });\n        });\n    };\n\n\n\n    private closeTab = (tab: HTMLElement): Promise<void> => new Promise(resolve => {\n        if (!tab) {\n            // for animate image\n            this.lightboxEl.classList.add('is-not-default');\n            this.lightboxEl.classList.remove('is-default');\n            resolve();\n        } else {\n            gsap.fromTo(tab, { yPercent: 0 }, {\n                yPercent: 100,\n                duration: 0.3,\n                ease: easing,\n                clearProps: 'all',\n                onComplete: () => {\n                    tab.classList.remove('is-visible');\n                    resolve();\n                },\n            });\n        }\n    });\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Component } from '../../components/Component';\nimport { easing } from '../../Site';\n\n\nexport class LightboxSlider extends Component {\n\n    private wrap: HTMLElement;\n    private slides: NodeListOf<HTMLElement>;\n    private arrowPrev: HTMLButtonElement;\n    private arrowNext: HTMLButtonElement;\n    private activeSlide: HTMLElement;\n    private activeSlideIndex: number;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.wrap = this.view.querySelector('.js-slider-wrap');\n        this.slides = this.wrap.querySelectorAll('.js-slide');\n        this.arrowPrev = this.view.querySelector('.js-slider-prev');\n        this.arrowNext = this.view.querySelector('.js-slider-next');\n\n\n        this.init();\n        this.bind();\n    }\n\n\n\n    private init = (): void => {\n        this.goTo(0, true);\n    };\n\n\n\n    private bind = (): void => {\n        this.arrowNext.addEventListener('click', () => this.goTo(this.activeSlideIndex + 1));\n        this.arrowPrev.addEventListener('click', () => this.goTo(this.activeSlideIndex - 1));\n    };\n\n\n\n    private goTo = (index: number, fast?: boolean): void => {\n        const direction: number = index > this.activeSlideIndex ? 1 : -1;\n\n        this.hideSlide(this.activeSlide, direction, fast);\n        this.showSlide(this.slides[index], direction, fast);\n    };\n\n\n\n    private hideSlide = (slide: HTMLElement, direction: number, fast?: boolean): void => {\n        if (!slide) return;\n\n        gsap.fromTo(slide, { xPercent: 0 }, {\n            xPercent: direction * -100,\n            duration: fast ? 0 : 0.25,\n            ease: easing,\n            onComplete: () => {\n                slide.style.display = 'none';\n            },\n        });\n    };\n\n\n\n    private showSlide = (slide: HTMLElement, direction: number, fast?: boolean): void => {\n\n        gsap.fromTo(slide, { xPercent: direction * 100 }, {\n            xPercent: 0,\n            duration: fast ? 0.01 : 0.4,\n            ease: easing,\n            onStart: () => {\n                slide.style.display = 'block';\n            },\n            onComplete: () => {\n                this.activeSlide = slide;\n                this.activeSlideIndex = [...this.slides].findIndex(el => el === slide);\n                this.updateArrows();\n            },\n        });\n    };\n\n\n\n    private updateArrows(): void {\n        (this.arrowPrev.querySelector('.js-text') as HTMLElement).innerText = `0${this.activeSlideIndex}`;\n        (this.arrowNext.querySelector('.js-text') as HTMLElement).innerText = `0${this.activeSlideIndex + 2}`;\n\n        switch (this.activeSlideIndex) {\n            case 0:\n                this.view.classList.add('is-first');\n                this.view.classList.remove('is-last');\n                break;\n            case this.slides.length - 1:\n                this.view.classList.remove('is-first');\n                this.view.classList.add('is-last');\n                break;\n            default:\n                this.view.classList.remove('is-first', 'is-last');\n        }\n    }\n}\n","import gsap from 'gsap';\nimport { Component } from '../../components/Component';\nimport * as Utils from '../../Utils';\n\ndeclare let ScrollToPlugin;\ngsap.registerPlugin(ScrollToPlugin);\n\nexport class LightboxTranscript extends Component {\n\n    private searchForm: HTMLFormElement;\n    private searchInput: HTMLInputElement;\n    private inputWrap: HTMLElement;\n    private fakeSpan: HTMLSpanElement;\n    private langButton: HTMLButtonElement;\n    private langWrappers: NodeListOf<HTMLElement>;\n    private isMainLang = true;\n    private activeLanguageWrap: HTMLElement;\n    private foundElements: NodeListOf<HTMLElement>;\n    private transcriptNavigation: HTMLElement;\n    private currentMarkIndex: number;\n    private transcriptNavNextButton: HTMLButtonElement;\n    private transcriptNavPrevButton: HTMLButtonElement;\n    private transcriptNavCloseButton: HTMLButtonElement;\n    private transcriptScrollContainer: HTMLElement;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.searchForm = this.view.querySelector('.js-transcript-search');\n        this.inputWrap = this.view.querySelector('.js-transcript-input-wrap');\n        this.searchInput = this.searchForm.querySelector('input');\n        this.fakeSpan = this.view.querySelector('.js-transcript-span');\n        this.langButton = this.view.querySelector('.js-transcript-switch');\n        this.langWrappers = this.view.querySelectorAll('.js-transcript-lang');\n        this.activeLanguageWrap = this.view.querySelector('.js-transcript-lang.is-active');\n        this.transcriptNavigation = this.view.querySelector('.js-transcript-nav');\n        this.transcriptNavNextButton = this.view.querySelector('.js-transcript-next');\n        this.transcriptNavPrevButton = this.view.querySelector('.js-transcript-prev');\n        this.transcriptNavCloseButton = this.view.querySelector('.js-transcript-close');\n        this.transcriptScrollContainer = this.view.querySelector('.js-scrolled');\n\n\n        this.bind();\n    }\n\n\n\n    private bind = (): void => {\n        this.searchInput.addEventListener('input', e => this.onKeyUp(e));\n        this.searchForm.addEventListener('submit', e => this.onSubmit(e));\n        this.langButton && this.langButton.addEventListener('click', this.onLangButtonClick);\n        this.transcriptNavNextButton && this.transcriptNavNextButton.addEventListener('click', () => this.goTo(1));\n        this.transcriptNavPrevButton && this.transcriptNavPrevButton.addEventListener('click', () => this.goTo(-1));\n        this.transcriptNavCloseButton && this.transcriptNavCloseButton.addEventListener('click', this.closeNav);\n    };\n\n\n\n    private onKeyUp = (e): void => {\n        // fake span is created to measure its' width & update input's width dynamically\n        const inputValue: string = this.searchInput.value;\n        this.updateInput(inputValue);\n    };\n\n\n\n    private updateInput = (value: string): void => {\n        this.fakeSpan.innerText = value;\n        const spanWidth = this.fakeSpan.scrollWidth;\n        this.inputWrap.style.width = `${spanWidth}px`;\n    };\n\n\n\n    private goTo = (dir: number): void => {\n        this.currentMarkIndex += dir;\n\n        if (this.currentMarkIndex > this.foundElements.length) this.currentMarkIndex = 1;\n        if (this.currentMarkIndex < 1) this.currentMarkIndex = this.foundElements.length;\n        this.updateTranscriptNav();\n    };\n\n\n\n    private closeNav = (): void => {\n        this.transcriptNavigation.classList.remove('is-active');\n        this.searchInput.value = '';\n        this.updateInput('');\n        this.clearMarkedElements();\n    };\n\n\n\n    private onSubmit = (e): void => {\n        e.preventDefault();\n        this.findWordInTranscript();\n    };\n\n\n\n    private findWordInTranscript = (): void => {\n        // get search value\n        const inputValue: string = this.searchInput.value;\n\n        // find all search value's results in transcript text, and wrap each in <mark> tag to highlight\n        const searchElements: NodeListOf<HTMLElement> = this.activeLanguageWrap.querySelectorAll('.transcript__text');\n        [...searchElements].forEach(elem => {\n            elem.innerHTML = elem.innerHTML.replace(new RegExp(`${inputValue}(?!([^<]+)?<)`, 'gi'), '<mark>$&</mark>');\n        });\n\n        // store all found words\n        this.foundElements = this.activeLanguageWrap.querySelectorAll('mark');\n\n        // if found any words, declare words' counter and show nav\n        if (this.foundElements.length) {\n            this.transcriptNavigation.classList.add('is-active');\n            this.currentMarkIndex = 1;\n            this.updateTranscriptNav();\n        }\n    };\n\n\n\n    private updateTranscriptNav = (): void => {\n        // update nav numbers\n        this.transcriptNavigation.querySelector('.js-transcript-counters').innerHTML = `${this.currentMarkIndex}/${this.foundElements.length}`;\n\n        // find current selected item and scroll to it\n        const selectedMark = this.foundElements[this.currentMarkIndex - 1];\n        gsap.to(this.transcriptScrollContainer, {\n            scrollTo: {\n                y: selectedMark,\n                offsetY: this.searchForm.clientHeight,\n            },\n            duration: 0.01,\n            ease: 'power3.inOut',\n        });\n    };\n\n\n\n    private onLangButtonClick = (e): void => {\n        // get attributes from button to switch languages\n        const button = e.currentTarget;\n        const oldSlug = button.getAttribute(`data-${!this.isMainLang ? 'alternate' : 'main'}-lang`);\n        const newSlug = button.getAttribute(`data-${this.isMainLang ? 'alternate' : 'main'}-lang`);\n\n        // set old language as buttons'text\n        button.innerText = oldSlug;\n\n        this.isMainLang = !this.isMainLang;\n\n        // hide old lang wrapper and show the new one\n        this.activeLanguageWrap.classList.remove('is-active');\n\n        const newActiveWrap = [...this.langWrappers].find(wrap => wrap.getAttribute('data-lang') === newSlug);\n        newActiveWrap.classList.add('is-active');\n        this.activeLanguageWrap = newActiveWrap;\n    };\n\n\n\n    private clearMarkedElements = (): void => {\n        if (!this.foundElements.length) return;\n        [...this.foundElements].forEach(elem => {\n            elem.replaceWith(Utils.removeTags(elem.innerHTML));\n        });\n        this.foundElements = null;\n    };\n}\n","import gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport Scroll from '../Scroll';\nimport * as Utils from '../Utils';\nimport { Component, ComponentEvents } from './Component';\nimport { PushStates } from '../PushStates';\n\ninterface ILoadSettings {\n    contentSelector?: string;\n    live?: boolean; // live reload on form change events\n    extra?: string; // additional form to parse\n    total?: string; // updating total value on filters' change\n    filtered?: string; // show filtered items' list\n    scrollTo?: string; // scroll to given element when reloading filters\n}\n\n\n/* This can be used on form or any other element\n * to load html data to specified container */\n\nexport class Load extends Component {\n\n    private isPending = false;\n    private isFinished = false;\n    private settings: ILoadSettings;\n    private isContentHidden: boolean;\n    private contentElement: HTMLElement;\n    private totalElement: HTMLElement;\n    private liveTimeout;\n    private viewsButtons: NodeListOf<HTMLButtonElement>;\n    private filteredEl: HTMLElement;\n    private resetButton: HTMLButtonElement;\n\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.settings = {\n            contentSelector: '.js-load-content',\n            live: false,\n        };\n\n        this.settings = Object.assign(this.settings, JSON.parse(this.view.getAttribute('data-options')));\n\n        this.isContentHidden = false;\n        this.contentElement = document.querySelector(this.settings.contentSelector);\n        this.viewsButtons = this.view.querySelectorAll('[data-view]');\n        this.resetButton = this.view.querySelector('.js-reset');\n\n        if (this.settings.total) this.totalElement = this.view.querySelector(this.settings.total);\n        if (this.settings.filtered) this.filteredEl = document.querySelector(this.settings.filtered);\n\n        this.updateFiltered();\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        super.destroy();\n    }\n\n\n\n    protected bind(): void {\n\n        this.view.addEventListener('submit', this.onSubmit);\n\n        if (this.settings.live) {\n            [...this.view.querySelectorAll('input, select')].forEach(el => {\n                el.addEventListener('change', () => {\n                    window.clearTimeout(this.liveTimeout);\n                    this.liveTimeout = setTimeout(this.onSubmit, 10);\n                });\n            });\n        }\n\n        [...this.viewsButtons].forEach(btn => btn.addEventListener('click', this.onViewBtnClick));\n        this.resetButton && this.resetButton.addEventListener('click', this.onReset);\n    }\n\n\n\n    protected hideContent(): Promise<void> {\n\n        return new Promise<void>(resolve => {\n            if (!this.isContentHidden) {\n                gsap.to(this.contentElement, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: 'sine',\n                    onComplete: (): void => {\n                        this.isContentHidden = true;\n                        resolve();\n                    },\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n\n\n    protected showContent = (): void => {\n        this.isContentHidden = false;\n        gsap.fromTo(this.contentElement, { opacity: 0 }, {\n            opacity: 1,\n            duration: 0.45,\n            ease: 'sine',\n        });\n    };\n\n\n\n    protected onViewBtnClick = (e): void => {\n        const { currentTarget: button } = e;\n        const { view } = button.dataset;\n        this.hideContent().then(() => {\n            this.contentElement.classList.remove('is-list-view', 'is-grid-view');\n            this.contentElement.classList.add(`is-${view}-view`);\n        }).then(this.showContent);\n    };\n\n\n\n    protected load(url): Promise<void> {\n        if (!!this.isPending || !!this.isFinished) { return; }\n\n        window.clearTimeout(this.liveTimeout);\n        this.isPending = true;\n        this.view.classList.add('is-pending');\n        PushStates.changePath(url, true);\n        ScrollTrigger.refresh();\n\n        if (this.settings.filtered) this.updateFiltered();\n        if (this.settings.scrollTo) this.scrollToContainer();\n\n        // eslint-disable-next-line consistent-return\n        return fetch(url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'text/html' },\n        })\n            .then(response => response.text())\n            .then(response => {\n                const selector = this.settings.contentSelector;\n                const newDiv = document.createElement('div');\n                newDiv.innerHTML = response;\n                const elLoadedContent = newDiv.querySelector(selector).innerHTML;\n                this.contentElement.innerHTML = elLoadedContent;\n\n\n                // update total in filters\n                if (this.settings.total) {\n                    const total = newDiv.querySelector(this.settings.total).innerHTML;\n                    this.totalElement.innerHTML = total;\n                }\n\n\n                this.trigger(ComponentEvents.CHANGE, this.contentElement);\n            })\n            .catch(error => {\n                console.warn(`error: ${error}`, error);\n            })\n            .finally(() => {\n                this.view.classList.remove('is-pending');\n                ScrollTrigger.refresh();\n\n                setTimeout(() => {\n                    this.isPending = false;\n                }, 250);\n            });\n    }\n\n\n    private onSubmit = (e?): void => {\n\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        let loadPath = this.view.getAttribute('action') || this.view.dataset.api || window.location.pathname;\n\n        const extraForms = this.settings.extra ? ([...document.querySelectorAll(this.settings.extra)] as HTMLFormElement[]) : null;\n        const formData = Utils.getQueryString([...extraForms, this.view as HTMLFormElement]);\n\n        if (formData) {\n            loadPath += `?${formData}`;\n        }\n\n        Promise.all([this.hideContent(), this.load(loadPath)]).then(() => {\n            this.showContent();\n        });\n    };\n\n\n\n    private updateFiltered = (): void => {\n        // updating on front side because response is always in html\n\n        if (!this.filteredEl) return;\n\n        const selectedInputs: HTMLInputElement[] = [...this.view.querySelectorAll('input')].filter(input => input.checked);\n        const filteredItems = selectedInputs.map(input => `\n            <li class=\"filtered__label\">\n                <label for=\"${input.id}\">${input.dataset.name}<i class=\"icon-close\"></i></label>\n            </li>`);\n        this.filteredEl.innerHTML = filteredItems.join('');\n        this.bindFiltered();\n    };\n\n\n\n    private bindFiltered = (): void => {\n        // when live=true, there's no need to trigger submit manually - form submits on each change\n        if (this.settings.live) return;\n\n        // force form submit on each filtered label click\n        [...this.filteredEl.querySelectorAll('label')].forEach(label => label.addEventListener('click', () => {\n            // submit needs to be triggered manually for closing modal on submit event\n            setTimeout(() => this.view.dispatchEvent(new Event('submit')), 10);\n        }));\n    };\n\n\n\n    private scrollToContainer = (): void => {\n        const elem = document.querySelector(this.settings.scrollTo) as HTMLElement;\n        if (!elem) {\n            console.error(`element ${this.settings.scrollTo} doesn't exist!`);\n            return;\n        }\n\n        Scroll.scrollTo({\n            el: elem,\n            duration: 1,\n        });\n    };\n\n\n\n    private onReset = (e): void => {\n        e.preventDefault();\n        [...this.view.querySelectorAll('input')].forEach(input => {\n            input.checked = false;\n        });\n    };\n}\n","import { Component } from './Component';\nimport Scroll from '../Scroll';\n\n\nexport class Modal extends Component {\n\n    private triggerBtn: HTMLButtonElement;\n    private closerBtn: HTMLButtonElement;\n    private form: HTMLFormElement;\n    private isOpen = false;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.triggerBtn = document.querySelector(`[aria-controls=\"${this.view.id}\"]`);\n        this.closerBtn = this.view.querySelector('.js-modal-close');\n        this.form = this.view.querySelector('form');\n\n        this.bind();\n    }\n\n\n\n    protected bind(): void {\n        this.triggerBtn && this.triggerBtn.addEventListener('click', this.onTriggerClick);\n        this.form && this.form.addEventListener('submit', this.close);\n        this.closerBtn && this.closerBtn.addEventListener('click', this.close);\n    }\n\n\n\n    private onTriggerClick = (): void => {\n        this.isOpen ? this.close() : this.open();\n    };\n\n\n\n    private close = (): void => {\n        this.view.classList.remove('is-open');\n        this.isOpen = false;\n    };\n\n\n\n    private open = (): void => {\n        this.view.classList.add('is-open');\n        this.isOpen = true;\n        Scroll.scrollTo({\n            el: this.view,\n            duration: 0.75,\n            ease: 'sine.out',\n            offsetY: this.view.parentElement.clientHeight,\n        });\n    };\n}\n","import gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport { Component, ComponentEvents } from '../components/Component';\nimport { easing } from '../Site';\nimport { PushStates } from '../PushStates';\nimport Widgets from '../widgets/All';\n\n\nexport interface IMoreSettings {\n    contentSelector?: string;\n    itemSelector?: string;\n    infinite?: boolean;\n    updateURL?: boolean;\n}\n\nexport class More extends Component {\n\n\n    private settings: IMoreSettings;\n    private contentEl: HTMLElement;\n    private pending: boolean;\n    private scrollTrigger: ScrollTrigger;\n    private linkEl: HTMLAnchorElement;\n\n\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.linkEl = (this.view.nodeName === 'A') ? this.view as HTMLAnchorElement : this.view.querySelector('a');\n\n        this.settings = {\n            itemSelector: 'li',\n            infinite: false,\n            updateURL: false,\n            ...JSON.parse(this.view.dataset.options),\n        };\n\n        this.contentEl = document.querySelector(this.settings.contentSelector);\n\n        // check must-have options:\n        console.assert(!!this.contentEl, 'There is no wrap element to load more content!', true);\n\n        if (!this.contentEl) {\n            this.view.style.display = 'none';\n            return;\n        }\n\n        // bind click:\n        this.linkEl.addEventListener('click', this.onClick);\n\n        // bind infinite scroll:\n        if (this.settings.infinite) {\n            this.scrollTrigger = ScrollTrigger.create({\n                trigger: this.view,\n                start: 'bottom bottom',\n                onEnter: () => this.load(),\n            });\n        }\n    }\n\n\n\n    public destroy(): void {\n        this.scrollTrigger?.kill();\n        super.destroy();\n    }\n\n\n\n    private async load(): Promise<void> {\n\n        if (this.pending) return;\n\n        const url = this.linkEl.href;\n        const tie = url.indexOf('?') < 0 ? '?' : '&';\n        const params = new URLSearchParams({ partial: 'true' });\n\n        this.pending = true;\n        this.view.classList.add('is-doing-request');\n\n        this.settings.updateURL && PushStates.changePath(url);\n\n        // send API request\n        fetch(url + tie + params, {\n            method: 'GET',\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'text/html',\n            },\n        })\n            .then(response => response.text())\n            .then(response => {\n                const selector = this.settings.contentSelector;\n\n                // mark existing items to not animate them later\n                const existingItems = this.contentEl.querySelectorAll(this.settings.itemSelector);\n                [...existingItems].map(i => i.classList.add('is-existing'));\n\n                // store current height\n                const height = this.contentEl.clientHeight;\n\n                // add new html from response to content element\n                const newDiv = document.createElement('div');\n                newDiv.innerHTML = response;\n                const elLoadedContent = newDiv.querySelector(selector).innerHTML;\n                this.contentEl.insertAdjacentHTML('beforeend', elLoadedContent);\n\n                // Update button\n                const id = this.view.getAttribute('id');\n                const newButton: HTMLLinkElement = newDiv.querySelector(id ? `#${id}` : '[data-component=\"More\"] a');\n                const newURL = newButton?.getAttribute('href');\n                if (newButton && newURL !== '') {\n                    this.linkEl.setAttribute('href', newURL);\n                    this.scrollTrigger?.refresh();\n                } else {\n                    this.view.remove();\n                    this.scrollTrigger?.kill();\n                }\n\n                this.trigger(ComponentEvents.CHANGE, this.contentEl);\n\n                // new items' animation - excluding items that were added to content earlier\n                const items = this.contentEl.querySelectorAll(`${this.settings.itemSelector}:not(.is-existing)`);\n                const tl = gsap.timeline();\n                [...items].forEach((item, index) => {\n                    tl.from(item, { opacity: 0, duration: 0.5, y: 50, ease: easing }, index * 0.1);\n                });\n\n                // animate height\n                gsap.fromTo(this.contentEl, { height }, {\n                    height: 'auto',\n                    duration: 0.4,\n                    ease: easing,\n                });\n            })\n            .catch(error => {\n                console.warn(`error: ${error}`, error);\n            })\n            .finally(() => {\n                this.view.classList.remove('is-doing-request');\n                // bind widgets\n                Widgets.bind();\n\n                setTimeout(() => {\n                    this.pending = false;\n                }, 250);\n            });\n    }\n\n\n\n    private onClick = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.load();\n    };\n}\n","import { parseToTime } from './Player.utils';\n\nexport class PlayerTime {\n\n\n    private durationTimeEl: HTMLElement;\n    private currentTimeEl: HTMLElement;\n\n\n\n    constructor(playerEl: HTMLElement) {\n        this.currentTimeEl = playerEl.querySelector('.js-player-time');\n        this.durationTimeEl = playerEl.querySelector('.js-player-duration');\n    }\n\n\n\n    public destroy(): void {\n        this.currentTimeEl = null;\n        this.durationTimeEl = null;\n    }\n\n\n\n    public update(metadata: { duration: number, current?: number }, isLong?: boolean): void {\n        if (this.durationTimeEl) {\n            this.durationTimeEl.innerText = parseToTime(metadata.duration, isLong);\n        }\n        if (this.currentTimeEl && typeof metadata.current === 'number') {\n            this.currentTimeEl.innerText = parseToTime(metadata.current || 0, isLong);\n        }\n    }\n}\n","import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\n\nimport { Component } from '../Component';\nimport * as Utils from '../../Utils';\nimport { IPlayerSettings, PlayerEvents, PlayerSize } from './Player.types';\nimport { PlayerTimeline, PlayerTimelineEvents } from './PlayerTimeline';\nimport { PlayerPopups } from './PlayerPopups';\nimport { PlayerTime } from './Player.Time';\nimport { PlayerPoster } from './PlayerPoster';\nimport { PlayerVolume, PlayerVolumeEvents } from './PlayerVolume';\nimport { PlayerFullscreen, PlayerFullscreenEvents } from './PlayerFullscreen';\nimport { VideoCaptions } from './VideoCaptions';\nimport { PlayerStorage } from './Video.types';\nimport { PlayerSettings, PlayerSettingsEvents } from './PlayerSettings';\nimport { Templates, TemplateNames } from '../../templates/Templates';\nimport { PushStates } from '../../PushStates';\n\n\n\nexport abstract class Player extends Component {\n\n\n    // eslint-disable-next-line no-use-before-define\n    public static instances: { [key: string]: Player } = {};\n\n\n    // pause all instances of Player class:\n    static pauseAll(omitUID?: string): void {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const uid in Player.instances) {\n            if (typeof omitUID === 'undefined' || omitUID !== uid) {\n                Player.instances[uid].pause();\n            }\n        }\n    }\n\n\n    // pause all instances of Player class inside element:\n    static pauseAllIn(el: HTMLElement): void {\n        // eslint-disable-next-line no-restricted-syntax, guard-for-in\n        for (const uid in Player.instances) {\n            const item = Player.instances[uid];\n            if (el.contains(item.view)) {\n                item.pause();\n            }\n        }\n    }\n\n\n    public userPaused = false;\n\n    protected uid: string;\n    protected media: HTMLElement;\n    protected isLoaded: boolean;\n    protected isReady = false;\n    protected settings: IPlayerSettings;\n    protected wasPaused = false;\n    protected st: ScrollTrigger;\n\n    protected ui: {\n        poster?: PlayerPoster;\n        time?: PlayerTime;\n        timeline?: PlayerTimeline;\n        popups?: PlayerPopups;\n        volume?: PlayerVolume;\n        settings?: PlayerSettings;\n        captions?: VideoCaptions;\n        fullscreen?: PlayerFullscreen;\n        toggleBtn?: HTMLElement,\n        playPauseBtn?: HTMLElement,\n        bottomPanel?: HTMLElement,\n        thumbnail?: HTMLElement;\n        minimize?: HTMLElement;\n        playerBar?: HTMLElement;\n    };\n\n\n\n    constructor(protected view: HTMLElement, options?: Object) {\n        super(view);\n\n        // extend settings:\n        this.settings = {\n            autoplay: false,\n            loop: false,\n            muted: false,\n            controls: false,\n            volume: 1,\n            width: 480,\n            height: 270,\n            size: PlayerSize.AUTO,\n            readyTime: 0.001,\n            hotkeys: true,\n            pauseOnScroll: false,\n            ...JSON.parse(view.dataset.options || '{}'),\n            ...options,\n        };\n\n        // generate unique id:\n        this.uid = Utils.generateUID();\n\n        // setup:\n        this.setup();\n        this.resize();\n\n        if (typeof Player.instances === 'undefined') { Player.instances = {}; }\n        Player.instances[this.uid] = this;\n\n        this.view.classList.add('is-initialized');\n    }\n\n\n    /* eslint-disable no-unused-vars */\n    public abstract play(): void;\n    public abstract pause(): void;\n    public abstract toggle(): boolean;\n    public abstract seek(value: number): void;\n    public abstract toggleMute(mute?: boolean): void;\n    public abstract unload(): void;\n    public abstract load(data: IPlayerSettings): any | Promise<any>;\n    public abstract preload(): Promise<any>;\n    public abstract skipForward(more?: boolean): void;\n    public abstract skipBackward(more?: boolean): void;\n    public abstract restart(): void;\n    public abstract end(): void;\n    public abstract volumeUp(): void;\n    public abstract volumeDown(): void;\n    public abstract speedUp(): void;\n    public abstract speedDown(): void;\n\n    protected abstract isPaused(): boolean;\n    protected abstract setup(): void;\n    protected abstract createPlayer(): void;\n    protected abstract bindPlayer(): void;\n    protected abstract unbindPlayer(): void;\n\n    protected abstract onDurationChange(data?): void;\n    protected abstract onError (error): void;\n    protected abstract onProgress(data?): void;\n    protected abstract onTimeupdate(data?): void;\n    /* eslint-enable no-unused-vars */\n\n\n    public hide(): void { this.view.style.display = 'none'; }\n    public show(): void { this.view.style.display = 'block'; }\n    public resize = (): void => {};\n\n    public setVolume(volume: number): void {\n        this.ui.volume.update(volume);\n        this.ui.volume.toggle(volume < 0.05);\n        Utils.setStorageItem(PlayerStorage.VOLUME, `${volume}`);\n    }\n\n    public setSpeed(speed: number): void {\n        this.ui.settings?.updateSpeed(speed);\n        Utils.setStorageItem(PlayerStorage.SPEED, `${speed}`);\n    }\n\n    public destroy(): void {\n        delete Player.instances[this.uid];\n\n        if (this.ui) {\n            this.ui.time?.destroy();\n            this.ui.timeline?.destroy();\n            this.ui.volume?.destroy();\n            this.ui.popups.destroy();\n            this.ui.settings?.destroy();\n            this.ui.time = null;\n            this.ui.timeline = null;\n            this.ui.volume = null;\n            this.ui.playPauseBtn = null;\n            this.ui.bottomPanel = null;\n            this.ui.toggleBtn = null;\n        }\n\n        this.unbind();\n        this.unload();\n\n        this.view.classList.remove('is-initialized');\n\n        super.destroy();\n    }\n\n\n\n    protected buildUI(): void {\n        const template = Templates.get(TemplateNames.PLAYER);\n        const html = template.render({});\n\n        this.view.insertAdjacentHTML('beforeend', html);\n\n        this.ui = {\n            fullscreen: new PlayerFullscreen(this.view.querySelector('.js-player-fullscreen'), this.view),\n            timeline: new PlayerTimeline(this.view.querySelector('.js-player-timeline'), this.view),\n            popups: new PlayerPopups(this.view.querySelector('.js-player-popups')),\n            volume: new PlayerVolume(this.view.querySelector('.js-player-volume'), this.view),\n            time: new PlayerTime(this.view),\n            poster: new PlayerPoster(this.view.querySelector('.js-player-poster'), this.view),\n            // settings: new PlayerSettings(this.view.querySelector('.js-player-settings'), this.view),\n            bottomPanel: this.view.querySelector('.js-player-bottom'),\n            playPauseBtn: this.view.querySelector('.js-player-playpause'),\n            toggleBtn: this.view.querySelector('.js-player-toggle'),\n            playerBar: this.view.querySelector('.js-player-bar'),\n        };\n\n        this.view.classList.toggle('has-autoplay', this.settings.autoplay);\n        this.view.classList.toggle('has-autoplay', this.settings.autoplay);\n        this.view.classList.add('has-controls');\n\n        this.settings.muted && this.ui.volume?.toggle(true);\n\n        // poster\n        this.ui.poster.load(this.settings);\n\n\n        PushStates.bind(this.view);\n    }\n\n\n\n    protected bind(): void {\n        this.ui.timeline?.on(PlayerTimelineEvents.SEEK, (position: number) => this.seek(position));\n        this.ui.volume?.on(PlayerVolumeEvents.CHANGE, (volume: number) => this.setVolume(volume));\n        this.ui.volume?.on(PlayerVolumeEvents.MUTE, () => this.toggleMute(true));\n        this.ui.volume?.on(PlayerVolumeEvents.UNMUTE, () => this.toggleMute(false));\n        this.ui.settings?.on(PlayerSettingsEvents.SPEED, speed => this.setSpeed(speed));\n\n        this.ui.playPauseBtn?.addEventListener('click', this.onToggleClick);\n        this.ui.toggleBtn?.addEventListener('click', this.onToggleClick);\n        this.ui.toggleBtn?.addEventListener('dblclick', this.onDoubleClick);\n\n        !!this.settings.hotkeys && document.addEventListener('keydown', this.onKeyDown);\n\n        this.ui.fullscreen?.on(PlayerFullscreenEvents.ENTER, this.onFullscreenEnter);\n        this.ui.fullscreen?.on(PlayerFullscreenEvents.EXIT, this.onFullscreenExit);\n\n        this.settings.pauseOnScroll && this.pauseOnScroll();\n\n        window.addEventListener('beforeunload', () => this.onBeforeunload());\n        window.addEventListener('pagehide', () => this.onBeforeunload());\n\n        this.bindPlayer();\n    }\n\n\n\n    protected unbind(): void {\n        this.ui?.timeline?.off();\n        this.ui?.volume?.off();\n\n        this.ui?.playPauseBtn?.removeEventListener('click', this.onToggleClick);\n        this.ui?.toggleBtn?.removeEventListener('click', this.onToggleClick);\n        this.ui?.toggleBtn?.removeEventListener('dblclick', this.onDoubleClick);\n\n        !!this.settings.hotkeys && document.removeEventListener('keydown', this.onKeyDown);\n\n        this.ui.fullscreen?.off();\n        this.st?.kill();\n\n        window.removeEventListener('beforeunload', () => this.onBeforeunload());\n        window.removeEventListener('pagehide', () => this.onBeforeunload());\n\n        this.unbindPlayer();\n    }\n\n\n\n    protected onCanplay(): void {\n        this.view.classList.add('is-canplay');\n        this.view.classList.remove('is-error');\n    }\n\n\n\n    protected onPlay(): void {\n        this.view.classList.add('is-played');\n        this.view.classList.remove('is-ended', 'is-error', 'is-share-open');\n        Player.pauseAll(this.uid);\n        this.updateMediaSession();\n    }\n\n\n\n    protected onPlaying(): void {\n        this.view.classList.add('is-playing');\n        this.view.classList.remove('is-loading', 'is-error');\n        this.trigger(PlayerEvents.PLAY);\n        navigator.mediaSession.playbackState = 'playing';\n    }\n\n\n\n    protected onPause(): void {\n        this.view.classList.remove('is-playing', 'is-share-open');\n        this.trigger(PlayerEvents.PAUSE);\n        navigator.mediaSession.playbackState = 'paused';\n    }\n\n\n\n    protected onWaiting(): void {\n        this.view.classList.remove('is-playing');\n        this.view.classList.add('is-loading');\n    }\n\n\n\n    protected onEnd(): void {\n        this.view.classList.remove('is-playing', 'is-played', 'is-started', 'is-loading');\n        this.view.classList.add('is-ended');\n\n        if (!this.settings.autoplay) {\n            this.trigger(PlayerEvents.END);\n        }\n    }\n\n\n\n    protected onToggleClick = (e): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggle();\n    };\n\n\n\n    protected onDoubleClick = (e): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.ui?.fullscreen?.toggle();\n    };\n\n\n\n    protected onBeforeunload(): void {}\n\n\n\n    protected onKeyDown = e => {\n\n        if (document.querySelector('#transcript-search') === document.activeElement) { return; }\n\n        switch (e.key) {\n            case ' ':\n            case 'k':\n                e.preventDefault();\n                e.stopPropagation();\n                this.toggle();\n                break;\n\n            case 'ArrowRight':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipForward();\n                break;\n\n            case 'l':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipForward(true);\n                break;\n\n            case 'ArrowLeft':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipBackward();\n                break;\n\n            case 'j':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipBackward(true);\n                break;\n\n            case 'm':\n                e.preventDefault();\n                e.stopPropagation();\n                this.toggleMute();\n                break;\n\n            case '>':\n                e.preventDefault();\n                e.stopPropagation();\n                this.speedUp();\n                break;\n\n            case '<':\n                e.preventDefault();\n                e.stopPropagation();\n                this.speedDown();\n                break;\n\n            case 'Home':\n            case '0':\n                e.preventDefault();\n                e.stopPropagation();\n                this.restart();\n                break;\n\n            case 'End':\n                e.preventDefault();\n                e.stopPropagation();\n                this.end();\n                break;\n\n            case 'ArrowUp':\n                e.preventDefault();\n                e.stopPropagation();\n                this.volumeUp();\n                break;\n\n            case 'ArrowDown':\n                e.preventDefault();\n                e.stopPropagation();\n                this.volumeDown();\n                break;\n\n            case 'f':\n                e.preventDefault();\n                e.stopPropagation();\n                this.ui?.fullscreen?.toggle();\n                break;\n\n            case 'c':\n                e.preventDefault();\n                e.stopPropagation();\n                this.ui?.captions?.toggle();\n                break;\n\n            default:\n                break;\n        }\n    };\n\n\n\n    protected onFullscreenEnter = () => {\n        this.ui?.captions?.showNative();\n    };\n\n\n\n    protected onFullscreenExit = () => {\n        this.ui?.captions?.hideNative();\n    };\n\n\n\n    protected pauseOnScroll(): void {\n        this.st = ScrollTrigger.create({\n            trigger: this.view,\n            onToggle: self => {\n                !self.isActive && !this.ui.fullscreen?.isFullscreen() && this.pause();\n            },\n        });\n    }\n\n\n\n    protected updateMediaSession(): void {\n        if ('mediaSession' in navigator && this.settings.metadata) {\n\n            navigator.mediaSession.metadata = new MediaMetadata({ ...this.settings.metadata as any });\n\n            navigator.mediaSession.setActionHandler('play', () => this.play());\n            navigator.mediaSession.setActionHandler('pause', () => this.pause());\n            navigator.mediaSession.setActionHandler('seekbackward', () => this.skipBackward(true));\n            navigator.mediaSession.setActionHandler('seekforward', () => this.skipForward(true));\n            navigator.mediaSession.setActionHandler('seekto', () => {}); // just enable seeking\n\n            // TODO: use this in playlists in the future\n            // navigator.mediaSession.setActionHandler('previoustrack', () => { });\n            // navigator.mediaSession.setActionHandler('nexttrack', () => { });\n        }\n    }\n}\n","export class PlayerEvents {\n    public static END = 'end';\n    public static NEXT = 'next';\n    public static PREV = 'prev';\n    public static TIME_UPDATE = 'timeUpdate';\n    public static PLAY = 'play';\n    public static PAUSE = 'pause';\n}\n\n\nexport class PlayerSize {\n    public static COVER = 'cover';\n    public static CONTAIN = 'contain';\n    public static AUTO = 'auto';\n}\n\nexport interface IPlayerSettings {\n    pauseOnScroll: boolean;\n    autoplay?: boolean;\n    loop?: boolean;\n    muted?: boolean;\n    controls?: boolean;\n\n    id?: string | number;\n    src?: string;\n    srcMobile?: string;\n    poster?: string;\n    posterMobile?: string;\n\n    ratio?: number;\n    ratioMobile?: number;\n    width?: number;\n    height?: number;\n    size?: PlayerSize;\n\n    timeFrom?: number;\n    duration?: number;\n    timeFormatLong?: boolean;\n    cacheTime?: boolean;\n\n    volume?: number;\n    hotkeys?: boolean;\n    readyTime?: number; // started class\n    // tracking?: Array<ITrackingElem>;\n\n    metadata?: MediaMetadata;\n}\n\n\nexport interface ISpotData {\n    el?: HTMLElement;\n    id?: string;\n    elHotspot?: HTMLElement;\n    elLightbox?: HTMLElement;\n    start?: number;\n    stop?: number;\n}\n\nexport interface IPlayerElements {\n    duration?: HTMLElement;\n    fullBtn?: HTMLElement;\n    loaded?: HTMLElement;\n    next?: HTMLElement;\n    playBtn?: HTMLElement;\n    playerBar?: HTMLElement;\n    poster?: HTMLElement;\n    prev?: HTMLElement;\n    progress?: HTMLElement;\n    scrubber?: HTMLElement;\n    time?: HTMLElement;\n    title?: HTMLElement;\n    toggleBtn?: HTMLElement;\n    volume?: HTMLElement;\n    volumeBar?: HTMLElement;\n    volumeButton?: HTMLElement;\n    volumeValue?: HTMLElement;\n    captions?: HTMLElement;\n    cc?: HTMLElement;\n    spots?: Array<ISpotData>;\n    exitFullBtn?: HTMLButtonElement;\n}\n","export function decodeURL(src: string): string {\n    const decode = (s): string => {\n        try {\n            const d = window.atob(s);\n            return /^wq|x@$/g.test(d) ? d.replace(/^wq|x@$/g, '') : s;\n        } catch (e) {\n            return s;\n        }\n    };\n    return /\\.mp4$/.test(src) ? src : decode(src);\n}\n\n\n\nexport function parseToTime(totalSeconds: number, isLong?: boolean): string {\n    const totalSec = parseInt(`${totalSeconds}`, 10);\n    const hours = parseInt(`${totalSec / 3600}`, 10) % 24;\n    const minutes = parseInt(`${totalSec / 60}`, 10) % 60;\n    const seconds = totalSec % 60;\n\n    return `${(hours < 10 ? `0${hours}` : hours)}:${(minutes < 10 ? `0${minutes}` : minutes)}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n","import { Handler } from '../../Handler';\nimport { browser } from '../../Site';\n\nexport class PlayerFullscreenEvents {\n    public static EXIT: string = 'exit';\n    public static ENTER: string = 'enter';\n}\n\nexport interface ExtendedDocument extends Document {\n    mozFullScreenElement: HTMLElement;\n    webkitFullscreenElement: HTMLElement;\n    msFullscreenElement: HTMLElement;\n    exitFullscreen(): Promise<void>;\n    mozCancelFullScreen(): Promise<void>;\n    webkitExitFullscreen(): Promise<void>;\n}\n\nexport const htmlDocument: ExtendedDocument = document as ExtendedDocument;\n\n\n\nexport class PlayerFullscreen extends Handler {\n\n\n\n    private static getFullscreenElement(): HTMLElement | any {\n        // eslint-disable-next-line max-len\n        return htmlDocument.fullscreenElement || htmlDocument.mozFullScreenElement || htmlDocument.webkitFullscreenElement || htmlDocument.msFullscreenElement;\n    }\n\n\n\n    constructor(private btnEl: HTMLElement, private playerEl: HTMLElement) {\n        super();\n\n        this.btnEl = btnEl;\n        this.playerEl = playerEl;\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n    }\n\n\n\n    public isFullscreen(): boolean {\n        return PlayerFullscreen.getFullscreenElement();\n    }\n\n\n\n    public toggle(): void {\n        if (this.isFullscreen()) {\n            this.exitFullscreen();\n        } else {\n            this.goFullscreen(this.playerEl);\n        }\n    }\n\n\n\n    public exitFullscreen(): void {\n        if (htmlDocument.exitFullscreen) {\n            htmlDocument.exitFullscreen();\n        } else if (htmlDocument.mozCancelFullScreen) {\n            htmlDocument.mozCancelFullScreen();\n        } else if (htmlDocument.webkitExitFullscreen) {\n            htmlDocument.webkitExitFullscreen();\n        }\n    }\n\n\n\n    public goFullscreen(element: HTMLElement | any): void {\n\n        let promise;\n        if (element.requestFullscreen) {\n            promise = element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            promise = element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            promise = element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            promise = element.msRequestFullscreen();\n        }\n\n        promise.then(() => {\n            this.playerEl.classList.add('is-fullscreen');\n        }).catch(err => {\n            console.error(`Error attempting to enable fullscreen mode: ${err.message} (${err.name})`);\n        });\n    }\n\n\n\n    private bind(): void {\n        this.btnEl?.addEventListener('click', this.onBtnClick);\n        document.addEventListener('fullscreenchange', this.onFullscreenChange);\n        const mm = window.matchMedia('(orientation: landscape) and (max-height: 1023px)');\n        mm.addEventListener('change', this.onOrientationChange);\n\n        [...this.playerEl.querySelectorAll('video')].forEach(video => {\n            video.addEventListener('webkitendfullscreen', this.onVideoFullscreenExit, false);\n        });\n    }\n\n\n\n    private unbind(): void {\n        this.btnEl?.removeEventListener('click', this.onBtnClick);\n        document.removeEventListener('fullscreenchange', this.onFullscreenChange);\n    }\n\n\n\n    private onBtnClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (PlayerFullscreen.getFullscreenElement()) {\n            this.exitFullscreen();\n        } else if (browser.mobile || browser.ios) {\n            const mediaElement = this.playerEl.querySelector('video.is-current') as any;\n            this.trigger(PlayerFullscreenEvents.ENTER);\n            mediaElement?.webkitEnterFullscreen && mediaElement?.webkitEnterFullscreen();\n            mediaElement?.enterFullscreen && mediaElement?.enterFullscreen();\n            this.playerEl.classList.add('is-fullscreen');\n        } else {\n            this.goFullscreen(this.playerEl);\n        }\n    };\n\n\n\n    private onFullscreenChange = () => {\n        if (PlayerFullscreen.getFullscreenElement()) { return; }\n        this.playerEl.classList.remove('is-fullscreen');\n        this.trigger(PlayerFullscreenEvents.EXIT);\n    };\n\n\n\n    private onVideoFullscreenExit = () => {\n        this.playerEl.classList.remove('is-fullscreen');\n        this.trigger(PlayerFullscreenEvents.EXIT);\n    };\n\n\n\n    private onOrientationChange = e => {\n        if (browser.mobile) {\n            const mediaElement = this.playerEl.querySelector('video.is-current') as any;\n            if (e.matches) {\n                // landscape\n                this.playerEl.classList.add('is-fullscreen');\n                this.trigger(PlayerFullscreenEvents.ENTER);\n                mediaElement?.webkitEnterFullscreen && mediaElement?.webkitEnterFullscreen();\n                mediaElement?.enterFullscreen && mediaElement?.enterFullscreen();\n            } else {\n                // portrait\n                mediaElement?.webkitExitFullscreen && mediaElement?.webkitExitFullscreen();\n                mediaElement?.exitFullscreen && mediaElement?.exitFullscreen();\n            }\n        }\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { easing } from '../../Site';\nimport { PopupData } from './Video.types';\n\nexport class PlayerPopups extends Handler {\n\n    private static DURATION: number = 3;\n\n    private related: Array<PopupData>;\n    private popups: Array<HTMLElement>;\n\n\n\n    constructor(private view: HTMLElement) {\n        super();\n\n        this.view = view;\n        this.popups = view ? [...this.view.children] as HTMLElement[] : null;\n    }\n\n\n\n    public loadData({ related }): void {\n        this.related = related;\n    }\n\n\n\n    public check(current?: number): void {\n\n        if (!current) { return; }\n\n        this.related?.forEach((element, key) => {\n\n            if (!element.timeStart) {\n                return;\n            }\n\n            if (current < element.timeStart || current > element.timeStart + PlayerPopups.DURATION) {\n                if (element.shown) {\n                    element.shown = false;\n                    this.hidePopup(this.popups[key]);\n                }\n                return;\n            }\n\n            if (element.shown) { return; }\n\n            this.popups[key].style.display = 'block';\n            element.shown = true;\n\n            this.showPopup(this.popups[key]);\n        });\n    }\n\n\n\n    private showPopup(popupEl: HTMLElement): void {\n        gsap.fromTo(popupEl, {\n            y: -20,\n            opacity: 0,\n            scale: 0.9,\n            transformOrigin: 'bottom',\n        }, {\n            y: 0,\n            scale: 1,\n            opacity: 1,\n            duration: 0.7,\n            delay: 0.15,\n            pointerEvents: 'all',\n            ease: easing,\n        });\n    }\n\n\n\n    private hidePopup(popupEl: HTMLElement): void {\n        gsap.to(popupEl, {\n            y: 20,\n            opacity: 0,\n            height: 0,\n            duration: 0.7,\n            scale: 0.9,\n            pointerEvents: 'none',\n            ease: easing,\n            clearProps: 'height,scale',\n            onComplete: () => {\n                popupEl.style.display = 'none';\n            },\n        });\n    }\n}\n","import { browser } from '../../Site';\nimport { IPlayerSettings } from './Player.types';\n\nexport class PlayerPoster {\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        this.view = view;\n        this.playerEl = playerEl;\n    }\n\n\n\n    public load(data: IPlayerSettings): void {\n        if (data.poster) {\n            const poster = !!browser.mobile\n                && data.posterMobile\n                && data.posterMobile !== ''\n                ? data.posterMobile\n                : data.poster;\n\n            this.view.style.backgroundImage = `url(${poster})`;\n        }\n\n        this.playerEl.classList.toggle('has-poster', !!data.poster);\n    }\n}\n","import { Handler } from '../../Handler';\n\n\nexport class PlayerSettingsEvents {\n    public static SPEED: string = 'speed';\n}\n\n\nexport class PlayerSettings extends Handler {\n\n    public static MAX_SPEED = 2;\n    public static MIN_SPEED = 0.25;\n    public static SPEED_STEP = 0.25;\n\n    public static constrainSpeed(speed: number): number {\n        return Math.max(PlayerSettings.MIN_SPEED, Math.min(PlayerSettings.MAX_SPEED, speed));\n    }\n\n\n    private listButtons: Array<HTMLLIElement>;\n    private timeout: ReturnType<typeof setTimeout>;\n    private isInitialSetup: boolean = true;\n    private button: HTMLButtonElement;\n\n\n\n    constructor(protected view: HTMLElement, protected playerEl: HTMLElement) {\n        super();\n\n        this.view = view;\n        this.playerEl = playerEl;\n        this.listButtons = [...view.querySelectorAll('[data-playback-rate]')] as HTMLLIElement[];\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.listButtons = null;\n    }\n\n\n\n    public updateSpeed(speed: number): void {\n        if (!this.isInitialSetup) {\n            this.view.classList.add('is-updating');\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n        }\n        this.isInitialSetup = false;\n\n        this.listButtons.forEach(btn => {\n            btn.parentElement.classList.toggle('is-active', parseFloat(btn.dataset.playbackRate) === speed);\n        });\n    }\n\n\n\n    private bind(): void {\n        this.listButtons.forEach(btn => btn.addEventListener('click', this.onSpeedBtnClick));\n    }\n\n\n\n    private unbind(): void {\n        this.listButtons.forEach(btn => btn.removeEventListener('click', this.onSpeedBtnClick));\n    }\n\n\n\n    private onSpeedBtnClick = (e: MouseEvent) => {\n        this.trigger(PlayerSettingsEvents.SPEED, parseFloat((e.currentTarget as HTMLElement).dataset.playbackRate));\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { browser } from '../../Site';\n\nexport class PlayerTimelineEvents {\n    public static SEEK: string = 'seek';\n}\n\nexport class PlayerTimeline extends Handler {\n\n    private isScrubbing: boolean;\n    private hoverEl: HTMLElement;\n    private currentEl: HTMLElement;\n    private loadedEl: HTMLElement;\n\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        super();\n        this.view = view;\n        this.hoverEl = view.querySelector('.js-player-hover');\n        this.currentEl = view.querySelector('.js-player-progress');\n        this.loadedEl = view.querySelector('.js-player-loaded');\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.hoverEl = null;\n        this.currentEl = null;\n        this.loadedEl = null;\n    }\n\n\n\n    public reset(): void {\n        this.currentEl.style.width = '0';\n        this.loadedEl.style.width = '0';\n    }\n\n\n\n    public update(metadata: { duration: number, buffered?: number, current?: number }, quick?: boolean): void {\n\n        const { duration, buffered, current } = metadata;\n\n        if (!duration) { return; }\n\n        if (buffered && this.loadedEl) {\n            gsap.to(this.loadedEl, {\n                width: `${(Math.max(buffered, current || 0) / duration) * 100}%`,\n                duration: !quick ? 0.3 : 0,\n            });\n        }\n\n        if (typeof current === 'number') {\n            gsap.to(this.currentEl, {\n                width: `${((current || 0) / duration) * 100}%`,\n                duration: !quick ? 0.3 : 0,\n                ease: 'none',\n            });\n        }\n    }\n\n\n\n    public addHotspots(data, duration): void {\n\n        data.related?.forEach(({ timeStart, color }) => {\n            const hotspot = document.createElement('div');\n\n            hotspot.classList.add('player__hotspot');\n            hotspot.style.left = `${((timeStart || 0) / duration) * 100}%`;\n            hotspot.style.backgroundColor = color;\n\n            this.view.appendChild(hotspot);\n        });\n\n    }\n\n\n\n    protected onMouseDown = (e: MouseEvent): void => {\n        e.stopPropagation();\n        this.isScrubbing = true;\n    };\n\n\n\n    protected onMouseMove = (e: MouseEvent): void => {\n\n        const { seek } = this.getPosition(e);\n        if (this.hoverEl) this.hoverEl.style.width = `${seek * 100}%`;\n\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            this.trigger(PlayerTimelineEvents.SEEK, seek, true);\n            gsap.killTweensOf(this.currentEl);\n            gsap.set(this.currentEl, { width: `${seek * 100}%` });\n            this.playerEl.classList.add('is-scrubbing');\n        }\n    };\n\n\n\n    protected onMouseUp = (e: MouseEvent): void => {\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            const { seek } = this.getPosition(e);\n            this.trigger(PlayerTimelineEvents.SEEK, seek);\n        }\n        this.isScrubbing = false;\n        this.playerEl.classList.remove('is-scrubbing');\n    };\n\n\n\n    protected onMouseLeave = (): void => {\n        this.isScrubbing = false;\n        this.playerEl.classList.remove('is-scrubbing');\n    };\n\n\n\n    protected onClick = (e: MouseEvent): void => {\n        e.stopPropagation();\n        const { seek } = this.getPosition(e);\n        this.trigger(PlayerTimelineEvents.SEEK, seek);\n        gsap.killTweensOf(this.currentEl);\n        gsap.set(this.currentEl, { width: `${seek * 100}%` });\n    };\n\n\n\n    private bind(): void {\n        !browser.touch && this.playerEl?.addEventListener('mouseup', this.onMouseUp);\n        !browser.touch && this.playerEl?.addEventListener('mouseleave', this.onMouseLeave);\n        !browser.touch && this.playerEl?.addEventListener('mousemove', this.onMouseMove);\n        browser.touch && this.playerEl?.addEventListener('touchmove', this.onMouseMove);\n        browser.touch && this.playerEl?.addEventListener('touchend', this.onMouseUp);\n\n        !browser.touch && this.view?.addEventListener('click', this.onClick);\n        !browser.touch && this.view?.addEventListener('mousedown', this.onMouseDown);\n        browser.touch && this.view?.addEventListener('touchstart', this.onMouseDown);\n    }\n\n\n\n    private unbind(): void {\n        this.playerEl?.removeEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.removeEventListener('mouseleave', this.onMouseLeave);\n        this.playerEl?.removeEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.removeEventListener('touchmove', this.onMouseMove);\n        this.playerEl?.removeEventListener('touchend', this.onMouseUp);\n\n        this.view?.removeEventListener('mousedown', this.onMouseDown);\n        this.view?.removeEventListener('touchstart', this.onMouseDown);\n        this.view?.removeEventListener('click', this.onClick);\n    }\n\n\n\n    private getPosition(e: TouchEvent|MouseEvent): { x: number; width: number; seek: number } {\n        const pageX = (e as MouseEvent).pageX || (e as TouchEvent).touches[0]?.pageX || (e as TouchEvent).changedTouches[0]?.pageX;\n        const x = pageX - this.view.getBoundingClientRect().left;\n        const width = this.view.clientWidth;\n        const seek = Math.max(0, Math.min(1, x / width));\n        return { x, width, seek };\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { easing } from '../../Site';\n\nexport class PlayerVolumeEvents {\n    public static CHANGE: string = 'change';\n    public static MUTE: string = 'mute';\n    public static UNMUTE: string = 'unmute';\n}\n\n\nexport class PlayerVolume extends Handler {\n\n    private isScrubbing: boolean;\n    private isMuted: boolean;\n    private isInitialSetup: boolean = true;\n    private volume: number;\n    private buttonEl: HTMLElement;\n    private barEl: HTMLElement;\n    private valueEl: HTMLElement;\n    private timeout: ReturnType<typeof setTimeout>;\n\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        super();\n        this.view = view;\n        this.playerEl = playerEl;\n        this.buttonEl = this.view.querySelector('.js-volume-btn');\n        this.barEl = this.view.querySelector('.js-volume-bar');\n        this.valueEl = this.view.querySelector('.js-volume-value');\n        this.bind();\n    }\n\n\n\n    public update(volume: number): void {\n        this.volume = volume;\n        this.valueEl && gsap.to(this.valueEl, {\n            scaleY: volume,\n            duration: this.isScrubbing ? 0.0001 : 0.2,\n            ease: easing,\n        });\n        if (!this.isInitialSetup) {\n            this.view.classList.add('is-updating');\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n        }\n        this.isInitialSetup = false;\n    }\n\n\n\n    public toggle(muted: boolean): void {\n        this.isMuted = muted;\n        this.playerEl.classList.toggle('is-muted', this.isMuted);\n        this.valueEl && gsap.to(this.valueEl, { scaleY: this.isMuted ? 0 : this.volume, duration: 0.2, ease: easing });\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.buttonEl = null;\n        this.barEl = null;\n        this.valueEl = null;\n    }\n\n\n\n    private bind(): void {\n        this.buttonEl?.addEventListener('click', this.onVolumeButtonClick);\n        this.barEl?.addEventListener('click', this.onVolumeBarClick);\n        this.barEl?.addEventListener('mousedown', this.onMouseDown);\n        this.playerEl?.addEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.addEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.addEventListener('mouseleave', this.onMouseLeave);\n    }\n\n\n\n    private unbind(): void {\n        this.buttonEl?.removeEventListener('click', this.onVolumeButtonClick);\n        this.barEl?.removeEventListener('click', this.onVolumeBarClick);\n        this.barEl?.removeEventListener('mousedown', this.onMouseDown);\n        this.playerEl?.removeEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.removeEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.removeEventListener('mouseleave', this.onMouseLeave);\n    }\n\n\n\n    private onVolumeButtonClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.trigger(this.isMuted ? PlayerVolumeEvents.UNMUTE : PlayerVolumeEvents.MUTE);\n    };\n\n\n\n    private onVolumeBarClick = (e: MouseEvent): void => {\n        e.stopPropagation();\n        const value = Math.max(0, Math.min(1, 1 - e.offsetY / this.barEl.clientHeight));\n        this.trigger(PlayerVolumeEvents.CHANGE, value);\n    };\n\n\n\n    private onMouseDown = (e: MouseEvent): void => {\n        e.stopPropagation();\n        this.isScrubbing = true;\n    };\n\n\n\n    private onMouseMove = (e): void => {\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            const posY = e.clientY - this.barEl.getBoundingClientRect().top;\n            const value = Math.max(0, Math.min(1, 1 - posY / this.barEl.clientHeight));\n            this.trigger(PlayerVolumeEvents.CHANGE, value);\n        }\n    };\n\n\n\n    private onMouseUp = (): void => {\n        this.isScrubbing = false;\n    };\n\n\n\n    private onMouseLeave = (): void => {\n        this.isScrubbing = false;\n    };\n\n}\n","import { decodeURL } from '../../components/Player/Player.utils';\nimport { IPlayerSettings, PlayerEvents } from '../../components/Player/Player.types';\nimport { MediaState, PlayerStorage } from '../../components/Player/Video.types';\nimport { browser } from '../../Site';\nimport { Player } from '../../components/Player/Player';\nimport { getStorageItem, normalizeUrl, setStorageItem } from '../../Utils';\nimport { VideoCaptions } from './VideoCaptions';\nimport { PlayerSettings } from './PlayerSettings';\n\n\n\nexport class Video extends Player {\n\n    protected media: HTMLVideoElement | HTMLAudioElement;\n    protected isAudio: boolean;\n\n    public preload(): Promise<boolean> {\n        const state = !browser.safari\n            ? MediaState.HAVE_ENOUGH_DATA\n            : MediaState.HAVE_METADATA;\n        return new Promise<boolean>(resolve => {\n            if (!!browser.mobile || !this.settings.autoplay) {\n                resolve(true);\n            } else if (this.media.readyState >= state) {\n                resolve(true);\n            } else {\n                this.media.addEventListener('loadeddata', () => {\n                    if (this.media.readyState >= state) {\n                        resolve(true);\n                    }\n                });\n            }\n        });\n    }\n\n\n\n    public destroy(): void {\n        this.cacheTimePosition(true);\n        this.media.pause();\n        this.media.src = '';\n        this.media.load();\n        super.destroy();\n    }\n\n\n\n    public load(data: IPlayerSettings): Promise<number|{}> {\n        const src = !!browser.mobile && data.srcMobile && data.srcMobile !== '' ? data.srcMobile : data.src;\n\n        this.media.pause();\n        this.media.src = decodeURL(src);\n        this.media.load();\n\n        this.view.classList.remove('is-ended', 'is-started', 'is-played', 'is-playing');\n\n        this.ui && this.ui.timeline?.reset();\n\n        this.settings.autoplay && this.play();\n\n        this.settings.ratio = data.ratio;\n        this.settings.ratioMobile = data.ratioMobile;\n        this.resize();\n\n        this.settings.poster = data.poster;\n        this.settings.posterMobile = data.posterMobile;\n\n        this.ui.poster.load(data);\n\n        this.settings.cacheTime && this.seekToCached();\n\n        return Promise.resolve(true);\n    }\n\n\n\n    public play(): void {\n        if (this.media && this.media.paused) {\n\n            if (this.getCurrentTime() >= this.getDuration()) {\n                this.ui?.timeline?.update({ current: 0, duration: this.getDuration() }, true);\n                this.seek(0);\n            }\n\n            const playPromise = this.media.play();\n\n            if (playPromise !== undefined) {\n                (playPromise).then(() => {\n                    this.view.classList.remove('autoplay-failed');\n                }).catch(() => {\n                    this.view.classList.add('autoplay-failed');\n                });\n            }\n\n            // show poster if autoplay fails:\n            setTimeout(() => {\n                this.view.classList.add('should-play');\n            }, 1000);\n        }\n    }\n\n\n\n    public pause(): void {\n        if (!this.media || this.media.paused) { return; }\n        this.media.pause();\n    }\n\n\n\n    public toggle(play?: boolean): boolean {\n        const playing: boolean = !this.media.paused;\n\n        if (typeof play !== 'undefined') {\n            if (!!play && !playing) {\n                this.play();\n            } else if (!play && !!playing) {\n                this.pause();\n            }\n        } else {\n            playing ? this.pause() : this.play();\n        }\n\n        return !playing;\n    }\n\n\n\n    public unload(): void {\n        if (this.media) {\n            this.media.pause();\n            this.media.src = '';\n            this.media.load();\n        }\n    }\n\n\n\n    public seek(value: number): void {\n        if (!this.getDuration()) { return; }\n        this.media.currentTime = this.getStart() + this.getDuration() * value;\n    }\n\n\n\n    public seekToTime(time: number): void {\n        this.media.currentTime = this.getStart() + time;\n    }\n\n\n\n    public skipForward(more?: boolean): void {\n        this.seekToTime(this.getCurrentTime() + (more ? 10 : 5));\n    }\n\n\n\n    public skipBackward(more?: boolean): void {\n        this.seekToTime(this.getCurrentTime() - (more ? 10 : 5));\n    }\n\n\n\n    public end(): void {\n        this.seek(1);\n        this.pause();\n    }\n\n\n\n    public restart(): void {\n        this.seek(0);\n        this.play();\n    }\n\n\n\n    public setVolume(value: number): void {\n        this.media.volume = value;\n        this.media.muted = value === 0;\n        super.setVolume(value);\n    }\n\n\n\n    public toggleMute(mute?: boolean): void {\n        if (typeof mute !== 'undefined') {\n            this.media.muted = mute;\n        } else {\n            this.media.muted = !this.media.muted;\n        }\n        !this.media.muted && this.media.volume < 0.05 && (this.media.volume = 1);\n        this.ui.volume.update(this.media.volume);\n        this.ui.volume.toggle(this.media.muted);\n    }\n\n\n\n    public volumeUp(): void {\n        if (this.media.muted) {\n            this.toggleMute(false);\n            this.setVolume(0.05);\n        } else {\n            this.setVolume(Math.min(1, this.media.volume + 0.05));\n        }\n    }\n\n\n\n    public volumeDown(): void {\n        this.setVolume(Math.max(0, this.media.volume - 0.05));\n    }\n\n\n\n    public setSpeed(speed: number): void {\n        const constrainedSpeed = PlayerSettings.constrainSpeed(speed);\n        this.media.playbackRate = constrainedSpeed;\n        super.setSpeed(constrainedSpeed);\n    }\n\n\n\n    public speedUp(): void {\n        this.setSpeed(this.media.playbackRate + PlayerSettings.SPEED_STEP);\n    }\n\n\n\n    public speedDown(): void {\n        this.setSpeed(this.media.playbackRate - PlayerSettings.SPEED_STEP);\n    }\n\n\n\n    public setHotspots(data): void {\n        this.ui.timeline.addHotspots(data, this.getDuration());\n        this.ui.popups.loadData(data);\n    }\n\n\n\n    protected isPaused(): boolean {\n        return this.media.paused;\n    }\n\n\n\n    protected setup(): void {\n\n        this.createPlayer();\n\n        // make sure ratios are float numbers:\n        this.settings.ratio = parseFloat(`${this.settings.ratio}`);\n        this.settings.ratioMobile = <number>parseFloat(`${this.settings.ratioMobile}`);\n\n\n        // remove mobile ratio if no mobile src:\n        if (!this.settings.srcMobile || this.settings.srcMobile === '') {\n            delete this.settings.ratioMobile;\n            delete this.settings.srcMobile;\n        }\n\n        // mobile src:\n        if (!!browser.mobile && this.settings.srcMobile && this.settings.srcMobile !== this.media.src) {\n            this.media.src = decodeURL(this.settings.srcMobile);\n            this.media.load();\n        } else if (!browser.mobile && this.settings.src && this.settings.src !== this.media.src) {\n            this.media.src = decodeURL(this.settings.src);\n            this.media.load();\n        }\n\n        // volume:\n        this.settings.volume && (this.media.volume = this.settings.volume);\n        this.settings.muted = this.media.muted;\n\n        // autoplay:\n        // if (this.media.autoplay || this.settings.autoplay) {\n        //     this.settings.autoplay = true;\n        //     this.media.autoplay = false;\n        // }\n\n        // loop:\n        if (this.media.loop) {\n            this.settings.loop = true;\n        }\n        if (this.settings.loop) {\n            this.media.loop = true;\n        }\n\n        // poster:\n        const media = <HTMLVideoElement> this.media;\n        if (media.poster && !this.settings.poster) {\n            this.settings.poster = media.poster;\n            if (this.media.controls) {\n                media.poster = '';\n            }\n        }\n\n        // controls:\n        if (!!this.media.controls || this.settings.controls) {\n            this.buildUI();\n            this.media.controls = false;\n            this.media.removeAttribute('controls');\n        }\n\n        this.bind();\n\n        // seek to param or to local storage:\n        !this.seekToParams() && this.settings.cacheTime && this.seekToCached();\n\n        // set cached volume:\n        const cachedVolume = getStorageItem(PlayerStorage.VOLUME);\n        this.ui && this.ui.volume?.toggle(this.settings.muted);\n        this.setVolume(parseFloat(cachedVolume) || this.media.volume);\n\n        // set playback rate:\n        const cachedSpeed = getStorageItem(PlayerStorage.SPEED);\n        this.setSpeed(parseFloat(cachedSpeed) || 1);\n    }\n\n\n\n    protected createPlayer(): void {\n        this.media = this.view.querySelector('audio, video');\n        if (!this.media) {\n            console.error('Video/Audio component must contain html `<audio>` or `<video>` element');\n            return;\n        }\n\n        this.isAudio = this.media.tagName === 'AUDIO';\n    }\n\n\n\n    protected buildUI(): void {\n        super.buildUI();\n        this.loadCaptions();\n    }\n\n\n\n    protected loadCaptions(): void {\n        const captionsEl = this.view.querySelector('.js-player-cc') as HTMLElement;\n        captionsEl && this.ui && (this.ui.captions = new VideoCaptions(captionsEl, this.view));\n    }\n\n\n\n    protected bindPlayer(): void {\n        this.media.addEventListener('loadeddata', () => this.onLoaded());\n        this.media.addEventListener('loadedmetadata', () => this.onLoaded());\n        this.media.addEventListener('durationchange', () => this.onDurationChange());\n        this.media.addEventListener('updateMediaState', () => this.onDurationChange());\n        this.media.addEventListener('progress', () => this.onProgress());\n        this.media.addEventListener('updateMediaState', () => this.onProgress());\n        this.media.addEventListener('timeupdate', () => this.onTimeupdate());\n        this.media.addEventListener('play', () => this.onPlay());\n        this.media.addEventListener('canplay', () => this.onCanplay());\n        this.media.addEventListener('playing', () => this.onPlaying());\n        this.media.addEventListener('pause', () => this.onPause());\n        this.media.addEventListener('waiting', () => this.onWaiting());\n        this.media.addEventListener('ended', () => this.onEnd());\n        this.media.addEventListener('error', e => this.onError(e));\n\n        if (this.media.readyState >= MediaState.HAVE_CURRENT_DATA) {\n            this.onLoaded();\n        }\n    }\n\n\n\n    protected unbindPlayer(): void {\n        this.media.removeEventListener('loadeddata', () => this.onLoaded());\n        this.media.removeEventListener('loadedmetadata', () => this.onLoaded());\n        this.media.removeEventListener('durationchange', () => this.onDurationChange());\n        this.media.removeEventListener('updateMediaState', () => this.onDurationChange());\n        this.media.removeEventListener('progress', () => this.onProgress());\n        this.media.removeEventListener('updateMediaState', () => this.onProgress());\n        this.media.removeEventListener('timeupdate', () => this.onTimeupdate());\n        this.media.removeEventListener('play', () => this.onPlay());\n        this.media.removeEventListener('canplay', () => this.onCanplay());\n        this.media.removeEventListener('playing', () => this.onPlaying());\n        this.media.removeEventListener('pause', () => this.onPause());\n        this.media.removeEventListener('waiting', () => this.onWaiting());\n        this.media.removeEventListener('ended', () => this.onEnd());\n        this.media.removeEventListener('error', e => this.onError(e));\n    }\n\n\n\n    protected onLoaded(): void {\n        this.ui && this.ui.captions?.load(this.media);\n        this.updateTime();\n    }\n\n\n    protected onDurationChange(): void {\n        this.updateTime();\n    }\n\n\n    protected onProgress(): void {\n        this.updateTime();\n    }\n\n\n    protected onTimeupdate(): void {\n        this.constrainTime();\n        this.updateTime();\n    }\n\n\n\n    protected onError(e): void {\n        if (this.view && e.target.networkState && e.target.networkState === 3) {\n            console.warn(`Can't load media ${(e.target as HTMLMediaElement).src}`);\n            this.view.classList.add('is-error');\n        }\n    }\n\n\n    protected onBeforeunload() {\n        this.cacheTimePosition(true);\n    }\n\n\n\n    protected updateTime(): void {\n\n        if (!this.media) { return; }\n\n        const current = this.getCurrentTime();\n        const duration = this.getDuration();\n        const { buffered } = this.media;\n        const bufferedTime = buffered && buffered.length ? buffered.end(0) : 0;\n\n        this.ui.time.update({ duration, current }, this.settings.timeFormatLong);\n        this.ui.timeline.update({ duration, buffered: bufferedTime, current });\n        this.ui.popups.check(current);\n\n        this.view.classList.toggle('is-started', current > this.settings.readyTime);\n\n        this.cacheTimePosition();\n        this.trigger(PlayerEvents.TIME_UPDATE, current);\n    }\n\n\n\n    protected seekToParams(): boolean {\n        const time = (new URLSearchParams(window.location.search)).get('time');\n        if (time) {\n            this.seekToTime(parseInt(time, 10));\n            return true;\n        }\n        return false;\n    }\n\n\n\n    protected seekToCached(): void {\n        const path = normalizeUrl(window.location.pathname);\n        const cachedTime = getStorageItem(PlayerStorage.SEEK + path);\n        cachedTime && this.seekToTime(parseFloat(cachedTime));\n    }\n\n\n\n    protected cacheTimePosition(force?: boolean): void {\n        const path = normalizeUrl(window.location.pathname);\n        const time = this.getCurrentTime() >= this.getDuration() - 1 ? 0 : this.getCurrentTime();\n        (!browser.ios || force) && setStorageItem(PlayerStorage.SEEK + path, `${time}`);\n    }\n\n\n\n    protected getDuration(): number {\n        return this.settings.duration || this.media.duration;\n    }\n\n\n    protected getStart(): number {\n        return this.settings.timeFrom || 0;\n    }\n\n\n    protected getCurrentTime(): number {\n        return this.media.currentTime - this.getStart();\n    }\n\n\n    protected constrainTime(): void {\n\n        if (!this.media) { return; }\n\n        if (this.media.currentTime < this.getStart()) {\n            this.media.currentTime = this.getStart();\n            this.pause();\n        }\n\n        if (this.media.currentTime === this.getStart() + this.getDuration()) {\n            this.pause();\n            this.onEnd();\n            return;\n        }\n\n        if (this.media.currentTime > this.getStart() + this.getDuration()) {\n            this.media.currentTime = this.getStart() + this.getDuration();\n        }\n    }\n}\n","// eslint-disable-next-line no-shadow\nexport enum MediaState {\n    HAVE_NOTHING,\n    HAVE_METADATA,\n    HAVE_CURRENT_DATA,\n    HAVE_FUTURE_DATA,\n    HAVE_ENOUGH_DATA,\n}\n\n\n\nexport class PlayerStorage {\n    public static CC_ACTIVE: string = 'active';\n    public static CC_INDEX: string = 'captions';\n    public static CC_NOT_ACTIVE: string = 'not-active';\n    public static CC: string = 'cc';\n    public static SEEK: string = 'seek';\n    public static SPEED: string = 'speed';\n    public static VOLUME: string = 'volume';\n}\n\n\n\nexport type PopupData = {\n    url: string;\n    session: number;\n    timeStart: number;\n    title: string;\n    color: string;\n    description: string;\n    image: string;\n    type: string;\n    shown?: boolean;\n    timeline?;\n}\n","import { getStorageItem, setStorageItem } from '../../Utils';\nimport { PlayerStorage } from './Video.types';\n\n\nexport class VideoCaptions {\n\n\n    protected tracks: TextTrackList | TextTrackList[];\n    protected currentIndex: number;\n    protected isActive: boolean;\n    private captions: HTMLElement;\n    private btn: HTMLButtonElement;\n    private listButtons: HTMLLIElement[];\n    private timeout: ReturnType<typeof setTimeout>;\n\n\n\n    constructor(protected view: HTMLElement, protected playerEl: HTMLElement) {\n        this.view = view;\n        this.playerEl = playerEl;\n        this.btn = view.querySelector('.js-player-cc-btn');\n        this.captions = playerEl.querySelector('.js-player-cc-text');\n        this.listButtons = [...view.querySelectorAll('.js-player-cc-item')] as HTMLLIElement[];\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.btn = null;\n        this.captions = null;\n        this.listButtons = null;\n        this.unloadCC();\n        this.tracks = null;\n        this.currentIndex = null;\n    }\n\n\n\n    public load(media: HTMLMediaElement | HTMLMediaElement[]): void {\n        if (!Array.isArray(media) && media.textTracks.length > 0) {\n            this.playerEl.classList.add('has-cc');\n            this.tracks = media.textTracks;\n            [...this.tracks].forEach((track: TextTrack) => { track.mode = 'hidden'; });\n        } else {\n            this.playerEl.classList.remove('has-cc');\n        }\n\n        this.checkLocalStorage();\n    }\n\n\n\n    public toggle(): void {\n        this.isActive = !this.isActive;\n        setStorageItem(PlayerStorage.CC, this.isActive ? PlayerStorage.CC_ACTIVE : PlayerStorage.CC_NOT_ACTIVE);\n\n        if (this.isActive) {\n            this.loadCC(this.currentIndex >= 0 ? this.currentIndex : 0);\n        } else {\n            this.unloadCC();\n        }\n\n        this.view.classList.add('is-updating');\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n    }\n\n\n\n    public showNative(): void {\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => {\n            track.mode = track.mode === 'hidden' ? 'showing' : 'disabled';\n        });\n    }\n\n\n\n    public hideNative(): void {\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => {\n            track.mode = track.mode === 'showing' ? 'hidden' : 'disabled';\n        });\n    }\n\n\n\n    protected loadCC(index: number): void {\n\n        if (Array.isArray(this.tracks)) { return; }\n\n        this.isActive = true;\n        this.currentIndex = index;\n\n        setStorageItem(PlayerStorage.CC_INDEX, `${index}`);\n        setStorageItem(PlayerStorage.CC, PlayerStorage.CC_ACTIVE);\n\n        this.loadTracklist(this.tracks);\n        this.updateButtons();\n    }\n\n\n\n    protected loadTracklist(tracklist: TextTrackList): void {\n        if (!tracklist) { return; }\n\n        [...tracklist].forEach((track: TextTrack, i: number) => {\n            track.mode = i === this.currentIndex ? 'hidden' : 'disabled';\n        });\n\n        const track = tracklist[this.currentIndex];\n        const { cues } = track;\n\n        for (let i = 0; i < cues.length; ++i) {\n            const cue: VTTCue = cues[i] as VTTCue;\n            cue.onenter = this.onCueEnter;\n            cue.onexit = this.onCueExit;\n        }\n    }\n\n\n\n    protected unloadCC(): void {\n        this.isActive = false;\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => { track.mode = 'disabled'; });\n        this.updateButtons();\n        setStorageItem(PlayerStorage.CC, PlayerStorage.CC_NOT_ACTIVE);\n    }\n\n\n\n    protected updateButtons(): void {\n        this.listButtons.forEach((btn, i) => {\n            const isCurrent = (!this.isActive && i === 0) || (this.isActive && i - 1 === this.currentIndex);\n            btn.parentElement.classList.toggle('is-active', isCurrent);\n        });\n        this.playerEl.classList.toggle('has-captions-on', this.isActive);\n    }\n\n\n\n    protected onCueEnter = (e: Event): any => {\n        this.captions && (this.captions.style.display = 'block');\n        this.captions && (this.captions.innerHTML = `<span>${(e.currentTarget as VTTCue).text}</span>`);\n    };\n\n\n\n    protected onCueExit = () => {\n        this.captions && (this.captions.style.display = 'none');\n    };\n\n\n\n    protected checkLocalStorage(): void {\n        if (getStorageItem(PlayerStorage.CC) === PlayerStorage.CC_ACTIVE) {\n            this.loadCC(parseInt(PlayerStorage.CC_INDEX, 10) || 0);\n        }\n    }\n\n\n\n    private bind(): void {\n        this.btn?.addEventListener('click', this.onToggleBtnClick);\n        this.listButtons?.forEach(btn => btn.addEventListener('click', this.onCCTrackClick));\n    }\n\n\n\n    private unbind(): void {\n        this.btn?.removeEventListener('click', this.onToggleBtnClick);\n        this.listButtons?.forEach(btn => btn.removeEventListener('click', this.onCCTrackClick));\n    }\n\n\n\n    private onToggleBtnClick = (e): void => {\n        e.stopPropagation();\n        this.toggle();\n    };\n\n\n\n    private onCCTrackClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        const index = parseInt(e.currentTarget.dataset.index || -1, 10);\n        index < 0 ? this.unloadCC() : this.loadCC(index);\n    };\n}\n","/* eslint-disable consistent-return */\n/* eslint-disable array-callback-return */\n/* eslint-disable max-classes-per-file */\nimport { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../Handler';\nimport { IBreakpoint } from '../Breakpoint';\nimport { Component } from '../components/Component';\nimport { components } from '../Classes';\nimport { Images } from '../widgets/Images';\n\n\nexport class PageEvents {\n    public static readonly PROGRESS: string = 'progress';\n    public static readonly COMPLETE: string = 'complete';\n    public static readonly CHANGE: string = 'append';\n}\n\n\n\nexport class Page extends Handler {\n\n    public components: Array<Component>;\n\n\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement, options?) {\n        super();\n        this.view.style.opacity = '0';\n\n        this.components = [];\n        this.buildComponents(this.view.parentNode.querySelectorAll('[data-component]'));\n    }\n\n\n\n    /**\n     * preload necessary assets:\n     * @return {Promise<boolean>} loading images promise\n     */\n    public preload(): Promise<void> {\n        return Images.preload(this.view.querySelectorAll('img.preload'))\n            .then(() => {\n                this.trigger(PageEvents.COMPLETE);\n            });\n    }\n\n\n\n    /**\n     * check if any Component can be changed after onState\n     * @return {boolean} returns true when one of the components\n     * takes action in onState function call\n     */\n    public onState(): boolean {\n        let changed: boolean = !!false;\n\n        for (let i = 0; i < this.components.length; i += 1) {\n            const component = this.components[i];\n            const componentChanged: boolean = component.onState();\n            if (!changed && !!componentChanged) {\n                changed = true;\n            }\n        }\n\n        return changed;\n    }\n\n\n\n    /**\n     * page entering animation\n     * @param {number} delay animation delay\n     */\n    public animateIn(delay?: number): Promise<void> {\n        return new Promise(resolve => {\n            for (let i = 0; i < this.components.length; i += 1) {\n                this.components[i].animateIn(i, delay);\n            }\n\n            gsap.to(this.view, {\n                duration: 0.3,\n                opacity: 1,\n                onComplete: () => resolve(),\n            });\n        });\n    }\n\n\n\n    /**\n     * page exit animation\n     * (called after new content is loaded and before is rendered)\n     * @return {Promise<boolean>} animation promise\n     */\n    public animateOut(): Promise<void> {\n        // animation of the page:\n        const pageAnimationPromise = new Promise<void>(resolve => {\n            gsap.to(this.view, {\n                duration: 0.2,\n                onComplete: (): void => {\n                    document.body.scrollTop = 0;\n                },\n                opacity: 0,\n            });\n            resolve();\n        });\n\n        // animations of all components:\n        const componentAnimations: Promise<void>[] = this.components.map(obj => obj.animateOut());\n\n        // return one promise waiting for all animations:\n        return new Promise<void>(resolve => {\n            const allPromises: Promise<void>[] = componentAnimations.concat(pageAnimationPromise);\n\n            Promise.all<void>(allPromises).then(() => {\n                resolve();\n            });\n        });\n    }\n\n\n\n    /**\n     * resize handler\n     * @param {[type]} wdt        window width\n     * @param {[type]} hgt        window height\n     * @param {[type]} breakpoint IBreakpoint object\n     */\n    // eslint-disable-next-line no-unused-vars\n    public resize(wdt: number, hgt: number, breakpoint: IBreakpoint, bpChanged?: boolean): void {\n        this.components.forEach(item => {\n            item.resize(wdt, hgt);\n        });\n    }\n\n\n\n    /**\n     * cleanup when closing Page\n     */\n    public destroy(): void {\n        this.components.forEach(item => item.destroy());\n        this.components = [];\n        this.view = null;\n        super.destroy();\n    }\n\n\n\n    protected buildComponents(componentsList: NodeList): void {\n        this.components = [];\n\n        this.components = [...componentsList].map(el => {\n            const element = <HTMLElement>el;\n            const name = element.dataset.component;\n            if (name !== undefined && components[name]) {\n                let options: Object;\n                if (element.dataset.options) {\n                    options = JSON.parse(element.dataset.options);\n                }\n                const component = new components[name](element, options);\n                return component;\n            }\n            window.console.warn('There is no `%s` component!', name);\n        }).filter(Boolean);\n    }\n\n\n\n    private onComponentChange = (el): void => {\n        this.buildComponents(el.querySelectorAll('[data-component]'));\n        this.trigger(PageEvents.CHANGE, el);\n    };\n\n\n\n    // short call\n    // eslint-disable-next-line no-unused-vars\n    private callAll(fn: string, ...args): void {\n        for (let i = 0; i < this.components.length; i += 1) {\n            const component = this.components[i];\n            if (typeof component[fn] === 'function') {\n                component[fn](...args);\n            }\n        }\n    }\n}\n","/* eslint-disable no-undef */\n/// <reference path=\"../definitions/twig.d.ts\" />\n\n// eslint-disable-next-line max-classes-per-file\nexport class TemplateNames {\n    public static LIGHTBOX = 'lightbox';\n    public static LIVESEARCH = 'livesearch';\n    public static PLAYER = 'player';\n}\n\nexport class Templates {\n    public static get(name: string): Twig.Template {\n        const tmpl = document.querySelector(`#tmpl-${name}`);\n        if (!tmpl) {\n            console.warn('There is no `%s` template!', name);\n            return null;\n        }\n        return Twig.twig({ data: tmpl.innerHTML });\n    }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-case-declarations */\nimport { PushStates } from '../PushStates';\nimport { Recaptcha } from './Recaptcha';\nimport { serializeObject } from '../Utils';\n\nexport interface IApiData {\n    url?: string;\n    beforeCall?: string;\n    callback?: string;\n    formSelector?: string;\n    // tslint:disable-next-line: no-any\n    params?: any;\n    action?: 'POST' | 'DELETE' | 'GET' | 'PUT' | 'PATCH';\n}\n\ninterface IApiElement extends HTMLElement {\n    api: IApiData;\n}\n\n\nexport class API {\n    private static beforeCalls = {\n\n\n        validate(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? \"It seems there's an issue with the email you entered. <br> Please double-check and try again.\" : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                Promise.all([Recaptcha ? Recaptcha.check(el as HTMLFormElement) : null]).then(() => {\n                    API.callIt(data, el);\n                    el.querySelectorAll('.js-error').forEach(errorEl => {\n                        errorEl.innerHTML = '';\n                        errorEl.classList.remove('is-error');\n                    });\n                    el.classList.remove('has-errors');\n                });\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n        validateBlur(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                el.querySelectorAll('.js-error').forEach(errorEl => {\n                    errorEl.innerHTML = '';\n                    errorEl.classList.remove('is-error');\n                });\n                el.classList.remove('has-errors');\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n    };\n\n\n    private static callbacks = {\n\n\n        onSubscribe(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                const div = document.createElement('div');\n                div.classList.add('js-message', 'message');\n                el.append(div);\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        onSendMessage(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                el.append('<div class=\"js-message message\">');\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        reload: (): void => {\n            PushStates.reload();\n        },\n    };\n\n\n    public static bind(): void {\n        if (document.querySelectorAll('[data-api]:not(form)')) {\n            document.querySelectorAll('[data-api]:not(form)').forEach(apiEl => {\n                apiEl.removeEventListener('click', API.onAction);\n                apiEl.addEventListener('click', API.onAction);\n            });\n        }\n\n        if (document.querySelectorAll('form[data-api]')) {\n            document.querySelectorAll('form[data-api]').forEach(apiFormEl => {\n                apiFormEl.removeEventListener('submit', API.onAction);\n                apiFormEl.addEventListener('submit', API.onAction);\n                apiFormEl.setAttribute('novalidate', 'novalidate');\n\n                apiFormEl.querySelectorAll('input[required').forEach(input => {\n                    input.addEventListener('blur', () => {\n                        const data: IApiData = { ...JSON.parse(apiFormEl.getAttribute('data-api')) };\n                        API.beforeCalls.validateBlur(data, apiFormEl as HTMLElement);\n                    });\n                });\n            });\n        }\n    }\n\n\n    public static callIt(dataApi: IApiData, el: HTMLElement, customCallback?: Function): Promise<any> {\n        const data = API.preprocessData(dataApi, el);\n\n        el.classList.add('is-doing-request');\n\n        const action = data.action || 'POST';\n        delete data.action;\n\n        const url = data.url || window.location.pathname;\n        delete data.url;\n\n        return new Promise<any>((resolve, reject) => {\n            el.classList.remove('is-doing-request');\n\n            const dataBody = new URLSearchParams(data as any);\n\n            fetch(url, {\n                method: action,\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                body: dataBody,\n            })\n                .then(response => response.json())\n                .then(response => {\n                    if (data.callback) {\n                        API.onSuccess(data, el, response);\n                    }\n\n                    if (customCallback && typeof customCallback === 'function') {\n                        customCallback(data, el, response);\n                    }\n\n                    resolve(response);\n                })\n                .catch(error => {\n                    console.warn(`API error: ${error}`, data);\n                    reject(error);\n                });\n        });\n    }\n\n\n    private static preprocessData(data: IApiData, el: HTMLElement): IApiData {\n        // get data if api called on form element:\n        if (el.matches('form')) {\n            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;\n            data = Object.assign(data, serializeObject(el as HTMLFormElement));\n        }\n\n        // update data if api called on link element:\n        if (el.matches('[href]')) {\n            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;\n        }\n\n        // get additional data from external form:\n        if (data.formSelector) {\n            data = Object.assign(data, serializeObject(document.querySelector(data.formSelector)));\n            delete data.formSelector;\n        }\n\n        // flatten:\n        if (data.params) {\n            data = Object.assign(data, data.params);\n            delete data.params;\n        }\n\n        return data;\n    }\n\n\n    private static onAction = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const el = e.currentTarget as IApiElement;\n        const data: IApiData = { ...JSON.parse(el.getAttribute('data-api')) };\n        // console.log(data, el);\n\n        // beforeCall handler:\n        if (data.beforeCall) {\n            if (data.beforeCall in API.beforeCalls) {\n                API.beforeCalls[data.beforeCall](data, el);\n                return;\n            }\n        }\n\n        API.callIt(data, el);\n    };\n\n\n    private static onSuccess = (data: IApiData, el: HTMLElement, response): void => {\n        if (data.callback) {\n            if (data.callback in API.callbacks) {\n                API.callbacks[data.callback](data, el, response);\n            }\n        }\n    };\n\n\n    public static refresh = () => {\n        const forms = [...document.querySelectorAll('form')];\n\n        forms.forEach(form => {\n            const inputs = form.querySelectorAll('input');\n            const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];\n            const errorMessages = form.querySelectorAll('.js-error');\n            form.classList.remove('is-doing-request', 'is-completed', 'has-errors');\n\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const message of errorMessages) {\n                message.innerHTML = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const input of inputs) {\n                input.value = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const err of errors) {\n                err.classList.remove('is-error', 'has-errors');\n            }\n        });\n    };\n}\n","import { API } from './Api';\nimport { CSSAnimate } from './CSSAnimate';\nimport { Expand } from './Expand';\nimport { Images } from './Images';\nimport { Recaptcha } from './Recaptcha';\n\nexport default class Widgets {\n\n    public static bind(): void {\n\n        API.bind();\n        CSSAnimate.bind();\n        Expand.bind();\n        Images.bind();\n        Recaptcha.bind();\n    }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-case-declarations */\nimport { PushStates } from '../PushStates';\nimport { Recaptcha } from './Recaptcha';\nimport { serializeObject } from '../Utils';\n\nexport interface IApiData {\n    url?: string;\n    beforeCall?: string;\n    callback?: string;\n    formSelector?: string;\n    // tslint:disable-next-line: no-any\n    params?: any;\n    action?: 'POST' | 'DELETE' | 'GET' | 'PUT' | 'PATCH';\n}\n\ninterface IApiElement extends HTMLElement {\n    api: IApiData;\n}\n\n\nexport class API {\n    private static beforeCalls = {\n\n\n        validate(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? \"It seems there's an issue with the email you entered. <br> Please double-check and try again.\" : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                Promise.all([Recaptcha ? Recaptcha.check(el as HTMLFormElement) : null]).then(() => {\n                    API.callIt(data, el);\n                    el.querySelectorAll('.js-error').forEach(errorEl => {\n                        errorEl.innerHTML = '';\n                        errorEl.classList.remove('is-error');\n                    });\n                    el.classList.remove('has-errors');\n                });\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n        validateBlur(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                el.querySelectorAll('.js-error').forEach(errorEl => {\n                    errorEl.innerHTML = '';\n                    errorEl.classList.remove('is-error');\n                });\n                el.classList.remove('has-errors');\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n    };\n\n\n    private static callbacks = {\n\n\n        onSubscribe(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                const div = document.createElement('div');\n                div.classList.add('js-message', 'message');\n                el.append(div);\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        onSendMessage(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                el.append('<div class=\"js-message message\">');\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        reload: (): void => {\n            PushStates.reload();\n        },\n    };\n\n\n    public static bind(): void {\n        if (document.querySelectorAll('[data-api]:not(form)')) {\n            document.querySelectorAll('[data-api]:not(form)').forEach(apiEl => {\n                apiEl.removeEventListener('click', API.onAction);\n                apiEl.addEventListener('click', API.onAction);\n            });\n        }\n\n        if (document.querySelectorAll('form[data-api]')) {\n            document.querySelectorAll('form[data-api]').forEach(apiFormEl => {\n                apiFormEl.removeEventListener('submit', API.onAction);\n                apiFormEl.addEventListener('submit', API.onAction);\n                apiFormEl.setAttribute('novalidate', 'novalidate');\n\n                apiFormEl.querySelectorAll('input[required').forEach(input => {\n                    input.addEventListener('blur', () => {\n                        const data: IApiData = { ...JSON.parse(apiFormEl.getAttribute('data-api')) };\n                        API.beforeCalls.validateBlur(data, apiFormEl as HTMLElement);\n                    });\n                });\n            });\n        }\n    }\n\n\n    public static callIt(dataApi: IApiData, el: HTMLElement, customCallback?: Function): Promise<any> {\n        const data = API.preprocessData(dataApi, el);\n\n        el.classList.add('is-doing-request');\n\n        const action = data.action || 'POST';\n        delete data.action;\n\n        const url = data.url || window.location.pathname;\n        delete data.url;\n\n        return new Promise<any>((resolve, reject) => {\n            el.classList.remove('is-doing-request');\n\n            const dataBody = new URLSearchParams(data as any);\n\n            fetch(url, {\n                method: action,\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                body: dataBody,\n            })\n                .then(response => response.json())\n                .then(response => {\n                    if (data.callback) {\n                        API.onSuccess(data, el, response);\n                    }\n\n                    if (customCallback && typeof customCallback === 'function') {\n                        customCallback(data, el, response);\n                    }\n\n                    resolve(response);\n                })\n                .catch(error => {\n                    console.warn(`API error: ${error}`, data);\n                    reject(error);\n                });\n        });\n    }\n\n\n    private static preprocessData(data: IApiData, el: HTMLElement): IApiData {\n        // get data if api called on form element:\n        if (el.matches('form')) {\n            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;\n            data = Object.assign(data, serializeObject(el as HTMLFormElement));\n        }\n\n        // update data if api called on link element:\n        if (el.matches('[href]')) {\n            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;\n        }\n\n        // get additional data from external form:\n        if (data.formSelector) {\n            data = Object.assign(data, serializeObject(document.querySelector(data.formSelector)));\n            delete data.formSelector;\n        }\n\n        // flatten:\n        if (data.params) {\n            data = Object.assign(data, data.params);\n            delete data.params;\n        }\n\n        return data;\n    }\n\n\n    private static onAction = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const el = e.currentTarget as IApiElement;\n        const data: IApiData = { ...JSON.parse(el.getAttribute('data-api')) };\n        // console.log(data, el);\n\n        // beforeCall handler:\n        if (data.beforeCall) {\n            if (data.beforeCall in API.beforeCalls) {\n                API.beforeCalls[data.beforeCall](data, el);\n                return;\n            }\n        }\n\n        API.callIt(data, el);\n    };\n\n\n    private static onSuccess = (data: IApiData, el: HTMLElement, response): void => {\n        if (data.callback) {\n            if (data.callback in API.callbacks) {\n                API.callbacks[data.callback](data, el, response);\n            }\n        }\n    };\n\n\n    public static refresh = () => {\n        const forms = [...document.querySelectorAll('form')];\n\n        forms.forEach(form => {\n            const inputs = form.querySelectorAll('input');\n            const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];\n            const errorMessages = form.querySelectorAll('.js-error');\n            form.classList.remove('is-doing-request', 'is-completed', 'has-errors');\n\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const message of errorMessages) {\n                message.innerHTML = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const input of inputs) {\n                input.value = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const err of errors) {\n                err.classList.remove('is-error', 'has-errors');\n            }\n        });\n    };\n}\n","/**\n * Fire single one-way animations on hover.\n *\n * Listeners are bound on `[data-cssanimate]` elements themselves\n * or on elements specified by selector passed in the dataset:\n * ```<div data-cssanimate=\".js-child\"><span class=\"js-child\">```\n *\n * To fire the animation use `is-animating` class which is added on `mouseenter` event.\n * ```[data-cssanimate].is-animating { animation: customAnimation; }```\n *\n * It can be used with both: css-transition and css-animation;\n */\n\nexport class CSSAnimate {\n\n\n    public static bind(): void {\n        [...document.querySelectorAll('[data-cssanimate]')].forEach(el => {\n            const selector = (el as HTMLElement).dataset.cssanimate;\n            const target = selector ? el.querySelector(selector) : el;\n            target?.addEventListener('transitionend', CSSAnimate.onAnimationEnd);\n            target?.addEventListener('animationend', CSSAnimate.onAnimationEnd);\n            el.addEventListener('mouseenter', CSSAnimate.onMouseEnter);\n        });\n    }\n\n\n    private static onAnimationEnd = e => {\n        e.target.closest('[data-cssanimate]').classList.remove('is-animating');\n    };\n\n\n    private static onMouseEnter = e => {\n        e.currentTarget.classList.add('is-animating');\n    };\n}\n","export class Expand {\n\n    public static resize = () => {\n        this.setMaxHeight();\n    };\n\n\n\n    public static bind(): void {\n\n        this.setMaxHeight();\n\n        ([...document.querySelectorAll('[data-expand][id]')] as HTMLElement[]).forEach(element => {\n            const toggleButton = document.querySelector(`[aria-controls=\"${element.id}\"]`) as HTMLElement;\n            toggleButton?.addEventListener('click', Expand.onAriaControlsClick);\n            // console.log(element, toggleButton);\n        });\n    }\n\n\n\n    public static unbind = (): void => {\n\n        ([...document.querySelectorAll('[data-expand][id]')] as HTMLElement[]).forEach(element => {\n            const toggleButton = element.querySelector('[aria-controls]') as HTMLElement;\n\n            toggleButton?.removeEventListener('click', Expand.onAriaControlsClick);\n        });\n    };\n\n\n\n    private static onAriaControlsClick = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const target = e.currentTarget as HTMLElement;\n        const isExpanded = target.getAttribute('aria-expanded') === 'true';\n\n        isExpanded ? this.collapse(target) : this.expand(target);\n    };\n\n\n\n    private static expand = (target: HTMLElement) => {\n        target.setAttribute('aria-expanded', 'true');\n        target.parentElement.classList.add('is-expanded');\n        (target.querySelector('.js-expand-text') as HTMLElement).innerText = target.getAttribute('data-expanded-text');\n        document.getElementById(target.getAttribute('aria-controls')).classList.add('is-expanded');\n    };\n\n\n\n    private static collapse = (target: HTMLElement) => {\n        target.setAttribute('aria-expanded', 'false');\n        target.parentElement.classList.remove('is-expanded');\n        (target.querySelector('.js-expand-text') as HTMLElement).innerText = target.getAttribute('data-hidden-text');\n        document.getElementById(target.getAttribute('aria-controls')).classList.remove('is-expanded');\n    };\n\n\n\n    private static setMaxHeight = () => {\n        ([...document.querySelectorAll('[data-expand][id]')] as HTMLElement[]).forEach(element => {\n            const { height } = element.children[0].getBoundingClientRect();\n            element.style.maxHeight = `${height}px`;\n        });\n    };\n}\n","/// <reference path=\"../definitions/imagesloaded.d.ts\" />\n\n\nexport class Images {\n\n\n    /**\n     * preload images\n     * @param {NodeListOf<HTMLImageElement>} imgElements images to preload\n     * @return {Promise<void>} loading images promise\n     */\n    public static preload(imgElements: NodeListOf<HTMLImageElement>): Promise<void> {\n\n        if (!imgElements || !imgElements.length) {\n            return Promise.resolve();\n        }\n\n        return new Promise<void>(resolve => {\n            imagesLoaded(imgElements).on('always', () => resolve());\n        });\n\n    }\n\n\n    /**\n     * listen to all images loaded event\n     * mark them as loaded\n     */\n    public static bind(): void {\n        imagesLoaded && imagesLoaded(document.body, Images.onLoaded);\n    }\n\n\n    /**\n     * imagesLoaded successful callback\n     */\n    private static onLoaded = instance => {\n\n        [...instance.images].forEach(({ img, isLoaded }) => {\n\n            if (isLoaded) {\n                img.classList.remove('is-loading');\n                img.classList.add('is-loaded');\n                img.closest('figure')?.classList.add('is-loaded');\n                img.closest('.image')?.classList.add('is-loaded');\n            }\n        });\n    };\n}\n","/* eslint-disable no-undef */\n/// <reference path=\"../definitions/grecaptcha.d.ts\" />\n\nimport { getScript } from '../Utils';\n\n\nexport class Recaptcha {\n    private static SITE_KEY: string;\n    private static inputSelector = '[data-recaptcha]';\n\n\n    public static bind(selector?: any): void {\n        const target = typeof selector === 'undefined' ? document.body : selector;\n\n        if (!document.querySelector('[data-recaptchakey]')) { return; }\n\n        Recaptcha.SITE_KEY = Recaptcha.SITE_KEY\n        || (document.querySelector('[data-recaptchakey]') as HTMLElement).dataset.recaptchakey;\n\n        if (!target.querySelector(Recaptcha.inputSelector)) { return; }\n\n        if (typeof grecaptcha === 'undefined') {\n            getScript(\n                `//www.google.com/recaptcha/api.js?render=${Recaptcha.SITE_KEY}`,\n                () => Recaptcha.attach(target.querySelector(Recaptcha.inputSelector)),\n            );\n        } else {\n            Recaptcha.attach(target.querySelector(Recaptcha.inputSelector));\n        }\n    }\n\n\n    // linked with `Widgets.Form`\n    public static check(form: HTMLFormElement): Promise<string> {\n        return new Promise<string>(resolve => {\n            const action = form.getAttribute('action').split('/').pop().replace(/[^0-9a-z]/gi, '') || 'action';\n            grecaptcha.execute(Recaptcha.SITE_KEY, { action })\n                .then(token => {\n                    Recaptcha.onExecute(form, token);\n                    resolve(token);\n                });\n        });\n    }\n\n\n    private static attach(target: HTMLElement): void {\n        grecaptcha.ready(() => {\n            target.closest('form').data = { Recaptcha };\n            target.closest('form').classList.add('has-recaptcha');\n        });\n    }\n\n\n    private static onExecute(form: HTMLFormElement, token: string): void {\n        if (!form.querySelector('[name=token]')) { form.append('<input name=\"token\" type=\"hidden\" value=\"\">'); }\n        const input = form.querySelector('[name=token]') as HTMLInputElement;\n        input.value = token;\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZ3NhcC9kaXN0L0N1c3RvbUVhc2UuanMiLCJub2RlX21vZHVsZXMvZ3NhcC9kaXN0L1Njcm9sbFRvUGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL2dzYXAvZGlzdC9TY3JvbGxUcmlnZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2dzYXAvZGlzdC9nc2FwLmpzIiwic3JjL3RzL0FuaW1hdGUudHMiLCJzcmMvdHMvQnJlYWtwb2ludC50cyIsInNyYy90cy9Ccm93c2VyLnRzIiwic3JjL3RzL0NsYXNzZXMudHMiLCJzcmMvdHMvSGFuZGxlci50cyIsInNyYy90cy9NZW51LnRzIiwic3JjL3RzL1B1c2hTdGF0ZXMudHMiLCJzcmMvdHMvU2Nyb2xsLnRzIiwic3JjL3RzL1NlYXJjaC50cyIsInNyYy90cy9TaXRlLnRzIiwic3JjL3RzL1V0aWxzLnRzIiwic3JjL3RzL2FuaW1hdGlvbnMvYWxsLnRzIiwic3JjL3RzL2FuaW1hdGlvbnMvZmFkZVVwLnRzIiwic3JjL3RzL2FuaW1hdGlvbnMvc2Nyb2xsL2hlcm8udHMiLCJzcmMvdHMvYW5pbWF0aW9ucy9zY3JvbGwvaW50ZXJ2aWV3cy50cyIsInNyYy90cy9jb21wb25lbnRzL0FjY29yZGVvbi50cyIsInNyYy90cy9jb21wb25lbnRzL0FjY29yZGVvbkxpc3QudHMiLCJzcmMvdHMvY29tcG9uZW50cy9BdWRpb1BsYXllci50cyIsInNyYy90cy9jb21wb25lbnRzL0NvbXBvbmVudC50cyIsInNyYy90cy9jb21wb25lbnRzL0xpZ2h0Ym94L0xpZ2h0Ym94LnRzIiwic3JjL3RzL2NvbXBvbmVudHMvTGlnaHRib3gvTGlnaHRib3hOYXYudHMiLCJzcmMvdHMvY29tcG9uZW50cy9MaWdodGJveC9MaWdodGJveFNsaWRlci50cyIsInNyYy90cy9jb21wb25lbnRzL0xpZ2h0Ym94L0xpZ2h0Ym94VHJhbnNjcmlwdC50cyIsInNyYy90cy9jb21wb25lbnRzL0xvYWQudHMiLCJzcmMvdHMvY29tcG9uZW50cy9Nb2RhbC50cyIsInNyYy90cy9jb21wb25lbnRzL01vcmUudHMiLCJzcmMvdHMvY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyLlRpbWUudHMiLCJzcmMvdHMvY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvUGxheWVyL1BsYXllci50eXBlcy50cyIsInNyYy90cy9jb21wb25lbnRzL1BsYXllci9QbGF5ZXIudXRpbHMudHMiLCJzcmMvdHMvY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyRnVsbHNjcmVlbi50cyIsInNyYy90cy9jb21wb25lbnRzL1BsYXllci9QbGF5ZXJQb3B1cHMudHMiLCJzcmMvdHMvY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyUG9zdGVyLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvUGxheWVyL1BsYXllclNldHRpbmdzLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvUGxheWVyL1BsYXllclRpbWVsaW5lLnRzIiwic3JjL3RzL2NvbXBvbmVudHMvUGxheWVyL1BsYXllclZvbHVtZS50cyIsInNyYy90cy9jb21wb25lbnRzL1BsYXllci9WaWRlby50cyIsInNyYy90cy9jb21wb25lbnRzL1BsYXllci9WaWRlby50eXBlcy50cyIsInNyYy90cy9jb21wb25lbnRzL1BsYXllci9WaWRlb0NhcHRpb25zLnRzIiwic3JjL3RzL3BhZ2VzL1BhZ2UudHMiLCJzcmMvdHMvdGVtcGxhdGVzL1RlbXBsYXRlcy50cyIsInNyYy90cy93aWRnZXRzL0FQSS50cyIsInNyYy90cy93aWRnZXRzL0FsbC50cyIsInNyYy90cy93aWRnZXRzL0FwaS50cyIsInNyYy90cy93aWRnZXRzL0NTU0FuaW1hdGUudHMiLCJzcmMvdHMvd2lkZ2V0cy9FeHBhbmQudHMiLCJzcmMvdHMvd2lkZ2V0cy9JbWFnZXMudHMiLCJzcmMvdHMvd2lkZ2V0cy9SZWNhcHRjaGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ptR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNQLENBQUM7SUFHTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQXFCLEVBQUUsS0FBYTtRQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUFFO1FBQ3hHLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFxQixDQUFDO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7O0FBbkRMLDhCQW9EQztBQWxEa0IsdUJBQWEsR0FBRyxrQkFBa0IsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cblx0dmFyIF9zdmdQYXRoRXhwID0gL1thY2hsbXFzdHZ6XXwoLT9cXGQqXFwuP1xcZCooPzplW1xcLStdP1xcZCspPylbMC05XS9pZyxcblx0ICAgIF9zY2llbnRpZmljID0gL1tcXCtcXC1dP1xcZCpcXC4/XFxkK2VbXFwrXFwtXT9cXGQrL2lnLFxuXHQgICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuXHQgICAgX3NpbiA9IE1hdGguc2luLFxuXHQgICAgX2NvcyA9IE1hdGguY29zLFxuXHQgICAgX2FicyA9IE1hdGguYWJzLFxuXHQgICAgX3NxcnQgPSBNYXRoLnNxcnQsXG5cdCAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcblx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xuXHR9LFxuXHQgICAgX3JvdW5kaW5nTnVtID0gMWU1LFxuXHQgICAgX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG5cdCAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBfcm91bmRpbmdOdW0pIC8gX3JvdW5kaW5nTnVtIHx8IDA7XG5cdH07XG5cdGZ1bmN0aW9uIHRyYW5zZm9ybVJhd1BhdGgocmF3UGF0aCwgYSwgYiwgYywgZCwgdHgsIHR5KSB7XG5cdCAgdmFyIGogPSByYXdQYXRoLmxlbmd0aCxcblx0ICAgICAgc2VnbWVudCxcblx0ICAgICAgbCxcblx0ICAgICAgaSxcblx0ICAgICAgeCxcblx0ICAgICAgeTtcblxuXHQgIHdoaWxlICgtLWogPiAtMSkge1xuXHQgICAgc2VnbWVudCA9IHJhd1BhdGhbal07XG5cdCAgICBsID0gc2VnbWVudC5sZW5ndGg7XG5cblx0ICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDIpIHtcblx0ICAgICAgeCA9IHNlZ21lbnRbaV07XG5cdCAgICAgIHkgPSBzZWdtZW50W2kgKyAxXTtcblx0ICAgICAgc2VnbWVudFtpXSA9IHggKiBhICsgeSAqIGMgKyB0eDtcblx0ICAgICAgc2VnbWVudFtpICsgMV0gPSB4ICogYiArIHkgKiBkICsgdHk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmF3UGF0aC5fZGlydHkgPSAxO1xuXHQgIHJldHVybiByYXdQYXRoO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXJjVG9TZWdtZW50KGxhc3RYLCBsYXN0WSwgcngsIHJ5LCBhbmdsZSwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcblx0ICBpZiAobGFzdFggPT09IHggJiYgbGFzdFkgPT09IHkpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cblx0ICByeCA9IF9hYnMocngpO1xuXHQgIHJ5ID0gX2FicyhyeSk7XG5cblx0ICB2YXIgYW5nbGVSYWQgPSBhbmdsZSAlIDM2MCAqIF9ERUcyUkFELFxuXHQgICAgICBjb3NBbmdsZSA9IF9jb3MoYW5nbGVSYWQpLFxuXHQgICAgICBzaW5BbmdsZSA9IF9zaW4oYW5nbGVSYWQpLFxuXHQgICAgICBQSSA9IE1hdGguUEksXG5cdCAgICAgIFRXT1BJID0gUEkgKiAyLFxuXHQgICAgICBkeDIgPSAobGFzdFggLSB4KSAvIDIsXG5cdCAgICAgIGR5MiA9IChsYXN0WSAtIHkpIC8gMixcblx0ICAgICAgeDEgPSBjb3NBbmdsZSAqIGR4MiArIHNpbkFuZ2xlICogZHkyLFxuXHQgICAgICB5MSA9IC1zaW5BbmdsZSAqIGR4MiArIGNvc0FuZ2xlICogZHkyLFxuXHQgICAgICB4MV9zcSA9IHgxICogeDEsXG5cdCAgICAgIHkxX3NxID0geTEgKiB5MSxcblx0ICAgICAgcmFkaWlDaGVjayA9IHgxX3NxIC8gKHJ4ICogcngpICsgeTFfc3EgLyAocnkgKiByeSk7XG5cblx0ICBpZiAocmFkaWlDaGVjayA+IDEpIHtcblx0ICAgIHJ4ID0gX3NxcnQocmFkaWlDaGVjaykgKiByeDtcblx0ICAgIHJ5ID0gX3NxcnQocmFkaWlDaGVjaykgKiByeTtcblx0ICB9XG5cblx0ICB2YXIgcnhfc3EgPSByeCAqIHJ4LFxuXHQgICAgICByeV9zcSA9IHJ5ICogcnksXG5cdCAgICAgIHNxID0gKHJ4X3NxICogcnlfc3EgLSByeF9zcSAqIHkxX3NxIC0gcnlfc3EgKiB4MV9zcSkgLyAocnhfc3EgKiB5MV9zcSArIHJ5X3NxICogeDFfc3EpO1xuXG5cdCAgaWYgKHNxIDwgMCkge1xuXHQgICAgc3EgPSAwO1xuXHQgIH1cblxuXHQgIHZhciBjb2VmID0gKGxhcmdlQXJjRmxhZyA9PT0gc3dlZXBGbGFnID8gLTEgOiAxKSAqIF9zcXJ0KHNxKSxcblx0ICAgICAgY3gxID0gY29lZiAqIChyeCAqIHkxIC8gcnkpLFxuXHQgICAgICBjeTEgPSBjb2VmICogLShyeSAqIHgxIC8gcngpLFxuXHQgICAgICBzeDIgPSAobGFzdFggKyB4KSAvIDIsXG5cdCAgICAgIHN5MiA9IChsYXN0WSArIHkpIC8gMixcblx0ICAgICAgY3ggPSBzeDIgKyAoY29zQW5nbGUgKiBjeDEgLSBzaW5BbmdsZSAqIGN5MSksXG5cdCAgICAgIGN5ID0gc3kyICsgKHNpbkFuZ2xlICogY3gxICsgY29zQW5nbGUgKiBjeTEpLFxuXHQgICAgICB1eCA9ICh4MSAtIGN4MSkgLyByeCxcblx0ICAgICAgdXkgPSAoeTEgLSBjeTEpIC8gcnksXG5cdCAgICAgIHZ4ID0gKC14MSAtIGN4MSkgLyByeCxcblx0ICAgICAgdnkgPSAoLXkxIC0gY3kxKSAvIHJ5LFxuXHQgICAgICB0ZW1wID0gdXggKiB1eCArIHV5ICogdXksXG5cdCAgICAgIGFuZ2xlU3RhcnQgPSAodXkgPCAwID8gLTEgOiAxKSAqIE1hdGguYWNvcyh1eCAvIF9zcXJ0KHRlbXApKSxcblx0ICAgICAgYW5nbGVFeHRlbnQgPSAodXggKiB2eSAtIHV5ICogdnggPCAwID8gLTEgOiAxKSAqIE1hdGguYWNvcygodXggKiB2eCArIHV5ICogdnkpIC8gX3NxcnQodGVtcCAqICh2eCAqIHZ4ICsgdnkgKiB2eSkpKTtcblxuXHQgIGlzTmFOKGFuZ2xlRXh0ZW50KSAmJiAoYW5nbGVFeHRlbnQgPSBQSSk7XG5cblx0ICBpZiAoIXN3ZWVwRmxhZyAmJiBhbmdsZUV4dGVudCA+IDApIHtcblx0ICAgIGFuZ2xlRXh0ZW50IC09IFRXT1BJO1xuXHQgIH0gZWxzZSBpZiAoc3dlZXBGbGFnICYmIGFuZ2xlRXh0ZW50IDwgMCkge1xuXHQgICAgYW5nbGVFeHRlbnQgKz0gVFdPUEk7XG5cdCAgfVxuXG5cdCAgYW5nbGVTdGFydCAlPSBUV09QSTtcblx0ICBhbmdsZUV4dGVudCAlPSBUV09QSTtcblxuXHQgIHZhciBzZWdtZW50cyA9IE1hdGguY2VpbChfYWJzKGFuZ2xlRXh0ZW50KSAvIChUV09QSSAvIDQpKSxcblx0ICAgICAgcmF3UGF0aCA9IFtdLFxuXHQgICAgICBhbmdsZUluY3JlbWVudCA9IGFuZ2xlRXh0ZW50IC8gc2VnbWVudHMsXG5cdCAgICAgIGNvbnRyb2xMZW5ndGggPSA0IC8gMyAqIF9zaW4oYW5nbGVJbmNyZW1lbnQgLyAyKSAvICgxICsgX2NvcyhhbmdsZUluY3JlbWVudCAvIDIpKSxcblx0ICAgICAgbWEgPSBjb3NBbmdsZSAqIHJ4LFxuXHQgICAgICBtYiA9IHNpbkFuZ2xlICogcngsXG5cdCAgICAgIG1jID0gc2luQW5nbGUgKiAtcnksXG5cdCAgICAgIG1kID0gY29zQW5nbGUgKiByeSxcblx0ICAgICAgaTtcblxuXHQgIGZvciAoaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XG5cdCAgICBhbmdsZSA9IGFuZ2xlU3RhcnQgKyBpICogYW5nbGVJbmNyZW1lbnQ7XG5cdCAgICB4MSA9IF9jb3MoYW5nbGUpO1xuXHQgICAgeTEgPSBfc2luKGFuZ2xlKTtcblx0ICAgIHV4ID0gX2NvcyhhbmdsZSArPSBhbmdsZUluY3JlbWVudCk7XG5cdCAgICB1eSA9IF9zaW4oYW5nbGUpO1xuXHQgICAgcmF3UGF0aC5wdXNoKHgxIC0gY29udHJvbExlbmd0aCAqIHkxLCB5MSArIGNvbnRyb2xMZW5ndGggKiB4MSwgdXggKyBjb250cm9sTGVuZ3RoICogdXksIHV5IC0gY29udHJvbExlbmd0aCAqIHV4LCB1eCwgdXkpO1xuXHQgIH1cblxuXHQgIGZvciAoaSA9IDA7IGkgPCByYXdQYXRoLmxlbmd0aDsgaSArPSAyKSB7XG5cdCAgICB4MSA9IHJhd1BhdGhbaV07XG5cdCAgICB5MSA9IHJhd1BhdGhbaSArIDFdO1xuXHQgICAgcmF3UGF0aFtpXSA9IHgxICogbWEgKyB5MSAqIG1jICsgY3g7XG5cdCAgICByYXdQYXRoW2kgKyAxXSA9IHgxICogbWIgKyB5MSAqIG1kICsgY3k7XG5cdCAgfVxuXG5cdCAgcmF3UGF0aFtpIC0gMl0gPSB4O1xuXHQgIHJhd1BhdGhbaSAtIDFdID0geTtcblx0ICByZXR1cm4gcmF3UGF0aDtcblx0fVxuXG5cdGZ1bmN0aW9uIHN0cmluZ1RvUmF3UGF0aChkKSB7XG5cdCAgdmFyIGEgPSAoZCArIFwiXCIpLnJlcGxhY2UoX3NjaWVudGlmaWMsIGZ1bmN0aW9uIChtKSB7XG5cdCAgICB2YXIgbiA9ICttO1xuXHQgICAgcmV0dXJuIG4gPCAwLjAwMDEgJiYgbiA+IC0wLjAwMDEgPyAwIDogbjtcblx0ICB9KS5tYXRjaChfc3ZnUGF0aEV4cCkgfHwgW10sXG5cdCAgICAgIHBhdGggPSBbXSxcblx0ICAgICAgcmVsYXRpdmVYID0gMCxcblx0ICAgICAgcmVsYXRpdmVZID0gMCxcblx0ICAgICAgdHdvVGhpcmRzID0gMiAvIDMsXG5cdCAgICAgIGVsZW1lbnRzID0gYS5sZW5ndGgsXG5cdCAgICAgIHBvaW50cyA9IDAsXG5cdCAgICAgIGVycm9yTWVzc2FnZSA9IFwiRVJST1I6IG1hbGZvcm1lZCBwYXRoOiBcIiArIGQsXG5cdCAgICAgIGksXG5cdCAgICAgIGosXG5cdCAgICAgIHgsXG5cdCAgICAgIHksXG5cdCAgICAgIGNvbW1hbmQsXG5cdCAgICAgIGlzUmVsYXRpdmUsXG5cdCAgICAgIHNlZ21lbnQsXG5cdCAgICAgIHN0YXJ0WCxcblx0ICAgICAgc3RhcnRZLFxuXHQgICAgICBkaWZYLFxuXHQgICAgICBkaWZZLFxuXHQgICAgICBiZXppZXJzLFxuXHQgICAgICBwcmV2Q29tbWFuZCxcblx0ICAgICAgZmxhZzEsXG5cdCAgICAgIGZsYWcyLFxuXHQgICAgICBsaW5lID0gZnVuY3Rpb24gbGluZShzeCwgc3ksIGV4LCBleSkge1xuXHQgICAgZGlmWCA9IChleCAtIHN4KSAvIDM7XG5cdCAgICBkaWZZID0gKGV5IC0gc3kpIC8gMztcblx0ICAgIHNlZ21lbnQucHVzaChzeCArIGRpZlgsIHN5ICsgZGlmWSwgZXggLSBkaWZYLCBleSAtIGRpZlksIGV4LCBleSk7XG5cdCAgfTtcblxuXHQgIGlmICghZCB8fCAhaXNOYU4oYVswXSkgfHwgaXNOYU4oYVsxXSkpIHtcblx0ICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG5cdCAgICByZXR1cm4gcGF0aDtcblx0ICB9XG5cblx0ICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHM7IGkrKykge1xuXHQgICAgcHJldkNvbW1hbmQgPSBjb21tYW5kO1xuXG5cdCAgICBpZiAoaXNOYU4oYVtpXSkpIHtcblx0ICAgICAgY29tbWFuZCA9IGFbaV0udG9VcHBlckNhc2UoKTtcblx0ICAgICAgaXNSZWxhdGl2ZSA9IGNvbW1hbmQgIT09IGFbaV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpLS07XG5cdCAgICB9XG5cblx0ICAgIHggPSArYVtpICsgMV07XG5cdCAgICB5ID0gK2FbaSArIDJdO1xuXG5cdCAgICBpZiAoaXNSZWxhdGl2ZSkge1xuXHQgICAgICB4ICs9IHJlbGF0aXZlWDtcblx0ICAgICAgeSArPSByZWxhdGl2ZVk7XG5cdCAgICB9XG5cblx0ICAgIGlmICghaSkge1xuXHQgICAgICBzdGFydFggPSB4O1xuXHQgICAgICBzdGFydFkgPSB5O1xuXHQgICAgfVxuXG5cdCAgICBpZiAoY29tbWFuZCA9PT0gXCJNXCIpIHtcblx0ICAgICAgaWYgKHNlZ21lbnQpIHtcblx0ICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPCA4KSB7XG5cdCAgICAgICAgICBwYXRoLmxlbmd0aCAtPSAxO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBwb2ludHMgKz0gc2VnbWVudC5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmVsYXRpdmVYID0gc3RhcnRYID0geDtcblx0ICAgICAgcmVsYXRpdmVZID0gc3RhcnRZID0geTtcblx0ICAgICAgc2VnbWVudCA9IFt4LCB5XTtcblx0ICAgICAgcGF0aC5wdXNoKHNlZ21lbnQpO1xuXHQgICAgICBpICs9IDI7XG5cdCAgICAgIGNvbW1hbmQgPSBcIkxcIjtcblx0ICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJDXCIpIHtcblx0ICAgICAgaWYgKCFzZWdtZW50KSB7XG5cdCAgICAgICAgc2VnbWVudCA9IFswLCAwXTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghaXNSZWxhdGl2ZSkge1xuXHQgICAgICAgIHJlbGF0aXZlWCA9IHJlbGF0aXZlWSA9IDA7XG5cdCAgICAgIH1cblxuXHQgICAgICBzZWdtZW50LnB1c2goeCwgeSwgcmVsYXRpdmVYICsgYVtpICsgM10gKiAxLCByZWxhdGl2ZVkgKyBhW2kgKyA0XSAqIDEsIHJlbGF0aXZlWCArPSBhW2kgKyA1XSAqIDEsIHJlbGF0aXZlWSArPSBhW2kgKyA2XSAqIDEpO1xuXHQgICAgICBpICs9IDY7XG5cdCAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiU1wiKSB7XG5cdCAgICAgIGRpZlggPSByZWxhdGl2ZVg7XG5cdCAgICAgIGRpZlkgPSByZWxhdGl2ZVk7XG5cblx0ICAgICAgaWYgKHByZXZDb21tYW5kID09PSBcIkNcIiB8fCBwcmV2Q29tbWFuZCA9PT0gXCJTXCIpIHtcblx0ICAgICAgICBkaWZYICs9IHJlbGF0aXZlWCAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSA0XTtcblx0ICAgICAgICBkaWZZICs9IHJlbGF0aXZlWSAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAzXTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghaXNSZWxhdGl2ZSkge1xuXHQgICAgICAgIHJlbGF0aXZlWCA9IHJlbGF0aXZlWSA9IDA7XG5cdCAgICAgIH1cblxuXHQgICAgICBzZWdtZW50LnB1c2goZGlmWCwgZGlmWSwgeCwgeSwgcmVsYXRpdmVYICs9IGFbaSArIDNdICogMSwgcmVsYXRpdmVZICs9IGFbaSArIDRdICogMSk7XG5cdCAgICAgIGkgKz0gNDtcblx0ICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJRXCIpIHtcblx0ICAgICAgZGlmWCA9IHJlbGF0aXZlWCArICh4IC0gcmVsYXRpdmVYKSAqIHR3b1RoaXJkcztcblx0ICAgICAgZGlmWSA9IHJlbGF0aXZlWSArICh5IC0gcmVsYXRpdmVZKSAqIHR3b1RoaXJkcztcblxuXHQgICAgICBpZiAoIWlzUmVsYXRpdmUpIHtcblx0ICAgICAgICByZWxhdGl2ZVggPSByZWxhdGl2ZVkgPSAwO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmVsYXRpdmVYICs9IGFbaSArIDNdICogMTtcblx0ICAgICAgcmVsYXRpdmVZICs9IGFbaSArIDRdICogMTtcblx0ICAgICAgc2VnbWVudC5wdXNoKGRpZlgsIGRpZlksIHJlbGF0aXZlWCArICh4IC0gcmVsYXRpdmVYKSAqIHR3b1RoaXJkcywgcmVsYXRpdmVZICsgKHkgLSByZWxhdGl2ZVkpICogdHdvVGhpcmRzLCByZWxhdGl2ZVgsIHJlbGF0aXZlWSk7XG5cdCAgICAgIGkgKz0gNDtcblx0ICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJUXCIpIHtcblx0ICAgICAgZGlmWCA9IHJlbGF0aXZlWCAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSA0XTtcblx0ICAgICAgZGlmWSA9IHJlbGF0aXZlWSAtIHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAzXTtcblx0ICAgICAgc2VnbWVudC5wdXNoKHJlbGF0aXZlWCArIGRpZlgsIHJlbGF0aXZlWSArIGRpZlksIHggKyAocmVsYXRpdmVYICsgZGlmWCAqIDEuNSAtIHgpICogdHdvVGhpcmRzLCB5ICsgKHJlbGF0aXZlWSArIGRpZlkgKiAxLjUgLSB5KSAqIHR3b1RoaXJkcywgcmVsYXRpdmVYID0geCwgcmVsYXRpdmVZID0geSk7XG5cdCAgICAgIGkgKz0gMjtcblx0ICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJIXCIpIHtcblx0ICAgICAgbGluZShyZWxhdGl2ZVgsIHJlbGF0aXZlWSwgcmVsYXRpdmVYID0geCwgcmVsYXRpdmVZKTtcblx0ICAgICAgaSArPSAxO1xuXHQgICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIlZcIikge1xuXHQgICAgICBsaW5lKHJlbGF0aXZlWCwgcmVsYXRpdmVZLCByZWxhdGl2ZVgsIHJlbGF0aXZlWSA9IHggKyAoaXNSZWxhdGl2ZSA/IHJlbGF0aXZlWSAtIHJlbGF0aXZlWCA6IDApKTtcblx0ICAgICAgaSArPSAxO1xuXHQgICAgfSBlbHNlIGlmIChjb21tYW5kID09PSBcIkxcIiB8fCBjb21tYW5kID09PSBcIlpcIikge1xuXHQgICAgICBpZiAoY29tbWFuZCA9PT0gXCJaXCIpIHtcblx0ICAgICAgICB4ID0gc3RhcnRYO1xuXHQgICAgICAgIHkgPSBzdGFydFk7XG5cdCAgICAgICAgc2VnbWVudC5jbG9zZWQgPSB0cnVlO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGNvbW1hbmQgPT09IFwiTFwiIHx8IF9hYnMocmVsYXRpdmVYIC0geCkgPiAwLjUgfHwgX2FicyhyZWxhdGl2ZVkgLSB5KSA+IDAuNSkge1xuXHQgICAgICAgIGxpbmUocmVsYXRpdmVYLCByZWxhdGl2ZVksIHgsIHkpO1xuXG5cdCAgICAgICAgaWYgKGNvbW1hbmQgPT09IFwiTFwiKSB7XG5cdCAgICAgICAgICBpICs9IDI7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgcmVsYXRpdmVYID0geDtcblx0ICAgICAgcmVsYXRpdmVZID0geTtcblx0ICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJBXCIpIHtcblx0ICAgICAgZmxhZzEgPSBhW2kgKyA0XTtcblx0ICAgICAgZmxhZzIgPSBhW2kgKyA1XTtcblx0ICAgICAgZGlmWCA9IGFbaSArIDZdO1xuXHQgICAgICBkaWZZID0gYVtpICsgN107XG5cdCAgICAgIGogPSA3O1xuXG5cdCAgICAgIGlmIChmbGFnMS5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgaWYgKGZsYWcxLmxlbmd0aCA8IDMpIHtcblx0ICAgICAgICAgIGRpZlkgPSBkaWZYO1xuXHQgICAgICAgICAgZGlmWCA9IGZsYWcyO1xuXHQgICAgICAgICAgai0tO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBkaWZZID0gZmxhZzI7XG5cdCAgICAgICAgICBkaWZYID0gZmxhZzEuc3Vic3RyKDIpO1xuXHQgICAgICAgICAgaiAtPSAyO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZsYWcyID0gZmxhZzEuY2hhckF0KDEpO1xuXHQgICAgICAgIGZsYWcxID0gZmxhZzEuY2hhckF0KDApO1xuXHQgICAgICB9XG5cblx0ICAgICAgYmV6aWVycyA9IGFyY1RvU2VnbWVudChyZWxhdGl2ZVgsIHJlbGF0aXZlWSwgK2FbaSArIDFdLCArYVtpICsgMl0sICthW2kgKyAzXSwgK2ZsYWcxLCArZmxhZzIsIChpc1JlbGF0aXZlID8gcmVsYXRpdmVYIDogMCkgKyBkaWZYICogMSwgKGlzUmVsYXRpdmUgPyByZWxhdGl2ZVkgOiAwKSArIGRpZlkgKiAxKTtcblx0ICAgICAgaSArPSBqO1xuXG5cdCAgICAgIGlmIChiZXppZXJzKSB7XG5cdCAgICAgICAgZm9yIChqID0gMDsgaiA8IGJlemllcnMubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgIHNlZ21lbnQucHVzaChiZXppZXJzW2pdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZWxhdGl2ZVggPSBzZWdtZW50W3NlZ21lbnQubGVuZ3RoIC0gMl07XG5cdCAgICAgIHJlbGF0aXZlWSA9IHNlZ21lbnRbc2VnbWVudC5sZW5ndGggLSAxXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaSA9IHNlZ21lbnQubGVuZ3RoO1xuXG5cdCAgaWYgKGkgPCA2KSB7XG5cdCAgICBwYXRoLnBvcCgpO1xuXHQgICAgaSA9IDA7XG5cdCAgfSBlbHNlIGlmIChzZWdtZW50WzBdID09PSBzZWdtZW50W2kgLSAyXSAmJiBzZWdtZW50WzFdID09PSBzZWdtZW50W2kgLSAxXSkge1xuXHQgICAgc2VnbWVudC5jbG9zZWQgPSB0cnVlO1xuXHQgIH1cblxuXHQgIHBhdGgudG90YWxQb2ludHMgPSBwb2ludHMgKyBpO1xuXHQgIHJldHVybiBwYXRoO1xuXHR9XG5cdGZ1bmN0aW9uIHJhd1BhdGhUb1N0cmluZyhyYXdQYXRoKSB7XG5cdCAgaWYgKF9pc051bWJlcihyYXdQYXRoWzBdKSkge1xuXHQgICAgcmF3UGF0aCA9IFtyYXdQYXRoXTtcblx0ICB9XG5cblx0ICB2YXIgcmVzdWx0ID0gXCJcIixcblx0ICAgICAgbCA9IHJhd1BhdGgubGVuZ3RoLFxuXHQgICAgICBzbCxcblx0ICAgICAgcyxcblx0ICAgICAgaSxcblx0ICAgICAgc2VnbWVudDtcblxuXHQgIGZvciAocyA9IDA7IHMgPCBsOyBzKyspIHtcblx0ICAgIHNlZ21lbnQgPSByYXdQYXRoW3NdO1xuXHQgICAgcmVzdWx0ICs9IFwiTVwiICsgX3JvdW5kKHNlZ21lbnRbMF0pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFsxXSkgKyBcIiBDXCI7XG5cdCAgICBzbCA9IHNlZ21lbnQubGVuZ3RoO1xuXG5cdCAgICBmb3IgKGkgPSAyOyBpIDwgc2w7IGkrKykge1xuXHQgICAgICByZXN1bHQgKz0gX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIixcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIgXCIgKyBfcm91bmQoc2VnbWVudFtpKytdKSArIFwiLFwiICsgX3JvdW5kKHNlZ21lbnRbaSsrXSkgKyBcIiBcIiArIF9yb3VuZChzZWdtZW50W2krK10pICsgXCIsXCIgKyBfcm91bmQoc2VnbWVudFtpXSkgKyBcIiBcIjtcblx0ICAgIH1cblxuXHQgICAgaWYgKHNlZ21lbnQuY2xvc2VkKSB7XG5cdCAgICAgIHJlc3VsdCArPSBcInpcIjtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyohXG5cdCAqIEN1c3RvbUVhc2UgMy4xMi4yXG5cdCAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuXHQgKlxuXHQgKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuXHQgKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cblx0ICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG5cdCovXG5cblx0dmFyIGdzYXAsXG5cdCAgICBfY29yZUluaXR0ZWQsXG5cdCAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuXHQgIHJldHVybiBnc2FwIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xuXHR9LFxuXHQgICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuXHQgIGdzYXAgPSBfZ2V0R1NBUCgpO1xuXG5cdCAgaWYgKGdzYXApIHtcblx0ICAgIGdzYXAucmVnaXN0ZXJFYXNlKFwiX0NFXCIsIEN1c3RvbUVhc2UuY3JlYXRlKTtcblx0ICAgIF9jb3JlSW5pdHRlZCA9IDE7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbUVhc2UpXCIpO1xuXHQgIH1cblx0fSxcblx0ICAgIF9iaWdOdW0gPSAxZTIwLFxuXHQgICAgX3JvdW5kJDEgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcblx0ICByZXR1cm4gfn4odmFsdWUgKiAxMDAwICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgLyAxMDAwO1xuXHR9LFxuXHQgICAgX251bUV4cCA9IC9bLSs9XFwuXSpcXGQrW1xcLmVcXC1cXCtdKlxcZCpbZVxcLVxcK10qXFxkKi9naSxcblx0ICAgIF9uZWVkc1BhcnNpbmdFeHAgPSAvW2NMbHNTYUFoSHZWdFRxUV0vZyxcblx0ICAgIF9maW5kTWluaW11bSA9IGZ1bmN0aW9uIF9maW5kTWluaW11bSh2YWx1ZXMpIHtcblx0ICB2YXIgbCA9IHZhbHVlcy5sZW5ndGgsXG5cdCAgICAgIG1pbiA9IF9iaWdOdW0sXG5cdCAgICAgIGk7XG5cblx0ICBmb3IgKGkgPSAxOyBpIDwgbDsgaSArPSA2KSB7XG5cdCAgICArdmFsdWVzW2ldIDwgbWluICYmIChtaW4gPSArdmFsdWVzW2ldKTtcblx0ICB9XG5cblx0ICByZXR1cm4gbWluO1xuXHR9LFxuXHQgICAgX25vcm1hbGl6ZSA9IGZ1bmN0aW9uIF9ub3JtYWxpemUodmFsdWVzLCBoZWlnaHQsIG9yaWdpblkpIHtcblx0ICBpZiAoIW9yaWdpblkgJiYgb3JpZ2luWSAhPT0gMCkge1xuXHQgICAgb3JpZ2luWSA9IE1hdGgubWF4KCt2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdLCArdmFsdWVzWzFdKTtcblx0ICB9XG5cblx0ICB2YXIgdHggPSArdmFsdWVzWzBdICogLTEsXG5cdCAgICAgIHR5ID0gLW9yaWdpblksXG5cdCAgICAgIGwgPSB2YWx1ZXMubGVuZ3RoLFxuXHQgICAgICBzeCA9IDEgLyAoK3ZhbHVlc1tsIC0gMl0gKyB0eCksXG5cdCAgICAgIHN5ID0gLWhlaWdodCB8fCAoTWF0aC5hYnMoK3ZhbHVlc1tsIC0gMV0gLSArdmFsdWVzWzFdKSA8IDAuMDEgKiAoK3ZhbHVlc1tsIC0gMl0gLSArdmFsdWVzWzBdKSA/IF9maW5kTWluaW11bSh2YWx1ZXMpICsgdHkgOiArdmFsdWVzW2wgLSAxXSArIHR5KSxcblx0ICAgICAgaTtcblxuXHQgIGlmIChzeSkge1xuXHQgICAgc3kgPSAxIC8gc3k7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHN5ID0gLXN4O1xuXHQgIH1cblxuXHQgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDIpIHtcblx0ICAgIHZhbHVlc1tpXSA9ICgrdmFsdWVzW2ldICsgdHgpICogc3g7XG5cdCAgICB2YWx1ZXNbaSArIDFdID0gKCt2YWx1ZXNbaSArIDFdICsgdHkpICogc3k7XG5cdCAgfVxuXHR9LFxuXHQgICAgX2JlemllclRvUG9pbnRzID0gZnVuY3Rpb24gX2JlemllclRvUG9pbnRzKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4KSB7XG5cdCAgdmFyIHgxMiA9ICh4MSArIHgyKSAvIDIsXG5cdCAgICAgIHkxMiA9ICh5MSArIHkyKSAvIDIsXG5cdCAgICAgIHgyMyA9ICh4MiArIHgzKSAvIDIsXG5cdCAgICAgIHkyMyA9ICh5MiArIHkzKSAvIDIsXG5cdCAgICAgIHgzNCA9ICh4MyArIHg0KSAvIDIsXG5cdCAgICAgIHkzNCA9ICh5MyArIHk0KSAvIDIsXG5cdCAgICAgIHgxMjMgPSAoeDEyICsgeDIzKSAvIDIsXG5cdCAgICAgIHkxMjMgPSAoeTEyICsgeTIzKSAvIDIsXG5cdCAgICAgIHgyMzQgPSAoeDIzICsgeDM0KSAvIDIsXG5cdCAgICAgIHkyMzQgPSAoeTIzICsgeTM0KSAvIDIsXG5cdCAgICAgIHgxMjM0ID0gKHgxMjMgKyB4MjM0KSAvIDIsXG5cdCAgICAgIHkxMjM0ID0gKHkxMjMgKyB5MjM0KSAvIDIsXG5cdCAgICAgIGR4ID0geDQgLSB4MSxcblx0ICAgICAgZHkgPSB5NCAtIHkxLFxuXHQgICAgICBkMiA9IE1hdGguYWJzKCh4MiAtIHg0KSAqIGR5IC0gKHkyIC0geTQpICogZHgpLFxuXHQgICAgICBkMyA9IE1hdGguYWJzKCh4MyAtIHg0KSAqIGR5IC0gKHkzIC0geTQpICogZHgpLFxuXHQgICAgICBsZW5ndGg7XG5cblx0ICBpZiAoIXBvaW50cykge1xuXHQgICAgcG9pbnRzID0gW3tcblx0ICAgICAgeDogeDEsXG5cdCAgICAgIHk6IHkxXG5cdCAgICB9LCB7XG5cdCAgICAgIHg6IHg0LFxuXHQgICAgICB5OiB5NFxuXHQgICAgfV07XG5cdCAgICBpbmRleCA9IDE7XG5cdCAgfVxuXG5cdCAgcG9pbnRzLnNwbGljZShpbmRleCB8fCBwb2ludHMubGVuZ3RoIC0gMSwgMCwge1xuXHQgICAgeDogeDEyMzQsXG5cdCAgICB5OiB5MTIzNFxuXHQgIH0pO1xuXG5cdCAgaWYgKChkMiArIGQzKSAqIChkMiArIGQzKSA+IHRocmVzaG9sZCAqIChkeCAqIGR4ICsgZHkgKiBkeSkpIHtcblx0ICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG5cblx0ICAgIF9iZXppZXJUb1BvaW50cyh4MSwgeTEsIHgxMiwgeTEyLCB4MTIzLCB5MTIzLCB4MTIzNCwgeTEyMzQsIHRocmVzaG9sZCwgcG9pbnRzLCBpbmRleCk7XG5cblx0ICAgIF9iZXppZXJUb1BvaW50cyh4MTIzNCwgeTEyMzQsIHgyMzQsIHkyMzQsIHgzNCwgeTM0LCB4NCwgeTQsIHRocmVzaG9sZCwgcG9pbnRzLCBpbmRleCArIDEgKyAocG9pbnRzLmxlbmd0aCAtIGxlbmd0aCkpO1xuXHQgIH1cblxuXHQgIHJldHVybiBwb2ludHM7XG5cdH07XG5cblx0dmFyIEN1c3RvbUVhc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gQ3VzdG9tRWFzZShpZCwgZGF0YSwgY29uZmlnKSB7XG5cdCAgICBfY29yZUluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cdCAgICB0aGlzLmlkID0gaWQ7XG5cdCAgICAgdGhpcy5zZXREYXRhKGRhdGEsIGNvbmZpZyk7XG5cdCAgfVxuXG5cdCAgdmFyIF9wcm90byA9IEN1c3RvbUVhc2UucHJvdG90eXBlO1xuXG5cdCAgX3Byb3RvLnNldERhdGEgPSBmdW5jdGlvbiBzZXREYXRhKGRhdGEsIGNvbmZpZykge1xuXHQgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHQgICAgZGF0YSA9IGRhdGEgfHwgXCIwLDAsMSwxXCI7XG5cdCAgICB2YXIgdmFsdWVzID0gZGF0YS5tYXRjaChfbnVtRXhwKSxcblx0ICAgICAgICBjbG9zZXN0ID0gMSxcblx0ICAgICAgICBwb2ludHMgPSBbXSxcblx0ICAgICAgICBsb29rdXAgPSBbXSxcblx0ICAgICAgICBwcmVjaXNpb24gPSBjb25maWcucHJlY2lzaW9uIHx8IDEsXG5cdCAgICAgICAgZmFzdCA9IHByZWNpc2lvbiA8PSAxLFxuXHQgICAgICAgIGwsXG5cdCAgICAgICAgYTEsXG5cdCAgICAgICAgYTIsXG5cdCAgICAgICAgaSxcblx0ICAgICAgICBpbmMsXG5cdCAgICAgICAgaixcblx0ICAgICAgICBwb2ludCxcblx0ICAgICAgICBwcmV2UG9pbnQsXG5cdCAgICAgICAgcDtcblx0ICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cblx0ICAgIGlmIChfbmVlZHNQYXJzaW5nRXhwLnRlc3QoZGF0YSkgfHwgfmRhdGEuaW5kZXhPZihcIk1cIikgJiYgZGF0YS5pbmRleE9mKFwiQ1wiKSA8IDApIHtcblx0ICAgICAgdmFsdWVzID0gc3RyaW5nVG9SYXdQYXRoKGRhdGEpWzBdO1xuXHQgICAgfVxuXG5cdCAgICBsID0gdmFsdWVzLmxlbmd0aDtcblxuXHQgICAgaWYgKGwgPT09IDQpIHtcblx0ICAgICAgdmFsdWVzLnVuc2hpZnQoMCwgMCk7XG5cdCAgICAgIHZhbHVlcy5wdXNoKDEsIDEpO1xuXHQgICAgICBsID0gODtcblx0ICAgIH0gZWxzZSBpZiAoKGwgLSAyKSAlIDYpIHtcblx0ICAgICAgdGhyb3cgXCJJbnZhbGlkIEN1c3RvbUVhc2VcIjtcblx0ICAgIH1cblxuXHQgICAgaWYgKCt2YWx1ZXNbMF0gIT09IDAgfHwgK3ZhbHVlc1tsIC0gMl0gIT09IDEpIHtcblx0ICAgICAgX25vcm1hbGl6ZSh2YWx1ZXMsIGNvbmZpZy5oZWlnaHQsIGNvbmZpZy5vcmlnaW5ZKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5zZWdtZW50ID0gdmFsdWVzO1xuXG5cdCAgICBmb3IgKGkgPSAyOyBpIDwgbDsgaSArPSA2KSB7XG5cdCAgICAgIGExID0ge1xuXHQgICAgICAgIHg6ICt2YWx1ZXNbaSAtIDJdLFxuXHQgICAgICAgIHk6ICt2YWx1ZXNbaSAtIDFdXG5cdCAgICAgIH07XG5cdCAgICAgIGEyID0ge1xuXHQgICAgICAgIHg6ICt2YWx1ZXNbaSArIDRdLFxuXHQgICAgICAgIHk6ICt2YWx1ZXNbaSArIDVdXG5cdCAgICAgIH07XG5cdCAgICAgIHBvaW50cy5wdXNoKGExLCBhMik7XG5cblx0ICAgICAgX2JlemllclRvUG9pbnRzKGExLngsIGExLnksICt2YWx1ZXNbaV0sICt2YWx1ZXNbaSArIDFdLCArdmFsdWVzW2kgKyAyXSwgK3ZhbHVlc1tpICsgM10sIGEyLngsIGEyLnksIDEgLyAocHJlY2lzaW9uICogMjAwMDAwKSwgcG9pbnRzLCBwb2ludHMubGVuZ3RoIC0gMSk7XG5cdCAgICB9XG5cblx0ICAgIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuXHQgICAgICBwcmV2UG9pbnQgPSBwb2ludHNbaSAtIDFdIHx8IHBvaW50O1xuXG5cdCAgICAgIGlmICgocG9pbnQueCA+IHByZXZQb2ludC54IHx8IHByZXZQb2ludC55ICE9PSBwb2ludC55ICYmIHByZXZQb2ludC54ID09PSBwb2ludC54IHx8IHBvaW50ID09PSBwcmV2UG9pbnQpICYmIHBvaW50LnggPD0gMSkge1xuXHQgICAgICAgIHByZXZQb2ludC5jeCA9IHBvaW50LnggLSBwcmV2UG9pbnQueDtcblx0ICAgICAgICBwcmV2UG9pbnQuY3kgPSBwb2ludC55IC0gcHJldlBvaW50Lnk7XG5cdCAgICAgICAgcHJldlBvaW50Lm4gPSBwb2ludDtcblx0ICAgICAgICBwcmV2UG9pbnQubnggPSBwb2ludC54O1xuXG5cdCAgICAgICAgaWYgKGZhc3QgJiYgaSA+IDEgJiYgTWF0aC5hYnMocHJldlBvaW50LmN5IC8gcHJldlBvaW50LmN4IC0gcG9pbnRzW2kgLSAyXS5jeSAvIHBvaW50c1tpIC0gMl0uY3gpID4gMikge1xuXHQgICAgICAgICAgZmFzdCA9IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHByZXZQb2ludC5jeCA8IGNsb3Nlc3QpIHtcblx0ICAgICAgICAgIGlmICghcHJldlBvaW50LmN4KSB7XG5cdCAgICAgICAgICAgIHByZXZQb2ludC5jeCA9IDAuMDAxO1xuXG5cdCAgICAgICAgICAgIGlmIChpID09PSBsIC0gMSkge1xuXHQgICAgICAgICAgICAgIHByZXZQb2ludC54IC09IDAuMDAxO1xuXHQgICAgICAgICAgICAgIGNsb3Nlc3QgPSBNYXRoLm1pbihjbG9zZXN0LCAwLjAwMSk7XG5cdCAgICAgICAgICAgICAgZmFzdCA9IDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNsb3Nlc3QgPSBwcmV2UG9pbnQuY3g7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHBvaW50cy5zcGxpY2UoaS0tLCAxKTtcblx0ICAgICAgICBsLS07XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgbCA9IDEgLyBjbG9zZXN0ICsgMSB8IDA7XG5cdCAgICBpbmMgPSAxIC8gbDtcblx0ICAgIGogPSAwO1xuXHQgICAgcG9pbnQgPSBwb2ludHNbMF07XG5cblx0ICAgIGlmIChmYXN0KSB7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICBwID0gaSAqIGluYztcblxuXHQgICAgICAgIGlmIChwb2ludC5ueCA8IHApIHtcblx0ICAgICAgICAgIHBvaW50ID0gcG9pbnRzWysral07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYTEgPSBwb2ludC55ICsgKHAgLSBwb2ludC54KSAvIHBvaW50LmN4ICogcG9pbnQuY3k7XG5cdCAgICAgICAgbG9va3VwW2ldID0ge1xuXHQgICAgICAgICAgeDogcCxcblx0ICAgICAgICAgIGN4OiBpbmMsXG5cdCAgICAgICAgICB5OiBhMSxcblx0ICAgICAgICAgIGN5OiAwLFxuXHQgICAgICAgICAgbng6IDlcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgaWYgKGkpIHtcblx0ICAgICAgICAgIGxvb2t1cFtpIC0gMV0uY3kgPSBhMSAtIGxvb2t1cFtpIC0gMV0ueTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBsb29rdXBbbCAtIDFdLmN5ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS55IC0gYTE7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgICAgaWYgKHBvaW50Lm54IDwgaSAqIGluYykge1xuXHQgICAgICAgICAgcG9pbnQgPSBwb2ludHNbKytqXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBsb29rdXBbaV0gPSBwb2ludDtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChqIDwgcG9pbnRzLmxlbmd0aCAtIDEpIHtcblx0ICAgICAgICBsb29rdXBbaSAtIDFdID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICB0aGlzLmVhc2UgPSBmdW5jdGlvbiAocCkge1xuXHQgICAgICB2YXIgcG9pbnQgPSBsb29rdXBbcCAqIGwgfCAwXSB8fCBsb29rdXBbbCAtIDFdO1xuXG5cdCAgICAgIGlmIChwb2ludC5ueCA8IHApIHtcblx0ICAgICAgICBwb2ludCA9IHBvaW50Lm47XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gcG9pbnQueSArIChwIC0gcG9pbnQueCkgLyBwb2ludC5jeCAqIHBvaW50LmN5O1xuXHQgICAgfTtcblxuXHQgICAgdGhpcy5lYXNlLmN1c3RvbSA9IHRoaXM7XG5cdCAgICB0aGlzLmlkICYmIGdzYXAgJiYgZ3NhcC5yZWdpc3RlckVhc2UodGhpcy5pZCwgdGhpcy5lYXNlKTtcblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH07XG5cblx0ICBfcHJvdG8uZ2V0U1ZHRGF0YSA9IGZ1bmN0aW9uIGdldFNWR0RhdGEoY29uZmlnKSB7XG5cdCAgICByZXR1cm4gQ3VzdG9tRWFzZS5nZXRTVkdEYXRhKHRoaXMsIGNvbmZpZyk7XG5cdCAgfTtcblxuXHQgIEN1c3RvbUVhc2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGlkLCBkYXRhLCBjb25maWcpIHtcblx0ICAgIHJldHVybiBuZXcgQ3VzdG9tRWFzZShpZCwgZGF0YSwgY29uZmlnKS5lYXNlO1xuXHQgIH07XG5cblx0ICBDdXN0b21FYXNlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuXHQgICAgZ3NhcCA9IGNvcmU7XG5cblx0ICAgIF9pbml0Q29yZSgpO1xuXHQgIH07XG5cblx0ICBDdXN0b21FYXNlLmdldCA9IGZ1bmN0aW9uIGdldChpZCkge1xuXHQgICAgcmV0dXJuIGdzYXAucGFyc2VFYXNlKGlkKTtcblx0ICB9O1xuXG5cdCAgQ3VzdG9tRWFzZS5nZXRTVkdEYXRhID0gZnVuY3Rpb24gZ2V0U1ZHRGF0YShlYXNlLCBjb25maWcpIHtcblx0ICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0ICAgIHZhciB3aWR0aCA9IGNvbmZpZy53aWR0aCB8fCAxMDAsXG5cdCAgICAgICAgaGVpZ2h0ID0gY29uZmlnLmhlaWdodCB8fCAxMDAsXG5cdCAgICAgICAgeCA9IGNvbmZpZy54IHx8IDAsXG5cdCAgICAgICAgeSA9IChjb25maWcueSB8fCAwKSArIGhlaWdodCxcblx0ICAgICAgICBlID0gZ3NhcC51dGlscy50b0FycmF5KGNvbmZpZy5wYXRoKVswXSxcblx0ICAgICAgICBhLFxuXHQgICAgICAgIHNsb3BlLFxuXHQgICAgICAgIGksXG5cdCAgICAgICAgaW5jLFxuXHQgICAgICAgIHR4LFxuXHQgICAgICAgIHR5LFxuXHQgICAgICAgIHByZWNpc2lvbixcblx0ICAgICAgICB0aHJlc2hvbGQsXG5cdCAgICAgICAgcHJldlgsXG5cdCAgICAgICAgcHJldlk7XG5cblx0ICAgIGlmIChjb25maWcuaW52ZXJ0KSB7XG5cdCAgICAgIGhlaWdodCA9IC1oZWlnaHQ7XG5cdCAgICAgIHkgPSAwO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodHlwZW9mIGVhc2UgPT09IFwic3RyaW5nXCIpIHtcblx0ICAgICAgZWFzZSA9IGdzYXAucGFyc2VFYXNlKGVhc2UpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZWFzZS5jdXN0b20pIHtcblx0ICAgICAgZWFzZSA9IGVhc2UuY3VzdG9tO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZWFzZSBpbnN0YW5jZW9mIEN1c3RvbUVhc2UpIHtcblx0ICAgICAgYSA9IHJhd1BhdGhUb1N0cmluZyh0cmFuc2Zvcm1SYXdQYXRoKFtlYXNlLnNlZ21lbnRdLCB3aWR0aCwgMCwgMCwgLWhlaWdodCwgeCwgeSkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgYSA9IFt4LCB5XTtcblx0ICAgICAgcHJlY2lzaW9uID0gTWF0aC5tYXgoNSwgKGNvbmZpZy5wcmVjaXNpb24gfHwgMSkgKiAyMDApO1xuXHQgICAgICBpbmMgPSAxIC8gcHJlY2lzaW9uO1xuXHQgICAgICBwcmVjaXNpb24gKz0gMjtcblx0ICAgICAgdGhyZXNob2xkID0gNSAvIHByZWNpc2lvbjtcblx0ICAgICAgcHJldlggPSBfcm91bmQkMSh4ICsgaW5jICogd2lkdGgpO1xuXHQgICAgICBwcmV2WSA9IF9yb3VuZCQxKHkgKyBlYXNlKGluYykgKiAtaGVpZ2h0KTtcblx0ICAgICAgc2xvcGUgPSAocHJldlkgLSB5KSAvIChwcmV2WCAtIHgpO1xuXG5cdCAgICAgIGZvciAoaSA9IDI7IGkgPCBwcmVjaXNpb247IGkrKykge1xuXHQgICAgICAgIHR4ID0gX3JvdW5kJDEoeCArIGkgKiBpbmMgKiB3aWR0aCk7XG5cdCAgICAgICAgdHkgPSBfcm91bmQkMSh5ICsgZWFzZShpICogaW5jKSAqIC1oZWlnaHQpO1xuXG5cdCAgICAgICAgaWYgKE1hdGguYWJzKCh0eSAtIHByZXZZKSAvICh0eCAtIHByZXZYKSAtIHNsb3BlKSA+IHRocmVzaG9sZCB8fCBpID09PSBwcmVjaXNpb24gLSAxKSB7XG5cdCAgICAgICAgICBhLnB1c2gocHJldlgsIHByZXZZKTtcblx0ICAgICAgICAgIHNsb3BlID0gKHR5IC0gcHJldlkpIC8gKHR4IC0gcHJldlgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHByZXZYID0gdHg7XG5cdCAgICAgICAgcHJldlkgPSB0eTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGEgPSBcIk1cIiArIGEuam9pbihcIixcIik7XG5cdCAgICB9XG5cblx0ICAgIGUgJiYgZS5zZXRBdHRyaWJ1dGUoXCJkXCIsIGEpO1xuXHQgICAgcmV0dXJuIGE7XG5cdCAgfTtcblxuXHQgIHJldHVybiBDdXN0b21FYXNlO1xuXHR9KCk7XG5cdF9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihDdXN0b21FYXNlKTtcblx0Q3VzdG9tRWFzZS52ZXJzaW9uID0gXCIzLjEyLjJcIjtcblxuXHRleHBvcnRzLkN1c3RvbUVhc2UgPSBDdXN0b21FYXNlO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBDdXN0b21FYXNlO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwud2luZG93ID0gZ2xvYmFsLndpbmRvdyB8fCB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cdC8qIVxuXHQgKiBTY3JvbGxUb1BsdWdpbiAzLjEyLjJcblx0ICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG5cdCAqXG5cdCAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjMsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG5cdCAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuXHQgKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cblx0Ki9cblx0dmFyIGdzYXAsXG5cdCAgICBfY29yZUluaXR0ZWQsXG5cdCAgICBfd2luZG93LFxuXHQgICAgX2RvY0VsLFxuXHQgICAgX2JvZHksXG5cdCAgICBfdG9BcnJheSxcblx0ICAgIF9jb25maWcsXG5cdCAgICBTY3JvbGxUcmlnZ2VyLFxuXHQgICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG5cdH0sXG5cdCAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuXHQgIHJldHVybiBnc2FwIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG5cdH0sXG5cdCAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcblx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xuXHR9LFxuXHQgICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuXHQgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblx0ICAgIF9tYXggPSBmdW5jdGlvbiBfbWF4KGVsZW1lbnQsIGF4aXMpIHtcblx0ICB2YXIgZGltID0gYXhpcyA9PT0gXCJ4XCIgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiLFxuXHQgICAgICBzY3JvbGwgPSBcInNjcm9sbFwiICsgZGltLFxuXHQgICAgICBjbGllbnQgPSBcImNsaWVudFwiICsgZGltO1xuXHQgIHJldHVybiBlbGVtZW50ID09PSBfd2luZG93IHx8IGVsZW1lbnQgPT09IF9kb2NFbCB8fCBlbGVtZW50ID09PSBfYm9keSA/IE1hdGgubWF4KF9kb2NFbFtzY3JvbGxdLCBfYm9keVtzY3JvbGxdKSAtIChfd2luZG93W1wiaW5uZXJcIiArIGRpbV0gfHwgX2RvY0VsW2NsaWVudF0gfHwgX2JvZHlbY2xpZW50XSkgOiBlbGVtZW50W3Njcm9sbF0gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkaW1dO1xuXHR9LFxuXHQgICAgX2J1aWxkR2V0dGVyID0gZnVuY3Rpb24gX2J1aWxkR2V0dGVyKGUsIGF4aXMpIHtcblx0ICB2YXIgcCA9IFwic2Nyb2xsXCIgKyAoYXhpcyA9PT0gXCJ4XCIgPyBcIkxlZnRcIiA6IFwiVG9wXCIpO1xuXG5cdCAgaWYgKGUgPT09IF93aW5kb3cpIHtcblx0ICAgIGlmIChlLnBhZ2VYT2Zmc2V0ICE9IG51bGwpIHtcblx0ICAgICAgcCA9IFwicGFnZVwiICsgYXhpcy50b1VwcGVyQ2FzZSgpICsgXCJPZmZzZXRcIjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGUgPSBfZG9jRWxbcF0gIT0gbnVsbCA/IF9kb2NFbCA6IF9ib2R5O1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gZVtwXTtcblx0ICB9O1xuXHR9LFxuXHQgICAgX2NsZWFuID0gZnVuY3Rpb24gX2NsZWFuKHZhbHVlLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG5cdCAgX2lzRnVuY3Rpb24odmFsdWUpICYmICh2YWx1ZSA9IHZhbHVlKGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuXHQgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcblx0ICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlICE9PSBcIm1heFwiICYmIHZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIgPyB7XG5cdCAgICAgIHg6IHZhbHVlLFxuXHQgICAgICB5OiB2YWx1ZVxuXHQgICAgfSA6IHtcblx0ICAgICAgeTogdmFsdWVcblx0ICAgIH07XG5cdCAgfSBlbHNlIGlmICh2YWx1ZS5ub2RlVHlwZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgeTogdmFsdWUsXG5cdCAgICAgIHg6IHZhbHVlXG5cdCAgICB9O1xuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgcmVzdWx0ID0ge30sXG5cdCAgICAgICAgcDtcblxuXHQgICAgZm9yIChwIGluIHZhbHVlKSB7XG5cdCAgICAgIHJlc3VsdFtwXSA9IHAgIT09IFwib25BdXRvS2lsbFwiICYmIF9pc0Z1bmN0aW9uKHZhbHVlW3BdKSA/IHZhbHVlW3BdKGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFsdWVbcF07XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdCAgfVxuXHR9LFxuXHQgICAgX2dldE9mZnNldCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXQoZWxlbWVudCwgY29udGFpbmVyKSB7XG5cdCAgZWxlbWVudCA9IF90b0FycmF5KGVsZW1lbnQpWzBdO1xuXG5cdCAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuXHQgICAgcmV0dXJuIGNvbnNvbGUud2FybihcInNjcm9sbFRvIHRhcmdldCBkb2Vzbid0IGV4aXN0LiBVc2luZyAwXCIpIHx8IHtcblx0ICAgICAgeDogMCxcblx0ICAgICAgeTogMFxuXHQgICAgfTtcblx0ICB9XG5cblx0ICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdCAgICAgIGlzUm9vdCA9ICFjb250YWluZXIgfHwgY29udGFpbmVyID09PSBfd2luZG93IHx8IGNvbnRhaW5lciA9PT0gX2JvZHksXG5cdCAgICAgIGNSZWN0ID0gaXNSb290ID8ge1xuXHQgICAgdG9wOiBfZG9jRWwuY2xpZW50VG9wIC0gKF93aW5kb3cucGFnZVlPZmZzZXQgfHwgX2RvY0VsLnNjcm9sbFRvcCB8fCBfYm9keS5zY3JvbGxUb3AgfHwgMCksXG5cdCAgICBsZWZ0OiBfZG9jRWwuY2xpZW50TGVmdCAtIChfd2luZG93LnBhZ2VYT2Zmc2V0IHx8IF9kb2NFbC5zY3JvbGxMZWZ0IHx8IF9ib2R5LnNjcm9sbExlZnQgfHwgMClcblx0ICB9IDogY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuXHQgICAgICBvZmZzZXRzID0ge1xuXHQgICAgeDogcmVjdC5sZWZ0IC0gY1JlY3QubGVmdCxcblx0ICAgIHk6IHJlY3QudG9wIC0gY1JlY3QudG9wXG5cdCAgfTtcblxuXHQgIGlmICghaXNSb290ICYmIGNvbnRhaW5lcikge1xuXHQgICAgb2Zmc2V0cy54ICs9IF9idWlsZEdldHRlcihjb250YWluZXIsIFwieFwiKSgpO1xuXHQgICAgb2Zmc2V0cy55ICs9IF9idWlsZEdldHRlcihjb250YWluZXIsIFwieVwiKSgpO1xuXHQgIH1cblxuXHQgIHJldHVybiBvZmZzZXRzO1xuXHR9LFxuXHQgICAgX3BhcnNlVmFsID0gZnVuY3Rpb24gX3BhcnNlVmFsKHZhbHVlLCB0YXJnZXQsIGF4aXMsIGN1cnJlbnRWYWwsIG9mZnNldCkge1xuXHQgIHJldHVybiAhaXNOYU4odmFsdWUpICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiA/IHBhcnNlRmxvYXQodmFsdWUpIC0gb2Zmc2V0IDogX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiID8gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpICogKHZhbHVlLmNoYXJBdCgwKSA9PT0gXCItXCIgPyAtMSA6IDEpICsgY3VycmVudFZhbCAtIG9mZnNldCA6IHZhbHVlID09PSBcIm1heFwiID8gX21heCh0YXJnZXQsIGF4aXMpIC0gb2Zmc2V0IDogTWF0aC5taW4oX21heCh0YXJnZXQsIGF4aXMpLCBfZ2V0T2Zmc2V0KHZhbHVlLCB0YXJnZXQpW2F4aXNdIC0gb2Zmc2V0KTtcblx0fSxcblx0ICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcblx0ICBnc2FwID0gX2dldEdTQVAoKTtcblxuXHQgIGlmIChfd2luZG93RXhpc3RzKCkgJiYgZ3NhcCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuYm9keSkge1xuXHQgICAgX3dpbmRvdyA9IHdpbmRvdztcblx0ICAgIF9ib2R5ID0gZG9jdW1lbnQuYm9keTtcblx0ICAgIF9kb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuXHQgICAgZ3NhcC5jb25maWcoe1xuXHQgICAgICBhdXRvS2lsbFRocmVzaG9sZDogN1xuXHQgICAgfSk7XG5cdCAgICBfY29uZmlnID0gZ3NhcC5jb25maWcoKTtcblx0ICAgIF9jb3JlSW5pdHRlZCA9IDE7XG5cdCAgfVxuXHR9O1xuXG5cdHZhciBTY3JvbGxUb1BsdWdpbiA9IHtcblx0ICB2ZXJzaW9uOiBcIjMuMTIuMlwiLFxuXHQgIG5hbWU6IFwic2Nyb2xsVG9cIixcblx0ICByYXdWYXJzOiAxLFxuXHQgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG5cdCAgICBnc2FwID0gY29yZTtcblxuXHQgICAgX2luaXRDb3JlKCk7XG5cdCAgfSxcblx0ICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuXHQgICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXHQgICAgdmFyIGRhdGEgPSB0aGlzLFxuXHQgICAgICAgIHNuYXBUeXBlID0gZ3NhcC5nZXRQcm9wZXJ0eSh0YXJnZXQsIFwic2Nyb2xsU25hcFR5cGVcIik7XG5cdCAgICBkYXRhLmlzV2luID0gdGFyZ2V0ID09PSBfd2luZG93O1xuXHQgICAgZGF0YS50YXJnZXQgPSB0YXJnZXQ7XG5cdCAgICBkYXRhLnR3ZWVuID0gdHdlZW47XG5cdCAgICB2YWx1ZSA9IF9jbGVhbih2YWx1ZSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG5cdCAgICBkYXRhLnZhcnMgPSB2YWx1ZTtcblx0ICAgIGRhdGEuYXV0b0tpbGwgPSAhIXZhbHVlLmF1dG9LaWxsO1xuXHQgICAgZGF0YS5nZXRYID0gX2J1aWxkR2V0dGVyKHRhcmdldCwgXCJ4XCIpO1xuXHQgICAgZGF0YS5nZXRZID0gX2J1aWxkR2V0dGVyKHRhcmdldCwgXCJ5XCIpO1xuXHQgICAgZGF0YS54ID0gZGF0YS54UHJldiA9IGRhdGEuZ2V0WCgpO1xuXHQgICAgZGF0YS55ID0gZGF0YS55UHJldiA9IGRhdGEuZ2V0WSgpO1xuXHQgICAgU2Nyb2xsVHJpZ2dlciB8fCAoU2Nyb2xsVHJpZ2dlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsVHJpZ2dlcik7XG5cdCAgICBnc2FwLmdldFByb3BlcnR5KHRhcmdldCwgXCJzY3JvbGxCZWhhdmlvclwiKSA9PT0gXCJzbW9vdGhcIiAmJiBnc2FwLnNldCh0YXJnZXQsIHtcblx0ICAgICAgc2Nyb2xsQmVoYXZpb3I6IFwiYXV0b1wiXG5cdCAgICB9KTtcblxuXHQgICAgaWYgKHNuYXBUeXBlICYmIHNuYXBUeXBlICE9PSBcIm5vbmVcIikge1xuXHQgICAgICBkYXRhLnNuYXAgPSAxO1xuXHQgICAgICBkYXRhLnNuYXBJbmxpbmUgPSB0YXJnZXQuc3R5bGUuc2Nyb2xsU25hcFR5cGU7XG5cdCAgICAgIHRhcmdldC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9IFwibm9uZVwiO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodmFsdWUueCAhPSBudWxsKSB7XG5cdCAgICAgIGRhdGEuYWRkKGRhdGEsIFwieFwiLCBkYXRhLngsIF9wYXJzZVZhbCh2YWx1ZS54LCB0YXJnZXQsIFwieFwiLCBkYXRhLngsIHZhbHVlLm9mZnNldFggfHwgMCksIGluZGV4LCB0YXJnZXRzKTtcblxuXHQgICAgICBkYXRhLl9wcm9wcy5wdXNoKFwic2Nyb2xsVG9feFwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRhdGEuc2tpcFggPSAxO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodmFsdWUueSAhPSBudWxsKSB7XG5cdCAgICAgIGRhdGEuYWRkKGRhdGEsIFwieVwiLCBkYXRhLnksIF9wYXJzZVZhbCh2YWx1ZS55LCB0YXJnZXQsIFwieVwiLCBkYXRhLnksIHZhbHVlLm9mZnNldFkgfHwgMCksIGluZGV4LCB0YXJnZXRzKTtcblxuXHQgICAgICBkYXRhLl9wcm9wcy5wdXNoKFwic2Nyb2xsVG9feVwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRhdGEuc2tpcFkgPSAxO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcblx0ICAgIHZhciBwdCA9IGRhdGEuX3B0LFxuXHQgICAgICAgIHRhcmdldCA9IGRhdGEudGFyZ2V0LFxuXHQgICAgICAgIHR3ZWVuID0gZGF0YS50d2Vlbixcblx0ICAgICAgICBhdXRvS2lsbCA9IGRhdGEuYXV0b0tpbGwsXG5cdCAgICAgICAgeFByZXYgPSBkYXRhLnhQcmV2LFxuXHQgICAgICAgIHlQcmV2ID0gZGF0YS55UHJldixcblx0ICAgICAgICBpc1dpbiA9IGRhdGEuaXNXaW4sXG5cdCAgICAgICAgc25hcCA9IGRhdGEuc25hcCxcblx0ICAgICAgICBzbmFwSW5saW5lID0gZGF0YS5zbmFwSW5saW5lLFxuXHQgICAgICAgIHgsXG5cdCAgICAgICAgeSxcblx0ICAgICAgICB5RGlmLFxuXHQgICAgICAgIHhEaWYsXG5cdCAgICAgICAgdGhyZXNob2xkO1xuXG5cdCAgICB3aGlsZSAocHQpIHtcblx0ICAgICAgcHQucihyYXRpbywgcHQuZCk7XG5cdCAgICAgIHB0ID0gcHQuX25leHQ7XG5cdCAgICB9XG5cblx0ICAgIHggPSBpc1dpbiB8fCAhZGF0YS5za2lwWCA/IGRhdGEuZ2V0WCgpIDogeFByZXY7XG5cdCAgICB5ID0gaXNXaW4gfHwgIWRhdGEuc2tpcFkgPyBkYXRhLmdldFkoKSA6IHlQcmV2O1xuXHQgICAgeURpZiA9IHkgLSB5UHJldjtcblx0ICAgIHhEaWYgPSB4IC0geFByZXY7XG5cdCAgICB0aHJlc2hvbGQgPSBfY29uZmlnLmF1dG9LaWxsVGhyZXNob2xkO1xuXG5cdCAgICBpZiAoZGF0YS54IDwgMCkge1xuXHQgICAgICBkYXRhLnggPSAwO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZGF0YS55IDwgMCkge1xuXHQgICAgICBkYXRhLnkgPSAwO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoYXV0b0tpbGwpIHtcblx0ICAgICAgaWYgKCFkYXRhLnNraXBYICYmICh4RGlmID4gdGhyZXNob2xkIHx8IHhEaWYgPCAtdGhyZXNob2xkKSAmJiB4IDwgX21heCh0YXJnZXQsIFwieFwiKSkge1xuXHQgICAgICAgIGRhdGEuc2tpcFggPSAxO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKCFkYXRhLnNraXBZICYmICh5RGlmID4gdGhyZXNob2xkIHx8IHlEaWYgPCAtdGhyZXNob2xkKSAmJiB5IDwgX21heCh0YXJnZXQsIFwieVwiKSkge1xuXHQgICAgICAgIGRhdGEuc2tpcFkgPSAxO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGRhdGEuc2tpcFggJiYgZGF0YS5za2lwWSkge1xuXHQgICAgICAgIHR3ZWVuLmtpbGwoKTtcblx0ICAgICAgICBkYXRhLnZhcnMub25BdXRvS2lsbCAmJiBkYXRhLnZhcnMub25BdXRvS2lsbC5hcHBseSh0d2VlbiwgZGF0YS52YXJzLm9uQXV0b0tpbGxQYXJhbXMgfHwgW10pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChpc1dpbikge1xuXHQgICAgICBfd2luZG93LnNjcm9sbFRvKCFkYXRhLnNraXBYID8gZGF0YS54IDogeCwgIWRhdGEuc2tpcFkgPyBkYXRhLnkgOiB5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRhdGEuc2tpcFkgfHwgKHRhcmdldC5zY3JvbGxUb3AgPSBkYXRhLnkpO1xuXHQgICAgICBkYXRhLnNraXBYIHx8ICh0YXJnZXQuc2Nyb2xsTGVmdCA9IGRhdGEueCk7XG5cdCAgICB9XG5cblx0ICAgIGlmIChzbmFwICYmIChyYXRpbyA9PT0gMSB8fCByYXRpbyA9PT0gMCkpIHtcblx0ICAgICAgeSA9IHRhcmdldC5zY3JvbGxUb3A7XG5cdCAgICAgIHggPSB0YXJnZXQuc2Nyb2xsTGVmdDtcblx0ICAgICAgc25hcElubGluZSA/IHRhcmdldC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9IHNuYXBJbmxpbmUgOiB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY3JvbGwtc25hcC10eXBlXCIpO1xuXHQgICAgICB0YXJnZXQuc2Nyb2xsVG9wID0geSArIDE7XG5cdCAgICAgIHRhcmdldC5zY3JvbGxMZWZ0ID0geCArIDE7XG5cdCAgICAgIHRhcmdldC5zY3JvbGxUb3AgPSB5O1xuXHQgICAgICB0YXJnZXQuc2Nyb2xsTGVmdCA9IHg7XG5cdCAgICB9XG5cblx0ICAgIGRhdGEueFByZXYgPSBkYXRhLng7XG5cdCAgICBkYXRhLnlQcmV2ID0gZGF0YS55O1xuXHQgICAgU2Nyb2xsVHJpZ2dlciAmJiBTY3JvbGxUcmlnZ2VyLnVwZGF0ZSgpO1xuXHQgIH0sXG5cdCAga2lsbDogZnVuY3Rpb24ga2lsbChwcm9wZXJ0eSkge1xuXHQgICAgdmFyIGJvdGggPSBwcm9wZXJ0eSA9PT0gXCJzY3JvbGxUb1wiO1xuXG5cdCAgICBpZiAoYm90aCB8fCBwcm9wZXJ0eSA9PT0gXCJzY3JvbGxUb194XCIpIHtcblx0ICAgICAgdGhpcy5za2lwWCA9IDE7XG5cdCAgICB9XG5cblx0ICAgIGlmIChib3RoIHx8IHByb3BlcnR5ID09PSBcInNjcm9sbFRvX3lcIikge1xuXHQgICAgICB0aGlzLnNraXBZID0gMTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFNjcm9sbFRvUGx1Z2luLm1heCA9IF9tYXg7XG5cdFNjcm9sbFRvUGx1Z2luLmdldE9mZnNldCA9IF9nZXRPZmZzZXQ7XG5cdFNjcm9sbFRvUGx1Z2luLmJ1aWxkR2V0dGVyID0gX2J1aWxkR2V0dGVyO1xuXHRfZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVG9QbHVnaW4pO1xuXG5cdGV4cG9ydHMuU2Nyb2xsVG9QbHVnaW4gPSBTY3JvbGxUb1BsdWdpbjtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsVG9QbHVnaW47XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgLyohXG4gICAqIE9ic2VydmVyIDMuMTIuMlxuICAgKiBodHRwczovL2dyZWVuc29jay5jb21cbiAgICpcbiAgICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMywgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAgICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gICAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICAqL1xuICB2YXIgZ3NhcCxcbiAgICAgIF9jb3JlSW5pdHRlZCxcbiAgICAgIF9jbGFtcCxcbiAgICAgIF93aW4sXG4gICAgICBfZG9jLFxuICAgICAgX2RvY0VsLFxuICAgICAgX2JvZHksXG4gICAgICBfaXNUb3VjaCxcbiAgICAgIF9wb2ludGVyVHlwZSxcbiAgICAgIFNjcm9sbFRyaWdnZXIsXG4gICAgICBfcm9vdCxcbiAgICAgIF9ub3JtYWxpemVyLFxuICAgICAgX2V2ZW50VHlwZXMsXG4gICAgICBfY29udGV4dCxcbiAgICAgIF9nZXRHU0FQID0gZnVuY3Rpb24gX2dldEdTQVAoKSB7XG4gICAgcmV0dXJuIGdzYXAgfHwgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoZ3NhcCA9IHdpbmRvdy5nc2FwKSAmJiBnc2FwLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXA7XG4gIH0sXG4gICAgICBfc3RhcnR1cCA9IDEsXG4gICAgICBfb2JzZXJ2ZXJzID0gW10sXG4gICAgICBfc2Nyb2xsZXJzID0gW10sXG4gICAgICBfcHJveGllcyA9IFtdLFxuICAgICAgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9icmlkZ2UgPSBmdW5jdGlvbiBfYnJpZGdlKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICAgICAgX2ludGVncmF0ZSA9IGZ1bmN0aW9uIF9pbnRlZ3JhdGUoKSB7XG4gICAgdmFyIGNvcmUgPSBTY3JvbGxUcmlnZ2VyLmNvcmUsXG4gICAgICAgIGRhdGEgPSBjb3JlLmJyaWRnZSB8fCB7fSxcbiAgICAgICAgc2Nyb2xsZXJzID0gY29yZS5fc2Nyb2xsZXJzLFxuICAgICAgICBwcm94aWVzID0gY29yZS5fcHJveGllcztcbiAgICBzY3JvbGxlcnMucHVzaC5hcHBseShzY3JvbGxlcnMsIF9zY3JvbGxlcnMpO1xuICAgIHByb3hpZXMucHVzaC5hcHBseShwcm94aWVzLCBfcHJveGllcyk7XG4gICAgX3Njcm9sbGVycyA9IHNjcm9sbGVycztcbiAgICBfcHJveGllcyA9IHByb3hpZXM7XG5cbiAgICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGRhdGFbbmFtZV0odmFsdWUpO1xuICAgIH07XG4gIH0sXG4gICAgICBfZ2V0UHJveHlQcm9wID0gZnVuY3Rpb24gX2dldFByb3h5UHJvcChlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiB+X3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSAmJiBfcHJveGllc1tfcHJveGllcy5pbmRleE9mKGVsZW1lbnQpICsgMV1bcHJvcGVydHldO1xuICB9LFxuICAgICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlbCkge1xuICAgIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGVsKTtcbiAgfSxcbiAgICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBub25QYXNzaXZlLCBjYXB0dXJlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCB7XG4gICAgICBwYXNzaXZlOiAhbm9uUGFzc2l2ZSxcbiAgICAgIGNhcHR1cmU6ICEhY2FwdHVyZVxuICAgIH0pO1xuICB9LFxuICAgICAgX3JlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG4gIH0sXG4gICAgICBfc2Nyb2xsTGVmdCA9IFwic2Nyb2xsTGVmdFwiLFxuICAgICAgX3Njcm9sbFRvcCA9IFwic2Nyb2xsVG9wXCIsXG4gICAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZCB8fCBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gIH0sXG4gICAgICBfc2Nyb2xsQ2FjaGVGdW5jID0gZnVuY3Rpb24gX3Njcm9sbENhY2hlRnVuYyhmLCBkb05vdENhY2hlKSB7XG4gICAgdmFyIGNhY2hpbmdGdW5jID0gZnVuY3Rpb24gY2FjaGluZ0Z1bmModmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICBfc3RhcnR1cCAmJiAoX3dpbi5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIik7XG4gICAgICAgIHZhciBpc05vcm1hbGl6aW5nID0gX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaXNQcmVzc2VkO1xuICAgICAgICB2YWx1ZSA9IGNhY2hpbmdGdW5jLnYgPSBNYXRoLnJvdW5kKHZhbHVlKSB8fCAoX25vcm1hbGl6ZXIgJiYgX25vcm1hbGl6ZXIuaU9TID8gMSA6IDApO1xuICAgICAgICBmKHZhbHVlKTtcbiAgICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICAgIGlzTm9ybWFsaXppbmcgJiYgX2JyaWRnZShcInNzXCIsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZG9Ob3RDYWNoZSB8fCBfc2Nyb2xsZXJzLmNhY2hlICE9PSBjYWNoaW5nRnVuYy5jYWNoZUlEIHx8IF9icmlkZ2UoXCJyZWZcIikpIHtcbiAgICAgICAgY2FjaGluZ0Z1bmMuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG4gICAgICAgIGNhY2hpbmdGdW5jLnYgPSBmKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWNoaW5nRnVuYy52ICsgY2FjaGluZ0Z1bmMub2Zmc2V0O1xuICAgIH07XG5cbiAgICBjYWNoaW5nRnVuYy5vZmZzZXQgPSAwO1xuICAgIHJldHVybiBmICYmIGNhY2hpbmdGdW5jO1xuICB9LFxuICAgICAgX2hvcml6b250YWwgPSB7XG4gICAgczogX3Njcm9sbExlZnQsXG4gICAgcDogXCJsZWZ0XCIsXG4gICAgcDI6IFwiTGVmdFwiLFxuICAgIG9zOiBcInJpZ2h0XCIsXG4gICAgb3MyOiBcIlJpZ2h0XCIsXG4gICAgZDogXCJ3aWR0aFwiLFxuICAgIGQyOiBcIldpZHRoXCIsXG4gICAgYTogXCJ4XCIsXG4gICAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8odmFsdWUsIF92ZXJ0aWNhbC5zYygpKSA6IF93aW4ucGFnZVhPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsTGVmdF0gfHwgX2RvY0VsW19zY3JvbGxMZWZ0XSB8fCBfYm9keVtfc2Nyb2xsTGVmdF0gfHwgMDtcbiAgICB9KVxuICB9LFxuICAgICAgX3ZlcnRpY2FsID0ge1xuICAgIHM6IF9zY3JvbGxUb3AsXG4gICAgcDogXCJ0b3BcIixcbiAgICBwMjogXCJUb3BcIixcbiAgICBvczogXCJib3R0b21cIixcbiAgICBvczI6IFwiQm90dG9tXCIsXG4gICAgZDogXCJoZWlnaHRcIixcbiAgICBkMjogXCJIZWlnaHRcIixcbiAgICBhOiBcInlcIixcbiAgICBvcDogX2hvcml6b250YWwsXG4gICAgc2M6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8oX2hvcml6b250YWwuc2MoKSwgdmFsdWUpIDogX3dpbi5wYWdlWU9mZnNldCB8fCBfZG9jW19zY3JvbGxUb3BdIHx8IF9kb2NFbFtfc2Nyb2xsVG9wXSB8fCBfYm9keVtfc2Nyb2xsVG9wXSB8fCAwO1xuICAgIH0pXG4gIH0sXG4gICAgICBfZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gX2dldFRhcmdldCh0LCBzZWxmKSB7XG4gICAgcmV0dXJuIChzZWxmICYmIHNlbGYuX2N0eCAmJiBzZWxmLl9jdHguc2VsZWN0b3IgfHwgZ3NhcC51dGlscy50b0FycmF5KSh0KVswXSB8fCAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIgJiYgZ3NhcC5jb25maWcoKS5udWxsVGFyZ2V0V2FybiAhPT0gZmFsc2UgPyBjb25zb2xlLndhcm4oXCJFbGVtZW50IG5vdCBmb3VuZDpcIiwgdCkgOiBudWxsKTtcbiAgfSxcbiAgICAgIF9nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gX2dldFNjcm9sbEZ1bmMoZWxlbWVudCwgX3JlZikge1xuICAgIHZhciBzID0gX3JlZi5zLFxuICAgICAgICBzYyA9IF9yZWYuc2M7XG4gICAgX2lzVmlld3BvcnQoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZG9jLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsKTtcblxuICAgIHZhciBpID0gX3Njcm9sbGVycy5pbmRleE9mKGVsZW1lbnQpLFxuICAgICAgICBvZmZzZXQgPSBzYyA9PT0gX3ZlcnRpY2FsLnNjID8gMSA6IDI7XG5cbiAgICAhfmkgJiYgKGkgPSBfc2Nyb2xsZXJzLnB1c2goZWxlbWVudCkgLSAxKTtcbiAgICBfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdIHx8IF9hZGRMaXN0ZW5lcihlbGVtZW50LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgIHZhciBwcmV2ID0gX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSxcbiAgICAgICAgZnVuYyA9IHByZXYgfHwgKF9zY3JvbGxlcnNbaSArIG9mZnNldF0gPSBfc2Nyb2xsQ2FjaGVGdW5jKF9nZXRQcm94eVByb3AoZWxlbWVudCwgcyksIHRydWUpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IHNjIDogX3Njcm9sbENhY2hlRnVuYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZWxlbWVudFtzXSA9IHZhbHVlIDogZWxlbWVudFtzXTtcbiAgICB9KSkpO1xuICAgIGZ1bmMudGFyZ2V0ID0gZWxlbWVudDtcbiAgICBwcmV2IHx8IChmdW5jLnNtb290aCA9IGdzYXAuZ2V0UHJvcGVydHkoZWxlbWVudCwgXCJzY3JvbGxCZWhhdmlvclwiKSA9PT0gXCJzbW9vdGhcIik7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gICAgICBfZ2V0VmVsb2NpdHlQcm9wID0gZnVuY3Rpb24gX2dldFZlbG9jaXR5UHJvcCh2YWx1ZSwgbWluVGltZVJlZnJlc2gsIHVzZURlbHRhKSB7XG4gICAgdmFyIHYxID0gdmFsdWUsXG4gICAgICAgIHYyID0gdmFsdWUsXG4gICAgICAgIHQxID0gX2dldFRpbWUoKSxcbiAgICAgICAgdDIgPSB0MSxcbiAgICAgICAgbWluID0gbWluVGltZVJlZnJlc2ggfHwgNTAsXG4gICAgICAgIGRyb3BUb1plcm9UaW1lID0gTWF0aC5tYXgoNTAwLCBtaW4gKiAzKSxcbiAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHZhbHVlLCBmb3JjZSkge1xuICAgICAgdmFyIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgICBpZiAoZm9yY2UgfHwgdCAtIHQxID4gbWluKSB7XG4gICAgICAgIHYyID0gdjE7XG4gICAgICAgIHYxID0gdmFsdWU7XG4gICAgICAgIHQyID0gdDE7XG4gICAgICAgIHQxID0gdDtcbiAgICAgIH0gZWxzZSBpZiAodXNlRGVsdGEpIHtcbiAgICAgICAgdjEgKz0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2MSA9IHYyICsgKHZhbHVlIC0gdjIpIC8gKHQgLSB0MikgKiAodDEgLSB0Mik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHYyID0gdjEgPSB1c2VEZWx0YSA/IDAgOiB2MTtcbiAgICAgIHQyID0gdDEgPSAwO1xuICAgIH0sXG4gICAgICAgIGdldFZlbG9jaXR5ID0gZnVuY3Rpb24gZ2V0VmVsb2NpdHkobGF0ZXN0VmFsdWUpIHtcbiAgICAgIHZhciB0T2xkID0gdDIsXG4gICAgICAgICAgdk9sZCA9IHYyLFxuICAgICAgICAgIHQgPSBfZ2V0VGltZSgpO1xuXG4gICAgICAobGF0ZXN0VmFsdWUgfHwgbGF0ZXN0VmFsdWUgPT09IDApICYmIGxhdGVzdFZhbHVlICE9PSB2MSAmJiB1cGRhdGUobGF0ZXN0VmFsdWUpO1xuICAgICAgcmV0dXJuIHQxID09PSB0MiB8fCB0IC0gdDIgPiBkcm9wVG9aZXJvVGltZSA/IDAgOiAodjEgKyAodXNlRGVsdGEgPyB2T2xkIDogLXZPbGQpKSAvICgodXNlRGVsdGEgPyB0IDogdDEpIC0gdE9sZCkgKiAxMDAwO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgICByZXNldDogcmVzZXQsXG4gICAgICBnZXRWZWxvY2l0eTogZ2V0VmVsb2NpdHlcbiAgICB9O1xuICB9LFxuICAgICAgX2dldEV2ZW50ID0gZnVuY3Rpb24gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSB7XG4gICAgcHJldmVudERlZmF1bHQgJiYgIWUuX2dzYXBBbGxvdyAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXMgPyBlLmNoYW5nZWRUb3VjaGVzWzBdIDogZTtcbiAgfSxcbiAgICAgIF9nZXRBYnNvbHV0ZU1heCA9IGZ1bmN0aW9uIF9nZXRBYnNvbHV0ZU1heChhKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGEpLFxuICAgICAgICBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBhKTtcbiAgICByZXR1cm4gTWF0aC5hYnMobWF4KSA+PSBNYXRoLmFicyhtaW4pID8gbWF4IDogbWluO1xuICB9LFxuICAgICAgX3NldFNjcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsVHJpZ2dlcigpIHtcbiAgICBTY3JvbGxUcmlnZ2VyID0gZ3NhcC5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyO1xuICAgIFNjcm9sbFRyaWdnZXIgJiYgU2Nyb2xsVHJpZ2dlci5jb3JlICYmIF9pbnRlZ3JhdGUoKTtcbiAgfSxcbiAgICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gICAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICAgIGlmIChnc2FwICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBfd2luID0gd2luZG93O1xuICAgICAgX2RvYyA9IGRvY3VtZW50O1xuICAgICAgX2RvY0VsID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICAgIF9yb290ID0gW193aW4sIF9kb2MsIF9kb2NFbCwgX2JvZHldO1xuICAgICAgX2NsYW1wID0gZ3NhcC51dGlscy5jbGFtcDtcblxuICAgICAgX2NvbnRleHQgPSBnc2FwLmNvcmUuY29udGV4dCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgX3BvaW50ZXJUeXBlID0gXCJvbnBvaW50ZXJlbnRlclwiIGluIF9ib2R5ID8gXCJwb2ludGVyXCIgOiBcIm1vdXNlXCI7XG4gICAgICBfaXNUb3VjaCA9IE9ic2VydmVyLmlzVG91Y2ggPSBfd2luLm1hdGNoTWVkaWEgJiYgX3dpbi5tYXRjaE1lZGlhKFwiKGhvdmVyOiBub25lKSwgKHBvaW50ZXI6IGNvYXJzZSlcIikubWF0Y2hlcyA/IDEgOiBcIm9udG91Y2hzdGFydFwiIGluIF93aW4gfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCB8fCBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDAgPyAyIDogMDtcbiAgICAgIF9ldmVudFR5cGVzID0gT2JzZXJ2ZXIuZXZlbnRUeXBlcyA9IChcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbCA/IFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIiA6ICEoXCJvbnBvaW50ZXJkb3duXCIgaW4gX2RvY0VsKSA/IFwibW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZXVwLG1vdXNldXBcIiA6IFwicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIikuc3BsaXQoXCIsXCIpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfc3RhcnR1cCA9IDA7XG4gICAgICB9LCA1MDApO1xuXG4gICAgICBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuXG4gICAgICBfY29yZUluaXR0ZWQgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBfY29yZUluaXR0ZWQ7XG4gIH07XG5cbiAgX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG4gIF9zY3JvbGxlcnMuY2FjaGUgPSAwO1xuICB2YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZXIodmFycykge1xuICAgICAgdGhpcy5pbml0KHZhcnMpO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBPYnNlcnZlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycykge1xuICAgICAgX2NvcmVJbml0dGVkIHx8IF9pbml0Q29yZShnc2FwKSB8fCBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcilcIik7XG4gICAgICBTY3JvbGxUcmlnZ2VyIHx8IF9zZXRTY3JvbGxUcmlnZ2VyKCk7XG4gICAgICB2YXIgdG9sZXJhbmNlID0gdmFycy50b2xlcmFuY2UsXG4gICAgICAgICAgZHJhZ01pbmltdW0gPSB2YXJzLmRyYWdNaW5pbXVtLFxuICAgICAgICAgIHR5cGUgPSB2YXJzLnR5cGUsXG4gICAgICAgICAgdGFyZ2V0ID0gdmFycy50YXJnZXQsXG4gICAgICAgICAgbGluZUhlaWdodCA9IHZhcnMubGluZUhlaWdodCxcbiAgICAgICAgICBkZWJvdW5jZSA9IHZhcnMuZGVib3VuY2UsXG4gICAgICAgICAgcHJldmVudERlZmF1bHQgPSB2YXJzLnByZXZlbnREZWZhdWx0LFxuICAgICAgICAgIG9uU3RvcCA9IHZhcnMub25TdG9wLFxuICAgICAgICAgIG9uU3RvcERlbGF5ID0gdmFycy5vblN0b3BEZWxheSxcbiAgICAgICAgICBpZ25vcmUgPSB2YXJzLmlnbm9yZSxcbiAgICAgICAgICB3aGVlbFNwZWVkID0gdmFycy53aGVlbFNwZWVkLFxuICAgICAgICAgIGV2ZW50ID0gdmFycy5ldmVudCxcbiAgICAgICAgICBvbkRyYWdTdGFydCA9IHZhcnMub25EcmFnU3RhcnQsXG4gICAgICAgICAgb25EcmFnRW5kID0gdmFycy5vbkRyYWdFbmQsXG4gICAgICAgICAgb25EcmFnID0gdmFycy5vbkRyYWcsXG4gICAgICAgICAgb25QcmVzcyA9IHZhcnMub25QcmVzcyxcbiAgICAgICAgICBvblJlbGVhc2UgPSB2YXJzLm9uUmVsZWFzZSxcbiAgICAgICAgICBvblJpZ2h0ID0gdmFycy5vblJpZ2h0LFxuICAgICAgICAgIG9uTGVmdCA9IHZhcnMub25MZWZ0LFxuICAgICAgICAgIG9uVXAgPSB2YXJzLm9uVXAsXG4gICAgICAgICAgb25Eb3duID0gdmFycy5vbkRvd24sXG4gICAgICAgICAgb25DaGFuZ2VYID0gdmFycy5vbkNoYW5nZVgsXG4gICAgICAgICAgb25DaGFuZ2VZID0gdmFycy5vbkNoYW5nZVksXG4gICAgICAgICAgb25DaGFuZ2UgPSB2YXJzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uVG9nZ2xlWCA9IHZhcnMub25Ub2dnbGVYLFxuICAgICAgICAgIG9uVG9nZ2xlWSA9IHZhcnMub25Ub2dnbGVZLFxuICAgICAgICAgIG9uSG92ZXIgPSB2YXJzLm9uSG92ZXIsXG4gICAgICAgICAgb25Ib3ZlckVuZCA9IHZhcnMub25Ib3ZlckVuZCxcbiAgICAgICAgICBvbk1vdmUgPSB2YXJzLm9uTW92ZSxcbiAgICAgICAgICBpZ25vcmVDaGVjayA9IHZhcnMuaWdub3JlQ2hlY2ssXG4gICAgICAgICAgaXNOb3JtYWxpemVyID0gdmFycy5pc05vcm1hbGl6ZXIsXG4gICAgICAgICAgb25HZXN0dXJlU3RhcnQgPSB2YXJzLm9uR2VzdHVyZVN0YXJ0LFxuICAgICAgICAgIG9uR2VzdHVyZUVuZCA9IHZhcnMub25HZXN0dXJlRW5kLFxuICAgICAgICAgIG9uV2hlZWwgPSB2YXJzLm9uV2hlZWwsXG4gICAgICAgICAgb25FbmFibGUgPSB2YXJzLm9uRW5hYmxlLFxuICAgICAgICAgIG9uRGlzYWJsZSA9IHZhcnMub25EaXNhYmxlLFxuICAgICAgICAgIG9uQ2xpY2sgPSB2YXJzLm9uQ2xpY2ssXG4gICAgICAgICAgc2Nyb2xsU3BlZWQgPSB2YXJzLnNjcm9sbFNwZWVkLFxuICAgICAgICAgIGNhcHR1cmUgPSB2YXJzLmNhcHR1cmUsXG4gICAgICAgICAgYWxsb3dDbGlja3MgPSB2YXJzLmFsbG93Q2xpY2tzLFxuICAgICAgICAgIGxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyxcbiAgICAgICAgICBvbkxvY2tBeGlzID0gdmFycy5vbkxvY2tBeGlzO1xuICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHRhcmdldCkgfHwgX2RvY0VsO1xuICAgICAgdGhpcy52YXJzID0gdmFycztcbiAgICAgIGlnbm9yZSAmJiAoaWdub3JlID0gZ3NhcC51dGlscy50b0FycmF5KGlnbm9yZSkpO1xuICAgICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDFlLTk7XG4gICAgICBkcmFnTWluaW11bSA9IGRyYWdNaW5pbXVtIHx8IDA7XG4gICAgICB3aGVlbFNwZWVkID0gd2hlZWxTcGVlZCB8fCAxO1xuICAgICAgc2Nyb2xsU3BlZWQgPSBzY3JvbGxTcGVlZCB8fCAxO1xuICAgICAgdHlwZSA9IHR5cGUgfHwgXCJ3aGVlbCx0b3VjaCxwb2ludGVyXCI7XG4gICAgICBkZWJvdW5jZSA9IGRlYm91bmNlICE9PSBmYWxzZTtcbiAgICAgIGxpbmVIZWlnaHQgfHwgKGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSkubGluZUhlaWdodCkgfHwgMjIpO1xuXG4gICAgICB2YXIgaWQsXG4gICAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgICAgZHJhZ2dlZCxcbiAgICAgICAgICBtb3ZlZCxcbiAgICAgICAgICB3aGVlbGVkLFxuICAgICAgICAgIGxvY2tlZCxcbiAgICAgICAgICBheGlzLFxuICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIHByZXZEZWx0YVggPSAwLFxuICAgICAgICAgIHByZXZEZWx0YVkgPSAwLFxuICAgICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICAgICAgc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYKCksXG4gICAgICAgICAgc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCksXG4gICAgICAgICAgbGltaXRUb1RvdWNoID0gfnR5cGUuaW5kZXhPZihcInRvdWNoXCIpICYmICF+dHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSAmJiBfZXZlbnRUeXBlc1swXSA9PT0gXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCh0YXJnZXQpLFxuICAgICAgICAgIG93bmVyRG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgX2RvYyxcbiAgICAgICAgICBkZWx0YVggPSBbMCwgMCwgMF0sXG4gICAgICAgICAgZGVsdGFZID0gWzAsIDAsIDBdLFxuICAgICAgICAgIG9uQ2xpY2tUaW1lID0gMCxcbiAgICAgICAgICBjbGlja0NhcHR1cmUgPSBmdW5jdGlvbiBjbGlja0NhcHR1cmUoKSB7XG4gICAgICAgIHJldHVybiBvbkNsaWNrVGltZSA9IF9nZXRUaW1lKCk7XG4gICAgICB9LFxuICAgICAgICAgIF9pZ25vcmVDaGVjayA9IGZ1bmN0aW9uIF9pZ25vcmVDaGVjayhlLCBpc1BvaW50ZXJPclRvdWNoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5ldmVudCA9IGUpICYmIGlnbm9yZSAmJiB+aWdub3JlLmluZGV4T2YoZS50YXJnZXQpIHx8IGlzUG9pbnRlck9yVG91Y2ggJiYgbGltaXRUb1RvdWNoICYmIGUucG9pbnRlclR5cGUgIT09IFwidG91Y2hcIiB8fCBpZ25vcmVDaGVjayAmJiBpZ25vcmVDaGVjayhlLCBpc1BvaW50ZXJPclRvdWNoKTtcbiAgICAgIH0sXG4gICAgICAgICAgb25TdG9wRnVuYyA9IGZ1bmN0aW9uIG9uU3RvcEZ1bmMoKSB7XG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICBvblN0b3AgJiYgb25TdG9wKHNlbGYpO1xuICAgICAgfSxcbiAgICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHZhciBkeCA9IHNlbGYuZGVsdGFYID0gX2dldEFic29sdXRlTWF4KGRlbHRhWCksXG4gICAgICAgICAgICBkeSA9IHNlbGYuZGVsdGFZID0gX2dldEFic29sdXRlTWF4KGRlbHRhWSksXG4gICAgICAgICAgICBjaGFuZ2VkWCA9IE1hdGguYWJzKGR4KSA+PSB0b2xlcmFuY2UsXG4gICAgICAgICAgICBjaGFuZ2VkWSA9IE1hdGguYWJzKGR5KSA+PSB0b2xlcmFuY2U7XG5cbiAgICAgICAgb25DaGFuZ2UgJiYgKGNoYW5nZWRYIHx8IGNoYW5nZWRZKSAmJiBvbkNoYW5nZShzZWxmLCBkeCwgZHksIGRlbHRhWCwgZGVsdGFZKTtcblxuICAgICAgICBpZiAoY2hhbmdlZFgpIHtcbiAgICAgICAgICBvblJpZ2h0ICYmIHNlbGYuZGVsdGFYID4gMCAmJiBvblJpZ2h0KHNlbGYpO1xuICAgICAgICAgIG9uTGVmdCAmJiBzZWxmLmRlbHRhWCA8IDAgJiYgb25MZWZ0KHNlbGYpO1xuICAgICAgICAgIG9uQ2hhbmdlWCAmJiBvbkNoYW5nZVgoc2VsZik7XG4gICAgICAgICAgb25Ub2dnbGVYICYmIHNlbGYuZGVsdGFYIDwgMCAhPT0gcHJldkRlbHRhWCA8IDAgJiYgb25Ub2dnbGVYKHNlbGYpO1xuICAgICAgICAgIHByZXZEZWx0YVggPSBzZWxmLmRlbHRhWDtcbiAgICAgICAgICBkZWx0YVhbMF0gPSBkZWx0YVhbMV0gPSBkZWx0YVhbMl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYW5nZWRZKSB7XG4gICAgICAgICAgb25Eb3duICYmIHNlbGYuZGVsdGFZID4gMCAmJiBvbkRvd24oc2VsZik7XG4gICAgICAgICAgb25VcCAmJiBzZWxmLmRlbHRhWSA8IDAgJiYgb25VcChzZWxmKTtcbiAgICAgICAgICBvbkNoYW5nZVkgJiYgb25DaGFuZ2VZKHNlbGYpO1xuICAgICAgICAgIG9uVG9nZ2xlWSAmJiBzZWxmLmRlbHRhWSA8IDAgIT09IHByZXZEZWx0YVkgPCAwICYmIG9uVG9nZ2xlWShzZWxmKTtcbiAgICAgICAgICBwcmV2RGVsdGFZID0gc2VsZi5kZWx0YVk7XG4gICAgICAgICAgZGVsdGFZWzBdID0gZGVsdGFZWzFdID0gZGVsdGFZWzJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3ZlZCB8fCBkcmFnZ2VkKSB7XG4gICAgICAgICAgb25Nb3ZlICYmIG9uTW92ZShzZWxmKTtcblxuICAgICAgICAgIGlmIChkcmFnZ2VkKSB7XG4gICAgICAgICAgICBvbkRyYWcoc2VsZik7XG4gICAgICAgICAgICBkcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2tlZCAmJiAhKGxvY2tlZCA9IGZhbHNlKSAmJiBvbkxvY2tBeGlzICYmIG9uTG9ja0F4aXMoc2VsZik7XG5cbiAgICAgICAgaWYgKHdoZWVsZWQpIHtcbiAgICAgICAgICBvbldoZWVsKHNlbGYpO1xuICAgICAgICAgIHdoZWVsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkID0gMDtcbiAgICAgIH0sXG4gICAgICAgICAgb25EZWx0YSA9IGZ1bmN0aW9uIG9uRGVsdGEoeCwgeSwgaW5kZXgpIHtcbiAgICAgICAgZGVsdGFYW2luZGV4XSArPSB4O1xuICAgICAgICBkZWx0YVlbaW5kZXhdICs9IHk7XG5cbiAgICAgICAgc2VsZi5fdngudXBkYXRlKHgpO1xuXG4gICAgICAgIHNlbGYuX3Z5LnVwZGF0ZSh5KTtcblxuICAgICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEgPSBmdW5jdGlvbiBvblRvdWNoT3JQb2ludGVyRGVsdGEoeCwgeSkge1xuICAgICAgICBpZiAobG9ja0F4aXMgJiYgIWF4aXMpIHtcbiAgICAgICAgICBzZWxmLmF4aXMgPSBheGlzID0gTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSA/IFwieFwiIDogXCJ5XCI7XG4gICAgICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChheGlzICE9PSBcInlcIikge1xuICAgICAgICAgIGRlbHRhWFsyXSArPSB4O1xuXG4gICAgICAgICAgc2VsZi5fdngudXBkYXRlKHgsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF4aXMgIT09IFwieFwiKSB7XG4gICAgICAgICAgZGVsdGFZWzJdICs9IHk7XG5cbiAgICAgICAgICBzZWxmLl92eS51cGRhdGUoeSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWJvdW5jZSA/IGlkIHx8IChpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpKSA6IHVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25EcmFnID0gZnVuY3Rpb24gX29uRHJhZyhlKSB7XG4gICAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlID0gX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgICAgZHkgPSB5IC0gc2VsZi55LFxuICAgICAgICAgICAgaXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZztcbiAgICAgICAgc2VsZi54ID0geDtcbiAgICAgICAgc2VsZi55ID0geTtcblxuICAgICAgICBpZiAoaXNEcmFnZ2luZyB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WCAtIHgpID49IGRyYWdNaW5pbXVtIHx8IE1hdGguYWJzKHNlbGYuc3RhcnRZIC0geSkgPj0gZHJhZ01pbmltdW0pIHtcbiAgICAgICAgICBvbkRyYWcgJiYgKGRyYWdnZWQgPSB0cnVlKTtcbiAgICAgICAgICBpc0RyYWdnaW5nIHx8IChzZWxmLmlzRHJhZ2dpbmcgPSB0cnVlKTtcbiAgICAgICAgICBvblRvdWNoT3JQb2ludGVyRGVsdGEoZHgsIGR5KTtcbiAgICAgICAgICBpc0RyYWdnaW5nIHx8IG9uRHJhZ1N0YXJ0ICYmIG9uRHJhZ1N0YXJ0KHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgICAgIF9vblByZXNzID0gc2VsZi5vblByZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSB8fCBlICYmIGUuYnV0dG9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5heGlzID0gYXhpcyA9IG51bGw7XG4gICAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgZSA9IF9nZXRFdmVudChlKTtcbiAgICAgICAgcHJldkRlbHRhWCA9IHByZXZEZWx0YVkgPSAwO1xuICAgICAgICBzZWxmLnN0YXJ0WCA9IHNlbGYueCA9IGUuY2xpZW50WDtcbiAgICAgICAgc2VsZi5zdGFydFkgPSBzZWxmLnkgPSBlLmNsaWVudFk7XG5cbiAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICBzZWxmLl92eS5yZXNldCgpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHByZXZlbnREZWZhdWx0LCB0cnVlKTtcblxuICAgICAgICBzZWxmLmRlbHRhWCA9IHNlbGYuZGVsdGFZID0gMDtcbiAgICAgICAgb25QcmVzcyAmJiBvblByZXNzKHNlbGYpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25SZWxlYXNlID0gc2VsZi5vblJlbGVhc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIGlzVHJhY2tpbmdEcmFnID0gIWlzTmFOKHNlbGYueSAtIHNlbGYuc3RhcnRZKSxcbiAgICAgICAgICAgIHdhc0RyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nICYmIChNYXRoLmFicyhzZWxmLnggLSBzZWxmLnN0YXJ0WCkgPiAzIHx8IE1hdGguYWJzKHNlbGYueSAtIHNlbGYuc3RhcnRZKSA+IDMpLFxuICAgICAgICAgICAgZXZlbnREYXRhID0gX2dldEV2ZW50KGUpO1xuXG4gICAgICAgIGlmICghd2FzRHJhZ2dpbmcgJiYgaXNUcmFja2luZ0RyYWcpIHtcbiAgICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCAmJiBhbGxvd0NsaWNrcykge1xuICAgICAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjA4LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChfZ2V0VGltZSgpIC0gb25DbGlja1RpbWUgPiAzMDAgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGljaykge1xuICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG93bmVyRG9jLmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc3ludGhldGljRXZlbnQgPSBvd25lckRvYy5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuICAgICAgICAgICAgICAgICAgc3ludGhldGljRXZlbnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCBfd2luLCAxLCBldmVudERhdGEuc2NyZWVuWCwgZXZlbnREYXRhLnNjcmVlblksIGV2ZW50RGF0YS5jbGllbnRYLCBldmVudERhdGEuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChzeW50aGV0aWNFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgb25TdG9wICYmICFpc05vcm1hbGl6ZXIgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgb25EcmFnRW5kICYmIHdhc0RyYWdnaW5nICYmIG9uRHJhZ0VuZChzZWxmKTtcbiAgICAgICAgb25SZWxlYXNlICYmIG9uUmVsZWFzZShzZWxmLCB3YXNEcmFnZ2luZyk7XG4gICAgICB9LFxuICAgICAgICAgIF9vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVTdGFydChlKSB7XG4gICAgICAgIHJldHVybiBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEgJiYgKHNlbGYuaXNHZXN0dXJpbmcgPSB0cnVlKSAmJiBvbkdlc3R1cmVTdGFydChlLCBzZWxmLmlzRHJhZ2dpbmcpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25HZXN0dXJlRW5kID0gZnVuY3Rpb24gX29uR2VzdHVyZUVuZCgpIHtcbiAgICAgICAgcmV0dXJuIChzZWxmLmlzR2VzdHVyaW5nID0gZmFsc2UpIHx8IG9uR2VzdHVyZUVuZChzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgb25TY3JvbGwgPSBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICAgIGlmIChfaWdub3JlQ2hlY2soZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeCA9IHNjcm9sbEZ1bmNYKCksXG4gICAgICAgICAgICB5ID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgICAgb25EZWx0YSgoeCAtIHNjcm9sbFgpICogc2Nyb2xsU3BlZWQsICh5IC0gc2Nyb2xsWSkgKiBzY3JvbGxTcGVlZCwgMSk7XG4gICAgICAgIHNjcm9sbFggPSB4O1xuICAgICAgICBzY3JvbGxZID0geTtcbiAgICAgICAgb25TdG9wICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgICAgIF9vbldoZWVsID0gZnVuY3Rpb24gX29uV2hlZWwoZSkge1xuICAgICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgIG9uV2hlZWwgJiYgKHdoZWVsZWQgPSB0cnVlKTtcbiAgICAgICAgdmFyIG11bHRpcGxpZXIgPSAoZS5kZWx0YU1vZGUgPT09IDEgPyBsaW5lSGVpZ2h0IDogZS5kZWx0YU1vZGUgPT09IDIgPyBfd2luLmlubmVySGVpZ2h0IDogMSkgKiB3aGVlbFNwZWVkO1xuICAgICAgICBvbkRlbHRhKGUuZGVsdGFYICogbXVsdGlwbGllciwgZS5kZWx0YVkgKiBtdWx0aXBsaWVyLCAwKTtcbiAgICAgICAgb25TdG9wICYmICFpc05vcm1hbGl6ZXIgJiYgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZSkge1xuICAgICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHggPSBlLmNsaWVudFgsXG4gICAgICAgICAgICB5ID0gZS5jbGllbnRZLFxuICAgICAgICAgICAgZHggPSB4IC0gc2VsZi54LFxuICAgICAgICAgICAgZHkgPSB5IC0gc2VsZi55O1xuICAgICAgICBzZWxmLnggPSB4O1xuICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIChkeCB8fCBkeSkgJiYgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICB9LFxuICAgICAgICAgIF9vbkhvdmVyID0gZnVuY3Rpb24gX29uSG92ZXIoZSkge1xuICAgICAgICBzZWxmLmV2ZW50ID0gZTtcbiAgICAgICAgb25Ib3ZlcihzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uSG92ZXJFbmQgPSBmdW5jdGlvbiBfb25Ib3ZlckVuZChlKSB7XG4gICAgICAgIHNlbGYuZXZlbnQgPSBlO1xuICAgICAgICBvbkhvdmVyRW5kKHNlbGYpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICAgICAgcmV0dXJuIF9pZ25vcmVDaGVjayhlKSB8fCBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpICYmIG9uQ2xpY2soc2VsZik7XG4gICAgICB9O1xuXG4gICAgICBvblN0b3BEZWxheWVkQ2FsbCA9IHNlbGYuX2RjID0gZ3NhcC5kZWxheWVkQ2FsbChvblN0b3BEZWxheSB8fCAwLjI1LCBvblN0b3BGdW5jKS5wYXVzZSgpO1xuICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICBzZWxmLl92eCA9IF9nZXRWZWxvY2l0eVByb3AoMCwgNTAsIHRydWUpO1xuICAgICAgc2VsZi5fdnkgPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICAgIHNlbGYuc2Nyb2xsWCA9IHNjcm9sbEZ1bmNYO1xuICAgICAgc2VsZi5zY3JvbGxZID0gc2Nyb2xsRnVuY1k7XG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzR2VzdHVyaW5nID0gc2VsZi5pc1ByZXNzZWQgPSBmYWxzZTtcblxuICAgICAgX2NvbnRleHQodGhpcyk7XG5cbiAgICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICAgIF9hZGRMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgICB0eXBlLmluZGV4T2YoXCJzY3JvbGxcIikgPj0gMCAmJiBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBvblNjcm9sbCwgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuICAgICAgICAgIHR5cGUuaW5kZXhPZihcIndoZWVsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgcHJldmVudERlZmF1bHQsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUuaW5kZXhPZihcInRvdWNoXCIpID49IDAgJiYgX2lzVG91Y2ggfHwgdHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSA+PSAwKSB7XG4gICAgICAgICAgICBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbM10sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgICBhbGxvd0NsaWNrcyAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgb25DbGljayAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcbiAgICAgICAgICAgIG9uR2VzdHVyZVN0YXJ0ICYmIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcbiAgICAgICAgICAgIG9uR2VzdHVyZUVuZCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZWVuZFwiLCBfb25HZXN0dXJlRW5kKTtcbiAgICAgICAgICAgIG9uSG92ZXIgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG4gICAgICAgICAgICBvbkhvdmVyRW5kICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuICAgICAgICAgICAgb25Nb3ZlICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLmlzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgZSAmJiBlLnR5cGUgJiYgX29uUHJlc3MoZSk7XG4gICAgICAgICAgb25FbmFibGUgJiYgb25FbmFibGUoc2VsZik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGYuaXNFbmFibGVkKSB7XG4gICAgICAgICAgX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHJldHVybiBvICE9PSBzZWxmICYmIF9pc1ZpZXdwb3J0KG8udGFyZ2V0KTtcbiAgICAgICAgICB9KS5sZW5ndGggfHwgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICAgIGlmIChzZWxmLmlzUHJlc3NlZCkge1xuICAgICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzTm9ybWFsaXplciA/IHRhcmdldCA6IG93bmVyRG9jLCBfZXZlbnRUeXBlc1sxXSwgX29uRHJhZywgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgXCJ3aGVlbFwiLCBfb25XaGVlbCwgY2FwdHVyZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfZXZlbnRUeXBlc1swXSwgX29uUHJlc3MsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1syXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgY2xpY2tDYXB0dXJlLCB0cnVlKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwiY2xpY2tcIiwgX29uQ2xpY2spO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVzdGFydFwiLCBfb25HZXN0dXJlU3RhcnQpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImVudGVyXCIsIF9vbkhvdmVyKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibGVhdmVcIiwgX29uSG92ZXJFbmQpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJtb3ZlXCIsIF9vbk1vdmUpO1xuXG4gICAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSBzZWxmLmlzUHJlc3NlZCA9IHNlbGYuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgIG9uRGlzYWJsZSAmJiBvbkRpc2FibGUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYua2lsbCA9IHNlbGYucmV2ZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmRpc2FibGUoKTtcblxuICAgICAgICB2YXIgaSA9IF9vYnNlcnZlcnMuaW5kZXhPZihzZWxmKTtcblxuICAgICAgICBpID49IDAgJiYgX29ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIF9ub3JtYWxpemVyID09PSBzZWxmICYmIChfbm9ybWFsaXplciA9IDApO1xuICAgICAgfTtcblxuICAgICAgX29ic2VydmVycy5wdXNoKHNlbGYpO1xuXG4gICAgICBpc05vcm1hbGl6ZXIgJiYgX2lzVmlld3BvcnQodGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIgPSBzZWxmKTtcbiAgICAgIHNlbGYuZW5hYmxlKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKE9ic2VydmVyLCBbe1xuICAgICAga2V5OiBcInZlbG9jaXR5WFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92eC5nZXRWZWxvY2l0eSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ2ZWxvY2l0eVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gT2JzZXJ2ZXI7XG4gIH0oKTtcbiAgT2JzZXJ2ZXIudmVyc2lvbiA9IFwiMy4xMi4yXCI7XG5cbiAgT2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xuICB9O1xuXG4gIE9ic2VydmVyLnJlZ2lzdGVyID0gX2luaXRDb3JlO1xuXG4gIE9ic2VydmVyLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX29ic2VydmVycy5zbGljZSgpO1xuICB9O1xuXG4gIE9ic2VydmVyLmdldEJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICAgIHJldHVybiBvLnZhcnMuaWQgPT09IGlkO1xuICAgIH0pWzBdO1xuICB9O1xuXG4gIF9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihPYnNlcnZlcik7XG5cbiAgLyohXG4gICAqIFNjcm9sbFRyaWdnZXIgMy4xMi4yXG4gICAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICAgKlxuICAgKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICAgKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAgICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gICovXG5cbiAgdmFyIGdzYXAkMSxcbiAgICAgIF9jb3JlSW5pdHRlZCQxLFxuICAgICAgX3dpbiQxLFxuICAgICAgX2RvYyQxLFxuICAgICAgX2RvY0VsJDEsXG4gICAgICBfYm9keSQxLFxuICAgICAgX3Jvb3QkMSxcbiAgICAgIF9yZXNpemVEZWxheSxcbiAgICAgIF90b0FycmF5LFxuICAgICAgX2NsYW1wJDEsXG4gICAgICBfdGltZTIsXG4gICAgICBfc3luY0ludGVydmFsLFxuICAgICAgX3JlZnJlc2hpbmcsXG4gICAgICBfcG9pbnRlcklzRG93bixcbiAgICAgIF90cmFuc2Zvcm1Qcm9wLFxuICAgICAgX2ksXG4gICAgICBfcHJldldpZHRoLFxuICAgICAgX3ByZXZIZWlnaHQsXG4gICAgICBfYXV0b1JlZnJlc2gsXG4gICAgICBfc29ydCxcbiAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICBfaWdub3JlUmVzaXplLFxuICAgICAgX25vcm1hbGl6ZXIkMSxcbiAgICAgIF9pZ25vcmVNb2JpbGVSZXNpemUsXG4gICAgICBfYmFzZVNjcmVlbkhlaWdodCxcbiAgICAgIF9iYXNlU2NyZWVuV2lkdGgsXG4gICAgICBfZml4SU9TQnVnLFxuICAgICAgX2NvbnRleHQkMSxcbiAgICAgIF9zY3JvbGxSZXN0b3JhdGlvbixcbiAgICAgIF9kaXYxMDB2aCxcbiAgICAgIF8xMDB2aCxcbiAgICAgIF9saW1pdENhbGxiYWNrcyxcbiAgICAgIF9zdGFydHVwJDEgPSAxLFxuICAgICAgX2dldFRpbWUkMSA9IERhdGUubm93LFxuICAgICAgX3RpbWUxID0gX2dldFRpbWUkMSgpLFxuICAgICAgX2xhc3RTY3JvbGxUaW1lID0gMCxcbiAgICAgIF9lbmFibGVkID0gMCxcbiAgICAgIF9wYXJzZUNsYW1wID0gZnVuY3Rpb24gX3BhcnNlQ2xhbXAodmFsdWUsIHR5cGUsIHNlbGYpIHtcbiAgICB2YXIgY2xhbXAgPSBfaXNTdHJpbmcodmFsdWUpICYmICh2YWx1ZS5zdWJzdHIoMCwgNikgPT09IFwiY2xhbXAoXCIgfHwgdmFsdWUuaW5kZXhPZihcIm1heFwiKSA+IC0xKTtcbiAgICBzZWxmW1wiX1wiICsgdHlwZSArIFwiQ2xhbXBcIl0gPSBjbGFtcDtcbiAgICByZXR1cm4gY2xhbXAgPyB2YWx1ZS5zdWJzdHIoNiwgdmFsdWUubGVuZ3RoIC0gNykgOiB2YWx1ZTtcbiAgfSxcbiAgICAgIF9rZWVwQ2xhbXAgPSBmdW5jdGlvbiBfa2VlcENsYW1wKHZhbHVlLCBjbGFtcCkge1xuICAgIHJldHVybiBjbGFtcCAmJiAoIV9pc1N0cmluZyh2YWx1ZSkgfHwgdmFsdWUuc3Vic3RyKDAsIDYpICE9PSBcImNsYW1wKFwiKSA/IFwiY2xhbXAoXCIgKyB2YWx1ZSArIFwiKVwiIDogdmFsdWU7XG4gIH0sXG4gICAgICBfcmFmQnVnRml4ID0gZnVuY3Rpb24gX3JhZkJ1Z0ZpeCgpIHtcbiAgICByZXR1cm4gX2VuYWJsZWQgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF9yYWZCdWdGaXgpO1xuICB9LFxuICAgICAgX3BvaW50ZXJEb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyRG93bkhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbiAgfSxcbiAgICAgIF9wb2ludGVyVXBIYW5kbGVyID0gZnVuY3Rpb24gX3BvaW50ZXJVcEhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMDtcbiAgfSxcbiAgICAgIF9wYXNzVGhyb3VnaCA9IGZ1bmN0aW9uIF9wYXNzVGhyb3VnaCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH0sXG4gICAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbiAgfSxcbiAgICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xuICB9LFxuICAgICAgX2dldEdTQVAkMSA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICAgIHJldHVybiBnc2FwJDEgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwJDEgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcCQxLnJlZ2lzdGVyUGx1Z2luICYmIGdzYXAkMTtcbiAgfSxcbiAgICAgIF9pc1ZpZXdwb3J0JDEgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlKSB7XG4gICAgcmV0dXJuICEhfl9yb290JDEuaW5kZXhPZihlKTtcbiAgfSxcbiAgICAgIF9nZXRWaWV3cG9ydERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkaW1lbnNpb25Qcm9wZXJ0eSkge1xuICAgIHJldHVybiAoZGltZW5zaW9uUHJvcGVydHkgPT09IFwiSGVpZ2h0XCIgPyBfMTAwdmggOiBfd2luJDFbXCJpbm5lclwiICsgZGltZW5zaW9uUHJvcGVydHldKSB8fCBfZG9jRWwkMVtcImNsaWVudFwiICsgZGltZW5zaW9uUHJvcGVydHldIHx8IF9ib2R5JDFbXCJjbGllbnRcIiArIGRpbWVuc2lvblByb3BlcnR5XTtcbiAgfSxcbiAgICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICAgIHJldHVybiBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpIHx8IChfaXNWaWV3cG9ydCQxKGVsZW1lbnQpID8gZnVuY3Rpb24gKCkge1xuICAgICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luJDEuaW5uZXJXaWR0aDtcbiAgICAgIF93aW5PZmZzZXRzLmhlaWdodCA9IF8xMDB2aDtcbiAgICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgfSk7XG4gIH0sXG4gICAgICBfZ2V0U2l6ZUZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIF9yZWYpIHtcbiAgICB2YXIgZCA9IF9yZWYuZCxcbiAgICAgICAgZDIgPSBfcmVmLmQyLFxuICAgICAgICBhID0gX3JlZi5hO1xuICAgIHJldHVybiAoYSA9IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKClbZF07XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoaXNWaWV3cG9ydCA/IF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICAgIH07XG4gIH0sXG4gICAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICAgIHJldHVybiAhaXNWaWV3cG9ydCB8fCB+X3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSA/IF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF93aW5PZmZzZXRzO1xuICAgIH07XG4gIH0sXG4gICAgICBfbWF4U2Nyb2xsID0gZnVuY3Rpb24gX21heFNjcm9sbChlbGVtZW50LCBfcmVmMikge1xuICAgIHZhciBzID0gX3JlZjIucyxcbiAgICAgICAgZDIgPSBfcmVmMi5kMixcbiAgICAgICAgZCA9IF9yZWYyLmQsXG4gICAgICAgIGEgPSBfcmVmMi5hO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCAocyA9IFwic2Nyb2xsXCIgKyBkMikgJiYgKGEgPSBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpKSA/IGEoKSAtIF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpKClbZF0gOiBfaXNWaWV3cG9ydCQxKGVsZW1lbnQpID8gKF9kb2NFbCQxW3NdIHx8IF9ib2R5JDFbc10pIC0gX2dldFZpZXdwb3J0RGltZW5zaW9uKGQyKSA6IGVsZW1lbnRbc10gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0pO1xuICB9LFxuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uIF9pdGVyYXRlQXV0b1JlZnJlc2goZnVuYywgZXZlbnRzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfYXV0b1JlZnJlc2gubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICghZXZlbnRzIHx8IH5ldmVudHMuaW5kZXhPZihfYXV0b1JlZnJlc2hbaSArIDFdKSkgJiYgZnVuYyhfYXV0b1JlZnJlc2hbaV0sIF9hdXRvUmVmcmVzaFtpICsgMV0sIF9hdXRvUmVmcmVzaFtpICsgMl0pO1xuICAgIH1cbiAgfSxcbiAgICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG4gIH0sXG4gICAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuICB9LFxuICAgICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbiAgfSxcbiAgICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIH0sXG4gICAgICBfZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHJldmVyc2VkLCBwYXVzZSkge1xuICAgIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnByb2dyZXNzKHJldmVyc2VkID8gMCA6IDEpICYmIHBhdXNlICYmIGFuaW1hdGlvbi5wYXVzZSgpO1xuICB9LFxuICAgICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKHNlbGYsIGZ1bmMpIHtcbiAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYyhzZWxmKTtcbiAgICAgIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbiAgICB9XG4gIH0sXG4gICAgICBfYWJzID0gTWF0aC5hYnMsXG4gICAgICBfbGVmdCA9IFwibGVmdFwiLFxuICAgICAgX3RvcCA9IFwidG9wXCIsXG4gICAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgICBfYm90dG9tID0gXCJib3R0b21cIixcbiAgICAgIF93aWR0aCA9IFwid2lkdGhcIixcbiAgICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgICAgX1JpZ2h0ID0gXCJSaWdodFwiLFxuICAgICAgX0xlZnQgPSBcIkxlZnRcIixcbiAgICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgICAgX0JvdHRvbSA9IFwiQm90dG9tXCIsXG4gICAgICBfcGFkZGluZyA9IFwicGFkZGluZ1wiLFxuICAgICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgICBfV2lkdGggPSBcIldpZHRoXCIsXG4gICAgICBfSGVpZ2h0ID0gXCJIZWlnaHRcIixcbiAgICAgIF9weCA9IFwicHhcIixcbiAgICAgIF9nZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICAgIHJldHVybiBfd2luJDEuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgfSxcbiAgICAgIF9tYWtlUG9zaXRpb25hYmxlID0gZnVuY3Rpb24gX21ha2VQb3NpdGlvbmFibGUoZWxlbWVudCkge1xuICAgIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiA/IHBvc2l0aW9uIDogXCJyZWxhdGl2ZVwiO1xuICB9LFxuICAgICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gICAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICAgIHZhciB0d2VlbiA9IHdpdGhvdXRUcmFuc2Zvcm1zICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiAmJiBnc2FwJDEudG8oZWxlbWVudCwge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB4UGVyY2VudDogMCxcbiAgICAgIHlQZXJjZW50OiAwLFxuICAgICAgcm90YXRpb246IDAsXG4gICAgICByb3RhdGlvblg6IDAsXG4gICAgICByb3RhdGlvblk6IDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIHNrZXdYOiAwLFxuICAgICAgc2tld1k6IDBcbiAgICB9KS5wcm9ncmVzcygxKSxcbiAgICAgICAgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfSxcbiAgICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjMpIHtcbiAgICB2YXIgZDIgPSBfcmVmMy5kMjtcbiAgICByZXR1cm4gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdIHx8IGVsZW1lbnRbXCJjbGllbnRcIiArIGQyXSB8fCAwO1xuICB9LFxuICAgICAgX2dldExhYmVsUmF0aW9BcnJheSA9IGZ1bmN0aW9uIF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICAgIGR1cmF0aW9uID0gdGltZWxpbmUuZHVyYXRpb24oKSxcbiAgICAgICAgcDtcblxuICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgIGEucHVzaChsYWJlbHNbcF0gLyBkdXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gICAgICBfZ2V0Q2xvc2VzdExhYmVsID0gZnVuY3Rpb24gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZ3NhcCQxLnV0aWxzLnNuYXAoX2dldExhYmVsUmF0aW9BcnJheShhbmltYXRpb24pLCB2YWx1ZSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9zbmFwRGlyZWN0aW9uYWwgPSBmdW5jdGlvbiBfc25hcERpcmVjdGlvbmFsKHNuYXBJbmNyZW1lbnRPckFycmF5KSB7XG4gICAgdmFyIHNuYXAgPSBnc2FwJDEudXRpbHMuc25hcChzbmFwSW5jcmVtZW50T3JBcnJheSksXG4gICAgICAgIGEgPSBBcnJheS5pc0FycmF5KHNuYXBJbmNyZW1lbnRPckFycmF5KSAmJiBzbmFwSW5jcmVtZW50T3JBcnJheS5zbGljZSgwKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGEgPyBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG5cbiAgICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBzbmFwKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgdmFsdWUgLT0gdGhyZXNob2xkO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFbaV0gPj0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhW2kgLSAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFsdWUgKz0gdGhyZXNob2xkO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBpZiAoYVtpXSA8PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhWzBdO1xuICAgIH0gOiBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyZXNob2xkID0gMWUtMztcbiAgICAgIH1cblxuICAgICAgdmFyIHNuYXBwZWQgPSBzbmFwKHZhbHVlKTtcbiAgICAgIHJldHVybiAhZGlyZWN0aW9uIHx8IE1hdGguYWJzKHNuYXBwZWQgLSB2YWx1ZSkgPCB0aHJlc2hvbGQgfHwgc25hcHBlZCAtIHZhbHVlIDwgMCA9PT0gZGlyZWN0aW9uIDwgMCA/IHNuYXBwZWQgOiBzbmFwKGRpcmVjdGlvbiA8IDAgPyB2YWx1ZSAtIHNuYXBJbmNyZW1lbnRPckFycmF5IDogdmFsdWUgKyBzbmFwSW5jcmVtZW50T3JBcnJheSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9nZXRMYWJlbEF0RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24odGltZWxpbmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoX2dldExhYmVsUmF0aW9BcnJheSh0aW1lbGluZSkpKHZhbHVlLCBzdC5kaXJlY3Rpb24pO1xuICAgIH07XG4gIH0sXG4gICAgICBfbXVsdGlMaXN0ZW5lciA9IGZ1bmN0aW9uIF9tdWx0aUxpc3RlbmVyKGZ1bmMsIGVsZW1lbnQsIHR5cGVzLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0eXBlcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIGZ1bmMoZWxlbWVudCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9LFxuICAgICAgX2FkZExpc3RlbmVyJDEgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgbm9uUGFzc2l2ZSwgY2FwdHVyZSkge1xuICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgICAgcGFzc2l2ZTogIW5vblBhc3NpdmUsXG4gICAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9yZW1vdmVMaXN0ZW5lciQxID0gZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIGNhcHR1cmUpIHtcbiAgICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsICEhY2FwdHVyZSk7XG4gIH0sXG4gICAgICBfd2hlZWxMaXN0ZW5lciA9IGZ1bmN0aW9uIF93aGVlbExpc3RlbmVyKGZ1bmMsIGVsLCBzY3JvbGxGdW5jKSB7XG4gICAgc2Nyb2xsRnVuYyA9IHNjcm9sbEZ1bmMgJiYgc2Nyb2xsRnVuYy53aGVlbEhhbmRsZXI7XG5cbiAgICBpZiAoc2Nyb2xsRnVuYykge1xuICAgICAgZnVuYyhlbCwgXCJ3aGVlbFwiLCBzY3JvbGxGdW5jKTtcbiAgICAgIGZ1bmMoZWwsIFwidG91Y2htb3ZlXCIsIHNjcm9sbEZ1bmMpO1xuICAgIH1cbiAgfSxcbiAgICAgIF9tYXJrZXJEZWZhdWx0cyA9IHtcbiAgICBzdGFydENvbG9yOiBcImdyZWVuXCIsXG4gICAgZW5kQ29sb3I6IFwicmVkXCIsXG4gICAgaW5kZW50OiAwLFxuICAgIGZvbnRTaXplOiBcIjE2cHhcIixcbiAgICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG4gIH0sXG4gICAgICBfZGVmYXVsdHMgPSB7XG4gICAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gICAgYW50aWNpcGF0ZVBpbjogMFxuICB9LFxuICAgICAgX2tleXdvcmRzID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGNlbnRlcjogMC41LFxuICAgIGJvdHRvbTogMSxcbiAgICByaWdodDogMVxuICB9LFxuICAgICAgX29mZnNldFRvUHggPSBmdW5jdGlvbiBfb2Zmc2V0VG9QeCh2YWx1ZSwgc2l6ZSkge1xuICAgIGlmIChfaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICAgIHJlbGF0aXZlID0gfmVxSW5kZXggPyArKHZhbHVlLmNoYXJBdChlcUluZGV4IC0gMSkgKyAxKSAqIHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKGVxSW5kZXggKyAxKSkgOiAwO1xuXG4gICAgICBpZiAofmVxSW5kZXgpIHtcbiAgICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgZXFJbmRleCAtIDEpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICAgICAgX2NyZWF0ZU1hcmtlciA9IGZ1bmN0aW9uIF9jcmVhdGVNYXJrZXIodHlwZSwgbmFtZSwgY29udGFpbmVyLCBkaXJlY3Rpb24sIF9yZWY0LCBvZmZzZXQsIG1hdGNoV2lkdGhFbCwgY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgdmFyIHN0YXJ0Q29sb3IgPSBfcmVmNC5zdGFydENvbG9yLFxuICAgICAgICBlbmRDb2xvciA9IF9yZWY0LmVuZENvbG9yLFxuICAgICAgICBmb250U2l6ZSA9IF9yZWY0LmZvbnRTaXplLFxuICAgICAgICBpbmRlbnQgPSBfcmVmNC5pbmRlbnQsXG4gICAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNC5mb250V2VpZ2h0O1xuXG4gICAgdmFyIGUgPSBfZG9jJDEuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IF9pc1ZpZXdwb3J0JDEoY29udGFpbmVyKSB8fCBfZ2V0UHJveHlQcm9wKGNvbnRhaW5lciwgXCJwaW5UeXBlXCIpID09PSBcImZpeGVkXCIsXG4gICAgICAgIGlzU2Nyb2xsZXIgPSB0eXBlLmluZGV4T2YoXCJzY3JvbGxlclwiKSAhPT0gLTEsXG4gICAgICAgIHBhcmVudCA9IHVzZUZpeGVkUG9zaXRpb24gPyBfYm9keSQxIDogY29udGFpbmVyLFxuICAgICAgICBpc1N0YXJ0ID0gdHlwZS5pbmRleE9mKFwic3RhcnRcIikgIT09IC0xLFxuICAgICAgICBjb2xvciA9IGlzU3RhcnQgPyBzdGFydENvbG9yIDogZW5kQ29sb3IsXG4gICAgICAgIGNzcyA9IFwiYm9yZGVyLWNvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXNpemU6XCIgKyBmb250U2l6ZSArIFwiO2NvbG9yOlwiICsgY29sb3IgKyBcIjtmb250LXdlaWdodDpcIiArIGZvbnRXZWlnaHQgKyBcIjtwb2ludGVyLWV2ZW50czpub25lO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LWZhbWlseTpzYW5zLXNlcmlmLEFyaWFsO3otaW5kZXg6MTAwMDtwYWRkaW5nOjRweCA4cHg7Ym9yZGVyLXdpZHRoOjA7Ym9yZGVyLXN0eWxlOnNvbGlkO1wiO1xuXG4gICAgY3NzICs9IFwicG9zaXRpb246XCIgKyAoKGlzU2Nyb2xsZXIgfHwgY29udGFpbmVyQW5pbWF0aW9uKSAmJiB1c2VGaXhlZFBvc2l0aW9uID8gXCJmaXhlZDtcIiA6IFwiYWJzb2x1dGU7XCIpO1xuICAgIChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgICBtYXRjaFdpZHRoRWwgJiYgKGNzcyArPSBcImJveC1zaXppbmc6Ym9yZGVyLWJveDt0ZXh0LWFsaWduOmxlZnQ7d2lkdGg6XCIgKyBtYXRjaFdpZHRoRWwub2Zmc2V0V2lkdGggKyBcInB4O1wiKTtcbiAgICBlLl9pc1N0YXJ0ID0gaXNTdGFydDtcbiAgICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlICsgKG5hbWUgPyBcIiBtYXJrZXItXCIgKyBuYW1lIDogXCJcIikpO1xuICAgIGUuc3R5bGUuY3NzVGV4dCA9IGNzcztcbiAgICBlLmlubmVyVGV4dCA9IG5hbWUgfHwgbmFtZSA9PT0gMCA/IHR5cGUgKyBcIi1cIiArIG5hbWUgOiB0eXBlO1xuICAgIHBhcmVudC5jaGlsZHJlblswXSA/IHBhcmVudC5pbnNlcnRCZWZvcmUoZSwgcGFyZW50LmNoaWxkcmVuWzBdKSA6IHBhcmVudC5hcHBlbmRDaGlsZChlKTtcbiAgICBlLl9vZmZzZXQgPSBlW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgX3Bvc2l0aW9uTWFya2VyKGUsIDAsIGRpcmVjdGlvbiwgaXNTdGFydCk7XG5cbiAgICByZXR1cm4gZTtcbiAgfSxcbiAgICAgIF9wb3NpdGlvbk1hcmtlciA9IGZ1bmN0aW9uIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHN0YXJ0LCBkaXJlY3Rpb24sIGZsaXBwZWQpIHtcbiAgICB2YXIgdmFycyA9IHtcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sXG4gICAgICAgIHNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwib3MyXCIgOiBcInAyXCJdLFxuICAgICAgICBvcHBvc2l0ZVNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwicDJcIiA6IFwib3MyXCJdO1xuICAgIG1hcmtlci5faXNGbGlwcGVkID0gZmxpcHBlZDtcbiAgICB2YXJzW2RpcmVjdGlvbi5hICsgXCJQZXJjZW50XCJdID0gZmxpcHBlZCA/IC0xMDAgOiAwO1xuICAgIHZhcnNbZGlyZWN0aW9uLmFdID0gZmxpcHBlZCA/IFwiMXB4XCIgOiAwO1xuICAgIHZhcnNbXCJib3JkZXJcIiArIHNpZGUgKyBfV2lkdGhdID0gMTtcbiAgICB2YXJzW1wiYm9yZGVyXCIgKyBvcHBvc2l0ZVNpZGUgKyBfV2lkdGhdID0gMDtcbiAgICB2YXJzW2RpcmVjdGlvbi5wXSA9IHN0YXJ0ICsgXCJweFwiO1xuICAgIGdzYXAkMS5zZXQobWFya2VyLCB2YXJzKTtcbiAgfSxcbiAgICAgIF90cmlnZ2VycyA9IFtdLFxuICAgICAgX2lkcyA9IHt9LFxuICAgICAgX3JhZklELFxuICAgICAgX3N5bmMgPSBmdW5jdGlvbiBfc3luYygpIHtcbiAgICByZXR1cm4gX2dldFRpbWUkMSgpIC0gX2xhc3RTY3JvbGxUaW1lID4gMzQgJiYgKF9yYWZJRCB8fCAoX3JhZklEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF91cGRhdGVBbGwpKSk7XG4gIH0sXG4gICAgICBfb25TY3JvbGwkMSA9IGZ1bmN0aW9uIF9vblNjcm9sbCgpIHtcbiAgICBpZiAoIV9ub3JtYWxpemVyJDEgfHwgIV9ub3JtYWxpemVyJDEuaXNQcmVzc2VkIHx8IF9ub3JtYWxpemVyJDEuc3RhcnRYID4gX2JvZHkkMS5jbGllbnRXaWR0aCkge1xuICAgICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuXG4gICAgICBpZiAoX25vcm1hbGl6ZXIkMSkge1xuICAgICAgICBfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdXBkYXRlQWxsKCk7XG4gICAgICB9XG5cbiAgICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lJDEoKTtcbiAgICB9XG4gIH0sXG4gICAgICBfc2V0QmFzZURpbWVuc2lvbnMgPSBmdW5jdGlvbiBfc2V0QmFzZURpbWVuc2lvbnMoKSB7XG4gICAgX2Jhc2VTY3JlZW5XaWR0aCA9IF93aW4kMS5pbm5lcldpZHRoO1xuICAgIF9iYXNlU2NyZWVuSGVpZ2h0ID0gX3dpbiQxLmlubmVySGVpZ2h0O1xuICB9LFxuICAgICAgX29uUmVzaXplID0gZnVuY3Rpb24gX29uUmVzaXplKCkge1xuICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgICAhX3JlZnJlc2hpbmcgJiYgIV9pZ25vcmVSZXNpemUgJiYgIV9kb2MkMS5mdWxsc2NyZWVuRWxlbWVudCAmJiAhX2RvYyQxLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ICYmICghX2lnbm9yZU1vYmlsZVJlc2l6ZSB8fCBfYmFzZVNjcmVlbldpZHRoICE9PSBfd2luJDEuaW5uZXJXaWR0aCB8fCBNYXRoLmFicyhfd2luJDEuaW5uZXJIZWlnaHQgLSBfYmFzZVNjcmVlbkhlaWdodCkgPiBfd2luJDEuaW5uZXJIZWlnaHQgKiAwLjI1KSAmJiBfcmVzaXplRGVsYXkucmVzdGFydCh0cnVlKTtcbiAgfSxcbiAgICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgICBfc29mdFJlZnJlc2ggPSBmdW5jdGlvbiBfc29mdFJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9yZW1vdmVMaXN0ZW5lciQxKFNjcm9sbFRyaWdnZXIkMSwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKSB8fCBfcmVmcmVzaEFsbCh0cnVlKTtcbiAgfSxcbiAgICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gICAgcmV0dXJuIF9saXN0ZW5lcnNbdHlwZV0gJiYgX2xpc3RlbmVyc1t0eXBlXS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBmKCk7XG4gICAgfSkgfHwgX2VtcHR5QXJyYXk7XG4gIH0sXG4gICAgICBfc2F2ZWRTdHlsZXMgPSBbXSxcbiAgICAgIF9yZXZlcnRSZWNvcmRlZCA9IGZ1bmN0aW9uIF9yZXZlcnRSZWNvcmRlZChtZWRpYSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3NhdmVkU3R5bGVzLmxlbmd0aDsgaSArPSA1KSB7XG4gICAgICBpZiAoIW1lZGlhIHx8IF9zYXZlZFN0eWxlc1tpICsgNF0gJiYgX3NhdmVkU3R5bGVzW2kgKyA0XS5xdWVyeSA9PT0gbWVkaWEpIHtcbiAgICAgICAgX3NhdmVkU3R5bGVzW2ldLnN0eWxlLmNzc1RleHQgPSBfc2F2ZWRTdHlsZXNbaSArIDFdO1xuICAgICAgICBfc2F2ZWRTdHlsZXNbaV0uZ2V0QkJveCAmJiBfc2F2ZWRTdHlsZXNbaV0uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIF9zYXZlZFN0eWxlc1tpICsgMl0gfHwgXCJcIik7XG4gICAgICAgIF9zYXZlZFN0eWxlc1tpICsgM10udW5jYWNoZSA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX3JldmVydEFsbCA9IGZ1bmN0aW9uIF9yZXZlcnRBbGwoa2lsbCwgbWVkaWEpIHtcbiAgICB2YXIgdHJpZ2dlcjtcblxuICAgIGZvciAoX2kgPSAwOyBfaSA8IF90cmlnZ2Vycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHRyaWdnZXIgPSBfdHJpZ2dlcnNbX2ldO1xuXG4gICAgICBpZiAodHJpZ2dlciAmJiAoIW1lZGlhIHx8IHRyaWdnZXIuX2N0eCA9PT0gbWVkaWEpKSB7XG4gICAgICAgIGlmIChraWxsKSB7XG4gICAgICAgICAgdHJpZ2dlci5raWxsKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVkaWEgJiYgX3JldmVydFJlY29yZGVkKG1lZGlhKTtcbiAgICBtZWRpYSB8fCBfZGlzcGF0Y2goXCJyZXZlcnRcIik7XG4gIH0sXG4gICAgICBfY2xlYXJTY3JvbGxNZW1vcnkgPSBmdW5jdGlvbiBfY2xlYXJTY3JvbGxNZW1vcnkoc2Nyb2xsUmVzdG9yYXRpb24sIGZvcmNlKSB7XG4gICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAgIChmb3JjZSB8fCAhX3JlZnJlc2hpbmdBbGwpICYmIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiBvYmouY2FjaGVJRCsrICYmIChvYmoucmVjID0gMCk7XG4gICAgfSk7XG4gICAgX2lzU3RyaW5nKHNjcm9sbFJlc3RvcmF0aW9uKSAmJiAoX3dpbiQxLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBfc2Nyb2xsUmVzdG9yYXRpb24gPSBzY3JvbGxSZXN0b3JhdGlvbik7XG4gIH0sXG4gICAgICBfcmVmcmVzaGluZ0FsbCxcbiAgICAgIF9yZWZyZXNoSUQgPSAwLFxuICAgICAgX3F1ZXVlUmVmcmVzaElELFxuICAgICAgX3F1ZXVlUmVmcmVzaEFsbCA9IGZ1bmN0aW9uIF9xdWV1ZVJlZnJlc2hBbGwoKSB7XG4gICAgaWYgKF9xdWV1ZVJlZnJlc2hJRCAhPT0gX3JlZnJlc2hJRCkge1xuICAgICAgdmFyIGlkID0gX3F1ZXVlUmVmcmVzaElEID0gX3JlZnJlc2hJRDtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpZCA9PT0gX3JlZnJlc2hJRCAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgICAgIF9yZWZyZXNoMTAwdmggPSBmdW5jdGlvbiBfcmVmcmVzaDEwMHZoKCkge1xuICAgIF9ib2R5JDEuYXBwZW5kQ2hpbGQoX2RpdjEwMHZoKTtcblxuICAgIF8xMDB2aCA9IF9kaXYxMDB2aC5vZmZzZXRIZWlnaHQgfHwgX3dpbiQxLmlubmVySGVpZ2h0O1xuXG4gICAgX2JvZHkkMS5yZW1vdmVDaGlsZChfZGl2MTAwdmgpO1xuICB9LFxuICAgICAgX3JlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcmVmcmVzaEFsbChmb3JjZSwgc2tpcFJldmVydCkge1xuICAgIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIWZvcmNlKSB7XG4gICAgICBfYWRkTGlzdGVuZXIkMShTY3JvbGxUcmlnZ2VyJDEsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgICBfcmVmcmVzaGluZ0FsbCA9IFNjcm9sbFRyaWdnZXIkMS5pc1JlZnJlc2hpbmcgPSB0cnVlO1xuXG4gICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBfaXNGdW5jdGlvbihvYmopICYmICsrb2JqLmNhY2hlSUQgJiYgKG9iai5yZWMgPSBvYmooKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgcmVmcmVzaEluaXRzID0gX2Rpc3BhdGNoKFwicmVmcmVzaEluaXRcIik7XG5cbiAgICBfc29ydCAmJiBTY3JvbGxUcmlnZ2VyJDEuc29ydCgpO1xuICAgIHNraXBSZXZlcnQgfHwgX3JldmVydEFsbCgpO1xuXG4gICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICAgIG9iai5zbW9vdGggJiYgKG9iai50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIik7XG4gICAgICAgIG9iaigwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5yZWZyZXNoKCk7XG4gICAgfSk7XG5cbiAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCwgaSkge1xuICAgICAgaWYgKHQuX3N1YlBpbk9mZnNldCAmJiB0LnBpbikge1xuICAgICAgICB2YXIgcHJvcCA9IHQudmFycy5ob3Jpem9udGFsID8gXCJvZmZzZXRXaWR0aFwiIDogXCJvZmZzZXRIZWlnaHRcIixcbiAgICAgICAgICAgIG9yaWdpbmFsID0gdC5waW5bcHJvcF07XG4gICAgICAgIHQucmV2ZXJ0KHRydWUsIDEpO1xuICAgICAgICB0LmFkanVzdFBpblNwYWNpbmcodC5waW5bcHJvcF0gLSBvcmlnaW5hbCk7XG4gICAgICAgIHQucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBtYXggPSBfbWF4U2Nyb2xsKHQuc2Nyb2xsZXIsIHQuX2Rpcik7XG5cbiAgICAgICh0LnZhcnMuZW5kID09PSBcIm1heFwiIHx8IHQuX2VuZENsYW1wICYmIHQuZW5kID4gbWF4KSAmJiB0LnNldFBvc2l0aW9ucyh0LnN0YXJ0LCBNYXRoLm1heCh0LnN0YXJ0ICsgMSwgbWF4KSwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICByZWZyZXNoSW5pdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5yZW5kZXIgJiYgcmVzdWx0LnJlbmRlcigtMSk7XG4gICAgfSk7XG5cbiAgICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgaWYgKF9pc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgICAgb2JqLnNtb290aCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBvYmoudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJzbW9vdGhcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIG9iai5yZWMgJiYgb2JqKG9iai5yZWMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2NsZWFyU2Nyb2xsTWVtb3J5KF9zY3JvbGxSZXN0b3JhdGlvbiwgMSk7XG5cbiAgICBfcmVzaXplRGVsYXkucGF1c2UoKTtcblxuICAgIF9yZWZyZXNoSUQrKztcbiAgICBfcmVmcmVzaGluZ0FsbCA9IDI7XG5cbiAgICBfdXBkYXRlQWxsKDIpO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBfaXNGdW5jdGlvbih0LnZhcnMub25SZWZyZXNoKSAmJiB0LnZhcnMub25SZWZyZXNoKHQpO1xuICAgIH0pO1xuXG4gICAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyJDEuaXNSZWZyZXNoaW5nID0gZmFsc2U7XG5cbiAgICBfZGlzcGF0Y2goXCJyZWZyZXNoXCIpO1xuICB9LFxuICAgICAgX2xhc3RTY3JvbGwgPSAwLFxuICAgICAgX2RpcmVjdGlvbiA9IDEsXG4gICAgICBfcHJpbWFyeSxcbiAgICAgIF91cGRhdGVBbGwgPSBmdW5jdGlvbiBfdXBkYXRlQWxsKGZvcmNlKSB7XG4gICAgaWYgKCFfcmVmcmVzaGluZ0FsbCB8fCBmb3JjZSA9PT0gMikge1xuICAgICAgU2Nyb2xsVHJpZ2dlciQxLmlzVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgX3ByaW1hcnkgJiYgX3ByaW1hcnkudXBkYXRlKDApO1xuXG4gICAgICB2YXIgbCA9IF90cmlnZ2Vycy5sZW5ndGgsXG4gICAgICAgICAgdGltZSA9IF9nZXRUaW1lJDEoKSxcbiAgICAgICAgICByZWNvcmRWZWxvY2l0eSA9IHRpbWUgLSBfdGltZTEgPj0gNTAsXG4gICAgICAgICAgc2Nyb2xsID0gbCAmJiBfdHJpZ2dlcnNbMF0uc2Nyb2xsKCk7XG5cbiAgICAgIF9kaXJlY3Rpb24gPSBfbGFzdFNjcm9sbCA+IHNjcm9sbCA/IC0xIDogMTtcbiAgICAgIF9yZWZyZXNoaW5nQWxsIHx8IChfbGFzdFNjcm9sbCA9IHNjcm9sbCk7XG5cbiAgICAgIGlmIChyZWNvcmRWZWxvY2l0eSkge1xuICAgICAgICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFfcG9pbnRlcklzRG93biAmJiB0aW1lIC0gX2xhc3RTY3JvbGxUaW1lID4gMjAwKSB7XG4gICAgICAgICAgX2xhc3RTY3JvbGxUaW1lID0gMDtcblxuICAgICAgICAgIF9kaXNwYXRjaChcInNjcm9sbEVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aW1lMiA9IF90aW1lMTtcbiAgICAgICAgX3RpbWUxID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9kaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgIF9pID0gbDtcblxuICAgICAgICB3aGlsZSAoX2ktLSA+IDApIHtcbiAgICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9kaXJlY3Rpb24gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChfaSA9IDA7IF9pIDwgbDsgX2krKykge1xuICAgICAgICAgIF90cmlnZ2Vyc1tfaV0gJiYgX3RyaWdnZXJzW19pXS51cGRhdGUoMCwgcmVjb3JkVmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFNjcm9sbFRyaWdnZXIkMS5pc1VwZGF0aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3JhZklEID0gMDtcbiAgfSxcbiAgICAgIF9wcm9wTmFtZXNUb0NvcHkgPSBbX2xlZnQsIF90b3AsIF9ib3R0b20sIF9yaWdodCwgX21hcmdpbiArIF9Cb3R0b20sIF9tYXJnaW4gKyBfUmlnaHQsIF9tYXJnaW4gKyBfVG9wLCBfbWFyZ2luICsgX0xlZnQsIFwiZGlzcGxheVwiLCBcImZsZXhTaHJpbmtcIiwgXCJmbG9hdFwiLCBcInpJbmRleFwiLCBcImdyaWRDb2x1bW5TdGFydFwiLCBcImdyaWRDb2x1bW5FbmRcIiwgXCJncmlkUm93U3RhcnRcIiwgXCJncmlkUm93RW5kXCIsIFwiZ3JpZEFyZWFcIiwgXCJqdXN0aWZ5U2VsZlwiLCBcImFsaWduU2VsZlwiLCBcInBsYWNlU2VsZlwiLCBcIm9yZGVyXCJdLFxuICAgICAgX3N0YXRlUHJvcHMgPSBfcHJvcE5hbWVzVG9Db3B5LmNvbmNhdChbX3dpZHRoLCBfaGVpZ2h0LCBcImJveFNpemluZ1wiLCBcIm1heFwiICsgX1dpZHRoLCBcIm1heFwiICsgX0hlaWdodCwgXCJwb3NpdGlvblwiLCBfbWFyZ2luLCBfcGFkZGluZywgX3BhZGRpbmcgKyBfVG9wLCBfcGFkZGluZyArIF9SaWdodCwgX3BhZGRpbmcgKyBfQm90dG9tLCBfcGFkZGluZyArIF9MZWZ0XSksXG4gICAgICBfc3dhcFBpbk91dCA9IGZ1bmN0aW9uIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBzdGF0ZSkge1xuICAgIF9zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICB2YXIgY2FjaGUgPSBwaW4uX2dzYXA7XG5cbiAgICBpZiAoY2FjaGUuc3BhY2VySXNOYXRpdmUpIHtcbiAgICAgIF9zZXRTdGF0ZShjYWNoZS5zcGFjZXJTdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgICB2YXIgcGFyZW50ID0gc3BhY2VyLnBhcmVudE5vZGU7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShwaW4sIHNwYWNlcik7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChzcGFjZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBpbi5fZ3NhcC5zd2FwcGVkSW4gPSBmYWxzZTtcbiAgfSxcbiAgICAgIF9zd2FwUGluSW4gPSBmdW5jdGlvbiBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcywgc3BhY2VyU3RhdGUpIHtcbiAgICBpZiAoIXBpbi5fZ3NhcC5zd2FwcGVkSW4pIHtcbiAgICAgIHZhciBpID0gX3Byb3BOYW1lc1RvQ29weS5sZW5ndGgsXG4gICAgICAgICAgc3BhY2VyU3R5bGUgPSBzcGFjZXIuc3R5bGUsXG4gICAgICAgICAgcGluU3R5bGUgPSBwaW4uc3R5bGUsXG4gICAgICAgICAgcDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwID0gX3Byb3BOYW1lc1RvQ29weVtpXTtcbiAgICAgICAgc3BhY2VyU3R5bGVbcF0gPSBjc1twXTtcbiAgICAgIH1cblxuICAgICAgc3BhY2VyU3R5bGUucG9zaXRpb24gPSBjcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiID8gXCJhYnNvbHV0ZVwiIDogXCJyZWxhdGl2ZVwiO1xuICAgICAgY3MuZGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiAoc3BhY2VyU3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpO1xuICAgICAgcGluU3R5bGVbX2JvdHRvbV0gPSBwaW5TdHlsZVtfcmlnaHRdID0gXCJhdXRvXCI7XG4gICAgICBzcGFjZXJTdHlsZS5mbGV4QmFzaXMgPSBjcy5mbGV4QmFzaXMgfHwgXCJhdXRvXCI7XG4gICAgICBzcGFjZXJTdHlsZS5vdmVyZmxvdyA9IFwidmlzaWJsZVwiO1xuICAgICAgc3BhY2VyU3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgICBzcGFjZXJTdHlsZVtfd2lkdGhdID0gX2dldFNpemUocGluLCBfaG9yaXpvbnRhbCkgKyBfcHg7XG4gICAgICBzcGFjZXJTdHlsZVtfaGVpZ2h0XSA9IF9nZXRTaXplKHBpbiwgX3ZlcnRpY2FsKSArIF9weDtcbiAgICAgIHNwYWNlclN0eWxlW19wYWRkaW5nXSA9IHBpblN0eWxlW19tYXJnaW5dID0gcGluU3R5bGVbX3RvcF0gPSBwaW5TdHlsZVtfbGVmdF0gPSBcIjBcIjtcblxuICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgICAgcGluU3R5bGVbX3dpZHRoXSA9IHBpblN0eWxlW1wibWF4XCIgKyBfV2lkdGhdID0gY3NbX3dpZHRoXTtcbiAgICAgIHBpblN0eWxlW19oZWlnaHRdID0gcGluU3R5bGVbXCJtYXhcIiArIF9IZWlnaHRdID0gY3NbX2hlaWdodF07XG4gICAgICBwaW5TdHlsZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG5cbiAgICAgIGlmIChwaW4ucGFyZW50Tm9kZSAhPT0gc3BhY2VyKSB7XG4gICAgICAgIHBpbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFjZXIsIHBpbik7XG4gICAgICAgIHNwYWNlci5hcHBlbmRDaGlsZChwaW4pO1xuICAgICAgfVxuXG4gICAgICBwaW4uX2dzYXAuc3dhcHBlZEluID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gICAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgICBfc2V0U3RhdGUgPSBmdW5jdGlvbiBfc2V0U3RhdGUoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIHZhciBzdHlsZSA9IHN0YXRlLnQuc3R5bGUsXG4gICAgICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgICAgICBpID0gMCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIHZhbHVlO1xuICAgICAgKHN0YXRlLnQuX2dzYXAgfHwgZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUoc3RhdGUudCkpLnVuY2FjaGUgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgICB2YWx1ZSA9IHN0YXRlW2kgKyAxXTtcbiAgICAgICAgcCA9IHN0YXRlW2ldO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHN0eWxlW3BdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGVbcF0pIHtcbiAgICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX2dldFN0YXRlID0gZnVuY3Rpb24gX2dldFN0YXRlKGVsZW1lbnQpIHtcbiAgICB2YXIgbCA9IF9zdGF0ZVByb3BzLmxlbmd0aCxcbiAgICAgICAgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgICBzdGF0ZSA9IFtdLFxuICAgICAgICBpID0gMDtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzdGF0ZS5wdXNoKF9zdGF0ZVByb3BzW2ldLCBzdHlsZVtfc3RhdGVQcm9wc1tpXV0pO1xuICAgIH1cblxuICAgIHN0YXRlLnQgPSBlbGVtZW50O1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfSxcbiAgICAgIF9jb3B5U3RhdGUgPSBmdW5jdGlvbiBfY29weVN0YXRlKHN0YXRlLCBvdmVycmlkZSwgb21pdE9mZnNldHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICAgIGkgPSBvbWl0T2Zmc2V0cyA/IDggOiAwLFxuICAgICAgICBwO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgIHAgPSBzdGF0ZVtpXTtcbiAgICAgIHJlc3VsdC5wdXNoKHAsIHAgaW4gb3ZlcnJpZGUgPyBvdmVycmlkZVtwXSA6IHN0YXRlW2kgKyAxXSk7XG4gICAgfVxuXG4gICAgcmVzdWx0LnQgPSBzdGF0ZS50O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gICAgICBfd2luT2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogMFxuICB9LFxuICAgICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbih2YWx1ZSwgdHJpZ2dlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHNjcm9sbCwgbWFya2VyLCBtYXJrZXJTY3JvbGxlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBzY3JvbGxlck1heCwgY29udGFpbmVyQW5pbWF0aW9uLCBjbGFtcFplcm9Qcm9wKSB7XG4gICAgX2lzRnVuY3Rpb24odmFsdWUpICYmICh2YWx1ZSA9IHZhbHVlKHNlbGYpKTtcblxuICAgIGlmIChfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLnN1YnN0cigwLCAzKSA9PT0gXCJtYXhcIikge1xuICAgICAgdmFsdWUgPSBzY3JvbGxlck1heCArICh2YWx1ZS5jaGFyQXQoNCkgPT09IFwiPVwiID8gX29mZnNldFRvUHgoXCIwXCIgKyB2YWx1ZS5zdWJzdHIoMyksIHNjcm9sbGVyU2l6ZSkgOiAwKTtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lKCkgOiAwLFxuICAgICAgICBwMSxcbiAgICAgICAgcDIsXG4gICAgICAgIGVsZW1lbnQ7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKDApO1xuICAgIGlzTmFOKHZhbHVlKSB8fCAodmFsdWUgPSArdmFsdWUpO1xuXG4gICAgaWYgKCFfaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICBfaXNGdW5jdGlvbih0cmlnZ2VyKSAmJiAodHJpZ2dlciA9IHRyaWdnZXIoc2VsZikpO1xuICAgICAgdmFyIG9mZnNldHMgPSAodmFsdWUgfHwgXCIwXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgbG9jYWxPZmZzZXQsXG4gICAgICAgICAgZ2xvYmFsT2Zmc2V0LFxuICAgICAgICAgIGRpc3BsYXk7XG4gICAgICBlbGVtZW50ID0gX2dldFRhcmdldCh0cmlnZ2VyLCBzZWxmKSB8fCBfYm9keSQxO1xuICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KSB8fCB7fTtcblxuICAgICAgaWYgKCghYm91bmRzIHx8ICFib3VuZHMubGVmdCAmJiAhYm91bmRzLnRvcCkgJiYgX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgZGlzcGxheSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgICAgICBkaXNwbGF5ID8gZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheSA6IGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgfVxuXG4gICAgICBsb2NhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMF0sIGJvdW5kc1tkaXJlY3Rpb24uZF0pO1xuICAgICAgZ2xvYmFsT2Zmc2V0ID0gX29mZnNldFRvUHgob2Zmc2V0c1sxXSB8fCBcIjBcIiwgc2Nyb2xsZXJTaXplKTtcbiAgICAgIHZhbHVlID0gYm91bmRzW2RpcmVjdGlvbi5wXSAtIHNjcm9sbGVyQm91bmRzW2RpcmVjdGlvbi5wXSAtIGJvcmRlcldpZHRoICsgbG9jYWxPZmZzZXQgKyBzY3JvbGwgLSBnbG9iYWxPZmZzZXQ7XG4gICAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIGdsb2JhbE9mZnNldCwgZGlyZWN0aW9uLCBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQgPCAyMCB8fCBtYXJrZXJTY3JvbGxlci5faXNTdGFydCAmJiBnbG9iYWxPZmZzZXQgPiAyMCk7XG4gICAgICBzY3JvbGxlclNpemUgLT0gc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKHZhbHVlID0gZ3NhcCQxLnV0aWxzLm1hcFJhbmdlKGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLnN0YXJ0LCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5lbmQsIDAsIHNjcm9sbGVyTWF4LCB2YWx1ZSkpO1xuICAgICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBzY3JvbGxlclNpemUsIGRpcmVjdGlvbiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNsYW1wWmVyb1Byb3ApIHtcbiAgICAgIHNlbGZbY2xhbXBaZXJvUHJvcF0gPSB2YWx1ZSB8fCAtMC4wMDE7XG4gICAgICB2YWx1ZSA8IDAgJiYgKHZhbHVlID0gMCk7XG4gICAgfVxuXG4gICAgaWYgKG1hcmtlcikge1xuICAgICAgdmFyIHBvc2l0aW9uID0gdmFsdWUgKyBzY3JvbGxlclNpemUsXG4gICAgICAgICAgaXNTdGFydCA9IG1hcmtlci5faXNTdGFydDtcbiAgICAgIHAxID0gXCJzY3JvbGxcIiArIGRpcmVjdGlvbi5kMjtcblxuICAgICAgX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgcG9zaXRpb24sIGRpcmVjdGlvbiwgaXNTdGFydCAmJiBwb3NpdGlvbiA+IDIwIHx8ICFpc1N0YXJ0ICYmICh1c2VGaXhlZFBvc2l0aW9uID8gTWF0aC5tYXgoX2JvZHkkMVtwMV0sIF9kb2NFbCQxW3AxXSkgOiBtYXJrZXIucGFyZW50Tm9kZVtwMV0pIDw9IHBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgIHNjcm9sbGVyQm91bmRzID0gX2dldEJvdW5kcyhtYXJrZXJTY3JvbGxlcik7XG4gICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgKG1hcmtlci5zdHlsZVtkaXJlY3Rpb24ub3AucF0gPSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ub3AucF0gLSBkaXJlY3Rpb24ub3AubSAtIG1hcmtlci5fb2Zmc2V0ICsgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmIGVsZW1lbnQpIHtcbiAgICAgIHAxID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHNjcm9sbGVyTWF4KTtcbiAgICAgIHAyID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ID0gcDFbZGlyZWN0aW9uLnBdIC0gcDJbZGlyZWN0aW9uLnBdO1xuICAgICAgdmFsdWUgPSB2YWx1ZSAvIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ICogc2Nyb2xsZXJNYXg7XG4gICAgfVxuXG4gICAgY29udGFpbmVyQW5pbWF0aW9uICYmIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHRpbWUpO1xuICAgIHJldHVybiBjb250YWluZXJBbmltYXRpb24gPyB2YWx1ZSA6IE1hdGgucm91bmQodmFsdWUpO1xuICB9LFxuICAgICAgX3ByZWZpeEV4cCA9IC8od2Via2l0fG1venxsZW5ndGh8Y3NzVGV4dHxpbnNldCkvaSxcbiAgICAgIF9yZXBhcmVudCA9IGZ1bmN0aW9uIF9yZXBhcmVudChlbGVtZW50LCBwYXJlbnQsIHRvcCwgbGVmdCkge1xuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGNzO1xuXG4gICAgICBpZiAocGFyZW50ID09PSBfYm9keSQxKSB7XG4gICAgICAgIGVsZW1lbnQuX3N0T3JpZyA9IHN0eWxlLmNzc1RleHQ7XG4gICAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgICAgZm9yIChwIGluIGNzKSB7XG4gICAgICAgICAgaWYgKCErcCAmJiAhX3ByZWZpeEV4cC50ZXN0KHApICYmIGNzW3BdICYmIHR5cGVvZiBzdHlsZVtwXSA9PT0gXCJzdHJpbmdcIiAmJiBwICE9PSBcIjBcIikge1xuICAgICAgICAgICAgc3R5bGVbcF0gPSBjc1twXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZS50b3AgPSB0b3A7XG4gICAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGUuY3NzVGV4dCA9IGVsZW1lbnQuX3N0T3JpZztcbiAgICAgIH1cblxuICAgICAgZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUoZWxlbWVudCkudW5jYWNoZSA9IDE7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuICB9LFxuICAgICAgX2ludGVycnVwdGlvblRyYWNrZXIgPSBmdW5jdGlvbiBfaW50ZXJydXB0aW9uVHJhY2tlcihnZXRWYWx1ZUZ1bmMsIGluaXRpYWxWYWx1ZSwgb25JbnRlcnJ1cHQpIHtcbiAgICB2YXIgbGFzdDEgPSBpbml0aWFsVmFsdWUsXG4gICAgICAgIGxhc3QyID0gbGFzdDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBNYXRoLnJvdW5kKGdldFZhbHVlRnVuYygpKTtcblxuICAgICAgaWYgKGN1cnJlbnQgIT09IGxhc3QxICYmIGN1cnJlbnQgIT09IGxhc3QyICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MSkgPiAzICYmIE1hdGguYWJzKGN1cnJlbnQgLSBsYXN0MikgPiAzKSB7XG4gICAgICAgIHZhbHVlID0gY3VycmVudDtcbiAgICAgICAgb25JbnRlcnJ1cHQgJiYgb25JbnRlcnJ1cHQoKTtcbiAgICAgIH1cblxuICAgICAgbGFzdDIgPSBsYXN0MTtcbiAgICAgIGxhc3QxID0gdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9zaGlmdE1hcmtlciA9IGZ1bmN0aW9uIF9zaGlmdE1hcmtlcihtYXJrZXIsIGRpcmVjdGlvbiwgdmFsdWUpIHtcbiAgICB2YXIgdmFycyA9IHt9O1xuICAgIHZhcnNbZGlyZWN0aW9uLnBdID0gXCIrPVwiICsgdmFsdWU7XG4gICAgZ3NhcCQxLnNldChtYXJrZXIsIHZhcnMpO1xuICB9LFxuICAgICAgX2dldFR3ZWVuQ3JlYXRvciA9IGZ1bmN0aW9uIF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIGRpcmVjdGlvbikge1xuICAgIHZhciBnZXRTY3JvbGwgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgcHJvcCA9IFwiX3Njcm9sbFwiICsgZGlyZWN0aW9uLnAyLFxuICAgICAgICBnZXRUd2VlbiA9IGZ1bmN0aW9uIGdldFR3ZWVuKHNjcm9sbFRvLCB2YXJzLCBpbml0aWFsVmFsdWUsIGNoYW5nZTEsIGNoYW5nZTIpIHtcbiAgICAgIHZhciB0d2VlbiA9IGdldFR3ZWVuLnR3ZWVuLFxuICAgICAgICAgIG9uQ29tcGxldGUgPSB2YXJzLm9uQ29tcGxldGUsXG4gICAgICAgICAgbW9kaWZpZXJzID0ge307XG4gICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUgfHwgZ2V0U2Nyb2xsKCk7XG5cbiAgICAgIHZhciBjaGVja0ZvckludGVycnVwdGlvbiA9IF9pbnRlcnJ1cHRpb25UcmFja2VyKGdldFNjcm9sbCwgaW5pdGlhbFZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgICAgfSk7XG5cbiAgICAgIGNoYW5nZTIgPSBjaGFuZ2UxICYmIGNoYW5nZTIgfHwgMDtcbiAgICAgIGNoYW5nZTEgPSBjaGFuZ2UxIHx8IHNjcm9sbFRvIC0gaW5pdGlhbFZhbHVlO1xuICAgICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgICAgdmFyc1twcm9wXSA9IHNjcm9sbFRvO1xuICAgICAgdmFycy5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG5cbiAgICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrRm9ySW50ZXJydXB0aW9uKGluaXRpYWxWYWx1ZSArIGNoYW5nZTEgKiB0d2Vlbi5yYXRpbyArIGNoYW5nZTIgKiB0d2Vlbi5yYXRpbyAqIHR3ZWVuLnJhdGlvKTtcbiAgICAgIH07XG5cbiAgICAgIHZhcnMub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcblxuICAgICAgICBfdXBkYXRlQWxsKCk7XG4gICAgICB9O1xuXG4gICAgICB2YXJzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlLmNhbGwodHdlZW4pO1xuICAgICAgfTtcblxuICAgICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAkMS50byhzY3JvbGxlciwgdmFycyk7XG4gICAgICByZXR1cm4gdHdlZW47XG4gICAgfTtcblxuICAgIHNjcm9sbGVyW3Byb3BdID0gZ2V0U2Nyb2xsO1xuXG4gICAgZ2V0U2Nyb2xsLndoZWVsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRUd2Vlbi50d2VlbiAmJiBnZXRUd2Vlbi50d2Vlbi5raWxsKCkgJiYgKGdldFR3ZWVuLnR3ZWVuID0gMCk7XG4gICAgfTtcblxuICAgIF9hZGRMaXN0ZW5lciQxKHNjcm9sbGVyLCBcIndoZWVsXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpO1xuXG4gICAgU2Nyb2xsVHJpZ2dlciQxLmlzVG91Y2ggJiYgX2FkZExpc3RlbmVyJDEoc2Nyb2xsZXIsIFwidG91Y2htb3ZlXCIsIGdldFNjcm9sbC53aGVlbEhhbmRsZXIpO1xuICAgIHJldHVybiBnZXRUd2VlbjtcbiAgfTtcblxuICB2YXIgU2Nyb2xsVHJpZ2dlciQxID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbFRyaWdnZXIodmFycywgYW5pbWF0aW9uKSB7XG4gICAgICBfY29yZUluaXR0ZWQkMSB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXAkMSkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcilcIik7XG5cbiAgICAgIF9jb250ZXh0JDEodGhpcyk7XG5cbiAgICAgIHRoaXMuaW5pdCh2YXJzLCBhbmltYXRpb24pO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBTY3JvbGxUcmlnZ2VyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzLCBhbmltYXRpb24pIHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN0YXJ0ID0gMDtcbiAgICAgIHRoaXMudmFycyAmJiB0aGlzLmtpbGwodHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgIGlmICghX2VuYWJsZWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnJlZnJlc2ggPSB0aGlzLmtpbGwgPSBfcGFzc1Rocm91Z2g7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9zZXREZWZhdWx0cyhfaXNTdHJpbmcodmFycykgfHwgX2lzTnVtYmVyKHZhcnMpIHx8IHZhcnMubm9kZVR5cGUgPyB7XG4gICAgICAgIHRyaWdnZXI6IHZhcnNcbiAgICAgIH0gOiB2YXJzLCBfZGVmYXVsdHMpO1xuXG4gICAgICB2YXIgX3ZhcnMgPSB2YXJzLFxuICAgICAgICAgIG9uVXBkYXRlID0gX3ZhcnMub25VcGRhdGUsXG4gICAgICAgICAgdG9nZ2xlQ2xhc3MgPSBfdmFycy50b2dnbGVDbGFzcyxcbiAgICAgICAgICBpZCA9IF92YXJzLmlkLFxuICAgICAgICAgIG9uVG9nZ2xlID0gX3ZhcnMub25Ub2dnbGUsXG4gICAgICAgICAgb25SZWZyZXNoID0gX3ZhcnMub25SZWZyZXNoLFxuICAgICAgICAgIHNjcnViID0gX3ZhcnMuc2NydWIsXG4gICAgICAgICAgdHJpZ2dlciA9IF92YXJzLnRyaWdnZXIsXG4gICAgICAgICAgcGluID0gX3ZhcnMucGluLFxuICAgICAgICAgIHBpblNwYWNpbmcgPSBfdmFycy5waW5TcGFjaW5nLFxuICAgICAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggPSBfdmFycy5pbnZhbGlkYXRlT25SZWZyZXNoLFxuICAgICAgICAgIGFudGljaXBhdGVQaW4gPSBfdmFycy5hbnRpY2lwYXRlUGluLFxuICAgICAgICAgIG9uU2NydWJDb21wbGV0ZSA9IF92YXJzLm9uU2NydWJDb21wbGV0ZSxcbiAgICAgICAgICBvblNuYXBDb21wbGV0ZSA9IF92YXJzLm9uU25hcENvbXBsZXRlLFxuICAgICAgICAgIG9uY2UgPSBfdmFycy5vbmNlLFxuICAgICAgICAgIHNuYXAgPSBfdmFycy5zbmFwLFxuICAgICAgICAgIHBpblJlcGFyZW50ID0gX3ZhcnMucGluUmVwYXJlbnQsXG4gICAgICAgICAgcGluU3BhY2VyID0gX3ZhcnMucGluU3BhY2VyLFxuICAgICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiA9IF92YXJzLmNvbnRhaW5lckFuaW1hdGlvbixcbiAgICAgICAgICBmYXN0U2Nyb2xsRW5kID0gX3ZhcnMuZmFzdFNjcm9sbEVuZCxcbiAgICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgPSBfdmFycy5wcmV2ZW50T3ZlcmxhcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gdmFycy5ob3Jpem9udGFsIHx8IHZhcnMuY29udGFpbmVyQW5pbWF0aW9uICYmIHZhcnMuaG9yaXpvbnRhbCAhPT0gZmFsc2UgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbiAgICAgICAgICBpc1RvZ2dsZSA9ICFzY3J1YiAmJiBzY3J1YiAhPT0gMCxcbiAgICAgICAgICBzY3JvbGxlciA9IF9nZXRUYXJnZXQodmFycy5zY3JvbGxlciB8fCBfd2luJDEpLFxuICAgICAgICAgIHNjcm9sbGVyQ2FjaGUgPSBnc2FwJDEuY29yZS5nZXRDYWNoZShzY3JvbGxlciksXG4gICAgICAgICAgaXNWaWV3cG9ydCA9IF9pc1ZpZXdwb3J0JDEoc2Nyb2xsZXIpLFxuICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSAoXCJwaW5UeXBlXCIgaW4gdmFycyA/IHZhcnMucGluVHlwZSA6IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwicGluVHlwZVwiKSB8fCBpc1ZpZXdwb3J0ICYmIFwiZml4ZWRcIikgPT09IFwiZml4ZWRcIixcbiAgICAgICAgICBjYWxsYmFja3MgPSBbdmFycy5vbkVudGVyLCB2YXJzLm9uTGVhdmUsIHZhcnMub25FbnRlckJhY2ssIHZhcnMub25MZWF2ZUJhY2tdLFxuICAgICAgICAgIHRvZ2dsZUFjdGlvbnMgPSBpc1RvZ2dsZSAmJiB2YXJzLnRvZ2dsZUFjdGlvbnMuc3BsaXQoXCIgXCIpLFxuICAgICAgICAgIG1hcmtlcnMgPSBcIm1hcmtlcnNcIiBpbiB2YXJzID8gdmFycy5tYXJrZXJzIDogX2RlZmF1bHRzLm1hcmtlcnMsXG4gICAgICAgICAgYm9yZGVyV2lkdGggPSBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLFxuICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIG9uUmVmcmVzaEluaXQgPSB2YXJzLm9uUmVmcmVzaEluaXQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFycy5vblJlZnJlc2hJbml0KHNlbGYpO1xuICAgICAgfSxcbiAgICAgICAgICBnZXRTY3JvbGxlclNpemUgPSBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbiksXG4gICAgICAgICAgZ2V0U2Nyb2xsZXJPZmZzZXRzID0gX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSxcbiAgICAgICAgICBsYXN0U25hcCA9IDAsXG4gICAgICAgICAgbGFzdFJlZnJlc2ggPSAwLFxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IDAsXG4gICAgICAgICAgc2Nyb2xsRnVuYyA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICAgIHR3ZWVuVG8sXG4gICAgICAgICAgcGluQ2FjaGUsXG4gICAgICAgICAgc25hcEZ1bmMsXG4gICAgICAgICAgc2Nyb2xsMSxcbiAgICAgICAgICBzY3JvbGwyLFxuICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgIGVuZCxcbiAgICAgICAgICBtYXJrZXJTdGFydCxcbiAgICAgICAgICBtYXJrZXJFbmQsXG4gICAgICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyLFxuICAgICAgICAgIG1hcmtlckVuZFRyaWdnZXIsXG4gICAgICAgICAgbWFya2VyVmFycyxcbiAgICAgICAgICBleGVjdXRpbmdPblJlZnJlc2gsXG4gICAgICAgICAgY2hhbmdlLFxuICAgICAgICAgIHBpbk9yaWdpbmFsU3RhdGUsXG4gICAgICAgICAgcGluQWN0aXZlU3RhdGUsXG4gICAgICAgICAgcGluU3RhdGUsXG4gICAgICAgICAgc3BhY2VyLFxuICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICBwaW5HZXR0ZXIsXG4gICAgICAgICAgcGluU2V0dGVyLFxuICAgICAgICAgIHBpblN0YXJ0LFxuICAgICAgICAgIHBpbkNoYW5nZSxcbiAgICAgICAgICBzcGFjaW5nU3RhcnQsXG4gICAgICAgICAgc3BhY2VyU3RhdGUsXG4gICAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIsXG4gICAgICAgICAgcGluTW92ZXMsXG4gICAgICAgICAgbWFya2VyRW5kU2V0dGVyLFxuICAgICAgICAgIGNzLFxuICAgICAgICAgIHNuYXAxLFxuICAgICAgICAgIHNuYXAyLFxuICAgICAgICAgIHNjcnViVHdlZW4sXG4gICAgICAgICAgc2NydWJTbW9vdGgsXG4gICAgICAgICAgc25hcER1ckNsYW1wLFxuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbCxcbiAgICAgICAgICBwcmV2U2Nyb2xsLFxuICAgICAgICAgIHByZXZBbmltUHJvZ3Jlc3MsXG4gICAgICAgICAgY2FNYXJrZXJTZXR0ZXIsXG4gICAgICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuO1xuXG4gICAgICBzZWxmLl9zdGFydENsYW1wID0gc2VsZi5fZW5kQ2xhbXAgPSBmYWxzZTtcbiAgICAgIHNlbGYuX2RpciA9IGRpcmVjdGlvbjtcbiAgICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgICBzZWxmLnNjcm9sbGVyID0gc2Nyb2xsZXI7XG4gICAgICBzZWxmLnNjcm9sbCA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lLmJpbmQoY29udGFpbmVyQW5pbWF0aW9uKSA6IHNjcm9sbEZ1bmM7XG4gICAgICBzY3JvbGwxID0gc2Nyb2xsRnVuYygpO1xuICAgICAgc2VsZi52YXJzID0gdmFycztcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbiB8fCB2YXJzLmFuaW1hdGlvbjtcblxuICAgICAgaWYgKFwicmVmcmVzaFByaW9yaXR5XCIgaW4gdmFycykge1xuICAgICAgICBfc29ydCA9IDE7XG4gICAgICAgIHZhcnMucmVmcmVzaFByaW9yaXR5ID09PSAtOTk5OSAmJiAoX3ByaW1hcnkgPSBzZWxmKTtcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCA9IHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgfHwge1xuICAgICAgICB0b3A6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF92ZXJ0aWNhbCksXG4gICAgICAgIGxlZnQ6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF9ob3Jpem9udGFsKVxuICAgICAgfTtcbiAgICAgIHNlbGYudHdlZW5UbyA9IHR3ZWVuVG8gPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsW2RpcmVjdGlvbi5wXTtcblxuICAgICAgc2VsZi5zY3J1YkR1cmF0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNjcnViU21vb3RoID0gX2lzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZTtcblxuICAgICAgICBpZiAoIXNjcnViU21vb3RoKSB7XG4gICAgICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpLmtpbGwoKTtcbiAgICAgICAgICBzY3J1YlR3ZWVuID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5kdXJhdGlvbih2YWx1ZSkgOiBzY3J1YlR3ZWVuID0gZ3NhcCQxLnRvKGFuaW1hdGlvbiwge1xuICAgICAgICAgICAgZWFzZTogXCJleHBvXCIsXG4gICAgICAgICAgICB0b3RhbFByb2dyZXNzOiBcIis9MFwiLFxuICAgICAgICAgICAgZHVyYXRpb246IHNjcnViU21vb3RoLFxuICAgICAgICAgICAgcGF1c2VkOiB0cnVlLFxuICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uU2NydWJDb21wbGV0ZSAmJiBvblNjcnViQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLnZhcnMubGF6eSA9IGZhbHNlO1xuICAgICAgICBhbmltYXRpb24uX2luaXR0ZWQgJiYgIXNlbGYuaXNSZXZlcnRlZCB8fCBhbmltYXRpb24udmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiBhbmltYXRpb24uZHVyYXRpb24oKSAmJiBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICBzZWxmLmFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXVzZSgpO1xuICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IHNlbGY7XG4gICAgICAgIHNlbGYuc2NydWJEdXJhdGlvbihzY3J1Yik7XG4gICAgICAgIHNuYXAxID0gMDtcbiAgICAgICAgaWQgfHwgKGlkID0gYW5pbWF0aW9uLnZhcnMuaWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc25hcCkge1xuICAgICAgICBpZiAoIV9pc09iamVjdChzbmFwKSB8fCBzbmFwLnB1c2gpIHtcbiAgICAgICAgICBzbmFwID0ge1xuICAgICAgICAgICAgc25hcFRvOiBzbmFwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIFwic2Nyb2xsQmVoYXZpb3JcIiBpbiBfYm9keSQxLnN0eWxlICYmIGdzYXAkMS5zZXQoaXNWaWV3cG9ydCA/IFtfYm9keSQxLCBfZG9jRWwkMV0gOiBzY3JvbGxlciwge1xuICAgICAgICAgIHNjcm9sbEJlaGF2aW9yOiBcImF1dG9cIlxuICAgICAgICB9KTtcblxuICAgICAgICBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gX2lzRnVuY3Rpb24obykgJiYgby50YXJnZXQgPT09IChpc1ZpZXdwb3J0ID8gX2RvYyQxLnNjcm9sbGluZ0VsZW1lbnQgfHwgX2RvY0VsJDEgOiBzY3JvbGxlcikgJiYgKG8uc21vb3RoID0gZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzbmFwRnVuYyA9IF9pc0Z1bmN0aW9uKHNuYXAuc25hcFRvKSA/IHNuYXAuc25hcFRvIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzXCIgPyBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikgOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNEaXJlY3Rpb25hbFwiID8gX2dldExhYmVsQXREaXJlY3Rpb24oYW5pbWF0aW9uKSA6IHNuYXAuZGlyZWN0aW9uYWwgIT09IGZhbHNlID8gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgICAgICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKHNuYXAuc25hcFRvKSh2YWx1ZSwgX2dldFRpbWUkMSgpIC0gbGFzdFJlZnJlc2ggPCA1MDAgPyAwIDogc3QuZGlyZWN0aW9uKTtcbiAgICAgICAgfSA6IGdzYXAkMS51dGlscy5zbmFwKHNuYXAuc25hcFRvKTtcbiAgICAgICAgc25hcER1ckNsYW1wID0gc25hcC5kdXJhdGlvbiB8fCB7XG4gICAgICAgICAgbWluOiAwLjEsXG4gICAgICAgICAgbWF4OiAyXG4gICAgICAgIH07XG4gICAgICAgIHNuYXBEdXJDbGFtcCA9IF9pc09iamVjdChzbmFwRHVyQ2xhbXApID8gX2NsYW1wJDEoc25hcER1ckNsYW1wLm1pbiwgc25hcER1ckNsYW1wLm1heCkgOiBfY2xhbXAkMShzbmFwRHVyQ2xhbXAsIHNuYXBEdXJDbGFtcCk7XG4gICAgICAgIHNuYXBEZWxheWVkQ2FsbCA9IGdzYXAkMS5kZWxheWVkQ2FsbChzbmFwLmRlbGF5IHx8IHNjcnViU21vb3RoIC8gMiB8fCAwLjEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRnVuYygpLFxuICAgICAgICAgICAgICByZWZyZXNoZWRSZWNlbnRseSA9IF9nZXRUaW1lJDEoKSAtIGxhc3RSZWZyZXNoIDwgNTAwLFxuICAgICAgICAgICAgICB0d2VlbiA9IHR3ZWVuVG8udHdlZW47XG5cbiAgICAgICAgICBpZiAoKHJlZnJlc2hlZFJlY2VudGx5IHx8IE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPCAxMCkgJiYgIXR3ZWVuICYmICFfcG9pbnRlcklzRG93biAmJiBsYXN0U25hcCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IHByb2dyZXNzLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5ID0gcmVmcmVzaGVkUmVjZW50bHkgPyAwIDogKHRvdGFsUHJvZ3Jlc3MgLSBzbmFwMikgLyAoX2dldFRpbWUkMSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMCxcbiAgICAgICAgICAgICAgICBjaGFuZ2UxID0gZ3NhcCQxLnV0aWxzLmNsYW1wKC1wcm9ncmVzcywgMSAtIHByb2dyZXNzLCBfYWJzKHZlbG9jaXR5IC8gMikgKiB2ZWxvY2l0eSAvIDAuMTg1KSxcbiAgICAgICAgICAgICAgICBuYXR1cmFsRW5kID0gcHJvZ3Jlc3MgKyAoc25hcC5pbmVydGlhID09PSBmYWxzZSA/IDAgOiBjaGFuZ2UxKSxcbiAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF9jbGFtcCQxKDAsIDEsIHNuYXBGdW5jKG5hdHVyYWxFbmQsIHNlbGYpKSxcbiAgICAgICAgICAgICAgICBlbmRTY3JvbGwgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgZW5kVmFsdWUgKiBjaGFuZ2UpLFxuICAgICAgICAgICAgICAgIF9zbmFwID0gc25hcCxcbiAgICAgICAgICAgICAgICBvblN0YXJ0ID0gX3NuYXAub25TdGFydCxcbiAgICAgICAgICAgICAgICBfb25JbnRlcnJ1cHQgPSBfc25hcC5vbkludGVycnVwdCxcbiAgICAgICAgICAgICAgICBfb25Db21wbGV0ZSA9IF9zbmFwLm9uQ29tcGxldGU7XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGwgPD0gZW5kICYmIHNjcm9sbCA+PSBzdGFydCAmJiBlbmRTY3JvbGwgIT09IHNjcm9sbCkge1xuICAgICAgICAgICAgICBpZiAodHdlZW4gJiYgIXR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmRhdGEgPD0gX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UxID0gZW5kVmFsdWUgLSBwcm9ncmVzcztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHR3ZWVuVG8oZW5kU2Nyb2xsLCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICAgIGVhc2U6IHNuYXAuZWFzZSB8fCBcInBvd2VyM1wiLFxuICAgICAgICAgICAgICAgIGRhdGE6IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSxcbiAgICAgICAgICAgICAgICBvbkludGVycnVwdDogZnVuY3Rpb24gb25JbnRlcnJ1cHQoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSkgJiYgX29uSW50ZXJydXB0ICYmIF9vbkludGVycnVwdChzZWxmKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgbGFzdFNuYXAgPSBzY3JvbGxGdW5jKCk7XG4gICAgICAgICAgICAgICAgICBzbmFwMSA9IHNuYXAyID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgb25TbmFwQ29tcGxldGUgJiYgb25TbmFwQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgICBfb25Db21wbGV0ZSAmJiBfb25Db21wbGV0ZShzZWxmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIHNjcm9sbCwgY2hhbmdlMSAqIGNoYW5nZSwgZW5kU2Nyb2xsIC0gc2Nyb2xsIC0gY2hhbmdlMSAqIGNoYW5nZSk7XG4gICAgICAgICAgICAgIG9uU3RhcnQgJiYgb25TdGFydChzZWxmLCB0d2VlblRvLnR3ZWVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaXNBY3RpdmUgJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5wYXVzZSgpO1xuICAgICAgfVxuXG4gICAgICBpZCAmJiAoX2lkc1tpZF0gPSBzZWxmKTtcbiAgICAgIHRyaWdnZXIgPSBzZWxmLnRyaWdnZXIgPSBfZ2V0VGFyZ2V0KHRyaWdnZXIgfHwgcGluICE9PSB0cnVlICYmIHBpbik7XG4gICAgICBjdXN0b21SZXZlcnRSZXR1cm4gPSB0cmlnZ2VyICYmIHRyaWdnZXIuX2dzYXAgJiYgdHJpZ2dlci5fZ3NhcC5zdFJldmVydDtcbiAgICAgIGN1c3RvbVJldmVydFJldHVybiAmJiAoY3VzdG9tUmV2ZXJ0UmV0dXJuID0gY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpKTtcbiAgICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgICBfaXNTdHJpbmcodG9nZ2xlQ2xhc3MpICYmICh0b2dnbGVDbGFzcyA9IHtcbiAgICAgICAgdGFyZ2V0czogdHJpZ2dlcixcbiAgICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIHBpbi5wYXJlbnROb2RlICYmIHBpbi5wYXJlbnROb2RlLnN0eWxlICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpO1xuICAgICAgICBzZWxmLnBpbiA9IHBpbjtcbiAgICAgICAgcGluQ2FjaGUgPSBnc2FwJDEuY29yZS5nZXRDYWNoZShwaW4pO1xuXG4gICAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgICAgaWYgKHBpblNwYWNlcikge1xuICAgICAgICAgICAgcGluU3BhY2VyID0gX2dldFRhcmdldChwaW5TcGFjZXIpO1xuICAgICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHBpbkNhY2hlLnNwYWNlcklzTmF0aXZlID0gISFwaW5TcGFjZXI7XG4gICAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBpbkNhY2hlLnNwYWNlciA9IHNwYWNlciA9IHBpblNwYWNlciB8fCBfZG9jJDEuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXJcIik7XG4gICAgICAgICAgaWQgJiYgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyLVwiICsgaWQpO1xuICAgICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpbk9yaWdpbmFsU3RhdGUgPSBwaW5DYWNoZS5waW5TdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhcnMuZm9yY2UzRCAhPT0gZmFsc2UgJiYgZ3NhcCQxLnNldChwaW4sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLnNwYWNlciA9IHNwYWNlciA9IHBpbkNhY2hlLnNwYWNlcjtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4pO1xuICAgICAgICBzcGFjaW5nU3RhcnQgPSBjc1twaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl07XG4gICAgICAgIHBpbkdldHRlciA9IGdzYXAkMS5nZXRQcm9wZXJ0eShwaW4pO1xuICAgICAgICBwaW5TZXR0ZXIgPSBnc2FwJDEucXVpY2tTZXR0ZXIocGluLCBkaXJlY3Rpb24uYSwgX3B4KTtcblxuICAgICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcmtlcnMpIHtcbiAgICAgICAgbWFya2VyVmFycyA9IF9pc09iamVjdChtYXJrZXJzKSA/IF9zZXREZWZhdWx0cyhtYXJrZXJzLCBfbWFya2VyRGVmYXVsdHMpIDogX21hcmtlckRlZmF1bHRzO1xuICAgICAgICBtYXJrZXJTdGFydFRyaWdnZXIgPSBfY3JlYXRlTWFya2VyKFwic2Nyb2xsZXItc3RhcnRcIiwgaWQsIHNjcm9sbGVyLCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIDApO1xuICAgICAgICBtYXJrZXJFbmRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLWVuZFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCwgbWFya2VyU3RhcnRUcmlnZ2VyKTtcbiAgICAgICAgb2Zmc2V0ID0gbWFya2VyU3RhcnRUcmlnZ2VyW1wib2Zmc2V0XCIgKyBkaXJlY3Rpb24ub3AuZDJdO1xuXG4gICAgICAgIHZhciBjb250ZW50ID0gX2dldFRhcmdldChfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImNvbnRlbnRcIikgfHwgc2Nyb2xsZXIpO1xuXG4gICAgICAgIG1hcmtlclN0YXJ0ID0gdGhpcy5tYXJrZXJTdGFydCA9IF9jcmVhdGVNYXJrZXIoXCJzdGFydFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICAgIG1hcmtlckVuZCA9IHRoaXMubWFya2VyRW5kID0gX2NyZWF0ZU1hcmtlcihcImVuZFwiLCBpZCwgY29udGVudCwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbiAmJiAoY2FNYXJrZXJTZXR0ZXIgPSBnc2FwJDEucXVpY2tTZXR0ZXIoW21hcmtlclN0YXJ0LCBtYXJrZXJFbmRdLCBkaXJlY3Rpb24uYSwgX3B4KSk7XG5cbiAgICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICAgIF9tYWtlUG9zaXRpb25hYmxlKGlzVmlld3BvcnQgPyBfYm9keSQxIDogc2Nyb2xsZXIpO1xuXG4gICAgICAgICAgZ3NhcCQxLnNldChbbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXSwge1xuICAgICAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyID0gZ3NhcCQxLnF1aWNrU2V0dGVyKG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLmEsIF9weCk7XG4gICAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcCQxLnF1aWNrU2V0dGVyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgdmFyIG9sZE9uVXBkYXRlID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGUsXG4gICAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgICAgY29udGFpbmVyQW5pbWF0aW9uLmV2ZW50Q2FsbGJhY2soXCJvblVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi51cGRhdGUoMCwgMCwgMSk7XG4gICAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkoY29udGFpbmVyQW5pbWF0aW9uLCBvbGRQYXJhbXMgfHwgW10pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5wcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSAtIDFdO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpICsgMV07XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnJldmVydCA9IGZ1bmN0aW9uIChyZXZlcnQsIHRlbXApIHtcbiAgICAgICAgaWYgKCF0ZW1wKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYua2lsbCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByID0gcmV2ZXJ0ICE9PSBmYWxzZSB8fCAhc2VsZi5lbmFibGVkLFxuICAgICAgICAgICAgcHJldlJlZnJlc2hpbmcgPSBfcmVmcmVzaGluZztcblxuICAgICAgICBpZiAociAhPT0gc2VsZi5pc1JldmVydGVkKSB7XG4gICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIHByZXZTY3JvbGwgPSBNYXRoLm1heChzY3JvbGxGdW5jKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTtcbiAgICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgICBwcmV2QW5pbVByb2dyZXNzID0gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBtLnN0eWxlLmRpc3BsYXkgPSByID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgX3JlZnJlc2hpbmcgPSBzZWxmO1xuICAgICAgICAgICAgc2VsZi51cGRhdGUocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBpbiAmJiAoIXBpblJlcGFyZW50IHx8ICFzZWxmLmlzQWN0aXZlKSkge1xuICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgX2dldENvbXB1dGVkU3R5bGUocGluKSwgc3BhY2VyU3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHIgfHwgc2VsZi51cGRhdGUocik7XG4gICAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZztcbiAgICAgICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSByO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnJlZnJlc2ggPSBmdW5jdGlvbiAoc29mdCwgZm9yY2UsIHBvc2l0aW9uLCBwaW5PZmZzZXQpIHtcbiAgICAgICAgaWYgKChfcmVmcmVzaGluZyB8fCAhc2VsZi5lbmFibGVkKSAmJiAhZm9yY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluICYmIHNvZnQgJiYgX2xhc3RTY3JvbGxUaW1lKSB7XG4gICAgICAgICAgX2FkZExpc3RlbmVyJDEoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICFfcmVmcmVzaGluZ0FsbCAmJiBvblJlZnJlc2hJbml0ICYmIG9uUmVmcmVzaEluaXQoc2VsZik7XG4gICAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcblxuICAgICAgICBpZiAodHdlZW5Uby50d2VlbiAmJiAhcG9zaXRpb24pIHtcbiAgICAgICAgICB0d2VlblRvLnR3ZWVuLmtpbGwoKTtcbiAgICAgICAgICB0d2VlblRvLnR3ZWVuID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wYXVzZSgpO1xuICAgICAgICBpbnZhbGlkYXRlT25SZWZyZXNoICYmIGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucmV2ZXJ0KHtcbiAgICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgICB9KS5pbnZhbGlkYXRlKCk7XG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCB8fCBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgc2VsZi5fc3ViUGluT2Zmc2V0ID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHNpemUgPSBnZXRTY3JvbGxlclNpemUoKSxcbiAgICAgICAgICAgIHNjcm9sbGVyQm91bmRzID0gZ2V0U2Nyb2xsZXJPZmZzZXRzKCksXG4gICAgICAgICAgICBtYXggPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgICAgICBpc0ZpcnN0UmVmcmVzaCA9IGNoYW5nZSA8PSAwLjAxLFxuICAgICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIG90aGVyUGluT2Zmc2V0ID0gcGluT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBwYXJzZWRFbmQgPSBfaXNPYmplY3QocG9zaXRpb24pID8gcG9zaXRpb24uZW5kIDogdmFycy5lbmQsXG4gICAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdmFycy5lbmRUcmlnZ2VyIHx8IHRyaWdnZXIsXG4gICAgICAgICAgICBwYXJzZWRTdGFydCA9IF9pc09iamVjdChwb3NpdGlvbikgPyBwb3NpdGlvbi5zdGFydCA6IHZhcnMuc3RhcnQgfHwgKHZhcnMuc3RhcnQgPT09IDAgfHwgIXRyaWdnZXIgPyAwIDogcGluID8gXCIwIDBcIiA6IFwiMCAxMDAlXCIpLFxuICAgICAgICAgICAgcGlubmVkQ29udGFpbmVyID0gc2VsZi5waW5uZWRDb250YWluZXIgPSB2YXJzLnBpbm5lZENvbnRhaW5lciAmJiBfZ2V0VGFyZ2V0KHZhcnMucGlubmVkQ29udGFpbmVyLCBzZWxmKSxcbiAgICAgICAgICAgIHRyaWdnZXJJbmRleCA9IHRyaWdnZXIgJiYgTWF0aC5tYXgoMCwgX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikpIHx8IDAsXG4gICAgICAgICAgICBpID0gdHJpZ2dlckluZGV4LFxuICAgICAgICAgICAgY3MsXG4gICAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgICBzY3JvbGwsXG4gICAgICAgICAgICBpc1ZlcnRpY2FsLFxuICAgICAgICAgICAgb3ZlcnJpZGUsXG4gICAgICAgICAgICBjdXJUcmlnZ2VyLFxuICAgICAgICAgICAgY3VyUGluLFxuICAgICAgICAgICAgb3Bwb3NpdGVTY3JvbGwsXG4gICAgICAgICAgICBpbml0dGVkLFxuICAgICAgICAgICAgcmV2ZXJ0ZWRQaW5zLFxuICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3csXG4gICAgICAgICAgICBtYXJrZXJTdGFydE9mZnNldCxcbiAgICAgICAgICAgIG1hcmtlckVuZE9mZnNldDtcblxuICAgICAgICBpZiAobWFya2VycyAmJiBfaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQgPSBnc2FwJDEuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgICAgbWFya2VyRW5kT2Zmc2V0ID0gZ3NhcCQxLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICAgIGN1clRyaWdnZXIuZW5kIHx8IGN1clRyaWdnZXIucmVmcmVzaCgwLCAxKSB8fCAoX3JlZnJlc2hpbmcgPSBzZWxmKTtcbiAgICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICAgIGlmIChjdXJQaW4gJiYgKGN1clBpbiA9PT0gdHJpZ2dlciB8fCBjdXJQaW4gPT09IHBpbiB8fCBjdXJQaW4gPT09IHBpbm5lZENvbnRhaW5lcikgJiYgIWN1clRyaWdnZXIuaXNSZXZlcnRlZCkge1xuICAgICAgICAgICAgcmV2ZXJ0ZWRQaW5zIHx8IChyZXZlcnRlZFBpbnMgPSBbXSk7XG4gICAgICAgICAgICByZXZlcnRlZFBpbnMudW5zaGlmdChjdXJUcmlnZ2VyKTtcbiAgICAgICAgICAgIGN1clRyaWdnZXIucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJUcmlnZ2VyICE9PSBfdHJpZ2dlcnNbaV0pIHtcbiAgICAgICAgICAgIHRyaWdnZXJJbmRleC0tO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKHBhcnNlZFN0YXJ0KSAmJiAocGFyc2VkU3RhcnQgPSBwYXJzZWRTdGFydChzZWxmKSk7XG4gICAgICAgIHBhcnNlZFN0YXJ0ID0gX3BhcnNlQ2xhbXAocGFyc2VkU3RhcnQsIFwic3RhcnRcIiwgc2VsZik7XG4gICAgICAgIHN0YXJ0ID0gX3BhcnNlUG9zaXRpb24ocGFyc2VkU3RhcnQsIHRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpLCBtYXJrZXJTdGFydCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCwgY29udGFpbmVyQW5pbWF0aW9uLCBzZWxmLl9zdGFydENsYW1wICYmIFwiX3N0YXJ0Q2xhbXBcIikgfHwgKHBpbiA/IC0wLjAwMSA6IDApO1xuICAgICAgICBfaXNGdW5jdGlvbihwYXJzZWRFbmQpICYmIChwYXJzZWRFbmQgPSBwYXJzZWRFbmQoc2VsZikpO1xuXG4gICAgICAgIGlmIChfaXNTdHJpbmcocGFyc2VkRW5kKSAmJiAhcGFyc2VkRW5kLmluZGV4T2YoXCIrPVwiKSkge1xuICAgICAgICAgIGlmICh+cGFyc2VkRW5kLmluZGV4T2YoXCIgXCIpKSB7XG4gICAgICAgICAgICBwYXJzZWRFbmQgPSAoX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0LnNwbGl0KFwiIFwiKVswXSA6IFwiXCIpICsgcGFyc2VkRW5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBfb2Zmc2V0VG9QeChwYXJzZWRFbmQuc3Vic3RyKDIpLCBzaXplKTtcbiAgICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydCA6IChjb250YWluZXJBbmltYXRpb24gPyBnc2FwJDEudXRpbHMubWFwUmFuZ2UoMCwgY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCksIGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLnN0YXJ0LCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5lbmQsIHN0YXJ0KSA6IHN0YXJ0KSArIG9mZnNldDtcbiAgICAgICAgICAgIHBhcnNlZEVuZFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZEVuZCA9IF9wYXJzZUNsYW1wKHBhcnNlZEVuZCwgXCJlbmRcIiwgc2VsZik7XG4gICAgICAgIGVuZCA9IE1hdGgubWF4KHN0YXJ0LCBfcGFyc2VQb3NpdGlvbihwYXJzZWRFbmQgfHwgKHBhcnNlZEVuZFRyaWdnZXIgPyBcIjEwMCUgMFwiIDogbWF4KSwgcGFyc2VkRW5kVHJpZ2dlciwgc2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGxGdW5jKCkgKyBvZmZzZXQsIG1hcmtlckVuZCwgbWFya2VyRW5kVHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fZW5kQ2xhbXAgJiYgXCJfZW5kQ2xhbXBcIikpIHx8IC0wLjAwMTtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgaSA9IHRyaWdnZXJJbmRleDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICAgIGlmIChjdXJQaW4gJiYgY3VyVHJpZ2dlci5zdGFydCAtIGN1clRyaWdnZXIuX3BpblB1c2ggPD0gc3RhcnQgJiYgIWNvbnRhaW5lckFuaW1hdGlvbiAmJiBjdXJUcmlnZ2VyLmVuZCA+IDApIHtcbiAgICAgICAgICAgIGNzID0gY3VyVHJpZ2dlci5lbmQgLSAoc2VsZi5fc3RhcnRDbGFtcCA/IE1hdGgubWF4KDAsIGN1clRyaWdnZXIuc3RhcnQpIDogY3VyVHJpZ2dlci5zdGFydCk7XG5cbiAgICAgICAgICAgIGlmICgoY3VyUGluID09PSB0cmlnZ2VyICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDwgc3RhcnQgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmIGlzTmFOKHBhcnNlZFN0YXJ0KSkge1xuICAgICAgICAgICAgICBvZmZzZXQgKz0gY3MgKiAoMSAtIGN1clRyaWdnZXIucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJQaW4gPT09IHBpbiAmJiAob3RoZXJQaW5PZmZzZXQgKz0gY3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgICAgc2VsZi5fc3RhcnRDbGFtcCAmJiAoc2VsZi5fc3RhcnRDbGFtcCArPSBvZmZzZXQpO1xuXG4gICAgICAgIGlmIChzZWxmLl9lbmRDbGFtcCAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgICBzZWxmLl9lbmRDbGFtcCA9IGVuZCB8fCAtMC4wMDE7XG4gICAgICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYW5nZSA9IGVuZCAtIHN0YXJ0IHx8IChzdGFydCAtPSAwLjAxKSAmJiAwLjAwMTtcblxuICAgICAgICBpZiAoaXNGaXJzdFJlZnJlc2gpIHtcbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBnc2FwJDEudXRpbHMuY2xhbXAoMCwgMSwgZ3NhcCQxLnV0aWxzLm5vcm1hbGl6ZShzdGFydCwgZW5kLCBwcmV2U2Nyb2xsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLl9waW5QdXNoID0gb3RoZXJQaW5PZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1hcmtlclN0YXJ0ICYmIG9mZnNldCkge1xuICAgICAgICAgIGNzID0ge307XG4gICAgICAgICAgY3NbZGlyZWN0aW9uLmFdID0gXCIrPVwiICsgb2Zmc2V0O1xuICAgICAgICAgIHBpbm5lZENvbnRhaW5lciAmJiAoY3NbZGlyZWN0aW9uLnBdID0gXCItPVwiICsgc2Nyb2xsRnVuYygpKTtcbiAgICAgICAgICBnc2FwJDEuc2V0KFttYXJrZXJTdGFydCwgbWFya2VyRW5kXSwgY3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbikge1xuICAgICAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgICAgICBpc1ZlcnRpY2FsID0gZGlyZWN0aW9uID09PSBfdmVydGljYWw7XG4gICAgICAgICAgc2Nyb2xsID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgIHBpblN0YXJ0ID0gcGFyc2VGbG9hdChwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpKSArIG90aGVyUGluT2Zmc2V0O1xuXG4gICAgICAgICAgaWYgKCFtYXggJiYgZW5kID4gMSkge1xuICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3cgPSAoaXNWaWV3cG9ydCA/IF9kb2MkMS5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCQxIDogc2Nyb2xsZXIpLnN0eWxlO1xuICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3cgPSB7XG4gICAgICAgICAgICAgIHN0eWxlOiBmb3JjZWRPdmVyZmxvdyxcbiAgICAgICAgICAgICAgdmFsdWU6IGZvcmNlZE92ZXJmbG93W1wib3ZlcmZsb3dcIiArIGRpcmVjdGlvbi5hLnRvVXBwZXJDYXNlKCldXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoaXNWaWV3cG9ydCAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShfYm9keSQxKVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSAhPT0gXCJzY3JvbGxcIikge1xuICAgICAgICAgICAgICBmb3JjZWRPdmVyZmxvdy5zdHlsZVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSA9IFwic2Nyb2xsXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MpO1xuXG4gICAgICAgICAgcGluU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSk7XG4gICAgICAgICAgb3Bwb3NpdGVTY3JvbGwgPSB1c2VGaXhlZFBvc2l0aW9uICYmIF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBpc1ZlcnRpY2FsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpKCk7XG5cbiAgICAgICAgICBpZiAocGluU3BhY2luZykge1xuICAgICAgICAgICAgc3BhY2VyU3RhdGUgPSBbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczIsIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0ICsgX3B4XTtcbiAgICAgICAgICAgIHNwYWNlclN0YXRlLnQgPSBzcGFjZXI7XG4gICAgICAgICAgICBpID0gcGluU3BhY2luZyA9PT0gX3BhZGRpbmcgPyBfZ2V0U2l6ZShwaW4sIGRpcmVjdGlvbikgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCA6IDA7XG4gICAgICAgICAgICBpICYmIHNwYWNlclN0YXRlLnB1c2goZGlyZWN0aW9uLmQsIGkgKyBfcHgpO1xuXG4gICAgICAgICAgICBfc2V0U3RhdGUoc3BhY2VyU3RhdGUpO1xuXG4gICAgICAgICAgICBpZiAocGlubmVkQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQucGluID09PSBwaW5uZWRDb250YWluZXIgJiYgdC52YXJzLnBpblNwYWNpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICB0Ll9zdWJQaW5PZmZzZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgb3ZlcnJpZGUgPSB7XG4gICAgICAgICAgICAgIHRvcDogYm91bmRzLnRvcCArIChpc1ZlcnRpY2FsID8gc2Nyb2xsIC0gc3RhcnQgOiBvcHBvc2l0ZVNjcm9sbCkgKyBfcHgsXG4gICAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgKGlzVmVydGljYWwgPyBvcHBvc2l0ZVNjcm9sbCA6IHNjcm9sbCAtIHN0YXJ0KSArIF9weCxcbiAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG92ZXJyaWRlW193aWR0aF0gPSBvdmVycmlkZVtcIm1heFwiICsgX1dpZHRoXSA9IE1hdGguY2VpbChib3VuZHMud2lkdGgpICsgX3B4O1xuICAgICAgICAgICAgb3ZlcnJpZGVbX2hlaWdodF0gPSBvdmVycmlkZVtcIm1heFwiICsgX0hlaWdodF0gPSBNYXRoLmNlaWwoYm91bmRzLmhlaWdodCkgKyBfcHg7XG4gICAgICAgICAgICBvdmVycmlkZVtfbWFyZ2luXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfVG9wXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfUmlnaHRdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Cb3R0b21dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9MZWZ0XSA9IFwiMFwiO1xuICAgICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuICAgICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfVG9wXSA9IGNzW19wYWRkaW5nICsgX1RvcF07XG4gICAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9SaWdodF0gPSBjc1tfcGFkZGluZyArIF9SaWdodF07XG4gICAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Cb3R0b21dID0gY3NbX3BhZGRpbmcgKyBfQm90dG9tXTtcbiAgICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX0xlZnRdID0gY3NbX3BhZGRpbmcgKyBfTGVmdF07XG4gICAgICAgICAgICBwaW5BY3RpdmVTdGF0ZSA9IF9jb3B5U3RhdGUocGluT3JpZ2luYWxTdGF0ZSwgb3ZlcnJpZGUsIHBpblJlcGFyZW50KTtcbiAgICAgICAgICAgIF9yZWZyZXNoaW5nQWxsICYmIHNjcm9sbEZ1bmMoMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgaW5pdHRlZCA9IGFuaW1hdGlvbi5faW5pdHRlZDtcblxuICAgICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygxKTtcblxuICAgICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBwaW5DaGFuZ2UgPSBwaW5HZXR0ZXIoZGlyZWN0aW9uLmEpIC0gcGluU3RhcnQgKyBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldDtcbiAgICAgICAgICAgIHBpbk1vdmVzID0gTWF0aC5hYnMoY2hhbmdlIC0gcGluQ2hhbmdlKSA+IDE7XG4gICAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHBpbk1vdmVzICYmIHBpbkFjdGl2ZVN0YXRlLnNwbGljZShwaW5BY3RpdmVTdGF0ZS5sZW5ndGggLSAyLCAyKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpbml0dGVkIHx8IGFuaW1hdGlvbi5pbnZhbGlkYXRlKHRydWUpO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnBhcmVudCB8fCBhbmltYXRpb24udG90YWxUaW1lKGFuaW1hdGlvbi50b3RhbFRpbWUoKSk7XG5cbiAgICAgICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMoMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBpbkNoYW5nZSA9IGNoYW5nZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3JjZWRPdmVyZmxvdyAmJiAoZm9yY2VkT3ZlcmZsb3cudmFsdWUgPyBmb3JjZWRPdmVyZmxvdy5zdHlsZVtcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXSA9IGZvcmNlZE92ZXJmbG93LnZhbHVlIDogZm9yY2VkT3ZlcmZsb3cuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJvdmVyZmxvdy1cIiArIGRpcmVjdGlvbi5hKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAmJiBzY3JvbGxGdW5jKCkgJiYgIWNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAgIGJvdW5kcyA9IHRyaWdnZXIucGFyZW50Tm9kZTtcblxuICAgICAgICAgIHdoaWxlIChib3VuZHMgJiYgYm91bmRzICE9PSBfYm9keSQxKSB7XG4gICAgICAgICAgICBpZiAoYm91bmRzLl9waW5PZmZzZXQpIHtcbiAgICAgICAgICAgICAgc3RhcnQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgICAgIGVuZCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYm91bmRzID0gYm91bmRzLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV2ZXJ0ZWRQaW5zICYmIHJldmVydGVkUGlucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgc2VsZi5lbmQgPSBlbmQ7XG4gICAgICAgIHNjcm9sbDEgPSBzY3JvbGwyID0gX3JlZnJlc2hpbmdBbGwgPyBwcmV2U2Nyb2xsIDogc2Nyb2xsRnVuYygpO1xuXG4gICAgICAgIGlmICghY29udGFpbmVyQW5pbWF0aW9uICYmICFfcmVmcmVzaGluZ0FsbCkge1xuICAgICAgICAgIHNjcm9sbDEgPCBwcmV2U2Nyb2xsICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYucmV2ZXJ0KGZhbHNlLCB0cnVlKTtcbiAgICAgICAgbGFzdFJlZnJlc2ggPSBfZ2V0VGltZSQxKCk7XG5cbiAgICAgICAgaWYgKHNuYXBEZWxheWVkQ2FsbCkge1xuICAgICAgICAgIGxhc3RTbmFwID0gLTE7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVmcmVzaGluZyA9IDA7XG4gICAgICAgIGFuaW1hdGlvbiAmJiBpc1RvZ2dsZSAmJiAoYW5pbWF0aW9uLl9pbml0dGVkIHx8IHByZXZBbmltUHJvZ3Jlc3MpICYmIGFuaW1hdGlvbi5wcm9ncmVzcygpICE9PSBwcmV2QW5pbVByb2dyZXNzICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhwcmV2QW5pbVByb2dyZXNzIHx8IDAsIHRydWUpLnJlbmRlcihhbmltYXRpb24udGltZSgpLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICBpZiAoaXNGaXJzdFJlZnJlc2ggfHwgcHJldlByb2dyZXNzICE9PSBzZWxmLnByb2dyZXNzIHx8IGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAgIGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgJiYgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY29udGFpbmVyQW5pbWF0aW9uICYmIHN0YXJ0IDwgLTAuMDAxICYmICFwcmV2UHJvZ3Jlc3MgPyBnc2FwJDEudXRpbHMubm9ybWFsaXplKHN0YXJ0LCBlbmQsIDApIDogcHJldlByb2dyZXNzLCB0cnVlKTtcbiAgICAgICAgICBzZWxmLnByb2dyZXNzID0gaXNGaXJzdFJlZnJlc2ggfHwgKHNjcm9sbDEgLSBzdGFydCkgLyBjaGFuZ2UgPT09IHByZXZQcm9ncmVzcyA/IDAgOiBwcmV2UHJvZ3Jlc3M7XG4gICAgICAgIH1cblxuICAgICAgICBwaW4gJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLl9waW5PZmZzZXQgPSBNYXRoLnJvdW5kKHNlbGYucHJvZ3Jlc3MgKiBwaW5DaGFuZ2UpKTtcbiAgICAgICAgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKTtcblxuICAgICAgICBpZiAoIWlzTmFOKG1hcmtlclN0YXJ0T2Zmc2V0KSkge1xuICAgICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0IC09IGdzYXAkMS5nZXRQcm9wZXJ0eShtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcbiAgICAgICAgICBtYXJrZXJFbmRPZmZzZXQgLT0gZ3NhcCQxLmdldFByb3BlcnR5KG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbi5wKTtcblxuICAgICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbiwgbWFya2VyU3RhcnRPZmZzZXQpO1xuXG4gICAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlclN0YXJ0LCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG5cbiAgICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyRW5kVHJpZ2dlciwgZGlyZWN0aW9uLCBtYXJrZXJFbmRPZmZzZXQpO1xuXG4gICAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlckVuZCwgZGlyZWN0aW9uLCBtYXJrZXJFbmRPZmZzZXQgLSAocGluT2Zmc2V0IHx8IDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzRmlyc3RSZWZyZXNoICYmICFfcmVmcmVzaGluZ0FsbCAmJiBzZWxmLnVwZGF0ZSgpO1xuXG4gICAgICAgIGlmIChvblJlZnJlc2ggJiYgIV9yZWZyZXNoaW5nQWxsICYmICFleGVjdXRpbmdPblJlZnJlc2gpIHtcbiAgICAgICAgICBleGVjdXRpbmdPblJlZnJlc2ggPSB0cnVlO1xuICAgICAgICAgIG9uUmVmcmVzaChzZWxmKTtcbiAgICAgICAgICBleGVjdXRpbmdPblJlZnJlc2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzY3JvbGxGdW5jKCkgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSQxKCkgLSBfdGltZTIpICogMTAwMCB8fCAwO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmRBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9lbmRBbmltYXRpb24oc2VsZi5jYWxsYmFja0FuaW1hdGlvbik7XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogIWFuaW1hdGlvbi5wYXVzZWQoKSA/IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24ucmV2ZXJzZWQoKSkgOiBpc1RvZ2dsZSB8fCBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgc2VsZi5kaXJlY3Rpb24gPCAwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5sYWJlbFRvU2Nyb2xsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLmxhYmVscyAmJiAoc3RhcnQgfHwgc2VsZi5yZWZyZXNoKCkgfHwgc3RhcnQpICsgYW5pbWF0aW9uLmxhYmVsc1tsYWJlbF0gLyBhbmltYXRpb24uZHVyYXRpb24oKSAqIGNoYW5nZSB8fCAwO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5nZXRUcmFpbGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZiksXG4gICAgICAgICAgICBhID0gc2VsZi5kaXJlY3Rpb24gPiAwID8gX3RyaWdnZXJzLnNsaWNlKDAsIGkpLnJldmVyc2UoKSA6IF90cmlnZ2Vycy5zbGljZShpICsgMSk7XG5cbiAgICAgICAgcmV0dXJuIChfaXNTdHJpbmcobmFtZSkgPyBhLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnZhcnMucHJldmVudE92ZXJsYXBzID09PSBuYW1lO1xuICAgICAgICB9KSA6IGEpLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLmRpcmVjdGlvbiA+IDAgPyB0LmVuZCA8PSBzdGFydCA6IHQuc3RhcnQgPj0gZW5kO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKHJlc2V0LCByZWNvcmRWZWxvY2l0eSwgZm9yY2VGYWtlKSB7XG4gICAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgIWZvcmNlRmFrZSAmJiAhcmVzZXQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Nyb2xsID0gX3JlZnJlc2hpbmdBbGwgPT09IHRydWUgPyBwcmV2U2Nyb2xsIDogc2VsZi5zY3JvbGwoKSxcbiAgICAgICAgICAgIHAgPSByZXNldCA/IDAgOiAoc2Nyb2xsIC0gc3RhcnQpIC8gY2hhbmdlLFxuICAgICAgICAgICAgY2xpcHBlZCA9IHAgPCAwID8gMCA6IHAgPiAxID8gMSA6IHAgfHwgMCxcbiAgICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgICAgIHdhc0FjdGl2ZSxcbiAgICAgICAgICAgIHRvZ2dsZVN0YXRlLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkLFxuICAgICAgICAgICAgdG9nZ2xlZCxcbiAgICAgICAgICAgIGlzQXRNYXgsXG4gICAgICAgICAgICBpc1Rha2luZ0FjdGlvbjtcblxuICAgICAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgICAgICBzY3JvbGwyID0gc2Nyb2xsMTtcbiAgICAgICAgICBzY3JvbGwxID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsRnVuYygpIDogc2Nyb2xsO1xuXG4gICAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIHNuYXAyID0gc25hcDE7XG4gICAgICAgICAgICBzbmFwMSA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogY2xpcHBlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhbnRpY2lwYXRlUGluICYmICFjbGlwcGVkICYmIHBpbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwJDEgJiYgX2xhc3RTY3JvbGxUaW1lICYmIHN0YXJ0IDwgc2Nyb2xsICsgKHNjcm9sbCAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lJDEoKSAtIF90aW1lMikgKiBhbnRpY2lwYXRlUGluICYmIChjbGlwcGVkID0gMC4wMDAxKTtcblxuICAgICAgICBpZiAoY2xpcHBlZCAhPT0gcHJldlByb2dyZXNzICYmIHNlbGYuZW5hYmxlZCkge1xuICAgICAgICAgIGlzQWN0aXZlID0gc2VsZi5pc0FjdGl2ZSA9ICEhY2xpcHBlZCAmJiBjbGlwcGVkIDwgMTtcbiAgICAgICAgICB3YXNBY3RpdmUgPSAhIXByZXZQcm9ncmVzcyAmJiBwcmV2UHJvZ3Jlc3MgPCAxO1xuICAgICAgICAgIHRvZ2dsZWQgPSBpc0FjdGl2ZSAhPT0gd2FzQWN0aXZlO1xuICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRvZ2dsZWQgfHwgISFjbGlwcGVkICE9PSAhIXByZXZQcm9ncmVzcztcbiAgICAgICAgICBzZWxmLmRpcmVjdGlvbiA9IGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgPyAxIDogLTE7XG4gICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGNsaXBwZWQ7XG5cbiAgICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgICAgdG9nZ2xlU3RhdGUgPSBjbGlwcGVkICYmICFwcmV2UHJvZ3Jlc3MgPyAwIDogY2xpcHBlZCA9PT0gMSA/IDEgOiBwcmV2UHJvZ3Jlc3MgPT09IDEgPyAyIDogMztcblxuICAgICAgICAgICAgaWYgKGlzVG9nZ2xlKSB7XG4gICAgICAgICAgICAgIGFjdGlvbiA9ICF0b2dnbGVkICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSAhPT0gXCJub25lXCIgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdIHx8IHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGVdO1xuICAgICAgICAgICAgICBpc1Rha2luZ0FjdGlvbiA9IGFuaW1hdGlvbiAmJiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIgfHwgYWN0aW9uID09PSBcInJlc2V0XCIgfHwgYWN0aW9uIGluIGFuaW1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJldmVudE92ZXJsYXBzICYmICh0b2dnbGVkIHx8IGlzVGFraW5nQWN0aW9uKSAmJiAoaXNUYWtpbmdBY3Rpb24gfHwgc2NydWIgfHwgIWFuaW1hdGlvbikgJiYgKF9pc0Z1bmN0aW9uKHByZXZlbnRPdmVybGFwcykgPyBwcmV2ZW50T3ZlcmxhcHMoc2VsZikgOiBzZWxmLmdldFRyYWlsaW5nKHByZXZlbnRPdmVybGFwcykuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZW5kQW5pbWF0aW9uKCk7XG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgaWYgKCFpc1RvZ2dsZSkge1xuICAgICAgICAgICAgaWYgKHNjcnViVHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCQxKSB7XG4gICAgICAgICAgICAgIHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQgIT09IHNjcnViVHdlZW4uX3RpbWUgJiYgc2NydWJUd2Vlbi5yZW5kZXIoc2NydWJUd2Vlbi5fZHAuX3RpbWUgLSBzY3J1YlR3ZWVuLl9zdGFydCk7XG5cbiAgICAgICAgICAgICAgaWYgKHNjcnViVHdlZW4ucmVzZXRUbykge1xuICAgICAgICAgICAgICAgIHNjcnViVHdlZW4ucmVzZXRUbyhcInRvdGFsUHJvZ3Jlc3NcIiwgY2xpcHBlZCwgYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NydWJUd2Vlbi52YXJzLnRvdGFsUHJvZ3Jlc3MgPSBjbGlwcGVkO1xuICAgICAgICAgICAgICAgIHNjcnViVHdlZW4uaW52YWxpZGF0ZSgpLnJlc3RhcnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoY2xpcHBlZCwgISEoX3JlZnJlc2hpbmcgJiYgKGxhc3RSZWZyZXNoIHx8IHJlc2V0KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICAgIHJlc2V0ICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5zdHlsZVtwaW5TcGFjaW5nICsgZGlyZWN0aW9uLm9zMl0gPSBzcGFjaW5nU3RhcnQpO1xuXG4gICAgICAgICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgcGluU2V0dGVyKF9yb3VuZChwaW5TdGFydCArIHBpbkNoYW5nZSAqIGNsaXBwZWQpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIGlzQXRNYXggPSAhcmVzZXQgJiYgY2xpcHBlZCA+IHByZXZQcm9ncmVzcyAmJiBlbmQgKyAxID4gc2Nyb2xsICYmIHNjcm9sbCArIDEgPj0gX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKTtcblxuICAgICAgICAgICAgICBpZiAocGluUmVwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc2V0ICYmIChpc0FjdGl2ZSB8fCBpc0F0TWF4KSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IF9nZXRCb3VuZHMocGluLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gc2Nyb2xsIC0gc3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIF9ib2R5JDEsIGJvdW5kcy50b3AgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfb2Zmc2V0IDogMCkgKyBfcHgsIGJvdW5kcy5sZWZ0ICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gMCA6IF9vZmZzZXQpICsgX3B4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgX3JlcGFyZW50KHBpbiwgc3BhY2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfc2V0U3RhdGUoaXNBY3RpdmUgfHwgaXNBdE1heCA/IHBpbkFjdGl2ZVN0YXRlIDogcGluU3RhdGUpO1xuXG4gICAgICAgICAgICAgIHBpbk1vdmVzICYmIGNsaXBwZWQgPCAxICYmIGlzQWN0aXZlIHx8IHBpblNldHRlcihwaW5TdGFydCArIChjbGlwcGVkID09PSAxICYmICFpc0F0TWF4ID8gcGluQ2hhbmdlIDogMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNuYXAgJiYgIXR3ZWVuVG8udHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCQxICYmIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgIHRvZ2dsZUNsYXNzICYmICh0b2dnbGVkIHx8IG9uY2UgJiYgY2xpcHBlZCAmJiAoY2xpcHBlZCA8IDEgfHwgIV9saW1pdENhbGxiYWNrcykpICYmIF90b0FycmF5KHRvZ2dsZUNsYXNzLnRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0W2lzQWN0aXZlIHx8IG9uY2UgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odG9nZ2xlQ2xhc3MuY2xhc3NOYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvblVwZGF0ZSAmJiAhaXNUb2dnbGUgJiYgIXJlc2V0ICYmIG9uVXBkYXRlKHNlbGYpO1xuXG4gICAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgICBpZiAoaXNUYWtpbmdBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5wYXVzZSgpLnRvdGFsUHJvZ3Jlc3MoMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzZXRcIikge1xuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSkucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25bYWN0aW9uXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9nZ2xlZCB8fCAhX2xpbWl0Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgIG9uVG9nZ2xlICYmIHRvZ2dsZWQgJiYgX2NhbGxiYWNrKHNlbGYsIG9uVG9nZ2xlKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICAgIG9uY2UgJiYgKGNsaXBwZWQgPT09IDEgPyBzZWxmLmtpbGwoZmFsc2UsIDEpIDogY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSA9IDApO1xuXG4gICAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCA9PT0gMSA/IDEgOiAzO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmYXN0U2Nyb2xsRW5kICYmICFpc0FjdGl2ZSAmJiBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpID4gKF9pc051bWJlcihmYXN0U2Nyb2xsRW5kKSA/IGZhc3RTY3JvbGxFbmQgOiAyNTAwKSkge1xuICAgICAgICAgICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICAgICAgICAgIHNjcnViVHdlZW4gPyBzY3J1YlR3ZWVuLnByb2dyZXNzKDEpIDogX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIGFjdGlvbiA9PT0gXCJyZXZlcnNlXCIgPyAxIDogIWNsaXBwZWQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNUb2dnbGUgJiYgb25VcGRhdGUgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgICBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFya2VyRW5kU2V0dGVyKSB7XG4gICAgICAgICAgdmFyIG4gPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSA6IHNjcm9sbDtcbiAgICAgICAgICBtYXJrZXJTdGFydFNldHRlcihuICsgKG1hcmtlclN0YXJ0VHJpZ2dlci5faXNGbGlwcGVkID8gMSA6IDApKTtcbiAgICAgICAgICBtYXJrZXJFbmRTZXR0ZXIobik7XG4gICAgICAgIH1cblxuICAgICAgICBjYU1hcmtlclNldHRlciAmJiBjYU1hcmtlclNldHRlcigtc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgICAgaWYgKCFzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgICBzZWxmLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyJDEoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgICBpc1ZpZXdwb3J0IHx8IF9hZGRMaXN0ZW5lciQxKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwkMSk7XG4gICAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfYWRkTGlzdGVuZXIkMShTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgICAgaWYgKHJlc2V0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHByZXZQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlZnJlc2ggIT09IGZhbHNlICYmIHNlbGYucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmdldFR3ZWVuID0gZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgICAgcmV0dXJuIHNuYXAgJiYgdHdlZW5UbyA/IHR3ZWVuVG8udHdlZW4gOiBzY3J1YlR3ZWVuO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5zZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiAobmV3U3RhcnQsIG5ld0VuZCwga2VlcENsYW1wLCBwaW5PZmZzZXQpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAgIHZhciBzdCA9IGNvbnRhaW5lckFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICAgICAgICBkdXJhdGlvbiA9IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpLFxuICAgICAgICAgICAgICBfY2hhbmdlID0gc3QuZW5kIC0gc3Quc3RhcnQ7XG5cbiAgICAgICAgICBuZXdTdGFydCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld1N0YXJ0IC8gZHVyYXRpb247XG4gICAgICAgICAgbmV3RW5kID0gc3Quc3RhcnQgKyBfY2hhbmdlICogbmV3RW5kIC8gZHVyYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnJlZnJlc2goZmFsc2UsIGZhbHNlLCB7XG4gICAgICAgICAgc3RhcnQ6IF9rZWVwQ2xhbXAobmV3U3RhcnQsIGtlZXBDbGFtcCAmJiAhIXNlbGYuX3N0YXJ0Q2xhbXApLFxuICAgICAgICAgIGVuZDogX2tlZXBDbGFtcChuZXdFbmQsIGtlZXBDbGFtcCAmJiAhIXNlbGYuX2VuZENsYW1wKVxuICAgICAgICB9LCBwaW5PZmZzZXQpO1xuICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5hZGp1c3RQaW5TcGFjaW5nID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoc3BhY2VyU3RhdGUgJiYgYW1vdW50KSB7XG4gICAgICAgICAgdmFyIGkgPSBzcGFjZXJTdGF0ZS5pbmRleE9mKGRpcmVjdGlvbi5kKSArIDE7XG4gICAgICAgICAgc3BhY2VyU3RhdGVbaV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlW2ldKSArIGFtb3VudCArIF9weDtcbiAgICAgICAgICBzcGFjZXJTdGF0ZVsxXSA9IHBhcnNlRmxvYXQoc3BhY2VyU3RhdGVbMV0pICsgYW1vdW50ICsgX3B4O1xuXG4gICAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5kaXNhYmxlID0gZnVuY3Rpb24gKHJlc2V0LCBhbGxvd0FuaW1hdGlvbikge1xuICAgICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgICAgcmVzZXQgIT09IGZhbHNlICYmIHNlbGYucmV2ZXJ0KHRydWUsIHRydWUpO1xuICAgICAgICAgIHNlbGYuZW5hYmxlZCA9IHNlbGYuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgICBwcmV2U2Nyb2xsID0gMDtcbiAgICAgICAgICBwaW5DYWNoZSAmJiAocGluQ2FjaGUudW5jYWNoZSA9IDEpO1xuICAgICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX3JlbW92ZUxpc3RlbmVyJDEoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICAgICAgdHdlZW5Uby50d2VlbiAmJiB0d2VlblRvLnR3ZWVuLmtpbGwoKSAmJiAodHdlZW5Uby50d2VlbiA9IDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaXNWaWV3cG9ydCkge1xuICAgICAgICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgIGlmIChfdHJpZ2dlcnNbaV0uc2Nyb2xsZXIgPT09IHNjcm9sbGVyICYmIF90cmlnZ2Vyc1tpXSAhPT0gc2VsZikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIkMShzY3JvbGxlciwgXCJyZXNpemVcIiwgX29uUmVzaXplKTtcblxuICAgICAgICAgICAgaXNWaWV3cG9ydCB8fCBfcmVtb3ZlTGlzdGVuZXIkMShzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsJDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5raWxsID0gZnVuY3Rpb24gKHJldmVydCwgYWxsb3dBbmltYXRpb24pIHtcbiAgICAgICAgc2VsZi5kaXNhYmxlKHJldmVydCwgYWxsb3dBbmltYXRpb24pO1xuICAgICAgICBzY3J1YlR3ZWVuICYmICFhbGxvd0FuaW1hdGlvbiAmJiBzY3J1YlR3ZWVuLmtpbGwoKTtcbiAgICAgICAgaWQgJiYgZGVsZXRlIF9pZHNbaWRdO1xuXG4gICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgICAgaSA+PSAwICYmIF90cmlnZ2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGkgPT09IF9pICYmIF9kaXJlY3Rpb24gPiAwICYmIF9pLS07XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuc2Nyb2xsZXIgPT09IHNlbGYuc2Nyb2xsZXIgJiYgKGkgPSAxKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaSB8fCBfcmVmcmVzaGluZ0FsbCB8fCAoc2VsZi5zY3JvbGwucmVjID0gMCk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gbnVsbDtcbiAgICAgICAgICByZXZlcnQgJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgICAgICBraWxsOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5raWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0ucGFyZW50Tm9kZSAmJiBtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfcHJpbWFyeSA9PT0gc2VsZiAmJiAoX3ByaW1hcnkgPSAwKTtcblxuICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5waW4gPT09IHBpbiAmJiBpKys7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhcnMub25LaWxsICYmIHZhcnMub25LaWxsKHNlbGYpO1xuICAgICAgfTtcblxuICAgICAgX3RyaWdnZXJzLnB1c2goc2VsZik7XG5cbiAgICAgIHNlbGYuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XG4gICAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgY3VzdG9tUmV2ZXJ0UmV0dXJuKHNlbGYpO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5hZGQgJiYgIWNoYW5nZSkge1xuICAgICAgICB2YXIgdXBkYXRlRnVuYyA9IHNlbGYudXBkYXRlO1xuXG4gICAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYudXBkYXRlID0gdXBkYXRlRnVuYztcbiAgICAgICAgICBzdGFydCB8fCBlbmQgfHwgc2VsZi5yZWZyZXNoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ3NhcCQxLmRlbGF5ZWRDYWxsKDAuMDEsIHNlbGYudXBkYXRlKTtcbiAgICAgICAgY2hhbmdlID0gMC4wMTtcbiAgICAgICAgc3RhcnQgPSBlbmQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9XG5cbiAgICAgIHBpbiAmJiBfcXVldWVSZWZyZXNoQWxsKCk7XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgICBpZiAoIV9jb3JlSW5pdHRlZCQxKSB7XG4gICAgICAgIGdzYXAkMSA9IGNvcmUgfHwgX2dldEdTQVAkMSgpO1xuICAgICAgICBfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50ICYmIFNjcm9sbFRyaWdnZXIuZW5hYmxlKCk7XG4gICAgICAgIF9jb3JlSW5pdHRlZCQxID0gX2VuYWJsZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29yZUluaXR0ZWQkMTtcbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICBmb3IgKHZhciBwIGluIGNvbmZpZykge1xuICAgICAgICAgIF9kZWZhdWx0c1twXSA9IGNvbmZpZ1twXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2RlZmF1bHRzO1xuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKHJlc2V0LCBraWxsKSB7XG4gICAgICBfZW5hYmxlZCA9IDA7XG5cbiAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgIHJldHVybiB0cmlnZ2VyW2tpbGwgPyBcImtpbGxcIiA6IFwiZGlzYWJsZVwiXShyZXNldCk7XG4gICAgICB9KTtcblxuICAgICAgX3JlbW92ZUxpc3RlbmVyJDEoX3dpbiQxLCBcIndoZWVsXCIsIF9vblNjcm9sbCQxKTtcblxuICAgICAgX3JlbW92ZUxpc3RlbmVyJDEoX2RvYyQxLCBcInNjcm9sbFwiLCBfb25TY3JvbGwkMSk7XG5cbiAgICAgIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCk7XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lciQxKF9kb2MkMSwgXCJ0b3VjaGNhbmNlbFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIkMShfYm9keSQxLCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9kb2MkMSwgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgICAgX211bHRpTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9kb2MkMSwgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBfcG9pbnRlclVwSGFuZGxlcik7XG5cbiAgICAgIF9yZXNpemVEZWxheS5raWxsKCk7XG5cbiAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX3JlbW92ZUxpc3RlbmVyJDEpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgICBfd2hlZWxMaXN0ZW5lcihfcmVtb3ZlTGlzdGVuZXIkMSwgX3Njcm9sbGVyc1tpXSwgX3Njcm9sbGVyc1tpICsgMl0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIF93aW4kMSA9IHdpbmRvdztcbiAgICAgIF9kb2MkMSA9IGRvY3VtZW50O1xuICAgICAgX2RvY0VsJDEgPSBfZG9jJDEuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgX2JvZHkkMSA9IF9kb2MkMS5ib2R5O1xuXG4gICAgICBpZiAoZ3NhcCQxKSB7XG4gICAgICAgIF90b0FycmF5ID0gZ3NhcCQxLnV0aWxzLnRvQXJyYXk7XG4gICAgICAgIF9jbGFtcCQxID0gZ3NhcCQxLnV0aWxzLmNsYW1wO1xuICAgICAgICBfY29udGV4dCQxID0gZ3NhcCQxLmNvcmUuY29udGV4dCB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSBnc2FwJDEuY29yZS5zdXBwcmVzc092ZXJ3cml0ZXMgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgICBfc2Nyb2xsUmVzdG9yYXRpb24gPSBfd2luJDEuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiB8fCBcImF1dG9cIjtcbiAgICAgICAgX2xhc3RTY3JvbGwgPSBfd2luJDEucGFnZVlPZmZzZXQ7XG4gICAgICAgIGdzYXAkMS5jb3JlLmdsb2JhbHMoXCJTY3JvbGxUcmlnZ2VyXCIsIFNjcm9sbFRyaWdnZXIpO1xuXG4gICAgICAgIGlmIChfYm9keSQxKSB7XG4gICAgICAgICAgX2VuYWJsZWQgPSAxO1xuICAgICAgICAgIF9kaXYxMDB2aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgX2RpdjEwMHZoLnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICAgICAgICBfZGl2MTAwdmguc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICAgICAgICBfcmVmcmVzaDEwMHZoKCk7XG5cbiAgICAgICAgICBfcmFmQnVnRml4KCk7XG5cbiAgICAgICAgICBPYnNlcnZlci5yZWdpc3Rlcihnc2FwJDEpO1xuICAgICAgICAgIFNjcm9sbFRyaWdnZXIuaXNUb3VjaCA9IE9ic2VydmVyLmlzVG91Y2g7XG4gICAgICAgICAgX2ZpeElPU0J1ZyA9IE9ic2VydmVyLmlzVG91Y2ggJiYgLyhpUGFkfGlQaG9uZXxpUG9kfE1hYykvZy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyJDEoX3dpbiQxLCBcIndoZWVsXCIsIF9vblNjcm9sbCQxKTtcblxuICAgICAgICAgIF9yb290JDEgPSBbX3dpbiQxLCBfZG9jJDEsIF9kb2NFbCQxLCBfYm9keSQxXTtcblxuICAgICAgICAgIGlmIChnc2FwJDEubWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgU2Nyb2xsVHJpZ2dlci5tYXRjaE1lZGlhID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICAgICAgICAgICAgdmFyIG1tID0gZ3NhcCQxLm1hdGNoTWVkaWEoKSxcbiAgICAgICAgICAgICAgICAgIHA7XG5cbiAgICAgICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgICAgICBtbS5hZGQocCwgdmFyc1twXSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbW07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBnc2FwJDEuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRBbGwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3NhcCQxLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhUmV2ZXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZXZlcnRSZWNvcmRlZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnc2FwJDEuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfcmVmcmVzaEFsbCgwLCAxKTtcblxuICAgICAgICAgICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnc2FwJDEubWF0Y2hNZWRpYShcIihvcmllbnRhdGlvbjogcG9ydHJhaXQpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9zZXRCYXNlRGltZW5zaW9ucztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJSZXF1aXJlcyBHU0FQIDMuMTEuMCBvciBsYXRlclwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc2V0QmFzZURpbWVuc2lvbnMoKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lciQxKF9kb2MkMSwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsJDEpO1xuXG4gICAgICAgICAgdmFyIGJvZHlTdHlsZSA9IF9ib2R5JDEuc3R5bGUsXG4gICAgICAgICAgICAgIGJvcmRlciA9IGJvZHlTdHlsZS5ib3JkZXJUb3BTdHlsZSxcbiAgICAgICAgICAgICAgQW5pbWF0aW9uUHJvdG8gPSBnc2FwJDEuY29yZS5BbmltYXRpb24ucHJvdG90eXBlLFxuICAgICAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgICAgIGk7XG4gICAgICAgICAgQW5pbWF0aW9uUHJvdG8ucmV2ZXJ0IHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25Qcm90bywgXCJyZXZlcnRcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lKC0wLjAxLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBcInNvbGlkXCI7XG4gICAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhfYm9keSQxKTtcbiAgICAgICAgICBfdmVydGljYWwubSA9IE1hdGgucm91bmQoYm91bmRzLnRvcCArIF92ZXJ0aWNhbC5zYygpKSB8fCAwO1xuICAgICAgICAgIF9ob3Jpem9udGFsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy5sZWZ0ICsgX2hvcml6b250YWwuc2MoKSkgfHwgMDtcbiAgICAgICAgICBib3JkZXIgPyBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBib3JkZXIgOiBib2R5U3R5bGUucmVtb3ZlUHJvcGVydHkoXCJib3JkZXItdG9wLXN0eWxlXCIpO1xuICAgICAgICAgIF9zeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChfc3luYywgMjUwKTtcbiAgICAgICAgICBnc2FwJDEuZGVsYXllZENhbGwoMC41LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N0YXJ0dXAkMSA9IDA7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIkMShfZG9jJDEsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lciQxKF9ib2R5JDEsIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpO1xuXG4gICAgICAgICAgX211bHRpTGlzdGVuZXIoX2FkZExpc3RlbmVyJDEsIF9kb2MkMSwgXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLCBfcG9pbnRlckRvd25IYW5kbGVyKTtcblxuICAgICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciQxLCBfZG9jJDEsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwJDEudXRpbHMuY2hlY2tQcmVmaXgoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgICBfc3RhdGVQcm9wcy5wdXNoKF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgICAgIF9jb3JlSW5pdHRlZCQxID0gX2dldFRpbWUkMSgpO1xuICAgICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAkMS5kZWxheWVkQ2FsbCgwLjIsIF9yZWZyZXNoQWxsKS5wYXVzZSgpO1xuICAgICAgICAgIF9hdXRvUmVmcmVzaCA9IFtfZG9jJDEsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdyA9IF93aW4kMS5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGggPSBfd2luJDEuaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmIChfZG9jJDEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgIF9wcmV2V2lkdGggPSB3O1xuICAgICAgICAgICAgICBfcHJldkhlaWdodCA9IGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9wcmV2V2lkdGggIT09IHcgfHwgX3ByZXZIZWlnaHQgIT09IGgpIHtcbiAgICAgICAgICAgICAgX29uUmVzaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgX2RvYyQxLCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgX3JlZnJlc2hBbGwsIF93aW4kMSwgXCJsb2FkXCIsIF9yZWZyZXNoQWxsLCBfd2luJDEsIFwicmVzaXplXCIsIF9vblJlc2l6ZV07XG5cbiAgICAgICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9hZGRMaXN0ZW5lciQxKTtcblxuICAgICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlci5lbmFibGUoMCwgMSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3Njcm9sbGVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDFdKTtcblxuICAgICAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDJdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgICAgXCJsaW1pdENhbGxiYWNrc1wiIGluIHZhcnMgJiYgKF9saW1pdENhbGxiYWNrcyA9ICEhdmFycy5saW1pdENhbGxiYWNrcyk7XG4gICAgICB2YXIgbXMgPSB2YXJzLnN5bmNJbnRlcnZhbDtcbiAgICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcbiAgICAgIFwiaWdub3JlTW9iaWxlUmVzaXplXCIgaW4gdmFycyAmJiAoX2lnbm9yZU1vYmlsZVJlc2l6ZSA9IFNjcm9sbFRyaWdnZXIuaXNUb3VjaCA9PT0gMSAmJiB2YXJzLmlnbm9yZU1vYmlsZVJlc2l6ZSk7XG5cbiAgICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lciQxKSB8fCBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9hZGRMaXN0ZW5lciQxLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgICAgX2lnbm9yZVJlc2l6ZSA9ICh2YXJzLmF1dG9SZWZyZXNoRXZlbnRzICsgXCJcIikuaW5kZXhPZihcInJlc2l6ZVwiKSA9PT0gLTE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIuc2Nyb2xsZXJQcm94eSA9IGZ1bmN0aW9uIHNjcm9sbGVyUHJveHkodGFyZ2V0LCB2YXJzKSB7XG4gICAgICB2YXIgdCA9IF9nZXRUYXJnZXQodGFyZ2V0KSxcbiAgICAgICAgICBpID0gX3Njcm9sbGVycy5pbmRleE9mKHQpLFxuICAgICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCQxKHQpO1xuXG4gICAgICBpZiAofmkpIHtcbiAgICAgICAgX3Njcm9sbGVycy5zcGxpY2UoaSwgaXNWaWV3cG9ydCA/IDYgOiAyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhcnMpIHtcbiAgICAgICAgaXNWaWV3cG9ydCA/IF9wcm94aWVzLnVuc2hpZnQoX3dpbiQxLCB2YXJzLCBfYm9keSQxLCB2YXJzLCBfZG9jRWwkMSwgdmFycykgOiBfcHJveGllcy51bnNoaWZ0KHQsIHZhcnMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmNsZWFyTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIGNsZWFyTWF0Y2hNZWRpYShxdWVyeSkge1xuICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2N0eCAmJiB0Ll9jdHgucXVlcnkgPT09IHF1ZXJ5ICYmIHQuX2N0eC5raWxsKHRydWUsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIuaXNJblZpZXdwb3J0ID0gZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQsIHJhdGlvLCBob3Jpem9udGFsKSB7XG4gICAgICB2YXIgYm91bmRzID0gKF9pc1N0cmluZyhlbGVtZW50KSA/IF9nZXRUYXJnZXQoZWxlbWVudCkgOiBlbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBvZmZzZXQgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdICogcmF0aW8gfHwgMDtcbiAgICAgIHJldHVybiBob3Jpem9udGFsID8gYm91bmRzLnJpZ2h0IC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMubGVmdCArIG9mZnNldCA8IF93aW4kMS5pbm5lcldpZHRoIDogYm91bmRzLmJvdHRvbSAtIG9mZnNldCA+IDAgJiYgYm91bmRzLnRvcCArIG9mZnNldCA8IF93aW4kMS5pbm5lckhlaWdodDtcbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5wb3NpdGlvbkluVmlld3BvcnQgPSBmdW5jdGlvbiBwb3NpdGlvbkluVmlld3BvcnQoZWxlbWVudCwgcmVmZXJlbmNlUG9pbnQsIGhvcml6b250YWwpIHtcbiAgICAgIF9pc1N0cmluZyhlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9nZXRUYXJnZXQoZWxlbWVudCkpO1xuICAgICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgc2l6ZSA9IGJvdW5kc1tob3Jpem9udGFsID8gX3dpZHRoIDogX2hlaWdodF0sXG4gICAgICAgICAgb2Zmc2V0ID0gcmVmZXJlbmNlUG9pbnQgPT0gbnVsbCA/IHNpemUgLyAyIDogcmVmZXJlbmNlUG9pbnQgaW4gX2tleXdvcmRzID8gX2tleXdvcmRzW3JlZmVyZW5jZVBvaW50XSAqIHNpemUgOiB+cmVmZXJlbmNlUG9pbnQuaW5kZXhPZihcIiVcIikgPyBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSAqIHNpemUgLyAxMDAgOiBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSB8fCAwO1xuICAgICAgcmV0dXJuIGhvcml6b250YWwgPyAoYm91bmRzLmxlZnQgKyBvZmZzZXQpIC8gX3dpbiQxLmlubmVyV2lkdGggOiAoYm91bmRzLnRvcCArIG9mZnNldCkgLyBfd2luJDEuaW5uZXJIZWlnaHQ7XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIua2lsbEFsbCA9IGZ1bmN0aW9uIGtpbGxBbGwoYWxsb3dMaXN0ZW5lcnMpIHtcbiAgICAgIF90cmlnZ2Vycy5zbGljZSgwKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIiAmJiB0LmtpbGwoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWxsb3dMaXN0ZW5lcnMgIT09IHRydWUpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnMua2lsbEFsbCB8fCBbXTtcbiAgICAgICAgX2xpc3RlbmVycyA9IHt9O1xuICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBmKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gU2Nyb2xsVHJpZ2dlcjtcbiAgfSgpO1xuICBTY3JvbGxUcmlnZ2VyJDEudmVyc2lvbiA9IFwiMy4xMi4yXCI7XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLnNhdmVTdHlsZXMgPSBmdW5jdGlvbiAodGFyZ2V0cykge1xuICAgIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5zdHlsZSkge1xuICAgICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgICAgaSA+PSAwICYmIF9zYXZlZFN0eWxlcy5zcGxpY2UoaSwgNSk7XG5cbiAgICAgICAgX3NhdmVkU3R5bGVzLnB1c2godGFyZ2V0LCB0YXJnZXQuc3R5bGUuY3NzVGV4dCwgdGFyZ2V0LmdldEJCb3ggJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSwgZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NvbnRleHQkMSgpKTtcbiAgICAgIH1cbiAgICB9KSA6IF9zYXZlZFN0eWxlcztcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEucmV2ZXJ0ID0gZnVuY3Rpb24gKHNvZnQsIG1lZGlhKSB7XG4gICAgcmV0dXJuIF9yZXZlcnRBbGwoIXNvZnQsIG1lZGlhKTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuY3JlYXRlID0gZnVuY3Rpb24gKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlciQxKHZhcnMsIGFuaW1hdGlvbik7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLnJlZnJlc2ggPSBmdW5jdGlvbiAoc2FmZSkge1xuICAgIHJldHVybiBzYWZlID8gX29uUmVzaXplKCkgOiAoX2NvcmVJbml0dGVkJDEgfHwgU2Nyb2xsVHJpZ2dlciQxLnJlZ2lzdGVyKCkpICYmIF9yZWZyZXNoQWxsKHRydWUpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS51cGRhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICByZXR1cm4gKytfc2Nyb2xsZXJzLmNhY2hlICYmIF91cGRhdGVBbGwoZm9yY2UgPT09IHRydWUgPyAyIDogMCk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLmNsZWFyU2Nyb2xsTWVtb3J5ID0gX2NsZWFyU2Nyb2xsTWVtb3J5O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5tYXhTY3JvbGwgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICAgIHJldHVybiBfbWF4U2Nyb2xsKGVsZW1lbnQsIGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLmdldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiAoZWxlbWVudCwgaG9yaXpvbnRhbCkge1xuICAgIHJldHVybiBfZ2V0U2Nyb2xsRnVuYyhfZ2V0VGFyZ2V0KGVsZW1lbnQpLCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIF9pZHNbaWRdO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90cmlnZ2Vycy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LnZhcnMuaWQgIT09IFwiU2Nyb2xsU21vb3RoZXJcIjtcbiAgICB9KTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuaXNTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhX2xhc3RTY3JvbGxUaW1lO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5zbmFwRGlyZWN0aW9uYWwgPSBfc25hcERpcmVjdGlvbmFsO1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5iYXRjaCA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgICBpbnRlcnZhbCA9IHZhcnMuaW50ZXJ2YWwgfHwgMC4wMTYsXG4gICAgICAgIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCB8fCAxZTksXG4gICAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZWxlbWVudHMgPSBbXSxcbiAgICAgICAgICB0cmlnZ2VycyA9IFtdLFxuICAgICAgICAgIGRlbGF5ID0gZ3NhcCQxLmRlbGF5ZWRDYWxsKGludGVydmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKGVsZW1lbnRzLCB0cmlnZ2Vycyk7XG4gICAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICAgIHRyaWdnZXJzID0gW107XG4gICAgICB9KS5wYXVzZSgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICAgIGVsZW1lbnRzLmxlbmd0aCB8fCBkZWxheS5yZXN0YXJ0KHRydWUpO1xuICAgICAgICBlbGVtZW50cy5wdXNoKHNlbGYudHJpZ2dlcik7XG4gICAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICAgIGJhdGNoTWF4IDw9IGVsZW1lbnRzLmxlbmd0aCAmJiBkZWxheS5wcm9ncmVzcygxKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICAgICAgcDtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgICB9XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oYmF0Y2hNYXgpKSB7XG4gICAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICAgIF9hZGRMaXN0ZW5lciQxKFNjcm9sbFRyaWdnZXIkMSwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJhdGNoTWF4ID0gdmFycy5iYXRjaE1heCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgICBjb25maWdbcF0gPSB2YXJzQ29weVtwXTtcbiAgICAgIH1cblxuICAgICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgICByZXN1bHQucHVzaChTY3JvbGxUcmlnZ2VyJDEuY3JlYXRlKGNvbmZpZykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyID0gZnVuY3Rpb24gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmMsIGN1cnJlbnQsIGVuZCwgbWF4KSB7XG4gICAgY3VycmVudCA+IG1heCA/IHNjcm9sbEZ1bmMobWF4KSA6IGN1cnJlbnQgPCAwICYmIHNjcm9sbEZ1bmMoMCk7XG4gICAgcmV0dXJuIGVuZCA+IG1heCA/IChtYXggLSBjdXJyZW50KSAvIChlbmQgLSBjdXJyZW50KSA6IGVuZCA8IDAgPyBjdXJyZW50IC8gKGN1cnJlbnQgLSBlbmQpIDogMTtcbiAgfSxcbiAgICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcgPSBmdW5jdGlvbiBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidG91Y2gtYWN0aW9uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuc3R5bGUudG91Y2hBY3Rpb24gPSBkaXJlY3Rpb24gPT09IHRydWUgPyBcImF1dG9cIiA6IGRpcmVjdGlvbiA/IFwicGFuLVwiICsgZGlyZWN0aW9uICsgKE9ic2VydmVyLmlzVG91Y2ggPyBcIiBwaW5jaC16b29tXCIgOiBcIlwiKSA6IFwibm9uZVwiO1xuICAgIH1cblxuICAgIHRhcmdldCA9PT0gX2RvY0VsJDEgJiYgX2FsbG93TmF0aXZlUGFubmluZyhfYm9keSQxLCBkaXJlY3Rpb24pO1xuICB9LFxuICAgICAgX292ZXJmbG93ID0ge1xuICAgIGF1dG86IDEsXG4gICAgc2Nyb2xsOiAxXG4gIH0sXG4gICAgICBfbmVzdGVkU2Nyb2xsID0gZnVuY3Rpb24gX25lc3RlZFNjcm9sbChfcmVmNSkge1xuICAgIHZhciBldmVudCA9IF9yZWY1LmV2ZW50LFxuICAgICAgICB0YXJnZXQgPSBfcmVmNS50YXJnZXQsXG4gICAgICAgIGF4aXMgPSBfcmVmNS5heGlzO1xuXG4gICAgdmFyIG5vZGUgPSAoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50KS50YXJnZXQsXG4gICAgICAgIGNhY2hlID0gbm9kZS5fZ3NhcCB8fCBnc2FwJDEuY29yZS5nZXRDYWNoZShub2RlKSxcbiAgICAgICAgdGltZSA9IF9nZXRUaW1lJDEoKSxcbiAgICAgICAgY3M7XG5cbiAgICBpZiAoIWNhY2hlLl9pc1Njcm9sbFQgfHwgdGltZSAtIGNhY2hlLl9pc1Njcm9sbFQgPiAyMDAwKSB7XG4gICAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSBfYm9keSQxICYmIChub2RlLnNjcm9sbEhlaWdodCA8PSBub2RlLmNsaWVudEhlaWdodCAmJiBub2RlLnNjcm9sbFdpZHRoIDw9IG5vZGUuY2xpZW50V2lkdGggfHwgIShfb3ZlcmZsb3dbKGNzID0gX2dldENvbXB1dGVkU3R5bGUobm9kZSkpLm92ZXJmbG93WV0gfHwgX292ZXJmbG93W2NzLm92ZXJmbG93WF0pKSkge1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICBjYWNoZS5faXNTY3JvbGwgPSBub2RlICYmIG5vZGUgIT09IHRhcmdldCAmJiAhX2lzVmlld3BvcnQkMShub2RlKSAmJiAoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKTtcbiAgICAgIGNhY2hlLl9pc1Njcm9sbFQgPSB0aW1lO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5faXNTY3JvbGwgfHwgYXhpcyA9PT0gXCJ4XCIpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQuX2dzYXBBbGxvdyA9IHRydWU7XG4gICAgfVxuICB9LFxuICAgICAgX2lucHV0T2JzZXJ2ZXIgPSBmdW5jdGlvbiBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHR5cGUsIGlucHV0cywgbmVzdGVkKSB7XG4gICAgcmV0dXJuIE9ic2VydmVyLmNyZWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBkZWJvdW5jZTogZmFsc2UsXG4gICAgICBsb2NrQXhpczogdHJ1ZSxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBvbldoZWVsOiBuZXN0ZWQgPSBuZXN0ZWQgJiYgX25lc3RlZFNjcm9sbCxcbiAgICAgIG9uUHJlc3M6IG5lc3RlZCxcbiAgICAgIG9uRHJhZzogbmVzdGVkLFxuICAgICAgb25TY3JvbGw6IG5lc3RlZCxcbiAgICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0cyAmJiBfYWRkTGlzdGVuZXIkMShfZG9jJDEsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9LFxuICAgICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICAgIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIkMShfZG9jJDEsIE9ic2VydmVyLmV2ZW50VHlwZXNbMF0sIF9jYXB0dXJlSW5wdXRzLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgICAgIF9pbnB1dEV4cCA9IC8oaW5wdXR8bGFiZWx8c2VsZWN0fHRleHRhcmVhKS9pLFxuICAgICAgX2lucHV0SXNGb2N1c2VkLFxuICAgICAgX2NhcHR1cmVJbnB1dHMgPSBmdW5jdGlvbiBfY2FwdHVyZUlucHV0cyhlKSB7XG4gICAgdmFyIGlzSW5wdXQgPSBfaW5wdXRFeHAudGVzdChlLnRhcmdldC50YWdOYW1lKTtcblxuICAgIGlmIChpc0lucHV0IHx8IF9pbnB1dElzRm9jdXNlZCkge1xuICAgICAgZS5fZ3NhcEFsbG93ID0gdHJ1ZTtcbiAgICAgIF9pbnB1dElzRm9jdXNlZCA9IGlzSW5wdXQ7XG4gICAgfVxuICB9LFxuICAgICAgX2dldFNjcm9sbE5vcm1hbGl6ZXIgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKSB7XG4gICAgX2lzT2JqZWN0KHZhcnMpIHx8ICh2YXJzID0ge30pO1xuICAgIHZhcnMucHJldmVudERlZmF1bHQgPSB2YXJzLmlzTm9ybWFsaXplciA9IHZhcnMuYWxsb3dDbGlja3MgPSB0cnVlO1xuICAgIHZhcnMudHlwZSB8fCAodmFycy50eXBlID0gXCJ3aGVlbCx0b3VjaFwiKTtcbiAgICB2YXJzLmRlYm91bmNlID0gISF2YXJzLmRlYm91bmNlO1xuICAgIHZhcnMuaWQgPSB2YXJzLmlkIHx8IFwibm9ybWFsaXplclwiO1xuXG4gICAgdmFyIF92YXJzMiA9IHZhcnMsXG4gICAgICAgIG5vcm1hbGl6ZVNjcm9sbFggPSBfdmFyczIubm9ybWFsaXplU2Nyb2xsWCxcbiAgICAgICAgbW9tZW50dW0gPSBfdmFyczIubW9tZW50dW0sXG4gICAgICAgIGFsbG93TmVzdGVkU2Nyb2xsID0gX3ZhcnMyLmFsbG93TmVzdGVkU2Nyb2xsLFxuICAgICAgICBvblJlbGVhc2UgPSBfdmFyczIub25SZWxlYXNlLFxuICAgICAgICBzZWxmLFxuICAgICAgICBtYXhZLFxuICAgICAgICB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHZhcnMudGFyZ2V0KSB8fCBfZG9jRWwkMSxcbiAgICAgICAgc21vb3RoZXIgPSBnc2FwJDEuY29yZS5nbG9iYWxzKCkuU2Nyb2xsU21vb3RoZXIsXG4gICAgICAgIHNtb290aGVySW5zdGFuY2UgPSBzbW9vdGhlciAmJiBzbW9vdGhlci5nZXQoKSxcbiAgICAgICAgY29udGVudCA9IF9maXhJT1NCdWcgJiYgKHZhcnMuY29udGVudCAmJiBfZ2V0VGFyZ2V0KHZhcnMuY29udGVudCkgfHwgc21vb3RoZXJJbnN0YW5jZSAmJiB2YXJzLmNvbnRlbnQgIT09IGZhbHNlICYmICFzbW9vdGhlckluc3RhbmNlLnNtb290aCgpICYmIHNtb290aGVySW5zdGFuY2UuY29udGVudCgpKSxcbiAgICAgICAgc2Nyb2xsRnVuY1kgPSBfZ2V0U2Nyb2xsRnVuYyh0YXJnZXQsIF92ZXJ0aWNhbCksXG4gICAgICAgIHNjcm9sbEZ1bmNYID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfaG9yaXpvbnRhbCksXG4gICAgICAgIHNjYWxlID0gMSxcbiAgICAgICAgaW5pdGlhbFNjYWxlID0gKE9ic2VydmVyLmlzVG91Y2ggJiYgX3dpbiQxLnZpc3VhbFZpZXdwb3J0ID8gX3dpbiQxLnZpc3VhbFZpZXdwb3J0LnNjYWxlICogX3dpbiQxLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogX3dpbiQxLm91dGVyV2lkdGgpIC8gX3dpbiQxLmlubmVyV2lkdGgsXG4gICAgICAgIHdoZWVsUmVmcmVzaCA9IDAsXG4gICAgICAgIHJlc29sdmVNb21lbnR1bUR1cmF0aW9uID0gX2lzRnVuY3Rpb24obW9tZW50dW0pID8gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1vbWVudHVtKHNlbGYpO1xuICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbW9tZW50dW0gfHwgMi44O1xuICAgIH0sXG4gICAgICAgIGxhc3RSZWZyZXNoSUQsXG4gICAgICAgIHNraXBUb3VjaE1vdmUsXG4gICAgICAgIGlucHV0T2JzZXJ2ZXIgPSBfaW5wdXRPYnNlcnZlcih0YXJnZXQsIHZhcnMudHlwZSwgdHJ1ZSwgYWxsb3dOZXN0ZWRTY3JvbGwpLFxuICAgICAgICByZXN1bWVUb3VjaE1vdmUgPSBmdW5jdGlvbiByZXN1bWVUb3VjaE1vdmUoKSB7XG4gICAgICByZXR1cm4gc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICAgIH0sXG4gICAgICAgIHNjcm9sbENsYW1wWCA9IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgc2Nyb2xsQ2xhbXBZID0gX3Bhc3NUaHJvdWdoLFxuICAgICAgICB1cGRhdGVDbGFtcHMgPSBmdW5jdGlvbiB1cGRhdGVDbGFtcHMoKSB7XG4gICAgICBtYXhZID0gX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCk7XG4gICAgICBzY3JvbGxDbGFtcFkgPSBfY2xhbXAkMShfZml4SU9TQnVnID8gMSA6IDAsIG1heFkpO1xuICAgICAgbm9ybWFsaXplU2Nyb2xsWCAmJiAoc2Nyb2xsQ2xhbXBYID0gX2NsYW1wJDEoMCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSkpO1xuICAgICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gICAgfSxcbiAgICAgICAgcmVtb3ZlQ29udGVudE9mZnNldCA9IGZ1bmN0aW9uIHJlbW92ZUNvbnRlbnRPZmZzZXQoKSB7XG4gICAgICBjb250ZW50Ll9nc2FwLnkgPSBfcm91bmQocGFyc2VGbG9hdChjb250ZW50Ll9nc2FwLnkpICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSArIFwicHhcIjtcbiAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID0gXCJtYXRyaXgzZCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCBcIiArIHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIFwiLCAwLCAxKVwiO1xuICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IDA7XG4gICAgfSxcbiAgICAgICAgaWdub3JlRHJhZyA9IGZ1bmN0aW9uIGlnbm9yZURyYWcoKSB7XG4gICAgICBpZiAoc2tpcFRvdWNoTW92ZSkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lVG91Y2hNb3ZlKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gX3JvdW5kKHNlbGYuZGVsdGFZIC8gMiksXG4gICAgICAgICAgICBzY3JvbGwgPSBzY3JvbGxDbGFtcFkoc2Nyb2xsRnVuY1kudiAtIG9mZnNldCk7XG5cbiAgICAgICAgaWYgKGNvbnRlbnQgJiYgc2Nyb2xsICE9PSBzY3JvbGxGdW5jWS52ICsgc2Nyb2xsRnVuY1kub2Zmc2V0KSB7XG4gICAgICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ID0gc2Nyb2xsIC0gc2Nyb2xsRnVuY1kudjtcblxuICAgICAgICAgIHZhciB5ID0gX3JvdW5kKChwYXJzZUZsb2F0KGNvbnRlbnQgJiYgY29udGVudC5fZ3NhcC55KSB8fCAwKSAtIHNjcm9sbEZ1bmNZLm9mZnNldCk7XG5cbiAgICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyB5ICsgXCIsIDAsIDEpXCI7XG4gICAgICAgICAgY29udGVudC5fZ3NhcC55ID0geSArIFwicHhcIjtcbiAgICAgICAgICBzY3JvbGxGdW5jWS5jYWNoZUlEID0gX3Njcm9sbGVycy5jYWNoZTtcblxuICAgICAgICAgIF91cGRhdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgICAgc2tpcFRvdWNoTW92ZSA9IHRydWU7XG4gICAgfSxcbiAgICAgICAgdHdlZW4sXG4gICAgICAgIHN0YXJ0U2Nyb2xsWCxcbiAgICAgICAgc3RhcnRTY3JvbGxZLFxuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbCxcbiAgICAgICAgb25SZXNpemUgPSBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAgIHVwZGF0ZUNsYW1wcygpO1xuXG4gICAgICBpZiAodHdlZW4uaXNBY3RpdmUoKSAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPiBtYXhZKSB7XG4gICAgICAgIHNjcm9sbEZ1bmNZKCkgPiBtYXhZID8gdHdlZW4ucHJvZ3Jlc3MoMSkgJiYgc2Nyb2xsRnVuY1kobWF4WSkgOiB0d2Vlbi5yZXNldFRvKFwic2Nyb2xsWVwiLCBtYXhZKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29udGVudCAmJiBnc2FwJDEuc2V0KGNvbnRlbnQsIHtcbiAgICAgIHk6IFwiKz0wXCJcbiAgICB9KTtcblxuICAgIHZhcnMuaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF9maXhJT1NCdWcgJiYgZS50eXBlID09PSBcInRvdWNobW92ZVwiICYmIGlnbm9yZURyYWcoKSB8fCBzY2FsZSA+IDEuMDUgJiYgZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIiB8fCBzZWxmLmlzR2VzdHVyaW5nIHx8IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMTtcbiAgICB9O1xuXG4gICAgdmFycy5vblByZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2tpcFRvdWNoTW92ZSA9IGZhbHNlO1xuICAgICAgdmFyIHByZXZTY2FsZSA9IHNjYWxlO1xuICAgICAgc2NhbGUgPSBfcm91bmQoKF93aW4kMS52aXN1YWxWaWV3cG9ydCAmJiBfd2luJDEudmlzdWFsVmlld3BvcnQuc2NhbGUgfHwgMSkgLyBpbml0aWFsU2NhbGUpO1xuICAgICAgdHdlZW4ucGF1c2UoKTtcbiAgICAgIHByZXZTY2FsZSAhPT0gc2NhbGUgJiYgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHNjYWxlID4gMS4wMSA/IHRydWUgOiBub3JtYWxpemVTY3JvbGxYID8gZmFsc2UgOiBcInhcIik7XG4gICAgICBzdGFydFNjcm9sbFggPSBzY3JvbGxGdW5jWCgpO1xuICAgICAgc3RhcnRTY3JvbGxZID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgIHVwZGF0ZUNsYW1wcygpO1xuICAgICAgbGFzdFJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gICAgfTtcblxuICAgIHZhcnMub25SZWxlYXNlID0gdmFycy5vbkdlc3R1cmVTdGFydCA9IGZ1bmN0aW9uIChzZWxmLCB3YXNEcmFnZ2luZykge1xuICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcblxuICAgICAgaWYgKCF3YXNEcmFnZ2luZykge1xuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Njcm9sbGVycy5jYWNoZSsrO1xuICAgICAgICB2YXIgZHVyID0gcmVzb2x2ZU1vbWVudHVtRHVyYXRpb24oKSxcbiAgICAgICAgICAgIGN1cnJlbnRTY3JvbGwsXG4gICAgICAgICAgICBlbmRTY3JvbGw7XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6ZVNjcm9sbFgpIHtcbiAgICAgICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1goKTtcbiAgICAgICAgICBlbmRTY3JvbGwgPSBjdXJyZW50U2Nyb2xsICsgZHVyICogMC4wNSAqIC1zZWxmLnZlbG9jaXR5WCAvIDAuMjI3O1xuICAgICAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1gsIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF9ob3Jpem9udGFsKSk7XG4gICAgICAgICAgdHdlZW4udmFycy5zY3JvbGxYID0gc2Nyb2xsQ2xhbXBYKGVuZFNjcm9sbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2Nyb2xsID0gc2Nyb2xsRnVuY1koKTtcbiAgICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVkgLyAwLjIyNztcbiAgICAgICAgZHVyICo9IF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jWSwgY3VycmVudFNjcm9sbCwgZW5kU2Nyb2xsLCBfbWF4U2Nyb2xsKHRhcmdldCwgX3ZlcnRpY2FsKSk7XG4gICAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWSA9IHNjcm9sbENsYW1wWShlbmRTY3JvbGwpO1xuICAgICAgICB0d2Vlbi5pbnZhbGlkYXRlKCkuZHVyYXRpb24oZHVyKS5wbGF5KDAuMDEpO1xuXG4gICAgICAgIGlmIChfZml4SU9TQnVnICYmIHR3ZWVuLnZhcnMuc2Nyb2xsWSA+PSBtYXhZIHx8IGN1cnJlbnRTY3JvbGwgPj0gbWF4WSAtIDEpIHtcbiAgICAgICAgICBnc2FwJDEudG8oe30sIHtcbiAgICAgICAgICAgIG9uVXBkYXRlOiBvblJlc2l6ZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvblJlbGVhc2UgJiYgb25SZWxlYXNlKHNlbGYpO1xuICAgIH07XG5cbiAgICB2YXJzLm9uV2hlZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0d2Vlbi5fdHMgJiYgdHdlZW4ucGF1c2UoKTtcblxuICAgICAgaWYgKF9nZXRUaW1lJDEoKSAtIHdoZWVsUmVmcmVzaCA+IDEwMDApIHtcbiAgICAgICAgbGFzdFJlZnJlc2hJRCA9IDA7XG4gICAgICAgIHdoZWVsUmVmcmVzaCA9IF9nZXRUaW1lJDEoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFycy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChzZWxmLCBkeCwgZHksIHhBcnJheSwgeUFycmF5KSB7XG4gICAgICBfcmVmcmVzaElEICE9PSBsYXN0UmVmcmVzaElEICYmIHVwZGF0ZUNsYW1wcygpO1xuICAgICAgZHggJiYgbm9ybWFsaXplU2Nyb2xsWCAmJiBzY3JvbGxGdW5jWChzY3JvbGxDbGFtcFgoeEFycmF5WzJdID09PSBkeCA/IHN0YXJ0U2Nyb2xsWCArIChzZWxmLnN0YXJ0WCAtIHNlbGYueCkgOiBzY3JvbGxGdW5jWCgpICsgZHggLSB4QXJyYXlbMV0pKTtcblxuICAgICAgaWYgKGR5KSB7XG4gICAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG4gICAgICAgIHZhciBpc1RvdWNoID0geUFycmF5WzJdID09PSBkeSxcbiAgICAgICAgICAgIHkgPSBpc1RvdWNoID8gc3RhcnRTY3JvbGxZICsgc2VsZi5zdGFydFkgLSBzZWxmLnkgOiBzY3JvbGxGdW5jWSgpICsgZHkgLSB5QXJyYXlbMV0sXG4gICAgICAgICAgICB5Q2xhbXBlZCA9IHNjcm9sbENsYW1wWSh5KTtcbiAgICAgICAgaXNUb3VjaCAmJiB5ICE9PSB5Q2xhbXBlZCAmJiAoc3RhcnRTY3JvbGxZICs9IHlDbGFtcGVkIC0geSk7XG4gICAgICAgIHNjcm9sbEZ1bmNZKHlDbGFtcGVkKTtcbiAgICAgIH1cblxuICAgICAgKGR5IHx8IGR4KSAmJiBfdXBkYXRlQWxsKCk7XG4gICAgfTtcblxuICAgIHZhcnMub25FbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfYWxsb3dOYXRpdmVQYW5uaW5nKHRhcmdldCwgbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuXG4gICAgICBTY3JvbGxUcmlnZ2VyJDEuYWRkRXZlbnRMaXN0ZW5lcihcInJlZnJlc2hcIiwgb25SZXNpemUpO1xuXG4gICAgICBfYWRkTGlzdGVuZXIkMShfd2luJDEsIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgICAgaWYgKHNjcm9sbEZ1bmNZLnNtb290aCkge1xuICAgICAgICBzY3JvbGxGdW5jWS50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3IgPSBcImF1dG9cIjtcbiAgICAgICAgc2Nyb2xsRnVuY1kuc21vb3RoID0gc2Nyb2xsRnVuY1guc21vb3RoID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlucHV0T2JzZXJ2ZXIuZW5hYmxlKCk7XG4gICAgfTtcblxuICAgIHZhcnMub25EaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIHRydWUpO1xuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIkMShfd2luJDEsIFwicmVzaXplXCIsIG9uUmVzaXplKTtcblxuICAgICAgU2Nyb2xsVHJpZ2dlciQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcbiAgICAgIGlucHV0T2JzZXJ2ZXIua2lsbCgpO1xuICAgIH07XG5cbiAgICB2YXJzLmxvY2tBeGlzID0gdmFycy5sb2NrQXhpcyAhPT0gZmFsc2U7XG4gICAgc2VsZiA9IG5ldyBPYnNlcnZlcih2YXJzKTtcbiAgICBzZWxmLmlPUyA9IF9maXhJT1NCdWc7XG4gICAgX2ZpeElPU0J1ZyAmJiAhc2Nyb2xsRnVuY1koKSAmJiBzY3JvbGxGdW5jWSgxKTtcbiAgICBfZml4SU9TQnVnICYmIGdzYXAkMS50aWNrZXIuYWRkKF9wYXNzVGhyb3VnaCk7XG4gICAgb25TdG9wRGVsYXllZENhbGwgPSBzZWxmLl9kYztcbiAgICB0d2VlbiA9IGdzYXAkMS50byhzZWxmLCB7XG4gICAgICBlYXNlOiBcInBvd2VyNFwiLFxuICAgICAgcGF1c2VkOiB0cnVlLFxuICAgICAgc2Nyb2xsWDogbm9ybWFsaXplU2Nyb2xsWCA/IFwiKz0wLjFcIiA6IFwiKz0wXCIsXG4gICAgICBzY3JvbGxZOiBcIis9MC4xXCIsXG4gICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgc2Nyb2xsWTogX2ludGVycnVwdGlvblRyYWNrZXIoc2Nyb2xsRnVuY1ksIHNjcm9sbEZ1bmNZKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdHdlZW4ucGF1c2UoKTtcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogX3VwZGF0ZUFsbCxcbiAgICAgIG9uQ29tcGxldGU6IG9uU3RvcERlbGF5ZWRDYWxsLnZhcnMub25Db21wbGV0ZVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5zb3J0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICByZXR1cm4gX3RyaWdnZXJzLnNvcnQoZnVuYyB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIChhLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNiArIGEuc3RhcnQgLSAoYi5zdGFydCArIChiLnZhcnMucmVmcmVzaFByaW9yaXR5IHx8IDApICogLTFlNik7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLm9ic2VydmUgPSBmdW5jdGlvbiAodmFycykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2ZXIodmFycyk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLm5vcm1hbGl6ZVNjcm9sbCA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gX25vcm1hbGl6ZXIkMTtcbiAgICB9XG5cbiAgICBpZiAodmFycyA9PT0gdHJ1ZSAmJiBfbm9ybWFsaXplciQxKSB7XG4gICAgICByZXR1cm4gX25vcm1hbGl6ZXIkMS5lbmFibGUoKTtcbiAgICB9XG5cbiAgICBpZiAodmFycyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBfbm9ybWFsaXplciQxICYmIF9ub3JtYWxpemVyJDEua2lsbCgpO1xuICAgIH1cblxuICAgIHZhciBub3JtYWxpemVyID0gdmFycyBpbnN0YW5jZW9mIE9ic2VydmVyID8gdmFycyA6IF9nZXRTY3JvbGxOb3JtYWxpemVyKHZhcnMpO1xuICAgIF9ub3JtYWxpemVyJDEgJiYgX25vcm1hbGl6ZXIkMS50YXJnZXQgPT09IG5vcm1hbGl6ZXIudGFyZ2V0ICYmIF9ub3JtYWxpemVyJDEua2lsbCgpO1xuICAgIF9pc1ZpZXdwb3J0JDEobm9ybWFsaXplci50YXJnZXQpICYmIChfbm9ybWFsaXplciQxID0gbm9ybWFsaXplcik7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZXI7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLmNvcmUgPSB7XG4gICAgX2dldFZlbG9jaXR5UHJvcDogX2dldFZlbG9jaXR5UHJvcCxcbiAgICBfaW5wdXRPYnNlcnZlcjogX2lucHV0T2JzZXJ2ZXIsXG4gICAgX3Njcm9sbGVyczogX3Njcm9sbGVycyxcbiAgICBfcHJveGllczogX3Byb3hpZXMsXG4gICAgYnJpZGdlOiB7XG4gICAgICBzczogZnVuY3Rpb24gc3MoKSB7XG4gICAgICAgIF9sYXN0U2Nyb2xsVGltZSB8fCBfZGlzcGF0Y2goXCJzY3JvbGxTdGFydFwiKTtcbiAgICAgICAgX2xhc3RTY3JvbGxUaW1lID0gX2dldFRpbWUkMSgpO1xuICAgICAgfSxcbiAgICAgIHJlZjogZnVuY3Rpb24gcmVmKCkge1xuICAgICAgICByZXR1cm4gX3JlZnJlc2hpbmc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBfZ2V0R1NBUCQxKCkgJiYgZ3NhcCQxLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIkMSk7XG5cbiAgZXhwb3J0cy5TY3JvbGxUcmlnZ2VyID0gU2Nyb2xsVHJpZ2dlciQxO1xuICBleHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxUcmlnZ2VyJDE7XG5cbiAgaWYgKHR5cGVvZih3aW5kb3cpID09PSAndW5kZWZpbmVkJyB8fCB3aW5kb3cgIT09IGV4cG9ydHMpIHtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO30gZWxzZSB7ZGVsZXRlIHdpbmRvdy5kZWZhdWx0O31cblxufSkpKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgLyohXG4gICAqIEdTQVAgMy4xMi4yXG4gICAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICAgKlxuICAgKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICAgKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAgICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gICovXG4gIHZhciBfY29uZmlnID0ge1xuICAgIGF1dG9TbGVlcDogMTIwLFxuICAgIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICAgIG51bGxUYXJnZXRXYXJuOiAxLFxuICAgIHVuaXRzOiB7XG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gICAgfVxuICB9LFxuICAgICAgX2RlZmF1bHRzID0ge1xuICAgIGR1cmF0aW9uOiAuNSxcbiAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgIGRlbGF5OiAwXG4gIH0sXG4gICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgX3JldmVydGluZyxcbiAgICAgIF9jb250ZXh0LFxuICAgICAgX2JpZ051bSA9IDFlOCxcbiAgICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgICBfMlBJID0gTWF0aC5QSSAqIDIsXG4gICAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgICAgX2dzSUQgPSAwLFxuICAgICAgX3NxcnQgPSBNYXRoLnNxcnQsXG4gICAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xuICB9LFxuICAgICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbiAgfSxcbiAgICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG4gIH0sXG4gICAgICBfaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBfaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xuICB9LFxuICAgICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbiAgfSxcbiAgICAgIF9pc05vdEZhbHNlID0gZnVuY3Rpb24gX2lzTm90RmFsc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xuICB9LFxuICAgICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG4gIH0sXG4gICAgICBfaXNGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfaXNGdW5jT3JTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG4gIH0sXG4gICAgICBfaXNUeXBlZEFycmF5ID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgICBfbnVtRXhwID0gL1stKz0uXSpcXGQrWy5lXFwtK10qXFxkKltlXFwtK10qXFxkKi9nLFxuICAgICAgX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICAgIF9jb21wbGV4U3RyaW5nTnVtRXhwID0gL1stKz0uXSpcXGQrXFwuP1xcZCooPzplLXxlXFwrKT9cXGQqL2dpLFxuICAgICAgX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgICBfZGVsaW1pdGVkVmFsdWVFeHAgPSAvW14sJ1wiXFxbXFxdXFxzXSsvZ2ksXG4gICAgICBfdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIF93aW4sXG4gICAgICBfY29yZUluaXR0ZWQsXG4gICAgICBfZG9jLFxuICAgICAgX2dsb2JhbHMgPSB7fSxcbiAgICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICAgIF9jb3JlUmVhZHksXG4gICAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gICAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG4gIH0sXG4gICAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xuICB9LFxuICAgICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICAgIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICB9LFxuICAgICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gICAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbiAgfSxcbiAgICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICAgIHJldHVybiAwO1xuICB9LFxuICAgICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gICAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gICAgaXNTdGFydDogdHJ1ZSxcbiAgICBraWxsOiBmYWxzZVxuICB9LFxuICAgICAgX3JldmVydENvbmZpZ05vS2lsbCA9IHtcbiAgICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAgICBraWxsOiBmYWxzZVxuICB9LFxuICAgICAgX3JldmVydENvbmZpZyA9IHtcbiAgICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxuICB9LFxuICAgICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgICAgX3BsdWdpbnMgPSB7fSxcbiAgICAgIF9lZmZlY3RzID0ge30sXG4gICAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gICAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICAgIGk7XG4gICAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICAgIH1cblxuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRzO1xuICB9LFxuICAgICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbiAgfSxcbiAgICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gICAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xuICB9LFxuICAgICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbiAgfSxcbiAgICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xuICB9LFxuICAgICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG4gIH0sXG4gICAgICBfcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICAgIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICAgIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gICAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xuICB9LFxuICAgICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gICAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgICBpID0gMDtcblxuICAgIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gICAgcmV0dXJuIGkgPCBsO1xuICB9LFxuICAgICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgICBpLFxuICAgICAgICB0d2VlbjtcblxuICAgIF9sYXp5TG9va3VwID0ge307XG4gICAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHR3ZWVuID0gYVtpXTtcbiAgICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICAgIH1cbiAgfSxcbiAgICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpO1xuICAgIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTtcbiAgfSxcbiAgICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICAgIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIChuIHx8IG4gPT09IDApICYmICh2YWx1ZSArIFwiXCIpLm1hdGNoKF9kZWxpbWl0ZWRWYWx1ZUV4cCkubGVuZ3RoIDwgMiA/IG4gOiBfaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG4gIH0sXG4gICAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICAgIHJldHVybiBwO1xuICB9LFxuICAgICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gICAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqLCBkZWZhdWx0cykge1xuICAgICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgICAgIF9tZXJnZSA9IGZ1bmN0aW9uIF9tZXJnZShiYXNlLCB0b01lcmdlKSB7XG4gICAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfSxcbiAgICAgIF9tZXJnZURlZXAgPSBmdW5jdGlvbiBfbWVyZ2VEZWVwKGJhc2UsIHRvTWVyZ2UpIHtcbiAgICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH0sXG4gICAgICBfY29weUV4Y2x1ZGluZyA9IGZ1bmN0aW9uIF9jb3B5RXhjbHVkaW5nKG9iaiwgZXhjbHVkaW5nKSB7XG4gICAgdmFyIGNvcHkgPSB7fSxcbiAgICAgICAgcDtcblxuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29weTtcbiAgfSxcbiAgICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgICB2YXIgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gICAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFycztcbiAgfSxcbiAgICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgICAgbWF0Y2ggPSBpID09PSBhMi5sZW5ndGg7XG5cbiAgICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICAgIHJldHVybiBpIDwgMDtcbiAgfSxcbiAgICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICAgIH1cblxuICAgIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgICAgdDtcblxuICAgIGlmIChzb3J0QnkpIHtcbiAgICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgICB3aGlsZSAocHJldiAmJiBwcmV2W3NvcnRCeV0gPiB0KSB7XG4gICAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2KSB7XG4gICAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgICBwcmV2Ll9uZXh0ID0gY2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgICBwYXJlbnRbZmlyc3RQcm9wXSA9IGNoaWxkO1xuICAgIH1cblxuICAgIGlmIChjaGlsZC5fbmV4dCkge1xuICAgICAgY2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICAgIH1cblxuICAgIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9LFxuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICAgIH1cblxuICAgIHZhciBwcmV2ID0gY2hpbGQuX3ByZXYsXG4gICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgIGlmIChwcmV2KSB7XG4gICAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgICB9IGVsc2UgaWYgKHBhcmVudFtsYXN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgICB9XG5cbiAgICBjaGlsZC5fbmV4dCA9IGNoaWxkLl9wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgfSxcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gICAgY2hpbGQuX2FjdCA9IDA7XG4gIH0sXG4gICAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgICAgd2hpbGUgKGEpIHtcbiAgICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgICBhID0gYS5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfSxcbiAgICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gICAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfSxcbiAgICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xuICB9LFxuICAgICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICAgIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xuICB9LFxuICAgICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICAgIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG4gIH0sXG4gICAgICBfYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICAgIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbiAgfSxcbiAgICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbiAgfSxcbiAgICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICAgIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG4gIH0sXG4gICAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gICAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5pbWF0aW9uO1xuICB9LFxuICAgICAgX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgICB2YXIgdDtcblxuICAgIGlmIChjaGlsZC5fdGltZSB8fCAhY2hpbGQuX2R1ciAmJiBjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnQgPCB0aW1lbGluZS5fdGltZSAmJiAoY2hpbGQuX2R1ciB8fCAhY2hpbGQuYWRkKSkge1xuICAgICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgICBpZiAoIWNoaWxkLl9kdXIgfHwgX2NsYW1wKDAsIGNoaWxkLnRvdGFsRHVyYXRpb24oKSwgdCkgLSBjaGlsZC5fdFRpbWUgPiBfdGlueU51bSkge1xuICAgICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgICBpZiAodGltZWxpbmUuX2R1ciA8IHRpbWVsaW5lLmR1cmF0aW9uKCkpIHtcbiAgICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICAgIHQucmF3VGltZSgpID49IDAgJiYgdC50b3RhbFRpbWUodC5fdFRpbWUpO1xuICAgICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgfVxuICB9LFxuICAgICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gICAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICBjaGlsZC5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKChfaXNOdW1iZXIocG9zaXRpb24pID8gcG9zaXRpb24gOiBwb3NpdGlvbiB8fCB0aW1lbGluZSAhPT0gX2dsb2JhbFRpbWVsaW5lID8gX3BhcnNlUG9zaXRpb24odGltZWxpbmUsIHBvc2l0aW9uLCBjaGlsZCkgOiB0aW1lbGluZS5fdGltZSkgKyBjaGlsZC5fZGVsYXkpO1xuICAgIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gICAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICAgIF9pc0Zyb21PckZyb21TdGFydChjaGlsZCkgfHwgKHRpbWVsaW5lLl9yZWNlbnQgPSBjaGlsZCk7XG4gICAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICAgIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7XG4gICAgcmV0dXJuIHRpbWVsaW5lO1xuICB9LFxuICAgICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xuICB9LFxuICAgICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICAgIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICFfcmV2ZXJ0aW5nICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9LFxuICAgICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICAgIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG4gIH0sXG4gICAgICBfaXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gICAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbiAgfSxcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgICAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgICB0VGltZSA9IDAsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gX2FuaW1hdGlvbkN5Y2xlKHR3ZWVuLl90VGltZSwgcmVwZWF0RGVsYXkpKSB7XG4gICAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgICAgdHdlZW4udmFycy5yZXBlYXRSZWZyZXNoICYmIHR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmludmFsaWRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmF0aW8gIT09IHByZXZSYXRpbyB8fCBfcmV2ZXJ0aW5nIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7XG4gICAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pO1xuICAgICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICAgIH1cbiAgfSxcbiAgICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgICB2YXIgY2hpbGQ7XG5cbiAgICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gICAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICAgIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICAgIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICAgIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICAgIGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICAgIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfSxcbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICAgIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG4gIH0sXG4gICAgICBfemVyb1Bvc2l0aW9uID0ge1xuICAgIF9zdGFydDogMCxcbiAgICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICAgIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbiAgfSxcbiAgICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICAgIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAgIGksXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgaXNQZXJjZW50O1xuXG4gICAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xuICB9LFxuICAgICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICAgIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgICAgaXJWYXJzLFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gICAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIGlmICh0eXBlKSB7XG4gICAgICBpclZhcnMgPSB2YXJzO1xuICAgICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbiAgfSxcbiAgICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICAgIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbiAgfSxcbiAgICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xuICB9LFxuICAgICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG4gIH0sXG4gICAgICBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAgIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xuICB9LFxuICAgICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICAgIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gICAgfSkgfHwgYWNjdW11bGF0b3I7XG4gIH0sXG4gICAgICB0b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICAgIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG4gIH0sXG4gICAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICAgIH07XG4gIH0sXG4gICAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gICAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICAgIH0pO1xuICB9LFxuICAgICAgZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICAgIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgICAgZWFjaDogdlxuICAgIH0sXG4gICAgICAgIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgICBjYWNoZSA9IHt9LFxuICAgICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgICByYXRpb1kgPSBmcm9tO1xuXG4gICAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgICBjZW50ZXI6IC41LFxuICAgICAgICBlZGdlczogLjUsXG4gICAgICAgIGVuZDogMVxuICAgICAgfVtmcm9tXSB8fCAwO1xuICAgIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgICByYXRpb1kgPSBmcm9tWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgICBvcmlnaW5YLFxuICAgICAgICAgIG9yaWdpblksXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5LFxuICAgICAgICAgIGQsXG4gICAgICAgICAgaixcbiAgICAgICAgICBtYXgsXG4gICAgICAgICAgbWluLFxuICAgICAgICAgIHdyYXBBdDtcblxuICAgICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICAgIHdyYXBBdC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICAgIG9yaWdpblkgPSB3cmFwQXQgPT09IF9iaWdOdW0gPyAwIDogcmF0aW9zID8gbCAqIHJhdGlvWSAvIHdyYXBBdCAtIC41IDogZnJvbSAvIHdyYXBBdCB8IDA7XG4gICAgICAgIG1heCA9IDA7XG4gICAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgICAgZGlzdGFuY2VzW2pdID0gZCA9ICFheGlzID8gX3NxcnQoeCAqIHggKyB5ICogeSkgOiBNYXRoLmFicyhheGlzID09PSBcInlcIiA/IHkgOiB4KTtcbiAgICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgICBkaXN0YW5jZXMubWluID0gbWluO1xuICAgICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgICAgZGlzdGFuY2VzLnUgPSBnZXRVbml0KHZhcnMuYW1vdW50IHx8IHZhcnMuZWFjaCkgfHwgMDtcbiAgICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgICB9XG5cbiAgICAgIGwgPSAoZGlzdGFuY2VzW2ldIC0gZGlzdGFuY2VzLm1pbikgLyBkaXN0YW5jZXMubWF4IHx8IDA7XG4gICAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAgIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICB2YXIgbiA9IF9yb3VuZFByZWNpc2UoTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJhdykgLyB2KSAqIHYgKiBwKTtcblxuICAgICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpO1xuICAgIH07XG4gIH0sXG4gICAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gICAgdmFyIGlzQXJyYXkgPSBfaXNBcnJheShzbmFwVG8pLFxuICAgICAgICByYWRpdXMsXG4gICAgICAgIGlzMkQ7XG5cbiAgICBpZiAoIWlzQXJyYXkgJiYgX2lzT2JqZWN0KHNuYXBUbykpIHtcbiAgICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICAgIHNuYXBUbyA9IHRvQXJyYXkoc25hcFRvLnZhbHVlcyk7XG5cbiAgICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgICByYWRpdXMgKj0gcmFkaXVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgICAgaXMyRCA9IHNuYXBUbyhyYXcpO1xuICAgICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gICAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgIHZhciB4ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnggOiByYXcpLFxuICAgICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgICAgY2xvc2VzdCA9IDAsXG4gICAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHk7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgICBkeCA9IHNuYXBUb1tpXS54IC0geDtcbiAgICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHggPCBtaW4pIHtcbiAgICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgICAgcmV0dXJuIGlzMkQgfHwgY2xvc2VzdCA9PT0gcmF3IHx8IF9pc051bWJlcihyYXcpID8gY2xvc2VzdCA6IGNsb3Nlc3QgKyBnZXRVbml0KHJhdyk7XG4gICAgfSk7XG4gIH0sXG4gICAgICByYW5kb20gPSBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIHJvdW5kaW5nSW5jcmVtZW50LCByZXR1cm5GdW5jdGlvbikge1xuICAgIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gICAgfSk7XG4gIH0sXG4gICAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3Rpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICAgIHJldHVybiBmKHYpO1xuICAgICAgfSwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG4gICAgICB1bml0aXplID0gZnVuY3Rpb24gdW5pdGl6ZShmdW5jLCB1bml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICAgIH07XG4gIH0sXG4gICAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hcFJhbmdlKG1pbiwgbWF4LCAwLCAxLCB2YWx1ZSk7XG4gIH0sXG4gICAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICAgIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gICAgfSk7XG4gIH0sXG4gICAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gKHJhbmdlICsgKHZhbHVlIC0gbWluKSAlIHJhbmdlKSAlIHJhbmdlICsgbWluO1xuICAgIH0pO1xuICB9LFxuICAgICAgd3JhcFlveW8gPSBmdW5jdGlvbiB3cmFwWW95byhtaW4sIG1heCwgdmFsdWUpIHtcbiAgICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXBZb3lvKDAsIG1pbi5sZW5ndGggLSAxKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgICB2YXIgcHJldiA9IDAsXG4gICAgICAgIHMgPSBcIlwiLFxuICAgICAgICBpLFxuICAgICAgICBudW1zLFxuICAgICAgICBlbmQsXG4gICAgICAgIGlzQXJyYXk7XG5cbiAgICB3aGlsZSAofihpID0gdmFsdWUuaW5kZXhPZihcInJhbmRvbShcIiwgcHJldikpKSB7XG4gICAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICAgIG51bXMgPSB2YWx1ZS5zdWJzdHIoaSArIDcsIGVuZCAtIGkgLSA3KS5tYXRjaChpc0FycmF5ID8gX2RlbGltaXRlZFZhbHVlRXhwIDogX3N0cmljdE51bUV4cCk7XG4gICAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgICBwcmV2ID0gZW5kICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbiAgfSxcbiAgICAgIG1hcFJhbmdlID0gZnVuY3Rpb24gbWFwUmFuZ2UoaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCwgdmFsdWUpIHtcbiAgICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICAgIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gICAgfSk7XG4gIH0sXG4gICAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgxIC0gcCkgKiBzdGFydCArIHAgKiBlbmQ7XG4gICAgfTtcblxuICAgIGlmICghZnVuYykge1xuICAgICAgdmFyIGlzU3RyaW5nID0gX2lzU3RyaW5nKHN0YXJ0KSxcbiAgICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgICBsLFxuICAgICAgICAgIGlsO1xuXG4gICAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICBzdGFydCA9IHtcbiAgICAgICAgICBwOiBzdGFydFxuICAgICAgICB9O1xuICAgICAgICBlbmQgPSB7XG4gICAgICAgICAgcDogZW5kXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKF9pc0FycmF5KHN0YXJ0KSAmJiAhX2lzQXJyYXkoZW5kKSkge1xuICAgICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICAgIGlsID0gbCAtIDI7XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsLS07XG5cbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICAgIHAgKj0gbDtcbiAgICAgICAgICB2YXIgaSA9IE1hdGgubWluKGlsLCB+fnApO1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBwcm9ncmVzcyA9IGVuZDtcbiAgICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgICAgX2FkZFByb3BUd2Vlbi5jYWxsKG1hc3Rlciwgc3RhcnQsIHAsIFwiZ2V0XCIsIGVuZFtwXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZW5kZXJQcm9wVHdlZW5zKHAsIG1hc3RlcikgfHwgKGlzU3RyaW5nID8gc3RhcnQucCA6IHN0YXJ0KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbiAgfSxcbiAgICAgIF9nZXRMYWJlbEluRGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldExhYmVsSW5EaXJlY3Rpb24odGltZWxpbmUsIGZyb21UaW1lLCBiYWNrd2FyZCkge1xuICAgIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIHAsXG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICBsYWJlbDtcblxuICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICAgIGlmIChkaXN0YW5jZSA8IDAgPT09ICEhYmFja3dhcmQgJiYgZGlzdGFuY2UgJiYgbWluID4gKGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2UpKSkge1xuICAgICAgICBsYWJlbCA9IHA7XG4gICAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYWJlbDtcbiAgfSxcbiAgICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgICBjYWxsYmFjayA9IHZbdHlwZV0sXG4gICAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzY29wZSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBhcmFtcyA9IHZbdHlwZSArIFwiUGFyYW1zXCJdO1xuICAgIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpO1xuICAgIGNvbnRleHQgJiYgKF9jb250ZXh0ID0gY29udGV4dCk7XG4gICAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gICAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgICBfcmVtb3ZlRnJvbVBhcmVudChhbmltYXRpb24pO1xuXG4gICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICAgIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH0sXG4gICAgICBfcXVpY2tUd2VlbixcbiAgICAgIF9yZWdpc3RlclBsdWdpblF1ZXVlID0gW10sXG4gICAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgICBpZiAoX3dpbmRvd0V4aXN0cygpICYmIGNvbmZpZykge1xuICAgICAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnO1xuXG4gICAgICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICAgICAgfSA6IGNvbmZpZyxcbiAgICAgICAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgICAgICByZW5kZXI6IF9yZW5kZXJQcm9wVHdlZW5zLFxuICAgICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgICAgICBtb2RpZmllcjogX2FkZFBsdWdpbk1vZGlmaWVyLFxuICAgICAgICByYXdWYXJzOiAwXG4gICAgICB9LFxuICAgICAgICAgIHN0YXRpY3MgPSB7XG4gICAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICAgIGdldDogMCxcbiAgICAgICAgZ2V0U2V0dGVyOiBfZ2V0U2V0dGVyLFxuICAgICAgICBhbGlhc2VzOiB7fSxcbiAgICAgICAgcmVnaXN0ZXI6IDBcbiAgICAgIH07XG5cbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgICAgICBpZiAoX3BsdWdpbnNbbmFtZV0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0RGVmYXVsdHMoUGx1Z2luLCBfc2V0RGVmYXVsdHMoX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBpbnN0YW5jZURlZmF1bHRzKSwgc3RhdGljcykpO1xuXG4gICAgICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpO1xuXG4gICAgICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjtcbiAgICAgIH1cblxuICAgICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnICYmIF9yZWdpc3RlclBsdWdpblF1ZXVlLnB1c2goY29uZmlnKTtcbiAgICB9XG4gIH0sXG4gICAgICBfMjU1ID0gMjU1LFxuICAgICAgX2NvbG9yTG9va3VwID0ge1xuICAgIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gICAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gICAgYmxhY2s6IFswLCAwLCAwXSxcbiAgICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICAgIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gICAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICAgIG5hdnk6IFswLCAwLCAxMjhdLFxuICAgIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gICAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gICAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gICAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gICAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICAgIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICAgIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG4gIH0sXG4gICAgICBfaHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICAgIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xuICB9LFxuICAgICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICAgIHIsXG4gICAgICAgIGcsXG4gICAgICAgIGIsXG4gICAgICAgIGgsXG4gICAgICAgIHMsXG4gICAgICAgIGwsXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICBkLFxuICAgICAgICB3YXNIU0w7XG5cbiAgICBpZiAoIWEpIHtcbiAgICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICAgIH1cblxuICAgICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTtcbiAgICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICAgIH1cblxuICAgIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgICByID0gYVswXSAvIF8yNTU7XG4gICAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICAgIGggPSBzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICBoICo9IDYwO1xuICAgICAgfVxuXG4gICAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gICAgfVxuXG4gICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICByZXR1cm4gYTtcbiAgfSxcbiAgICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgICBjID0gW10sXG4gICAgICAgIGkgPSAtMTtcbiAgICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgICB9KTtcbiAgICB2YWx1ZXMuYyA9IGM7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICAgIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgYyxcbiAgICAgICAgc2hlbGwsXG4gICAgICAgIGQsXG4gICAgICAgIGw7XG5cbiAgICBpZiAoIWNvbG9ycykge1xuICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gICAgfSk7XG5cbiAgICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNoZWxsKSB7XG4gICAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xuICB9LFxuICAgICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgICBwO1xuXG4gICAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xuICB9KCksXG4gICAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgICB0b0hTTDtcbiAgICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICAgIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICAgICAgX3RpY2tlckFjdGl2ZSxcbiAgICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgICBfaWQsXG4gICAgICAgIF9yZXEsXG4gICAgICAgIF9yYWYsXG4gICAgICAgIF9zZWxmLFxuICAgICAgICBfZGVsdGEsXG4gICAgICAgIF9pLFxuICAgICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgICB0aW1lLFxuICAgICAgICAgIGZyYW1lO1xuXG4gICAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICAgIGRpc3BhdGNoID0gMTtcbiAgICAgIH1cblxuICAgICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7XG5cbiAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9zZWxmID0ge1xuICAgICAgdGltZTogMCxcbiAgICAgIGZyYW1lOiAwLFxuICAgICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgICAgfSxcbiAgICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgICAgX3JhZiA9IF93aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgICAgICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5mb3JFYWNoKF9jcmVhdGVQbHVnaW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICAgIF90aWNrKDIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgICBfcmVxID0gX2VtcHR5RnVuYztcbiAgICAgIH0sXG4gICAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICAgIF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgSW5maW5pdHk7XG4gICAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnIHx8IDMzLCBfbGFnVGhyZXNob2xkKTtcbiAgICAgIH0sXG4gICAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgICAgX25leHRUaW1lID0gX3NlbGYudGltZSAqIDEwMDAgKyBfZ2FwO1xuICAgICAgfSxcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICAgIHZhciBmdW5jID0gb25jZSA/IGZ1bmN0aW9uICh0LCBkLCBmLCB2KSB7XG4gICAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICAgIH0gOiBjYWxsYmFjaztcblxuICAgICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2ssIGkpIHtcbiAgICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgICAgfSxcbiAgICAgIF9saXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgICB9O1xuICAgIHJldHVybiBfc2VsZjtcbiAgfSgpLFxuICAgICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG4gIH0sXG4gICAgICBfZWFzZU1hcCA9IHt9LFxuICAgICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICAgIF9wYXJzZU9iamVjdEluU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlT2JqZWN0SW5TdHJpbmcodmFsdWUpIHtcbiAgICB2YXIgb2JqID0ge30sXG4gICAgICAgIHNwbGl0ID0gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCAtIDMpLnNwbGl0KFwiOlwiKSxcbiAgICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICAgIGkgPSAxLFxuICAgICAgICBsID0gc3BsaXQubGVuZ3RoLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgdmFsLFxuICAgICAgICBwYXJzZWRWYWw7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFsID0gc3BsaXRbaV07XG4gICAgICBpbmRleCA9IGkgIT09IGwgLSAxID8gdmFsLmxhc3RJbmRleE9mKFwiLFwiKSA6IHZhbC5sZW5ndGg7XG4gICAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAgICBrZXkgPSB2YWwuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gICAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICAgIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgICBjbG9zZSA9IHZhbHVlLmluZGV4T2YoXCIpXCIpLFxuICAgICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xuICB9LFxuICAgICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgICByZXR1cm4gZWFzZSAmJiBzcGxpdC5sZW5ndGggPiAxICYmIGVhc2UuY29uZmlnID8gZWFzZS5jb25maWcuYXBwbHkobnVsbCwgfm5hbWUuaW5kZXhPZihcIntcIikgPyBbX3BhcnNlT2JqZWN0SW5TdHJpbmcoc3BsaXRbMV0pXSA6IF92YWx1ZUluUGFyZW50aGVzZXMobmFtZSkuc3BsaXQoXCIsXCIpLm1hcChfbnVtZXJpY0lmUG9zc2libGUpKSA6IF9lYXNlTWFwLl9DRSAmJiBfY3VzdG9tRWFzZUV4cC50ZXN0KG5hbWUpID8gX2Vhc2VNYXAuX0NFKFwiXCIsIG5hbWUpIDogZWFzZTtcbiAgfSxcbiAgICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgICB9O1xuICB9LFxuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgICB2YXIgY2hpbGQgPSB0aW1lbGluZS5fZmlyc3QsXG4gICAgICAgIGVhc2U7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICAgIGlmIChjaGlsZC50aW1lbGluZSkge1xuICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlYXNlID0gY2hpbGQuX2Vhc2U7XG4gICAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgICBjaGlsZC5feW95byA9IGlzWW95bztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSxcbiAgICAgIF9wYXJzZUVhc2UgPSBmdW5jdGlvbiBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbiAgfSxcbiAgICAgIF9pbnNlcnRFYXNlID0gZnVuY3Rpb24gX2luc2VydEVhc2UobmFtZXMsIGVhc2VJbiwgZWFzZU91dCwgZWFzZUluT3V0KSB7XG4gICAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgICByZXR1cm4gMSAtIGVhc2VJbigxIC0gcCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChlYXNlSW5PdXQgPT09IHZvaWQgMCkge1xuICAgICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZWFzZSA9IHtcbiAgICAgIGVhc2VJbjogZWFzZUluLFxuICAgICAgZWFzZU91dDogZWFzZU91dCxcbiAgICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gICAgfSxcbiAgICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICAgIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF9lYXNlTWFwW25hbWVdID0gX2dsb2JhbHNbbmFtZV0gPSBlYXNlO1xuICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSArIChwID09PSBcImVhc2VJblwiID8gXCIuaW5cIiA6IHAgPT09IFwiZWFzZU91dFwiID8gXCIub3V0XCIgOiBcIi5pbk91dFwiKV0gPSBfZWFzZU1hcFtuYW1lICsgXCIuXCIgKyBwXSA9IGVhc2VbcF07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZWFzZTtcbiAgfSxcbiAgICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAgIHAyID0gKHBlcmlvZCB8fCAodHlwZSA/IC4zIDogLjQ1KSkgLyAoYW1wbGl0dWRlIDwgMSA/IGFtcGxpdHVkZSA6IDEpLFxuICAgICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIHAgPT09IDEgPyAxIDogcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIF9zaW4oKHAgLSBwMykgKiBwMikgKyAxO1xuICAgIH0sXG4gICAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICAgIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICAgIHAyID0gXzJQSSAvIHAyO1xuXG4gICAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAoYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gICAgfTtcblxuICAgIHJldHVybiBlYXNlO1xuICB9LFxuICAgICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgICBpZiAob3ZlcnNob290ID09PSB2b2lkIDApIHtcbiAgICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gICAgfVxuXG4gICAgdmFyIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICAgIH0sXG4gICAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICAgIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICAgIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKG92ZXJzaG9vdCkge1xuICAgICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gICAgfTtcblxuICAgIHJldHVybiBlYXNlO1xuICB9O1xuXG4gIF9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICAgIHZhciBwb3dlciA9IGkgPCA1ID8gaSArIDEgOiBpO1xuXG4gICAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICAgIH0gOiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHAsIHBvd2VyKTtcbiAgICB9LCBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICAgIH0pO1xuICB9KTtcblxuICBfZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuICBfaW5zZXJ0RWFzZShcIkVsYXN0aWNcIiwgX2NvbmZpZ0VsYXN0aWMoXCJpblwiKSwgX2NvbmZpZ0VsYXN0aWMoXCJvdXRcIiksIF9jb25maWdFbGFzdGljKCkpO1xuXG4gIChmdW5jdGlvbiAobiwgYykge1xuICAgIHZhciBuMSA9IDEgLyBjLFxuICAgICAgICBuMiA9IDIgKiBuMSxcbiAgICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCBuMSA/IG4gKiBwICogcCA6IHAgPCBuMiA/IG4gKiBNYXRoLnBvdyhwIC0gMS41IC8gYywgMikgKyAuNzUgOiBwIDwgbjMgPyBuICogKHAgLT0gMi4yNSAvIGMpICogcCArIC45Mzc1IDogbiAqIE1hdGgucG93KHAgLSAyLjYyNSAvIGMsIDIpICsgLjk4NDM3NTtcbiAgICB9O1xuXG4gICAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gICAgfSwgZWFzZU91dCk7XG4gIH0pKDcuNTYyNSwgMi43NSk7XG5cbiAgX2luc2VydEVhc2UoXCJFeHBvXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbiAgfSk7XG5cbiAgX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xuICB9KTtcblxuICBfaW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbiAgfSk7XG5cbiAgX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuICBfZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gICAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgICBzdGVwcyA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG4gIF9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG4gIH0pO1xuXG4gIHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgICB0aGlzLmlkID0gX2dzSUQrKztcbiAgICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gICAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gICAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xuICB9O1xuICB2YXIgQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICAgIGlmIChfY29udGV4dCkge1xuICAgICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgICB9XG5cbiAgICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gICAgfTtcblxuICAgIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZGlydHkgPSAwO1xuICAgICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgX3dha2UoKTtcblxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7XG5cbiAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpO1xuXG4gICAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgICB9O1xuXG4gICAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydHMgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ydHMgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgdFRpbWUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLl90cyA/IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRoaXMucGFyZW50Ll90aW1lLCB0aGlzKSA6IHRoaXMuX3RUaW1lO1xuICAgICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzO1xuICAgICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC1NYXRoLmFicyh0aGlzLl9kZWxheSksIHRoaXMuX3REdXIsIHRUaW1lKSwgdHJ1ZSk7XG5cbiAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wcyA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7XG4gICAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9hY3QgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0cztcbiAgICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgICBwYXJlbnQgJiYgKHBhcmVudC5fc29ydCB8fCAhdGhpcy5wYXJlbnQpICYmIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgdGhpcywgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ICsgKF9pc05vdEZhbHNlKGluY2x1ZGVSZXBlYXRzKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIE1hdGguYWJzKHRoaXMuX3RzIHx8IDEpO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgICAgaWYgKHRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fc3RhcnRBdCkge1xuICAgICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoYW5pbWF0aW9uLl90cyB8fCAxKTtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLl9zYXQgPyB0aGlzLl9zYXQudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtSW5maW5pdHkgOiB0aGlzLl9zYXQuZ2xvYmFsVGltZShyYXdUaW1lKSA6IHRpbWU7XG4gICAgfTtcblxuICAgIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5feW95bztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXkoKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20sIHN1cHByZXNzRXZlbnRzKTtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UoZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgICAgcmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGF1c2VkKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9ydHMgPCAwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgICB0aGlzLl9pbml0dGVkID0gdGhpcy5fYWN0ID0gMDtcbiAgICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fc3RhcnQsXG4gICAgICAgICAgcmF3VGltZTtcbiAgICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgICB0eXBlID09PSBcIm9uVXBkYXRlXCIgJiYgKHRoaXMuX29uVXBkYXRlID0gY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICAgIH07XG5cbiAgICBfcHJvdG8udGhlbiA9IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgZiA9IF9pc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogX3Bhc3NUaHJvdWdoLFxuICAgICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgICAgc2VsZi50aGVuID0gbnVsbDtcbiAgICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICAgIHNlbGYudGhlbiA9IF90aGVuO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICAgIF9yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmtpbGwgPSBmdW5jdGlvbiBraWxsKCkge1xuICAgICAgX2ludGVycnVwdCh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFuaW1hdGlvbjtcbiAgfSgpO1xuXG4gIF9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gICAgX3RpbWU6IDAsXG4gICAgX3N0YXJ0OiAwLFxuICAgIF9lbmQ6IDAsXG4gICAgX3RUaW1lOiAwLFxuICAgIF90RHVyOiAwLFxuICAgIF9kaXJ0eTogMCxcbiAgICBfcmVwZWF0OiAwLFxuICAgIF95b3lvOiBmYWxzZSxcbiAgICBwYXJlbnQ6IG51bGwsXG4gICAgX2luaXR0ZWQ6IGZhbHNlLFxuICAgIF9yRGVsYXk6IDAsXG4gICAgX3RzOiAxLFxuICAgIF9kcDogMCxcbiAgICByYXRpbzogMCxcbiAgICBfelRpbWU6IC1fdGlueU51bSxcbiAgICBfcHJvbTogMCxcbiAgICBfcHM6IGZhbHNlLFxuICAgIF9ydHM6IDFcbiAgfSk7XG5cbiAgdmFyIFRpbWVsaW5lID0gZnVuY3Rpb24gKF9BbmltYXRpb24pIHtcbiAgICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhcnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgICAgX3RoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSAhIXZhcnMuc21vb3RoQ2hpbGRUaW1pbmc7XG4gICAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgICBfZ2xvYmFsVGltZWxpbmUgJiYgX2FkZFRvVGltZWxpbmUodmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgcG9zaXRpb24pO1xuICAgICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgICB2YXJzLnNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHZhcnMuc2Nyb2xsVHJpZ2dlcik7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBUaW1lbGluZS5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgICAgbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jYWxsID0gZnVuY3Rpb24gY2FsbChjYWxsYmFjaywgcGFyYW1zLCBwb3NpdGlvbikge1xuICAgICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gICAgfTtcblxuICAgIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgICAgdmFycy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgICAgdmFycy5vbkNvbXBsZXRlUGFyYW1zID0gb25Db21wbGV0ZUFsbFBhcmFtcztcbiAgICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICAgIHZhcnMucnVuQmFja3dhcmRzID0gMTtcbiAgICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gICAgfTtcblxuICAgIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgICAgX2luaGVyaXREZWZhdWx0cyh0b1ZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgbmV4dCxcbiAgICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICAgIHBhdXNlVHdlZW4sXG4gICAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICAgIHlveW8sXG4gICAgICAgICAgaXNZb3lvO1xuICAgICAgdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIHRUaW1lID4gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCAmJiAodFRpbWUgPSB0RHVyKTtcblxuICAgICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgICAgdG90YWxUaW1lICs9IHRoaXMuX3RpbWUgLSBwcmV2VGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgICAgcHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgICBpZiAoY3Jvc3NpbmdTdGFydCkge1xuICAgICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7XG4gICAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcbiAgICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoeW95byAmJiBpdGVyYXRpb24gJiAxKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgICAgZG9lc1dyYXAgPSByZXdpbmRpbmcgPT09ICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpO1xuICAgICAgICAgICAgaXRlcmF0aW9uIDwgcHJldkl0ZXJhdGlvbiAmJiAocmV3aW5kaW5nID0gIXJld2luZGluZyk7XG4gICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lO1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSB8fCAoaXNZb3lvID8gMCA6IF9yb3VuZFByZWNpc2UoaXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbikpLCBzdXBwcmVzc0V2ZW50cywgIWR1cikuX2xvY2sgPSAwO1xuICAgICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgKHRoaXMuaW52YWxpZGF0ZSgpLl9sb2NrID0gMSk7XG5cbiAgICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdXIgPSB0aGlzLl9kdXI7XG4gICAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cjtcblxuICAgICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IGR1ciA6IC0wLjAwMDE7XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSh0aGlzLCBpc1lveW8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZyAmJiB0aGlzLl9sb2NrIDwgMikge1xuICAgICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgICB0VGltZSAtPSB0aW1lIC0gKHRpbWUgPSBwYXVzZVR3ZWVuLl9zdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgICAgdGhpcy5faW5pdHRlZCA9IDE7XG4gICAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgICAgcHJldlRpbWUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lID49IHByZXZUaW1lICYmIHRvdGFsVGltZSA+PSAwKSB7XG4gICAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IC1fdGlueU51bSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lO1xuXG4gICAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgKGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydEF0KSk7XG5cbiAgICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7XG5cbiAgICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdFRpbWUgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkgfHwgIXRUaW1lICYmIHByZXZUaW1lKSBpZiAocHJldlN0YXJ0ID09PSB0aGlzLl9zdGFydCB8fCBNYXRoLmFicyh0aW1lU2NhbGUpICE9PSBNYXRoLmFicyh0aGlzLl90cykpIGlmICghdGhpcy5fbG9jaykge1xuICAgICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTtcblxuICAgICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChjaGlsZCwgcG9zaXRpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcbiAgICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQob2JqLCBwb3NpdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICBpZiAobmVzdGVkID09PSB2b2lkIDApIHtcbiAgICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR3ZWVucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lbGluZXMgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICAgIH1cblxuICAgICAgdmFyIGEgPSBbXSxcbiAgICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRCeUlkID0gZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGNoaWxkKSB7XG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgICAgdGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgICBpZiAoIXRoaXMuX2RwICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgICAgfVxuXG4gICAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgICAgdmFyIGEgPSBbXSxcbiAgICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgICBjaGlsZHJlbjtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGE7XG4gICAgfTtcblxuICAgIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIGluaXR0ZWQsXG4gICAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgICBsYXp5OiBmYWxzZSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pO1xuICAgICAgICB9XG4gICAgICB9LCB2YXJzKSk7XG5cbiAgICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBzdGFydEF0OiB7XG4gICAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgICB9XG4gICAgICB9LCB2YXJzKSk7XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgICAgcDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKGluY2x1ZGVMYWJlbHMpIHtcbiAgICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICAgIG5leHQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICAgIGluY2x1ZGVMYWJlbHMgJiYgKHRoaXMubGFiZWxzID0ge30pO1xuICAgICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICBjaGlsZCA9IHNlbGYuX2xhc3QsXG4gICAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgICBwcmV2LFxuICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgIHBhcmVudDtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYudGltZVNjYWxlKChzZWxmLl9yZXBlYXQgPCAwID8gc2VsZi5kdXJhdGlvbigpIDogc2VsZi50b3RhbER1cmF0aW9uKCkpIC8gKHNlbGYucmV2ZXJzZWQoKSA/IC12YWx1ZSA6IHZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7XG4gICAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgICAgc2VsZi5fbG9jayA9IDE7XG4gICAgICAgICAgICBfYWRkVG9UaW1lbGluZShzZWxmLCBjaGlsZCwgc3RhcnQgLSBjaGlsZC5fZGVsYXksIDEpLl9sb2NrID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgICAgc2VsZi5fc3RhcnQgKz0gc3RhcnQgLyBzZWxmLl90cztcbiAgICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgICB9O1xuXG4gICAgVGltZWxpbmUudXBkYXRlUm9vdCA9IGZ1bmN0aW9uIHVwZGF0ZVJvb3QodGltZSkge1xuICAgICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgICAgX2xhc3RSZW5kZXJlZEZyYW1lID0gX3RpY2tlci5mcmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICAgIF9uZXh0R0NGcmFtZSArPSBfY29uZmlnLmF1dG9TbGVlcCB8fCAxMjA7XG4gICAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgd2hpbGUgKGNoaWxkICYmICFjaGlsZC5fdHMpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgfHwgX3RpY2tlci5zbGVlcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUaW1lbGluZTtcbiAgfShBbmltYXRpb24pO1xuXG4gIF9zZXREZWZhdWx0cyhUaW1lbGluZS5wcm90b3R5cGUsIHtcbiAgICBfbG9jazogMCxcbiAgICBfaGFzUGF1c2U6IDAsXG4gICAgX2ZvcmNpbmc6IDBcbiAgfSk7XG5cbiAgdmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gICAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBzdGFydE51bXMsXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIGNodW5rLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgaGFzUmFuZG9tLFxuICAgICAgICBhO1xuICAgIHB0LmIgPSBzdGFydDtcbiAgICBwdC5lID0gZW5kO1xuICAgIHN0YXJ0ICs9IFwiXCI7XG4gICAgZW5kICs9IFwiXCI7XG5cbiAgICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgICBhID0gW3N0YXJ0LCBlbmRdO1xuICAgICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7XG4gICAgICBzdGFydCA9IGFbMF07XG4gICAgICBlbmQgPSBhWzFdO1xuICAgIH1cblxuICAgIHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9jb21wbGV4U3RyaW5nTnVtRXhwKSB8fCBbXTtcblxuICAgIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIpIHtcbiAgICAgICAgY29sb3IgPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5kTnVtICE9PSBzdGFydE51bXNbbWF0Y2hJbmRleCsrXSkge1xuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDtcbiAgICAgICAgcHQuX3B0ID0ge1xuICAgICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kTnVtKSAtIHN0YXJ0TnVtIDogcGFyc2VGbG9hdChlbmROdW0pIC0gc3RhcnROdW0sXG4gICAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0ID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgICAgaW5kZXggPSBfY29tcGxleFN0cmluZ051bUV4cC5sYXN0SW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjtcbiAgICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICAgIGlmIChfcmVsRXhwLnRlc3QoZW5kKSB8fCBoYXNSYW5kb20pIHtcbiAgICAgIHB0LmUgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuX3B0ID0gcHQ7XG4gICAgcmV0dXJuIHB0O1xuICB9LFxuICAgICAgX2FkZFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBpbmRleCwgdGFyZ2V0cywgbW9kaWZpZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtLCBvcHRpb25hbCkge1xuICAgIF9pc0Z1bmN0aW9uKGVuZCkgJiYgKGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQsIHRhcmdldHMpKTtcbiAgICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgICAgc2V0dGVyID0gIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBfc2V0dGVyUGxhaW4gOiBmdW5jUGFyYW0gPyBfc2V0dGVyRnVuY1dpdGhQYXJhbSA6IF9zZXR0ZXJGdW5jLFxuICAgICAgICBwdDtcblxuICAgIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgICAgaWYgKH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG4gICAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgICAgaWYgKHB0IHx8IHB0ID09PSAwKSB7XG4gICAgICAgICAgZW5kID0gcHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbmFsIHx8IHBhcnNlZFN0YXJ0ICE9PSBlbmQgfHwgX2ZvcmNlQWxsUHJvcFR3ZWVucykge1xuICAgICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgICAgfVxuXG4gICAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICAgIH1cbiAgfSxcbiAgICAgIF9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICAgIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICAgIH1cblxuICAgIHZhciBjb3B5ID0ge30sXG4gICAgICAgIHA7XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHk7XG4gIH0sXG4gICAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gICAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gICAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07XG4gICAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwbHVnaW47XG4gIH0sXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgICBfaW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpIHtcbiAgICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICAgIG9uVXBkYXRlUGFyYW1zID0gdmFycy5vblVwZGF0ZVBhcmFtcyxcbiAgICAgICAgY2FsbGJhY2tTY29wZSA9IHZhcnMuY2FsbGJhY2tTY29wZSxcbiAgICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgICAga2V5ZnJhbWVzID0gdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICAgIHByZXZTdGFydEF0ID0gdHdlZW4uX3N0YXJ0QXQsXG4gICAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgICBmdWxsVGFyZ2V0cyA9IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiB0YXJnZXRzLFxuICAgICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICAgIGNsZWFuVmFycyxcbiAgICAgICAgaSxcbiAgICAgICAgcCxcbiAgICAgICAgcHQsXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgaGFzUHJpb3JpdHksXG4gICAgICAgIGdzRGF0YSxcbiAgICAgICAgaGFybmVzcyxcbiAgICAgICAgcGx1Z2luLFxuICAgICAgICBwdExvb2t1cCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgICBvdmVyd3JpdHRlbjtcbiAgICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gICAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgICB0d2Vlbi5feUVhc2UgPSB5b3lvRWFzZSA/IF9pbnZlcnRFYXNlKF9wYXJzZUVhc2UoeW95b0Vhc2UgPT09IHRydWUgPyBlYXNlIDogeW95b0Vhc2UsIF9kZWZhdWx0cy5lYXNlKSkgOiAwO1xuXG4gICAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICAgIHR3ZWVuLl95RWFzZSA9IHR3ZWVuLl9lYXNlO1xuICAgICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0d2Vlbi5fZnJvbSA9ICF0bCAmJiAhIXZhcnMucnVuQmFja3dhcmRzO1xuXG4gICAgaWYgKCF0bCB8fCBrZXlmcmFtZXMgJiYgIXZhcnMuc3RhZ2dlcikge1xuICAgICAgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDA7XG4gICAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdO1xuICAgICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgICBpZiAocHJldlN0YXJ0QXQpIHtcbiAgICAgICAgcHJldlN0YXJ0QXQuX3pUaW1lIDwgMCAmJiBwcmV2U3RhcnRBdC5wcm9ncmVzcygxKTtcbiAgICAgICAgdGltZSA8IDAgJiYgcnVuQmFja3dhcmRzICYmIGltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCA/IHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkgOiBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWdOb0tpbGwgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7XG4gICAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgICBsYXp5OiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBvblVwZGF0ZTogb25VcGRhdGUsXG4gICAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICAgIGNhbGxiYWNrU2NvcGU6IGNhbGxiYWNrU2NvcGUsXG4gICAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgICB9LCBzdGFydEF0KSkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7XG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjtcbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpO1xuXG4gICAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocnVuQmFja3dhcmRzICYmIGR1cikge1xuICAgICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpO1xuICAgICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudFxuICAgICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTtcblxuICAgICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIHApKTtcblxuICAgICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7XG4gICAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuO1xuICAgICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICAgIGlmICghaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7XG5cbiAgICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICAgIH1cblxuICAgICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pO1xuICAgIH1cblxuICAgIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICAgIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47XG4gICAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7XG4gIH0sXG4gICAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lKSB7XG4gICAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgICBwdCxcbiAgICAgICAgcm9vdFBULFxuICAgICAgICBsb29rdXAsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIXB0Q2FjaGUpIHtcbiAgICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwdCkge1xuICAgICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxO1xuICAgICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUO1xuICAgICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpO1xuICAgICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTtcbiAgICB9XG4gIH0sXG4gICAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgICBjb3B5LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBhbGlhc2VzO1xuXG4gICAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgIHJldHVybiB2YXJzO1xuICAgIH1cblxuICAgIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gICAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb3B5O1xuICB9LFxuICAgICAgX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICAgIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgICAgcCxcbiAgICAgICAgYTtcblxuICAgIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pO1xuICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICAgIHY6IHZhbHVlLFxuICAgICAgICAgIGU6IGVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChwIGluIG9iaikge1xuICAgICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICAgIGU6IGVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xuICB9LFxuICAgICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG4gIF9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xuICB9KTtcblxuICB2YXIgVHdlZW4gPSBmdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gICAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgICB2YXIgX3RoaXMzO1xuXG4gICAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgICAgdGwsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBjb3B5LFxuICAgICAgICAgIGwsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdO1xuICAgICAgX3RoaXMzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGU7XG5cbiAgICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgICB0bCA9IF90aGlzMy50aW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gICAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgICAgdGFyZ2V0czogcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHBhcnNlZFRhcmdldHNcbiAgICAgICAgfSk7XG4gICAgICAgIHRsLmtpbGwoKTtcbiAgICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTtcbiAgICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAga2YsXG4gICAgICAgICAgICAgIHY7XG5cbiAgICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0bC5kdXJhdGlvbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtO1xuXG4gICAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTtcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgICAgcmV0dXJuIF90aGlzMztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgICBpc05lZ2F0aXZlID0gdG90YWxUaW1lIDwgMCxcbiAgICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgICAgdGltZSxcbiAgICAgICAgICBwdCxcbiAgICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgICBwcmV2SXRlcmF0aW9uLFxuICAgICAgICAgIGlzWW95byxcbiAgICAgICAgICByYXRpbyxcbiAgICAgICAgICB0aW1lbGluZSxcbiAgICAgICAgICB5b3lvRWFzZTtcblxuICAgICAgaWYgKCFkdXIpIHtcbiAgICAgICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgICB0aW1lbGluZSA9IHRoaXMudGltZWxpbmU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNZb3lvID0gdGhpcy5feW95byAmJiBpdGVyYXRpb24gJiAxO1xuXG4gICAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKHRpbWUgPT09IHByZXZUaW1lICYmICFmb3JjZSAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxO1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGR1ciAhPT0gdGhpcy5fZHVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgICAgdGhpcy5fYWN0ID0gMTtcbiAgICAgICAgICB0aGlzLl9sYXp5ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpO1xuXG4gICAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgaXNZb3lvKSkge1xuICAgICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gICAgfTtcblxuICAgIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgICAgdGhpcy5fcHQgPSB0aGlzLl9vcCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgICAgcmV0dXJuIF9BbmltYXRpb24yLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gICAgfTtcblxuICAgIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICAgICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICAgIHJhdGlvO1xuICAgICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpO1xuXG4gICAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgICAgfVxuXG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCAwKTtcblxuICAgICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICAgIH07XG5cbiAgICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgICAgdmFycyA9IFwiYWxsXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgICAgdGhpcy5fbGF6eSA9IHRoaXMuX3B0ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgJiYgdER1ciAhPT0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkgJiYgX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX2R1ciAqIHRoaXMudGltZWxpbmUuX3REdXIgLyB0RHVyLCAwLCAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgICBwcm9wVHdlZW5Mb29rdXAgPSB0aGlzLl9wdExvb2t1cCxcbiAgICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgICBjdXJMb29rdXAsXG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBwdCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAoKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpICYmIF9hcnJheXNNYXRjaChwYXJzZWRUYXJnZXRzLCBraWxsaW5nVGFyZ2V0cykpIHtcbiAgICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXJzID0gcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICAgIH1cblxuICAgICAgaSA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICAgIGN1ckxvb2t1cCA9IHByb3BUd2Vlbkxvb2t1cFtpXTtcblxuICAgICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICAgIHByb3BzID0gY3VyTG9va3VwO1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdHRlblByb3BzW2ldID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fTtcbiAgICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICAgIGlmICghKFwia2lsbFwiIGluIHB0LmQpIHx8IHB0LmQua2lsbChwKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWxldGUgY3VyTG9va3VwW3BdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHNbcF0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIGFyZ3VtZW50c1syXSk7XG4gICAgfTtcblxuICAgIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gICAgfTtcblxuICAgIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVHdlZW47XG4gIH0oQW5pbWF0aW9uKTtcblxuICBfc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gICAgX3RhcmdldHM6IFtdLFxuICAgIF9sYXp5OiAwLFxuICAgIF9zdGFydEF0OiAwLFxuICAgIF9vcDogMCxcbiAgICBfb25Jbml0OiAwXG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICB9LFxuICAgICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG4gIH0sXG4gICAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH0sXG4gICAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG4gIH0sXG4gICAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgICBzID0gXCJcIjtcblxuICAgIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgICBzID0gZGF0YS5iO1xuICAgIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgICBzID0gZGF0YS5lO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHMgKz0gZGF0YS5jO1xuICAgIH1cblxuICAgIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbiAgfSxcbiAgICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cbiAgfSxcbiAgICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgICAgcHQgPSBuZXh0O1xuICAgIH1cbiAgfSxcbiAgICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICAgIH1cblxuICAgICAgcHQgPSBuZXh0O1xuICAgIH1cblxuICAgIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xuICB9LFxuICAgICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbiAgfSxcbiAgICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICAgIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHB0MixcbiAgICAgICAgZmlyc3QsXG4gICAgICAgIGxhc3Q7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBwdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdCA9IHB0O1xuICAgICAgfVxuXG4gICAgICBwdCA9IG5leHQ7XG4gICAgfVxuXG4gICAgcGFyZW50Ll9wdCA9IGZpcnN0O1xuICB9O1xuXG4gIHZhciBQcm9wVHdlZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgICAgdGhpcy5jID0gY2hhbmdlO1xuICAgICAgdGhpcy5wID0gcHJvcDtcbiAgICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7XG4gICAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgICB0aGlzLm0gPSBmdW5jO1xuICAgICAgdGhpcy5tdCA9IHRhcmdldDtcbiAgICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3BUd2VlbjtcbiAgfSgpO1xuXG4gIF9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuICBfZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuICBfZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gICAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gICAgaWQ6IFwicm9vdFwiLFxuICAgIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG4gIH0pO1xuICBfY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxuICB2YXIgX21lZGlhID0gW10sXG4gICAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgICAgX2NvbnRleHRJRCA9IDAsXG4gICAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICAgIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZigpO1xuICAgIH0pO1xuICB9LFxuICAgICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICAgIG1hdGNoZXMgPSBbXTtcblxuICAgIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICBwLFxuICAgICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlcztcbiAgICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYy5vbk1hdGNoKGMpO1xuICAgICAgfSk7XG4gICAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgIHRoaXMuX3IgPSBbXTtcbiAgICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pZCA9IF9jb250ZXh0SUQrKztcbiAgICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICAgIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgICBmdW5jID0gbmFtZTtcbiAgICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmxhc3QgPSBmO1xuICAgICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmKSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gICAgfTtcblxuICAgIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgICBfY29udGV4dCA9IG51bGw7XG4gICAgICBmdW5jKHRoaXMpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgIH07XG5cbiAgICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICAgIHZhciBhID0gW107XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhO1xuICAgIH07XG5cbiAgICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLl9yLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICAgIH07XG5cbiAgICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zKCk7XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgICAgdC5yZXZlcnQoKTtcbiAgICAgICAgICAgIHQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2goZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICAgIHQ6IHRcbiAgICAgICAgICB9O1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIuZyAtIGEuZyB8fCAtSW5maW5pdHk7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgVHdlZW4pICYmIGUucmV2ZXJ0ICYmIGUucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBmKHJldmVydCwgX3RoaXM0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcblxuICAgICAgaWYgKG1hdGNoTWVkaWEpIHtcbiAgICAgICAgdmFyIGkgPSBfbWVkaWEubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBfbWVkaWFbaV0uaWQgPT09IHRoaXMuaWQgJiYgX21lZGlhLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29udGV4dDtcbiAgfSgpO1xuXG4gIHZhciBNYXRjaE1lZGlhID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvNi5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZGl0aW9ucywgZnVuYywgc2NvcGUpIHtcbiAgICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgICAgfSk7XG4gICAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgICBtcSxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFjdGl2ZTtcbiAgICAgIF9jb250ZXh0ICYmICFjb250ZXh0LnNlbGVjdG9yICYmIChjb250ZXh0LnNlbGVjdG9yID0gX2NvbnRleHQuc2VsZWN0b3IpO1xuICAgICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgICAgZnVuYyA9IGNvbnRleHQuYWRkKFwib25NYXRjaFwiLCBmdW5jKTtcbiAgICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICAgIGlmIChwID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtcSA9IF93aW4ubWF0Y2hNZWRpYShjb25kaXRpb25zW3BdKTtcblxuICAgICAgICAgIGlmIChtcSkge1xuICAgICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgICAgKGNvbmRbcF0gPSBtcS5tYXRjaGVzKSAmJiAoYWN0aXZlID0gMSk7XG4gICAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG82LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICAgIH07XG5cbiAgICBfcHJvdG82LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCkge1xuICAgICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gTWF0Y2hNZWRpYTtcbiAgfSgpO1xuXG4gIHZhciBfZ3NhcCA9IHtcbiAgICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgICAgcmV0dXJuIG5ldyBUaW1lbGluZSh2YXJzKTtcbiAgICB9LFxuICAgIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpO1xuICAgIH0sXG4gICAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICAgIF9pc1N0cmluZyh0YXJnZXQpICYmICh0YXJnZXQgPSB0b0FycmF5KHRhcmdldClbMF0pO1xuXG4gICAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICAgIGZvcm1hdCA9IHVuaXQgPyBfcGFzc1Rocm91Z2ggOiBfbnVtZXJpY0lmUG9zc2libGU7XG5cbiAgICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSxcbiAgICBxdWlja1NldHRlcjogZnVuY3Rpb24gcXVpY2tTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkge1xuICAgICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIHNldHRlcnMgPSB0YXJnZXQubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIGwgPSBzZXR0ZXJzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgICB2YXIgUGx1Z2luID0gX3BsdWdpbnNbcHJvcGVydHldLFxuICAgICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcCA9IG5ldyBQbHVnaW4oKTtcbiAgICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgICBwLnJlbmRlcigxLCBwKTtcbiAgICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgICAgcmV0dXJuIFBsdWdpbiA/IHNldHRlciA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgICB2YXIgX21lcmdlMjtcblxuICAgICAgdmFyIHR3ZWVuID0gZ3NhcC50byh0YXJnZXQsIF9tZXJnZSgoX21lcmdlMiA9IHt9LCBfbWVyZ2UyW3Byb3BlcnR5XSA9IFwiKz0wLjFcIiwgX21lcmdlMi5wYXVzZWQgPSB0cnVlLCBfbWVyZ2UyKSwgdmFycyB8fCB7fSkpLFxuICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gICAgfSxcbiAgICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgICAgfSk7XG5cbiAgICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgICAgfTtcblxuICAgICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gICAgfSxcbiAgICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICAgIH0sXG4gICAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgICB9LFxuICAgIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgICB2YXJzID0ge307XG4gICAgICB9XG5cbiAgICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICBuZXh0O1xuICAgICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICAgIHRsLl9kcCA9IDA7XG4gICAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICB9XG5cbiAgICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgICByZXR1cm4gdGw7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICAgIH0sXG4gICAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gbWF0Y2hNZWRpYShzY29wZSkge1xuICAgICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgICB9LFxuICAgIG1hdGNoTWVkaWFSZWZyZXNoOiBmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpIHtcbiAgICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgICAgcDtcblxuICAgICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICAgIGlmIChjb25kW3BdKSB7XG4gICAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICAgIH0pIHx8IF9vbk1lZGlhQ2hhbmdlKCk7XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG4gICAgfSxcbiAgICB1dGlsczoge1xuICAgICAgd3JhcDogd3JhcCxcbiAgICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgICByYW5kb206IHJhbmRvbSxcbiAgICAgIHNuYXA6IHNuYXAsXG4gICAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICAgIGdldFVuaXQ6IGdldFVuaXQsXG4gICAgICBjbGFtcDogY2xhbXAsXG4gICAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgICAgdG9BcnJheTogdG9BcnJheSxcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICAgIHBpcGU6IHBpcGUsXG4gICAgICB1bml0aXplOiB1bml0aXplLFxuICAgICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgICAgc2h1ZmZsZTogc2h1ZmZsZVxuICAgIH0sXG4gICAgaW5zdGFsbDogX2luc3RhbGwsXG4gICAgZWZmZWN0czogX2VmZmVjdHMsXG4gICAgdGlja2VyOiBfdGlja2VyLFxuICAgIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gICAgcGx1Z2luczogX3BsdWdpbnMsXG4gICAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgICBjb3JlOiB7XG4gICAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgICBUd2VlbjogVHdlZW4sXG4gICAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbSxcbiAgICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICAgIH0sXG4gICAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0b0FkZCk7XG5cbiAgICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgICB9LFxuICAgICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xuICB9KTtcblxuICBfdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuICBfcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gICAgZHVyYXRpb246IDBcbiAgfSk7XG5cbiAgdmFyIF9nZXRQbHVnaW5Qcm9wVHdlZW4gPSBmdW5jdGlvbiBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHBsdWdpbiwgcHJvcCkge1xuICAgIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQ7XG4gIH0sXG4gICAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gICAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgcHQ7XG5cbiAgICBmb3IgKHAgaW4gbW9kaWZpZXJzKSB7XG4gICAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHQgPSB0d2Vlbi5fcHRMb29rdXBbaV1bcF07XG5cbiAgICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9idWlsZE1vZGlmaWVyUGx1Z2luID0gZnVuY3Rpb24gX2J1aWxkTW9kaWZpZXJQbHVnaW4obmFtZSwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHJhd1ZhcnM6IDEsXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgIHZhciB0ZW1wLCBwO1xuXG4gICAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9hZGRNb2RpZmllcnModHdlZW4sIHZhcnMpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gICAgbmFtZTogXCJhdHRyXCIsXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgICAgdmFyIHAsIHB0LCB2O1xuICAgICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHYgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICAgIHB0Lm9wID0gcDtcbiAgICAgICAgcHQuYiA9IHY7XG5cbiAgICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgbmFtZTogXCJlbmRBcnJheVwiLFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0sIDAsIDAsIDAsIDAsIDAsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7XG4gIFR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjEyLjJcIjtcbiAgX2NvcmVSZWFkeSA9IDE7XG4gIF93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xuICB2YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcblxuICB2YXIgX3dpbiQxLFxuICAgICAgX2RvYyQxLFxuICAgICAgX2RvY0VsZW1lbnQsXG4gICAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICAgIF90ZW1wRGl2LFxuICAgICAgX3RlbXBEaXZTdHlsZXIsXG4gICAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgICAgX3JldmVydGluZyQxLFxuICAgICAgX3dpbmRvd0V4aXN0cyQxID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgfSxcbiAgICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgICAgX1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuICAgICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICAgIF9iaWdOdW0kMSA9IDFlOCxcbiAgICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICAgIF9ob3Jpem9udGFsRXhwID0gLyhsZWZ0fHJpZ2h0fHdpZHRofG1hcmdpbnxwYWRkaW5nfHgpL2ksXG4gICAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgICBhdXRvQWxwaGE6IFwib3BhY2l0eSx2aXNpYmlsaXR5XCIsXG4gICAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICAgIGFscGhhOiBcIm9wYWNpdHlcIlxuICB9LFxuICAgICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbiAgfSxcbiAgICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgfn4odmFsdWUgKyAodmFsdWUgPCAwID8gLS41IDogLjUpKSArIGRhdGEudSwgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYiwgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyAhPT0gMSA/IGRhdGEuYiA6IGRhdGEuZSwgZGF0YSk7XG4gIH0sXG4gICAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICB9LFxuICAgICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXQuX2dzYXAuc2NhbGVYID0gdGFyZ2V0Ll9nc2FwLnNjYWxlWSA9IHZhbHVlO1xuICB9LFxuICAgICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gICAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xuICB9LFxuICAgICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgY2FjaGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG4gIH0sXG4gICAgICBfdHJhbnNmb3JtUHJvcCA9IFwidHJhbnNmb3JtXCIsXG4gICAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBzdHlsZSkge1xuICAgICAgdGhpcy50Zm0gPSB0aGlzLnRmbSB8fCB7fTtcblxuICAgICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICAgIH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSA/IHByb3BlcnR5LnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSB0YXJnZXQuX2dzYXAueCA/IHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9wcm9wZXJ0eUFsaWFzZXMudHJhbnNmb3JtLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIF9zYXZlU3R5bGUuY2FsbChfdGhpcywgcCwgaXNOb3RDU1MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXQuX2dzYXAuc3ZnKSB7XG4gICAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIChzdHlsZSB8fCBpc05vdENTUykgJiYgdGhpcy5wcm9wcy5wdXNoKHByb3BlcnR5LCBpc05vdENTUywgc3R5bGVbcHJvcGVydHldKTtcbiAgfSxcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gICAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gICAgfVxuICB9LFxuICAgICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIGksXG4gICAgICAgIHA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIHByb3BzW2kgKyAxXSA/IHRhcmdldFtwcm9wc1tpXV0gPSBwcm9wc1tpICsgMl0gOiBwcm9wc1tpICsgMl0gPyBzdHlsZVtwcm9wc1tpXV0gPSBwcm9wc1tpICsgMl0gOiBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wc1tpXS5zdWJzdHIoMCwgMikgPT09IFwiLS1cIiA/IHByb3BzW2ldIDogcHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGZtKSB7XG4gICAgICBmb3IgKHAgaW4gdGhpcy50Zm0pIHtcbiAgICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGkgPSBfcmV2ZXJ0aW5nJDEoKTtcblxuICAgICAgaWYgKCghaSB8fCAhaS5pc1N0YXJ0KSAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICAgIGNhY2hlLnVuY2FjaGUgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHNhdmVyID0ge1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBwcm9wczogW10sXG4gICAgICByZXZlcnQ6IF9yZXZlcnRTdHlsZSxcbiAgICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgICB9O1xuICAgIHRhcmdldC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KTtcbiAgICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBzYXZlci5zYXZlKHApO1xuICAgIH0pO1xuICAgIHJldHVybiBzYXZlcjtcbiAgfSxcbiAgICAgIF9zdXBwb3J0czNELFxuICAgICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICAgIHZhciBlID0gX2RvYyQxLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MkMS5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYyQxLmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYyQxLmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gIH0sXG4gICAgICBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHNraXBQcmVmaXhGYWxsYmFjaykge1xuICAgIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiO1xuICB9LFxuICAgICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gICAgdmFyIGUgPSBlbGVtZW50IHx8IF90ZW1wRGl2LFxuICAgICAgICBzID0gZS5zdHlsZSxcbiAgICAgICAgaSA9IDU7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gcyAmJiAhcHJlZmVyUHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnN1YnN0cigxKTtcblxuICAgIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICAgIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG4gIH0sXG4gICAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gICAgaWYgKF93aW5kb3dFeGlzdHMkMSgpICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgX3dpbiQxID0gd2luZG93O1xuICAgICAgX2RvYyQxID0gX3dpbiQxLmRvY3VtZW50O1xuICAgICAgX2RvY0VsZW1lbnQgPSBfZG9jJDEuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICAgIHN0eWxlOiB7fVxuICAgICAgfTtcbiAgICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBfdHJhbnNmb3JtUHJvcCA9IF9jaGVja1Byb3BQcmVmaXgoX3RyYW5zZm9ybVByb3ApO1xuICAgICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiO1xuICAgICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICAgIF9yZXZlcnRpbmckMSA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gICAgfVxuICB9LFxuICAgICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdmFyIHN2ZyA9IF9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHRoaXMub3duZXJTVkdFbGVtZW50ICYmIHRoaXMub3duZXJTVkdFbGVtZW50LmdldEF0dHJpYnV0ZShcInhtbG5zXCIpIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiksXG4gICAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICAgIG9sZENTUyA9IHRoaXMuc3R5bGUuY3NzVGV4dCxcbiAgICAgICAgYmJveDtcblxuICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgICBzdmcuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94O1xuICAgICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICAgIH1cblxuICAgIGlmIChvbGRQYXJlbnQpIHtcbiAgICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICAgIG9sZFBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgb2xkU2libGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICAgIHRoaXMuc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcbiAgICByZXR1cm4gYmJveDtcbiAgfSxcbiAgICAgIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3MgPSBmdW5jdGlvbiBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgYXR0cmlidXRlc0FycmF5KSB7XG4gICAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gICAgdmFyIGJvdW5kcztcblxuICAgIHRyeSB7XG4gICAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICAgIH1cblxuICAgIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpO1xuICAgIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICAgIHk6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieVwiLCBcImN5XCIsIFwieTFcIl0pIHx8IDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH0gOiBib3VuZHM7XG4gIH0sXG4gICAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICAgIHJldHVybiAhIShlLmdldENUTSAmJiAoIWUucGFyZW50Tm9kZSB8fCBlLm93bmVyU1ZHRWxlbWVudCkgJiYgX2dldEJCb3goZSkpO1xuICB9LFxuICAgICAgX3JlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5zdWJzdHIoMCwgMikgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICAgIHBsdWdpbi5fcHQgPSBwdDtcbiAgICBwdC5iID0gYmVnaW5uaW5nO1xuICAgIHB0LmUgPSBlbmQ7XG5cbiAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgcmV0dXJuIHB0O1xuICB9LFxuICAgICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gICAgZGVnOiAxLFxuICAgIHJhZDogMSxcbiAgICB0dXJuOiAxXG4gIH0sXG4gICAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICAgIGdyaWQ6IDEsXG4gICAgZmxleDogMVxuICB9LFxuICAgICAgX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICAgIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgICBhbW91bnQgPSAxMDAsXG4gICAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgICAgcHgsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgY2FjaGUsXG4gICAgICAgIGlzU1ZHO1xuXG4gICAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgICByZXR1cm4gY3VyVmFsdWU7XG4gICAgfVxuXG4gICAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gICAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gICAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICAgIH1cblxuICAgIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKGlzU1ZHKSB7XG4gICAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MkMSB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgICBwYXJlbnQgPSBfZG9jJDEuYm9keTtcbiAgICB9XG5cbiAgICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICAgIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUocGFyZW50KTtcbiAgICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xuICB9LFxuICAgICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgIHZhciB2YWx1ZTtcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoXCIsXCIpKSB7XG4gICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgICAgdmFsdWUgPSBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IHZhbHVlW3Byb3BlcnR5XSA6IHZhbHVlLnN2ZyA/IHZhbHVlLm9yaWdpbiA6IF9maXJzdFR3b09ubHkoX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkpICsgXCIgXCIgKyB2YWx1ZS56T3JpZ2luICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09IFwiYXV0b1wiIHx8IHVuY2FjaGUgfHwgfih2YWx1ZSArIFwiXCIpLmluZGV4T2YoXCJjYWxjKFwiKSkge1xuICAgICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xuICB9LFxuICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICAgIHByb3AgPSBwO1xuICAgICAgICBzdGFydCA9IHM7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQuc3R5bGUsIHByb3AsIDAsIDEsIF9yZW5kZXJDb21wbGV4U3RyaW5nKSxcbiAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgICAgYSxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBzdGFydFZhbHVlcyxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBjaHVuayxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRWYWx1ZXM7XG4gICAgcHQuYiA9IHN0YXJ0O1xuICAgIHB0LmUgPSBlbmQ7XG4gICAgc3RhcnQgKz0gXCJcIjtcbiAgICBlbmQgKz0gXCJcIjtcblxuICAgIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHx8IGVuZDtcbiAgICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIoYSk7XG5cbiAgICBzdGFydCA9IGFbMF07XG4gICAgZW5kID0gYVsxXTtcbiAgICBzdGFydFZhbHVlcyA9IHN0YXJ0Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgICAgd2hpbGUgKHJlc3VsdCA9IF9udW1XaXRoVW5pdEV4cC5leGVjKGVuZCkpIHtcbiAgICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgICAgY29sb3IgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSkgfHwgMDtcbiAgICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICAgIGlmICghZW5kVW5pdCkge1xuICAgICAgICAgICAgZW5kVW5pdCA9IGVuZFVuaXQgfHwgX2NvbmZpZy51bml0c1twcm9wXSB8fCBzdGFydFVuaXQ7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgICAgcHQuZSArPSBlbmRVbml0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGFydFVuaXQgIT09IGVuZFVuaXQpIHtcbiAgICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgICAgYzogZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdC5yID0gcHJvcCA9PT0gXCJkaXNwbGF5XCIgJiYgZW5kID09PSBcIm5vbmVcIiA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWU7XG4gICAgfVxuXG4gICAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHB0O1xuICAgIHJldHVybiBwdDtcbiAgfSxcbiAgICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICAgIHRvcDogXCIwJVwiLFxuICAgIGJvdHRvbTogXCIxMDAlXCIsXG4gICAgbGVmdDogXCIwJVwiLFxuICAgIHJpZ2h0OiBcIjEwMCVcIixcbiAgICBjZW50ZXI6IFwiNTAlXCJcbiAgfSxcbiAgICAgIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzID0gZnVuY3Rpb24gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXModmFsdWUpIHtcbiAgICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgICAgeSA9IHNwbGl0WzFdIHx8IFwiNTAlXCI7XG5cbiAgICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgICAgdmFsdWUgPSB4O1xuICAgICAgeCA9IHk7XG4gICAgICB5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc3BsaXRbMF0gPSBfa2V5d29yZFRvUGVyY2VudFt4XSB8fCB4O1xuICAgIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG4gIH0sXG4gICAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gZGF0YS50LFxuICAgICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgICAgIHByb3AsXG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgICBpID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICAgIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcF0pIHtcbiAgICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgICAgICAgIGNhY2hlLnVuY2FjaGUgPSAxO1xuXG4gICAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gICAgICBfc3BlY2lhbFByb3BzID0ge1xuICAgIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICAgIGlmICh0d2Vlbi5kYXRhICE9PSBcImlzRnJvbVN0YXJ0XCIpIHtcbiAgICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICAgIHB0LnByID0gLTEwO1xuICAgICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG4gIH0sXG4gICAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xuICB9LFxuICAgICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gICAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgICB0ZW1wLFxuICAgICAgICBhZGRlZFRvRE9NO1xuXG4gICAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4O1xuICAgICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gICAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgIGFkZGVkVG9ET00gPSAxO1xuICAgICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbiAgfSxcbiAgICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgICAgYm91bmRzLFxuICAgICAgICBkZXRlcm1pbmFudCxcbiAgICAgICAgeCxcbiAgICAgICAgeTtcblxuICAgIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pO1xuICAgIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgICAgeCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuICAgICAgeSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50O1xuICAgICAgeE9yaWdpbiA9IHg7XG4gICAgICB5T3JpZ2luID0geTtcbiAgICB9XG5cbiAgICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgICB0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuICAgICAgdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcbiAgICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICAgIGNhY2hlLnlPZmZzZXQgPSB5T2Zmc2V0T2xkICsgKHR4ICogYiArIHR5ICogZCkgLSB0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGNhY2hlLnhPcmlnaW4gPSB4T3JpZ2luO1xuICAgIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICAgIGNhY2hlLnNtb290aCA9ICEhc21vb3RoO1xuICAgIGNhY2hlLm9yaWdpbiA9IG9yaWdpbjtcbiAgICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICAgIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjBweCAwcHhcIjtcblxuICAgIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPcmlnaW5cIiwgeE9yaWdpbk9sZCwgeE9yaWdpbik7XG5cbiAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T3JpZ2luXCIsIHlPcmlnaW5PbGQsIHlPcmlnaW4pO1xuXG4gICAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPZmZzZXRcIiwgeU9mZnNldE9sZCwgY2FjaGUueU9mZnNldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbiAgfSxcbiAgICAgIF9wYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpIHtcbiAgICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICAgIGlmIChcInhcIiBpbiBjYWNoZSAmJiAhdW5jYWNoZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgaW52ZXJ0ZWRTY2FsZVggPSBjYWNoZS5zY2FsZVggPCAwLFxuICAgICAgICBweCA9IFwicHhcIixcbiAgICAgICAgZGVnID0gXCJkZWdcIixcbiAgICAgICAgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCksXG4gICAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICB6LFxuICAgICAgICBzY2FsZVgsXG4gICAgICAgIHNjYWxlWSxcbiAgICAgICAgcm90YXRpb24sXG4gICAgICAgIHJvdGF0aW9uWCxcbiAgICAgICAgcm90YXRpb25ZLFxuICAgICAgICBza2V3WCxcbiAgICAgICAgc2tld1ksXG4gICAgICAgIHBlcnNwZWN0aXZlLFxuICAgICAgICB4T3JpZ2luLFxuICAgICAgICB5T3JpZ2luLFxuICAgICAgICBtYXRyaXgsXG4gICAgICAgIGFuZ2xlLFxuICAgICAgICBjb3MsXG4gICAgICAgIHNpbixcbiAgICAgICAgYSxcbiAgICAgICAgYixcbiAgICAgICAgYyxcbiAgICAgICAgZCxcbiAgICAgICAgYTEyLFxuICAgICAgICBhMjIsXG4gICAgICAgIHQxLFxuICAgICAgICB0MixcbiAgICAgICAgdDMsXG4gICAgICAgIGExMyxcbiAgICAgICAgYTIzLFxuICAgICAgICBhMzMsXG4gICAgICAgIGE0MixcbiAgICAgICAgYTQzLFxuICAgICAgICBhMzI7XG4gICAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICAgIHNjYWxlWCA9IHNjYWxlWSA9IDE7XG4gICAgY2FjaGUuc3ZnID0gISEodGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KSk7XG5cbiAgICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgICBpZiAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiB8fCBjcy5zY2FsZSAhPT0gXCJub25lXCIgfHwgY3Mucm90YXRlICE9PSBcIm5vbmVcIikge1xuICAgICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5zY2FsZSA9IHN0eWxlLnJvdGF0ZSA9IHN0eWxlLnRyYW5zbGF0ZSA9IFwibm9uZVwiO1xuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgICBvcmlnaW4gPSBjYWNoZS54T3JpZ2luIC0gdDIueCArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIHQyLnkpICsgXCJweFwiO1xuICAgICAgICB0MSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MSA9ICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB9XG5cbiAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIHQxIHx8IG9yaWdpbiwgISF0MSB8fCBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlLCBjYWNoZS5zbW9vdGggIT09IGZhbHNlLCBtYXRyaXgpO1xuICAgIH1cblxuICAgIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gICAgeU9yaWdpbiA9IGNhY2hlLnlPcmlnaW4gfHwgMDtcblxuICAgIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgICBhID0gbWF0cml4WzBdO1xuICAgICAgYiA9IG1hdHJpeFsxXTtcbiAgICAgIGMgPSBtYXRyaXhbMl07XG4gICAgICBkID0gbWF0cml4WzNdO1xuICAgICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICAgIHkgPSBhMjIgPSBtYXRyaXhbNV07XG5cbiAgICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgICAgc2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuICAgICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDtcbiAgICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgICAgYTEzID0gbWF0cml4WzhdO1xuICAgICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICAgIGE0MyA9IG1hdHJpeFsxMV07XG4gICAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgICAgeiA9IG1hdHJpeFsxNF07XG4gICAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgICAgdDEgPSBhMTIgKiBjb3MgKyBhMTMgKiBzaW47XG4gICAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgICAgYTEzID0gYTEyICogLXNpbiArIGExMyAqIGNvcztcbiAgICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgICAgYTQzID0gYTQyICogLXNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgICBhMzIgPSB0MztcbiAgICAgICAgfVxuXG4gICAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgICB0MSA9IGEgKiBjb3MgLSBhMTMgKiBzaW47XG4gICAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgICBhNDMgPSBkICogc2luICsgYTQzICogY29zO1xuICAgICAgICAgIGEgPSB0MTtcbiAgICAgICAgICBiID0gdDI7XG4gICAgICAgICAgYyA9IHQzO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICAgIHQxID0gYSAqIGNvcyArIGIgKiBzaW47XG4gICAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICAgIGEyMiA9IGEyMiAqIGNvcyAtIGExMiAqIHNpbjtcbiAgICAgICAgICBhID0gdDE7XG4gICAgICAgICAgYTEyID0gdDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAgIHJvdGF0aW9uWCA9IHJvdGF0aW9uID0gMDtcbiAgICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZVggPSBfcm91bmQoTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYykpO1xuICAgICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICAgIHNrZXdYID0gTWF0aC5hYnMoYW5nbGUpID4gMC4wMDAyID8gYW5nbGUgKiBfUkFEMkRFRyA6IDA7XG4gICAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHQxID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgICAgaWYgKGludmVydGVkU2NhbGVYKSB7XG4gICAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICAgIHJvdGF0aW9uICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgICBza2V3WCArPSBza2V3WCA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmNhY2hlID0gdW5jYWNoZSB8fCBjYWNoZS51bmNhY2hlO1xuICAgIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gICAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICAgIGNhY2hlLnogPSB6ICsgcHg7XG4gICAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gICAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gICAgY2FjaGUucm90YXRpb24gPSBfcm91bmQocm90YXRpb24pICsgZGVnO1xuICAgIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICAgIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICAgIGNhY2hlLnNrZXdYID0gc2tld1ggKyBkZWc7XG4gICAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgICBpZiAoY2FjaGUuek9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luLnNwbGl0KFwiIFwiKVsyXSkgfHwgMCkge1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICAgIH1cblxuICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gICAgY2FjaGUudW5jYWNoZSA9IDA7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9LFxuICAgICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG4gIH0sXG4gICAgICBfYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICAgIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbiAgfSxcbiAgICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICAgIGNhY2hlLnogPSBcIjBweFwiO1xuICAgIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICAgIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbiAgfSxcbiAgICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gICAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgICAgeCA9IF9yZWYueCxcbiAgICAgICAgeSA9IF9yZWYueSxcbiAgICAgICAgeiA9IF9yZWYueixcbiAgICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7XG5cbiAgICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICBjb3M7XG5cbiAgICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICAgIH1cblxuICAgIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgICB9XG5cbiAgICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICAgIH1cblxuICAgIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgICB9XG5cbiAgICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gICAgfVxuXG4gICAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICAgIH1cblxuICAgIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gICAgfVxuXG4gICAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgICB9XG5cbiAgICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xuICB9LFxuICAgICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgICB4ID0gX3JlZjIueCxcbiAgICAgICAgeSA9IF9yZWYyLnksXG4gICAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgICAgYTExLFxuICAgICAgICBhMjEsXG4gICAgICAgIGExMixcbiAgICAgICAgYTIyLFxuICAgICAgICB0ZW1wO1xuXG4gICAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgICBpZiAoc2tld1kpIHtcbiAgICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgICBza2V3WCArPSBza2V3WTtcbiAgICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICAgIH1cblxuICAgIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgICBpZiAoc2tld1gpIHtcbiAgICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTIgKj0gdGVtcDtcbiAgICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgICAgYTIyID0gX3JvdW5kKGEyMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGExMSA9IHNjYWxlWDtcbiAgICAgIGEyMiA9IHNjYWxlWTtcbiAgICAgIGEyMSA9IGExMiA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICAgIH1cblxuICAgIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gICAgfVxuXG4gICAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gICAgfVxuXG4gICAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICAgIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7XG4gIH0sXG4gICAgICBfYWRkUm90YXRpb25hbFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGVuZFZhbHVlKSB7XG4gICAgdmFyIGNhcCA9IDM2MCxcbiAgICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKSAqIChpc1N0cmluZyAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhZFwiKSA/IF9SQUQyREVHIDogMSksXG4gICAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgIHB0O1xuXG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICBkaXJlY3Rpb24gPSBlbmRWYWx1ZS5zcGxpdChcIl9cIilbMV07XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICAgIGlmIChjaGFuZ2UgIT09IGNoYW5nZSAlIChjYXAgLyAyKSkge1xuICAgICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSQxKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtJDEpICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbHVnaW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBjaGFuZ2UsIF9yZW5kZXJQcm9wV2l0aEVuZCk7XG4gICAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gICAgcHQudSA9IFwiZGVnXCI7XG5cbiAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgcmV0dXJuIHB0O1xuICB9LFxuICAgICAgX2Fzc2lnbiA9IGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0sXG4gICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzID0gZnVuY3Rpb24gX2FkZFJhd1RyYW5zZm9ybVBUcyhwbHVnaW4sIHRyYW5zZm9ybXMsIHRhcmdldCkge1xuICAgIHZhciBzdGFydENhY2hlID0gX2Fzc2lnbih7fSwgdGFyZ2V0Ll9nc2FwKSxcbiAgICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBlbmRDYWNoZSxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdDtcblxuICAgIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG5cbiAgICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gICAgfVxuXG4gICAgZm9yIChwIGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgICBpZiAoc3RhcnRWYWx1ZSAhPT0gZW5kVmFsdWUgJiYgZXhjbHVkZS5pbmRleE9mKHApIDwgMCkge1xuICAgICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIHN0YXJ0TnVtID0gc3RhcnRVbml0ICE9PSBlbmRVbml0ID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSA6IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgIHBsdWdpbi5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG4gIH07XG5cbiAgX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICAgIHZhciB0ID0gXCJUb3BcIixcbiAgICAgICAgciA9IFwiUmlnaHRcIixcbiAgICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgICAgcHJvcHMgPSAoaW5kZXggPCAzID8gW3QsIHIsIGIsIGxdIDogW3QgKyBsLCB0ICsgciwgYiArIHIsIGIgKyBsXSkubWFwKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gICAgfSk7XG5cbiAgICBfc3BlY2lhbFByb3BzW2luZGV4ID4gMSA/IFwiYm9yZGVyXCIgKyBuYW1lIDogbmFtZV0gPSBmdW5jdGlvbiAocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICAgIHZhciBhLCB2YXJzO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgYSA9IHByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFycyA9IGEuam9pbihcIiBcIik7XG4gICAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgICAgfVxuXG4gICAgICBhID0gKGVuZFZhbHVlICsgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgICAgdmFycyA9IHt9O1xuICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgICByZXR1cm4gdmFyc1twcm9wXSA9IGFbaV0gPSBhW2ldIHx8IGFbKGkgLSAxKSAvIDIgfCAwXTtcbiAgICAgIH0pO1xuICAgICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIENTU1BsdWdpbiA9IHtcbiAgICBuYW1lOiBcImNzc1wiLFxuICAgIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gICAgdGFyZ2V0VGVzdDogZnVuY3Rpb24gdGFyZ2V0VGVzdCh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgICAgc3RhcnRBdCA9IHR3ZWVuLnZhcnMuc3RhcnRBdCxcbiAgICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICAgIGVuZFZhbHVlLFxuICAgICAgICAgIGVuZE51bSxcbiAgICAgICAgICBzdGFydE51bSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHNwZWNpYWxQcm9wLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICAgIGVuZFVuaXQsXG4gICAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbixcbiAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICBzbW9vdGgsXG4gICAgICAgICAgaGFzUHJpb3JpdHksXG4gICAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcbiAgICAgIHRoaXMuc3R5bGVzID0gdGhpcy5zdHlsZXMgfHwgX2dldFN0eWxlU2F2ZXIodGFyZ2V0KTtcbiAgICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgIH0gZWxzZSBpZiAocC5zdWJzdHIoMCwgMikgPT09IFwiLS1cIikge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICAgICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGlmIChzdGFydEF0ICYmIHAgaW4gc3RhcnRBdCkge1xuICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICAgIF9pc1N0cmluZyhzdGFydFZhbHVlKSAmJiB+c3RhcnRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSAmJiAoc3RhcnRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKHN0YXJ0VmFsdWUpKTtcbiAgICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpO1xuICAgICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgZW5kVmFsdWUuc3Vic3RyKDAsIDIpO1xuICAgICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgICBpZiAocCBpbiBfcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICAgIH5wLmluZGV4T2YoXCIsXCIpICYmIChwID0gcC5zcGxpdChcIixcIilbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCA9IHAgaW4gX3RyYW5zZm9ybVByb3BzO1xuXG4gICAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZXMuc2F2ZShwKTtcblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSAmJiAhdmFycy5wYXJzZVRyYW5zZm9ybSB8fCBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB2YXJzLnBhcnNlVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgc21vb3RoID0gdmFycy5zbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIGNhY2hlLnNtb290aDtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBjYWNoZSwgXCJzY2FsZVlcIiwgY2FjaGUuc2NhbGVZLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShjYWNoZS5zY2FsZVksIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBjYWNoZS5zY2FsZVkgfHwgMCwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgICAgcCArPSBcIlhcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCAwLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwO1xuICAgICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBlbmRWYWx1ZSwgMSwgc21vb3RoLCAwLCB0aGlzKTtcblxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4odGhpcywgY2FjaGUsIHAsIHN0YXJ0TnVtLCByZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCByZWxhdGl2ZSArIGVuZFZhbHVlKSA6IGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJzbW9vdGhcIiwgY2FjaGUuc21vb3RoLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICAgIGNhY2hlW3BdID0gZW5kVmFsdWU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHModGhpcywgZW5kVmFsdWUsIHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQgfHwgKGVuZE51bSB8fCBlbmROdW0gPT09IDApICYmIChzdGFydE51bSB8fCBzdGFydE51bSA9PT0gMCkgJiYgIV9jb21wbGV4RXhwLnRlc3QoZW5kVmFsdWUpICYmIHAgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApO1xuICAgICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgaXNUcmFuc2Zvcm1SZWxhdGVkID8gY2FjaGUgOiBzdHlsZSwgcCwgc3RhcnROdW0sIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gc3RhcnROdW0sICFpc1RyYW5zZm9ybVJlbGF0ZWQgJiYgKGVuZFVuaXQgPT09IFwicHhcIiB8fCBwID09PSBcInpJbmRleFwiKSAmJiB2YXJzLmF1dG9Sb3VuZCAhPT0gZmFsc2UgPyBfcmVuZGVyUm91bmRlZENTU1Byb3AgOiBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgIT09IFwicGFyc2VUcmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgICBfbWlzc2luZ1BsdWdpbihwLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgfHwgKHAgaW4gc3R5bGUgPyBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKSA6IGlubGluZVByb3BzLnB1c2gocCwgMSwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0pKTtcbiAgICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmckMSgpKSB7XG4gICAgICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuc3R5bGVzLnJldmVydCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBfZ2V0LFxuICAgIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gICAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgICAgcCAmJiBwLmluZGV4T2YoXCIsXCIpIDwgMCAmJiAocHJvcGVydHkgPSBwKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9LFxuICAgIGNvcmU6IHtcbiAgICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICAgIH1cbiAgfTtcbiAgZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG4gIGdzYXAuY29yZS5nZXRTdHlsZVNhdmVyID0gX2dldFN0eWxlU2F2ZXI7XG5cbiAgKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gICAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgICB9KTtcblxuICAgIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgICB9KTtcblxuICAgIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICAgIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gICAgfSk7XG4gIH0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuICBfZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbiAgfSk7XG5cbiAgZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuXG4gIHZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgICAgVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcblxuICBleHBvcnRzLkJhY2sgPSBCYWNrO1xuICBleHBvcnRzLkJvdW5jZSA9IEJvdW5jZTtcbiAgZXhwb3J0cy5DU1NQbHVnaW4gPSBDU1NQbHVnaW47XG4gIGV4cG9ydHMuQ2lyYyA9IENpcmM7XG4gIGV4cG9ydHMuQ3ViaWMgPSBDdWJpYztcbiAgZXhwb3J0cy5FbGFzdGljID0gRWxhc3RpYztcbiAgZXhwb3J0cy5FeHBvID0gRXhwbztcbiAgZXhwb3J0cy5MaW5lYXIgPSBMaW5lYXI7XG4gIGV4cG9ydHMuUG93ZXIwID0gUG93ZXIwO1xuICBleHBvcnRzLlBvd2VyMSA9IFBvd2VyMTtcbiAgZXhwb3J0cy5Qb3dlcjIgPSBQb3dlcjI7XG4gIGV4cG9ydHMuUG93ZXIzID0gUG93ZXIzO1xuICBleHBvcnRzLlBvd2VyNCA9IFBvd2VyNDtcbiAgZXhwb3J0cy5RdWFkID0gUXVhZDtcbiAgZXhwb3J0cy5RdWFydCA9IFF1YXJ0O1xuICBleHBvcnRzLlF1aW50ID0gUXVpbnQ7XG4gIGV4cG9ydHMuU2luZSA9IFNpbmU7XG4gIGV4cG9ydHMuU3RlcHBlZEVhc2UgPSBTdGVwcGVkRWFzZTtcbiAgZXhwb3J0cy5TdHJvbmcgPSBTdHJvbmc7XG4gIGV4cG9ydHMuVGltZWxpbmVMaXRlID0gVGltZWxpbmU7XG4gIGV4cG9ydHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbiAgZXhwb3J0cy5Ud2VlbkxpdGUgPSBUd2VlbjtcbiAgZXhwb3J0cy5Ud2Vlbk1heCA9IFR3ZWVuTWF4V2l0aENTUztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gZ3NhcFdpdGhDU1M7XG4gIGV4cG9ydHMuZ3NhcCA9IGdzYXBXaXRoQ1NTO1xuXG4gIGlmICh0eXBlb2Yod2luZG93KSA9PT0gJ3VuZGVmaW5lZCcgfHwgd2luZG93ICE9PSBleHBvcnRzKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTt9IGVsc2Uge2RlbGV0ZSB3aW5kb3cuZGVmYXVsdDt9XG5cbn0pKSk7XG4iLCJpbXBvcnQgeyBhbmltYXRpb25zIH0gZnJvbSAnLi9hbmltYXRpb25zL2FsbCc7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGlvblR5cGUgPSAoZWw6IEhUTUxFbGVtZW50LCBkZWxheT86IG51bWJlcik9PiBnc2FwLmNvcmUuVHdlZW4gfCBnc2FwLmNvcmUuVGltZWxpbmU7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuaW1hdGlvbih0eXBlOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCwgZGVsYXk6IG51bWJlcik6IGdzYXAuY29yZS5Ud2VlbiB8IGdzYXAuY29yZS5UaW1lbGluZSB8IG51bGwge1xuICAgIGlmICghYW5pbWF0aW9uc1t0eXBlXSkgeyBjb25zb2xlLndhcm4oYGFuaW1hdGlvbiB0eXBlIFwiJHt0eXBlfVwiIGRvZXMgbm90IGV4aXN0YCk7IHJldHVybiBudWxsOyB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnNbdHlwZV0/LihlbCwgZGVsYXkpO1xufVxuIiwiZXhwb3J0IGludGVyZmFjZSBJQnJlYWtwb2ludCB7XG4gICAgZGVza3RvcDogYm9vbGVhbjtcbiAgICB0YWJsZXQ6IGJvb2xlYW47XG4gICAgcGhvbmU6IGJvb2xlYW47XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludCgpOiBJQnJlYWtwb2ludCB7XG4gICAgY29uc3QgYmVmb3JlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLCAnOmJlZm9yZScpO1xuICAgIGNvbnN0IGJyZWFrcG9pbnQgPSBiZWZvcmUuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpLnJlcGxhY2UoL1tcXFwiXFwnXS9nLCAnJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXNrdG9wOiBicmVha3BvaW50ID09PSAnZGVza3RvcCcsXG4gICAgICAgIHBob25lOiBicmVha3BvaW50ID09PSAncGhvbmUnLFxuICAgICAgICB0YWJsZXQ6IGJyZWFrcG9pbnQgPT09ICd0YWJsZXQnLFxuICAgICAgICB2YWx1ZTogYnJlYWtwb2ludCxcbiAgICB9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuZGVjbGFyZSBsZXQgc2FmYXJpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCcm93c2VyIHtcbiAgICBhbmRyb2lkPzogYm9vbGVhbjtcbiAgICBjaHJvbWU/OiBib29sZWFuO1xuICAgIGVkZ2U/OiBib29sZWFuO1xuICAgIGZpcmVmb3g/OiBib29sZWFuO1xuICAgIGllPzogYm9vbGVhbjtcbiAgICBpb3M/OiBib29sZWFuO1xuICAgIG1hYz86IGJvb2xlYW47XG4gICAgbW9iaWxlPzogYm9vbGVhbjtcbiAgICBwaG9uZT86IGJvb2xlYW47XG4gICAgb3BlcmE/OiBib29sZWFuO1xuICAgIHNhZmFyaT86IGJvb2xlYW47XG4gICAgdG91Y2g/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCcm93c2VyKCk6IElCcm93c2VyIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIGNvbnN0IGJyb3dzZXI6IElCcm93c2VyID0ge1xuICAgICAgICBtb2JpbGU6ICEhKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmEpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoKG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmEpLnN1YnN0cigwLCA0KSkpLFxuICAgICAgICBwaG9uZTogISEoLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSkgfHwgLzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCgobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSkuc3Vic3RyKDAsIDQpKSksXG4gICAgICAgIGFuZHJvaWQ6IC9BbmRyb2lkL2kudGVzdCh1YSksXG4gICAgICAgIGlvczogWydpUGFkIFNpbXVsYXRvcicsICdpUGhvbmUgU2ltdWxhdG9yJywgJ2lQb2QgU2ltdWxhdG9yJywgJ2lQYWQnLCAnaVBob25lJywgJ2lQb2QnXS5pbmNsdWRlcyhuYXZpZ2F0b3IucGxhdGZvcm0pIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdNYWMnKSAmJiAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQpLFxuICAgICAgICBtYWM6IG5hdmlnYXRvci5wbGF0Zm9ybS50b1VwcGVyQ2FzZSgpLmluZGV4T2YoJ01BQycpID49IDAsXG4gICAgICAgIGllOiB1YS5pbmRleE9mKCdNU0lFICcpID4gMCB8fCAhIXVhLm1hdGNoKC9UcmlkZW50LipydlxcOjExXFwuLyksXG4gICAgICAgIGVkZ2U6IC9FZGdlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgICAgICBmaXJlZm94OiB1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xLFxuICAgICAgICBzYWZhcmk6IC9pUChhZHxob25lfG9kKS4rVmVyc2lvblxcL1tcXGRcXC5dKy4qU2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93LkhUTUxFbGVtZW50KS5pbmRleE9mKCdDb25zdHJ1Y3RvcicpID4gMCB8fCAoKChwKTogYm9vbGVhbiA9PiBwLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNhZmFyaVJlbW90ZU5vdGlmaWNhdGlvbl0nKSghd2luZG93LnNhZmFyaSB8fCBzYWZhcmkucHVzaE5vdGlmaWNhdGlvbikpLFxuICAgICAgICBjaHJvbWU6ICh1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2Nocm9tZScpID4gLTEpICYmIChuYXZpZ2F0b3IudmVuZG9yLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZ29vZ2xlJykgPiAtMSksXG4gICAgICAgIHRvdWNoOiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkgfHwgKChuYXZpZ2F0b3IgYXMgYW55KS5tc01heFRvdWNoUG9pbnRzID4gMCksXG4gICAgfTtcblxuICAgIGNvbnN0IGh0bWxDbGFzc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJykhLmNsYXNzTGlzdDtcbiAgICBodG1sQ2xhc3NMaXN0LnRvZ2dsZSgnbWFjJywgYnJvd3Nlci5pb3MgfHwgYnJvd3Nlci5tYWMpO1xuICAgIGh0bWxDbGFzc0xpc3QudG9nZ2xlKCdtb2JpbGUnLCBicm93c2VyLm1vYmlsZSk7XG4gICAgaHRtbENsYXNzTGlzdC50b2dnbGUoJ3Bob25lJywgYnJvd3Nlci5waG9uZSAmJiBicm93c2VyLnRvdWNoKTtcbiAgICBodG1sQ2xhc3NMaXN0LnRvZ2dsZSgnaW9zJywgYnJvd3Nlci5pb3MpO1xuICAgIGh0bWxDbGFzc0xpc3QudG9nZ2xlKCdmaXJlZm94JywgYnJvd3Nlci5maXJlZm94KTtcbiAgICBodG1sQ2xhc3NMaXN0LnRvZ2dsZSgnc2FmYXJpJywgYnJvd3Nlci5zYWZhcmkpO1xuICAgIGh0bWxDbGFzc0xpc3QudG9nZ2xlKCdpZScsIGJyb3dzZXIuaWUpO1xuICAgIGh0bWxDbGFzc0xpc3QudG9nZ2xlKCd0b3VjaCcsIGJyb3dzZXIudG91Y2gpO1xuICAgIGh0bWxDbGFzc0xpc3QudG9nZ2xlKCduby10b3VjaCcsICFicm93c2VyLnRvdWNoKTtcbiAgICBodG1sQ2xhc3NMaXN0LnJlbW92ZSgnbm8tanMnKTtcblxuICAgIHJldHVybiBicm93c2VyO1xufVxuXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgb3ByOiBhbnk7XG4gICAgICAgIG9wZXJhOiBhbnk7XG4gICAgICAgIHNhZmFyaTogYW55O1xuICAgICAgICBIVE1MRWxlbWVudDogYW55O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhZ2UgfSBmcm9tICcuL3BhZ2VzL1BhZ2UnO1xuaW1wb3J0IHsgTGlnaHRib3hOYXYgfSBmcm9tICcuL2NvbXBvbmVudHMvTGlnaHRib3gvTGlnaHRib3hOYXYnO1xuaW1wb3J0IHsgTGlnaHRib3hUcmFuc2NyaXB0IH0gZnJvbSAnLi9jb21wb25lbnRzL0xpZ2h0Ym94L0xpZ2h0Ym94VHJhbnNjcmlwdCc7XG5pbXBvcnQgeyBMaWdodGJveFNsaWRlciB9IGZyb20gJy4vY29tcG9uZW50cy9MaWdodGJveC9MaWdodGJveFNsaWRlcic7XG5pbXBvcnQgeyBMb2FkIH0gZnJvbSAnLi9jb21wb25lbnRzL0xvYWQnO1xuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuL2NvbXBvbmVudHMvTW9kYWwnO1xuaW1wb3J0IHsgTW9yZSB9IGZyb20gJy4vY29tcG9uZW50cy9Nb3JlJztcbmltcG9ydCB7IEFjY29yZGVvbiB9IGZyb20gJy4vY29tcG9uZW50cy9BY2NvcmRlb24nO1xuaW1wb3J0IHsgQWNjb3JkZW9uTGlzdCB9IGZyb20gJy4vY29tcG9uZW50cy9BY2NvcmRlb25MaXN0JztcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyJztcbmltcG9ydCB7IFZpZGVvIH0gZnJvbSAnLi9jb21wb25lbnRzL1BsYXllci9WaWRlbyc7XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzID0ge1xuICAgIEFjY29yZGVvbixcbiAgICBBY2NvcmRlb25MaXN0LFxuICAgIExvYWQsXG4gICAgTW9kYWwsXG4gICAgTW9yZSxcbiAgICBQbGF5ZXIsXG4gICAgVmlkZW8sXG4gICAgTGlnaHRib3hOYXYsXG4gICAgTGlnaHRib3hUcmFuc2NyaXB0LFxuICAgIExpZ2h0Ym94U2xpZGVyLFxufTtcblxuZXhwb3J0IGNvbnN0IHBhZ2VzID0geyBQYWdlIH07XG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgSGFuZGxlciB7XG4gICAgcHVibGljIGV2ZW50czogT2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgZXZlbnROYW1lIHBsZWFzZSB1c2Ugc3RhdGljIG5hbWVzXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgICBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0hhbmRsZXJ9ICAgICAgICAgICAgcmV0dXJucyBjdXJyZW50IG9iamVjdFxuICAgICAqL1xuICAgIHB1YmxpYyBvbihldmVudE5hbWU6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBIYW5kbGVyIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2ggYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgZXZlbnROYW1lIHBsZWFzZSB1c2Ugc3RhdGljIG5hbWVzXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgICBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge0hhbmRsZXJ9ICAgICAgICAgICAgcmV0dXJucyBjdXJyZW50IG9iamVjdFxuICAgICAqL1xuICAgIHB1YmxpYyBvZmYoZXZlbnROYW1lPzogc3RyaW5nLCBoYW5kbGVyPzogRnVuY3Rpb24pOiBIYW5kbGVyIHtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0uaW5kZXhPZihoYW5kbGVyKTtcblxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7W3R5cGVdfSAuLi5leHRyYVBhcmFtZXRlcnMgcGFzcyBhbnkgcGFyYW1ldGVycyB0byBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyB0cmlnZ2VyKGV2ZW50TmFtZTogc3RyaW5nLCAuLi5hcmdzKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnROYW1lXSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5mb3JFYWNoKGV2ZW50ID0+IGV2ZW50KC4uLmFyZ3MpKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvQXVkaW9QbGF5ZXInO1xuXG5leHBvcnQgY2xhc3MgTWVudSB7XG4gICAgcHJpdmF0ZSBpc09wZW4gPSBmYWxzZTtcblxuICAgIHByaXZhdGUgZWxUb2dnbGU6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgY2xvc2VCdG46IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHByaXZhdGUgd3JhcEVsOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsVG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvZ2dsZS1tZW51Jyk7XG4gICAgICAgIHRoaXMuY2xvc2VCdG4gPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLW1lbnUtY2xvc2UnKTtcbiAgICAgICAgdGhpcy53cmFwRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JhcHBlcicpO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgb25TdGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc09wZW4gJiYgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGJpbmQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxUb2dnbGUgJiYgdGhpcy5lbFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Ub2dnbGUpO1xuICAgICAgICB0aGlzLmNsb3NlQnRuICYmIHRoaXMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlKTtcblxuICAgICAgICAvLyBvbiBjbG9zZSBtZW51IGFuaW1hdGlvbidzIGVuZCAocmVsYXRlZCB0byB3aG9sZSAjY29udGVudCB0b2dnbGUgYW5pbWF0aW9uKSBzZXQgZGlzcGxheTogbm9uZSBmb3IgbWVudVxuICAgICAgICB0aGlzLndyYXBFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBvbkFuaW1hdGlvbkVuZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvblRvZ2dsZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5pc09wZW4gPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4oKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb3BlbiA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdoYXMtbWVudS1vcGVuJyk7XG4gICAgICAgIEF1ZGlvUGxheWVyLmNsb3NlQXVkaW9QbGF5ZXIoKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgY2xvc2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW5nKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLW1lbnUtb3BlbicpO1xuICAgIH07XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuaW1wb3J0IHsgbm9ybWFsaXplVXJsIH0gZnJvbSAnLi9VdGlscyc7XG5pbXBvcnQgU2Nyb2xsIGZyb20gJy4vU2Nyb2xsJztcbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tICcuL0hhbmRsZXInO1xuXG5leHBvcnQgY2xhc3MgUHVzaFN0YXRlc0V2ZW50cyB7XG4gICAgcHVibGljIHN0YXRpYyBDSEFOR0UgPSAnc3RhdGUnO1xuICAgIHB1YmxpYyBzdGF0aWMgUFJPR1JFU1MgPSAncHJvZ3Jlc3MnO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBQdXNoU3RhdGVzIGV4dGVuZHMgSGFuZGxlciB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgcHVibGljIHN0YXRpYyBpbnN0YW5jZTogUHVzaFN0YXRlcztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRJTUVfTElNSVQgPSAxMDAwMDtcbiAgICBwcml2YXRlIHN0YXRpYyBpbml0aWFsSGlzdG9yeUxlbmd0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgc3RhdGljIG5vQ2hhbmdlID0gZmFsc2U7XG5cblxuICAgIC8qKiBjaGFuZ2UgZG9jdW1lbnQgdGl0bGUgKi9cbiAgICBwdWJsaWMgc3RhdGljIHNldFRpdGxlKHRpdGxlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTtcbiAgICAgICAgY29uc3QgZGF0YVRpdGxlOiBIVE1MRWxlbWVudCA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdGl0bGVdJyk7XG5cbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZSB8fCBkYXRhVGl0bGUuZGF0YXNldC50aXRsZTtcbiAgICB9XG5cblxuICAgIC8qKiBjaGFuZ2UgbG9hY3Rpb24gcGF0aG5hbWUgYW5kIHRyaWdnZXIgSGlzdG9yeSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ29Ubyhsb2NhdGlvbjogc3RyaW5nLCByZXBsYWNlPzogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBwYXRobmFtZSA9IGxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgd2luZG93LmxvY2F0aW9uLmhvc3QsICcnKTtcbiAgICAgICAgY29uc3QgaXNEaWZmZXJlbnQgPSBwYXRobmFtZSAhPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyByYW5kb21EYXRhOiBNYXRoLnJhbmRvbSgpIH0sIGRvY3VtZW50LnRpdGxlLCBwYXRobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoeyByYW5kb21EYXRhOiBNYXRoLnJhbmRvbSgpIH0sIGRvY3VtZW50LnRpdGxlLCBwYXRobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBQdXNoU3RhdGVzLmluc3RhbmNlLm9uU3RhdGUoKTtcblxuICAgICAgICByZXR1cm4gaXNEaWZmZXJlbnQ7XG4gICAgfVxuXG5cbiAgICAvKiogb25seSBjaGFuZ2UgbG9hY3Rpb24gcGF0aG5hbWUgd2l0aG91dCB0cmlnZ2VyaW5nIEhpc3RvcnkgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNoYW5nZVBhdGgobG9jYXRpb246IHN0cmluZywgcmVwbGFjZT86IGJvb2xlYW4sIHRpdGxlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIFB1c2hTdGF0ZXMubm9DaGFuZ2UgPSB0cnVlO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gUHVzaFN0YXRlcy5nb1RvKGxvY2F0aW9uLCByZXBsYWNlIHx8IHRydWUpO1xuICAgICAgICBQdXNoU3RhdGVzLm5vQ2hhbmdlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIFB1c2hTdGF0ZXMuc2V0VGl0bGUodGl0bGUgfHwgZG9jdW1lbnQudGl0bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKiogYmluZCBsaW5rcyB0byBiZSB1c2VkIHdpdGggUHVzaFN0YXRlcyAvIEhpc3RvcnkgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJpbmQodGFyZ2V0PzogRWxlbWVudCwgZWxlbWVudEl0c2VsZj86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKCFlbGVtZW50SXRzZWxmKSB7XG4gICAgICAgICAgICBQdXNoU3RhdGVzLmluc3RhbmNlLmJpbmRMaW5rcyh0YXJnZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUHVzaFN0YXRlcy5pbnN0YW5jZS5iaW5kTGluayh0YXJnZXQgYXMgRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGdvIGJhY2sgaW4gYnJvd3NlciBoaXN0b3J5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbmFsIGZhbGxiYWNrIHVybCAod2hlbiBicm93c2VyIGRlb2Vzbid0IGhhdmUgYW55IGl0ZW1zIGluIGhpc3RvcnkpXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBiYWNrKHVybD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkubGVuZ3RoIC0gUHVzaFN0YXRlcy5pbml0aWFsSGlzdG9yeUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgICAgfSBlbHNlIGlmICh1cmwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHJhbmRvbURhdGE6IE1hdGgucmFuZG9tKCkgfSwgZG9jdW1lbnQudGl0bGUsIHVybCk7XG4gICAgICAgICAgICBQdXNoU3RhdGVzLmluc3RhbmNlLm9uU3RhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHJhbmRvbURhdGE6IE1hdGgucmFuZG9tKCkgfSwgZG9jdW1lbnQudGl0bGUsICcvJyk7XG4gICAgICAgICAgICBQdXNoU3RhdGVzLmluc3RhbmNlLm9uU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgcHVibGljIHN0YXRpYyByZWxvYWQoKTogdm9pZCB7XG4gICAgICAgIFB1c2hTdGF0ZXMuaW5zdGFuY2UudHJpZ2dlcihQdXNoU3RhdGVzRXZlbnRzLkNIQU5HRSk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGxvYWRlZERhdGE6IHN0cmluZztcbiAgICBwcml2YXRlIHJlcXVlc3Q6IFhNTEh0dHBSZXF1ZXN0O1xuICAgIHByaXZhdGUgdGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XG4gICAgcHJpdmF0ZSBjdXJyZW50UGF0aG5hbWU6IHN0cmluZztcblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5iaW5kTGlua3MoKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLm9uU3RhdGUsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHNjcm9sbFJlc3RvcmF0aW9uIHRvICdtYW51YWwnIHNvIHRoZSBzY3JvbGwgZG9lc24ndCBqdW1wXG4gICAgICAgICAqIHdoZW4gYmFjayBidXR0b24gaXMgcHJlc3NlZC5cbiAgICAgICAgICovXG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnOyB9LCAxMDAwKTtcblxuICAgICAgICBQdXNoU3RhdGVzLmluc3RhbmNlID0gdGhpcztcbiAgICAgICAgUHVzaFN0YXRlcy5pbml0aWFsSGlzdG9yeUxlbmd0aCA9IHdpbmRvdy5oaXN0b3J5Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50UGF0aG5hbWUgPSBub3JtYWxpemVVcmwod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcblxuICAgICAgICB0aGlzLnNldEFjdGl2ZUxpbmtzKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb2FkIG5ldyBjb250ZW50IHZpYSBhamF4IGJhc2VkIG9uIGN1cnJlbnQgbG9jYXRpb246XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gcHJvbWlzZSByZXNvbHZlZCB3aGVuIFhNTEh0dHBSZXF1ZXN0IGlzIGZpbmlzaGVkXG4gICAgICovXG4gICAgcHVibGljIGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIGNhbmNlbCBvbGQgcmVxdWVzdDpcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWZpbmUgdXJsXG4gICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgY29uc3Qgc2VhcmNoOiBzdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoIHx8ICcnO1xuICAgICAgICBjb25zdCB1cmwgPSBwYXRobmFtZSArIHNlYXJjaDtcblxuICAgICAgICAvLyBkZWZpbmUgdGltZW91dFxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgUHVzaFN0YXRlcy5USU1FX0xJTUlUKTtcblxuICAgICAgICAvLyByZXR1cm4gcHJvbWlzZVxuICAgICAgICAvLyBhbmQgZG8gdGhlIHJlcXVlc3Q6XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBkbyB0aGUgdXN1YWwgeGhyIHN0dWZmOlxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3Qub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7XG5cbiAgICAgICAgICAgIC8vIG9ubG9hZCBoYW5kbGVyOlxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkRGF0YSA9IHRoaXMucmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGhuYW1lID0gbm9ybWFsaXplVXJsKHBhdGhuYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoUHVzaFN0YXRlc0V2ZW50cy5QUk9HUkVTUywgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IodGhpcy5yZXF1ZXN0LnN0YXR1c1RleHQpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXF1ZXN0LnN0YXR1c1RleHQgIT09ICdhYm9ydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gY2F0Y2hpbmcgZXJyb3JzOlxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKCdOZXR3b3JrIEVycm9yJykpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gY2F0Y2ggcHJvZ3Jlc3NcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdC5vbnByb2dyZXNzID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoUHVzaFN0YXRlc0V2ZW50cy5QUk9HUkVTUywgZS5sb2FkZWQgLyBlLnRvdGFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBzZW5kIHJlcXVlc3Q6XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3Quc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIHRlbGxzIGlmIHJlbmRlcmVkIGh0bWwgbWF0Y2ggY3VycmVudCBwYXRobmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc1JlbmRlcmVkKHBhdGhuYW1lPzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYXRobmFtZSA9PT0gbm9ybWFsaXplVXJsKHBhdGhuYW1lIHx8IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgc3RhdGljIGR1cGEoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGdvaG5vID0ge1xuICAgICAgICAgICAgcHVkZnc6ICdjb3N0YW0nLFxuICAgICAgICAgICAgZmR3aGlvOiAnZm9vJyxcbiAgICAgICAgfTtcbiAgICB9XG5cblxuICAgIC8qKiBmdW5jdGlvbiBjYWxsZWQgb24gc3VjY2Vzc2Z1bCBkYXRhIGxvYWQgKi9cbiAgICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBkYXRhOiBzdHJpbmcgPSB0aGlzLmxvYWRlZERhdGEudHJpbSgpO1xuICAgICAgICBjb25zdCBjb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXJlcGxhY2VbaWRdLCAjY29udGVudCcpO1xuICAgICAgICBsZXQgcmVuZGVyZWRDb3VudCA9IDA7XG5cblxuICAgICAgICAvLyByZW5kZXIgZWFjaCBvZiBjb250YWluZXJzXG4gICAgICAgIC8vIGlmIG9ubHkgb25lIGNvbnRhaW5lciwgZm9yY2UgYHBsYWluYFxuICAgICAgICBpZiAoY29udGFpbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250YWluZXJzLmZvckVhY2goKGNvbnRhaW5lciwgaW5kZXgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JjZSA9IGluZGV4ID09PSAwICYmIGNvbnRhaW5lcnMubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkQ291bnQgKz0gdGhpcy5yZW5kZXJFbGVtZW50KGNvbnRhaW5lciBhcyBIVE1MRWxlbWVudCwgZGF0YSwgZm9yY2UpID8gMSA6IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gcmUtdHJ5IHJlbmRlcmluZyBpZiBub25lIG9mIGNvbnRhaW5lcnMgd2VyZSByZW5kZXJlZDpcbiAgICAgICAgaWYgKHJlbmRlcmVkQ291bnQgPT09IDAgJiYgY29udGFpbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKSwgZGF0YSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJpbmRMaW5rcygpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZUxpbmtzKCk7XG5cbiAgICAgICAgLy8gZGlzcGF0Y2ggZ2xvYmFsIGV2ZW50IGZvciBzZXJkZWxpYSBDTVM6XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnYWpheF9sb2FkZWQnKSk7XG5cbiAgICAgICAgLy8gZml4IGJyb3dzZXIgc2Nyb2xsIGhpc3RvcnkgY2FjaGVcbiAgICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7IH0sIDEwMDApO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSByZW5kZXJFbGVtZW50KGVsOiBIVE1MRWxlbWVudCwgZGF0YTogc3RyaW5nLCBmb3JjZVBsYWluPzogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgY29kZTogc3RyaW5nID0gbnVsbDtcblxuICAgICAgICBpZiAoIWVsLmlkKSB7IGNvbnNvbGUud2FybignUmVuZGVyZWQgZWxlbWVudCBtdXN0IGhhdmUgYW4gYGlkYCBhdHRyaWJ1dGUhJyk7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGAjJHtlbC5pZH1gO1xuXG4gICAgICAgIC8vIGlmIGFqYXggcmV0dXJucyBvbmx5IDxhcnRpY2xlPiBlbGVtZW50OlxuICAgICAgICBpZiAoISFmb3JjZVBsYWluICYmIGRhdGEuaW5kZXhPZignPGFydGljbGUnKSA9PT0gMCAmJiBlbC5pZCA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgICBjb2RlID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHsgLy8gaWYgYWpheCByZXR1cm5zIHdob2xlIGh0bWw6XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgICAgICBjb25zdCBodG1sRG9jdW1lbnQgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGRhdGEsICd0ZXh0L2h0bWwnKTtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kRWxlbWVudCA9IGh0bWxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICAgICAgY29kZSA9IGZvdW5kRWxlbWVudCA/IGZvdW5kRWxlbWVudC5pbm5lckhUTUwgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb2RlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oYENvdWxkbid0IHJlcmVuZGVyICMke2VsLmlkfSBlbGVtZW50YCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbC5pZCk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgd2hpbGUgKGNvbnRhaW5lckVsLmZpcnN0Q2hpbGQpIGNvbnRhaW5lckVsLnJlbW92ZUNoaWxkKGNvbnRhaW5lckVsLmZpcnN0Q2hpbGQpO1xuICAgICAgICBjb250YWluZXJFbC5pbm5lckhUTUwgPSBjb2RlIHx8IGRhdGE7XG4gICAgICAgIGNvbnRhaW5lckVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG4gICAgLyoqIGJpbmQgbGlua3MgKi9cbiAgICBwcml2YXRlIGJpbmRMaW5rKHRhcmdldDogRWxlbWVudCk6IHZvaWQge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgIH1cblxuXG4gICAgLyoqIGJpbmQgbGlua3MgKi9cbiAgICBwcml2YXRlIGJpbmRMaW5rcyh0YXJnZXQ/OiBFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHQgPSB0YXJnZXQgPz8gZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICBjb25zdCBsaW5rcyA9IHQucXVlcnlTZWxlY3RvckFsbCgnYTpub3QoW2RhdGEtaGlzdG9yeT1cImZhbHNlXCJdKTpub3QoW2RhdGEtYXBpXSk6bm90KFtkb3dubG9hZF0pOm5vdChbZGF0YS1tb2RhbF0pOm5vdChbaHJlZl49XCIjXCJdKTpub3QoW2hyZWYkPVwiLmpwZ1wiXSk6bm90KFt0YXJnZXQ9XCJfYmxhbmtcIl0pOm5vdChbaHJlZl49XCJtYWlsdG86XCJdKTpub3QoW2hyZWZePVwidGVsOlwiXSk6bm90KFtkYXRhLXBvY3p0YV0pOm5vdChbZGF0YS1sb2dpbl0pOm5vdChbZGF0YS1sYW5nXSknKTtcblxuICAgICAgICBsaW5rcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKiogbGlua3MgY2xpY2sgaGFuZGxlciAqL1xuICAgIHByaXZhdGUgb25DbGljayA9IChlOiBFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3Qgc2VsZjogSFRNTEVsZW1lbnQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHN0YXRlOiBzdHJpbmcgPSBzZWxmLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UoYGh0dHA6Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fWAsICcnKTtcbiAgICAgICAgY29uc3QgdHlwZTogc3RyaW5nID0gc2VsZi5kYXRhc2V0Lmhpc3Rvcnk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdiYWNrJykge1xuICAgICAgICAgICAgUHVzaFN0YXRlcy5iYWNrKHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVwbGFjZScpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHJhbmRvbURhdGE6IE1hdGgucmFuZG9tKCkgfSwgZG9jdW1lbnQudGl0bGUsIHN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMub25TdGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgU2Nyb2xsLnJlc2V0U2Nyb2xsQ2FjaGUoc3RhdGUpO1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgcmFuZG9tRGF0YTogTWF0aC5yYW5kb20oKSB9LCBkb2N1bWVudC50aXRsZSwgc3RhdGUpO1xuICAgICAgICAgICAgdGhpcy5vblN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvKiogYHN0YXRlY2hhbmdlYCBldmVudCBoYW5kbGVyICovXG4gICAgcHJpdmF0ZSBvblN0YXRlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnNldEFjdGl2ZUxpbmtzKCk7XG5cbiAgICAgICAgaWYgKCFQdXNoU3RhdGVzLm5vQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoUHVzaFN0YXRlc0V2ZW50cy5DSEFOR0UpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLyoqIG1hcmsgbGlua3MgYXMgYWN0aXZlICovXG4gICAgcHJpdmF0ZSBzZXRBY3RpdmVMaW5rcygpOiB2b2lkIHtcbiAgICAgICAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl0nKV0ubWFwKGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpKTtcblxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtocmVmPVwiJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9XCJdYCkpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbaHJlZj1cIiR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfVwiXWApLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L21lbWJlci1vcmRlcmluZyAqL1xuaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAvZGlzdC9nc2FwJztcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tICdnc2FwL2Rpc3QvU2Nyb2xsVHJpZ2dlcic7XG5pbXBvcnQgeyBTY3JvbGxUb1BsdWdpbiB9IGZyb20gJ2dzYXAvZGlzdC9TY3JvbGxUb1BsdWdpbic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29tcG9uZW50JztcbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICcuL1NpdGUnO1xuaW1wb3J0IHsgZ2V0QW5pbWF0aW9uIH0gZnJvbSAnLi9BbmltYXRlJztcbmltcG9ydCB7IGFuaW1hdGlvbnMsIHNjcm9sbHMgfSBmcm9tICcuL2FuaW1hdGlvbnMvYWxsJztcblxuXG5leHBvcnQgdHlwZSBTY3JvbGxUb1Byb3BzID0ge1xuICAgIGVsPzogSFRNTEVsZW1lbnQ7XG4gICAgaXNTbW9vdGg/OiBib29sZWFuO1xuICAgIG9mZnNldFk/OiBudW1iZXI7XG4gICAgZHVyYXRpb24/OiBudW1iZXI7XG4gICAgZWFzZT86IHN0cmluZztcbiAgICB5PzogbnVtYmVyO1xuICAgIG9uQ29tcGxldGU/OiAoKT0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJU2Nyb2xsRGF0YSB7XG4gICAgZWw6IEhUTUxFbGVtZW50O1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBkZWxheT86IG51bWJlcjtcbiAgICBjb21wb25lbnQ/OiBDb21wb25lbnQ7XG59XG5cbmludGVyZmFjZSBJUGFyYWxsYXhEYXRhIHtcbiAgICBlbDogSFRNTEVsZW1lbnQ7XG4gICAgcGFyYWxsYXg6IG51bWJlcixcbiAgICBkZWxheT86IG51bWJlcjtcbiAgICBjb21wb25lbnQ/OiBDb21wb25lbnQ7XG59XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlciwgU2Nyb2xsVG9QbHVnaW4pO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgbWF0Y2hNZWRpYTogYW55ID0gbnVsbDtcblxuICAgIHByaXZhdGUgc3RhdGljIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgc3RhdGljIHNjcm9sbENhY2hlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge307XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVzaXplKCk6IHZvaWQge1xuICAgICAgICBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgZW5hYmxlKCk6IHZvaWQge1xuICAgICAgICBTY3JvbGwuZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgc3RhdGljIGRpc2FibGUoKTogdm9pZCB7XG4gICAgICAgIFNjcm9sbC5lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgc3RhdGljIHN0YXJ0KCk6IHZvaWQge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgU2Nyb2xsLm9uU2Nyb2xsKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgc3RvcCgpOiB2b2lkIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIFNjcm9sbC5vblNjcm9sbCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVzZXRTY3JvbGxDYWNoZShwYXRobmFtZSk6IHZvaWQge1xuICAgICAgICBTY3JvbGwuc2Nyb2xsQ2FjaGVbcGF0aG5hbWVdID0gMDtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgICBpZiAoIVNjcm9sbC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBTY3JvbGwuc2Nyb2xsQ2FjaGVbd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgIH07XG5cblxuXG4gICAgcHVibGljIHN0YXRpYyBzY3JvbGxUbyA9IGFzeW5jKHtcbiAgICAgICAgZWwsXG4gICAgICAgIHksXG4gICAgICAgIGR1cmF0aW9uID0gMSxcbiAgICAgICAgZWFzZSA9ICdub25lJyxcbiAgICAgICAgb2Zmc2V0WSA9IDAsXG4gICAgfTogU2Nyb2xsVG9Qcm9wcyk6IFByb21pc2U8dm9pZD4gPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGdzYXAudG8od2luZG93LCB7XG4gICAgICAgICAgICBzY3JvbGxUbzoge1xuICAgICAgICAgICAgICAgIHk6IHkgPz8gZWwsXG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzZSxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHJlc29sdmUoKSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuXG4gICAgcHVibGljIHN0YXRpYyBzY3JvbGxUb1RvcCA9IGFzeW5jKGZhc3Q/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIGF3YWl0IFNjcm9sbC5zY3JvbGxUbyh7XG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBhZ2VdJyksXG4gICAgICAgICAgICBkdXJhdGlvbjogZmFzdCA/IDAgOiAyLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cblxuICAgIHB1YmxpYyBzdGF0aWMgc2Nyb2xsVG9DYWNoZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHkgPSBTY3JvbGwuc2Nyb2xsQ2FjaGVbd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXSB8fCAwO1xuICAgICAgICBTY3JvbGwuc2Nyb2xsVG8oeyB5LCBkdXJhdGlvbjogMCB9KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGFzeW5jIGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIChTY3JvbGxUcmlnZ2VyIGFzIGFueSkuY2xlYXJTY3JvbGxNZW1vcnkoJ21hbnVhbCcpO1xuICAgICAgICB0aGlzLmJpbmRIYXNoQ2xpY2soKTtcbiAgICAgICAgdGhpcy5zZXR1cCgpO1xuICAgICAgICBTY3JvbGwucmVzaXplKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBzZXR1cCgpOiB2b2lkIHtcblxuICAgICAgICBjb25zb2xlLmxvZygnc2Nyb2xsIHNldHVwJywgZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAvLyBpZiAoYnJvd3Nlci5zYWZhcmkpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgU2Nyb2xsLm1hdGNoTWVkaWEgPSAoZ3NhcCBhcyBhbnkpLm1hdGNoTWVkaWEoKTtcbiAgICAgICAgU2Nyb2xsLm1hdGNoTWVkaWEuYWRkKCcobWluLXdpZHRoOiAxMDI0cHgpJywgKCkgPT4ge1xuXG5cbiAgICAgICAgICAgIC8vIGdlbmVyYWwgYW5pbWF0aW9uczpcbiAgICAgICAgICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hbmltYXRpb25dJyldXG4gICAgICAgICAgICAgICAgLm1hcCgoZWw6IEhUTUxFbGVtZW50KSA9PiA8SVNjcm9sbERhdGE+e1xuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZWwuZGF0YXNldC5hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwYXJzZUludChlbC5kYXRhc2V0LmRlbGF5LCAxMCkgfHwgMCxcbiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChpdGVtOiBJU2Nyb2xsRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uc1tpdGVtLnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTY3JvbGxUcmlnZ2VyLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogaXRlbS5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVBY3Rpb25zOiAncGxheSBwYXVzZSByZXN1bWUgcmVzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogZ2V0QW5pbWF0aW9uKGl0ZW0udHlwZSwgaXRlbS5lbCwgaXRlbS5kZWxheSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBhbmltYXRpb24gdHlwZSBcIiR7aXRlbS50eXBlfVwiIGRvZXMgbm90IGV4aXN0YCwgaXRlbS5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAvLyBjdXN0b20gYW5pbWF0aW9uczpcbiAgICAgICAgICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zY3JvbGxdJyldXG4gICAgICAgICAgICAgICAgLm1hcCgoZWw6IEhUTUxFbGVtZW50KSA9PiA8SVNjcm9sbERhdGE+e1xuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZWwuZGF0YXNldC5zY3JvbGwsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwYXJzZUludChlbC5kYXRhc2V0LmRlbGF5LCAxMCkgfHwgMCxcbiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChpdGVtOiBJU2Nyb2xsRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsc1tpdGVtLnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxzW2l0ZW0udHlwZV0oaXRlbS5lbCwgaXRlbS5kZWxheSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHNjcm9sbCB0eXBlIFwiJHtpdGVtLnR5cGV9XCIgZG9lcyBub3QgZXhpc3RgLCBpdGVtLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIC8vIHBhcmFsbGF4ZXM6XG4gICAgICAgICAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcGFyYWxsYXhdJyldXG4gICAgICAgICAgICAgICAgLm1hcCgoZWw6IEhUTUxFbGVtZW50KSA9PiA8SVBhcmFsbGF4RGF0YT4ge1xuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgcGFyYWxsYXg6IHBhcnNlSW50KGVsLmRhdGFzZXQucGFyYWxsYXgsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGVsLmRhdGFzZXQuZGVsYXkgfHwgMCxcbiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChpdGVtOiBJUGFyYWxsYXhEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdzYXAuZnJvbVRvKGl0ZW0uZWwsIHsgeTogLWl0ZW0ucGFyYWxsYXggKiAod2luZG93LmlubmVyV2lkdGggLyAxMjgwKSB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAoKSA9PiBpdGVtLnBhcmFsbGF4ICogKHdpbmRvdy5pbm5lcldpZHRoIC8gMTI4MCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogaXRlbS5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHJldmVydEFuaW1hdGlvbnMoKTogdm9pZCB7XG4gICAgICAgIFNjcm9sbC5tYXRjaE1lZGlhPy5yZXZlcnQoKTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBiaW5kSGFzaENsaWNrKCk6IHZvaWQge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZePVwiI1wiXTpub3QoYVtocmVmPVwiI1wiXSknKS5mb3JFYWNoKChlbDogSFRNTEFuY2hvckVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkhhc2hDbGlja0hhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBvbkhhc2hDbGlja0hhbmRsZXIgPSBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHsgaGFzaCB9ID0gKGUuY3VycmVudFRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaGFzaCkgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgICA/IFNjcm9sbC5zY3JvbGxUbyh7IGVsOiB0YXJnZXQgfSlcbiAgICAgICAgICAgIDogY29uc29sZS53YXJuKCdUaGVyZSBpcyBubyAlcyBlbGVtZW50JywgaGFzaCk7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7IGdzYXAgfSBmcm9tICdnc2FwL2Rpc3QvZ3NhcCc7XG5pbXBvcnQgeyBlYXNpbmcgfSBmcm9tICcuL1NpdGUnO1xuaW1wb3J0IHsgQVBJLCBJQXBpRGF0YSB9IGZyb20gJy4vd2lkZ2V0cy9BUEknO1xuLy8gaW1wb3J0IFdpZGdldHMgZnJvbSAnd2lkZ2V0cy9BbGwnO1xuaW1wb3J0IHsgUHVzaFN0YXRlcyB9IGZyb20gJy4vUHVzaFN0YXRlcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZXMsIFRlbXBsYXRlTmFtZXMgfSBmcm9tICcuL3RlbXBsYXRlcy9UZW1wbGF0ZXMnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9VdGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlYXJjaFNldHRpbmdzIHtcbiAgICBsaXZlTWluTGVuPzogbnVtYmVyO1xuICAgIHRpbWVvdXQ/OiBudW1iZXI7XG59XG5cblxuZXhwb3J0IGNsYXNzIFNlYXJjaCB7XG5cbiAgICBwcml2YXRlIHNldHRpbmdzOiBJU2VhcmNoU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSB0b2dnbGVCdXR0b25zOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcbiAgICBwcml2YXRlIHNlYXJjaEJnOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHNlYXJjaENvbnRlbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgYnRuQ2xvc2U6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgbGl2ZTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpbnB1dDogSFRNTElucHV0RWxlbWVudDtcbiAgICBwcml2YXRlIGZvcm06IEhUTUxGb3JtRWxlbWVudDtcbiAgICBwcml2YXRlIGxpdmVMaXN0OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGxpdmVCb3R0b206IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgbGl2ZUxpOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcbiAgICBwcml2YXRlIGlzTGl2ZVNob3duOiBib29sZWFuO1xuICAgIHByaXZhdGUgdGltZXI7XG4gICAgcHJpdmF0ZSBsaXZlVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBpc09wZW46IGJvb2xlYW47XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBsaXZlTWluTGVuOiAzLFxuICAgICAgICAgICAgdGltZW91dDogMjUwLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2VhcmNoQmcgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXNlYXJjaC1iZycpO1xuICAgICAgICB0aGlzLnNlYXJjaENvbnRlbnQgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXNlYXJjaC1jb250ZW50Jyk7XG4gICAgICAgIHRoaXMuYnRuQ2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2VhcmNoLWNsb3NlJyk7XG4gICAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignI3NlYXJjaC1pbnAnKTtcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1mb3JtJyk7XG4gICAgICAgIHRoaXMubGl2ZSA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtbGl2ZXNlYXJjaCcpO1xuICAgICAgICB0aGlzLmxpdmVUZW1wbGF0ZSA9IFRlbXBsYXRlcy5nZXQoVGVtcGxhdGVOYW1lcy5MSVZFU0VBUkNIKTtcblxuICAgICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vblR5cGUpO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGJpbmQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsIHRoaXMub25Gb3JtUmVzZXQpO1xuICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5vbkZvcm1TdWJtaXQpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIG9uRm9ybVJlc2V0ID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkhpZGUoKTtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy12YWx1ZScpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvbkZvcm1TdWJtaXQgPSAoZSk6IHZvaWQgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gdGhpcy5mb3JtLmdldEF0dHJpYnV0ZSgnYWN0aW9uJykgfHwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBVdGlscy5nZXRRdWVyeVN0cmluZyh0aGlzLmZvcm0pO1xuXG4gICAgICAgIFB1c2hTdGF0ZXMuZ29UbyhgJHtwYXRobmFtZX0/JHtwYXJhbXN9YCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uVHlwZSA9IChlKTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLmlucHV0O1xuXG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QudG9nZ2xlKCdoYXMtdmFsdWUnLCB2YWx1ZS5sZW5ndGggPiAwKTtcblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDwgdGhpcy5zZXR0aW5ncy5saXZlTWluTGVuKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YTogSUFwaURhdGEgPSB7IHVybDogdGhpcy5mb3JtLmdldEF0dHJpYnV0ZSgnZGF0YS1hcGktdXJsJykgfTtcblxuICAgICAgICAgICAgQVBJLmNhbGxJdChmb3JtRGF0YSwgdGhpcy5mb3JtLCAoZGF0YSwgZWwsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXZlUmVzcG9uc2UoZGF0YSwgZWwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy50aW1lb3V0KTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgbGl2ZVJlc3BvbnNlKGRhdGEsIGVsLCByZXNwb25zZSk6IHZvaWQge1xuICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0cykge1xuICAgICAgICAgICAgdGhpcy5saXZlLmlubmVySFRNTCA9IHRoaXMubGl2ZVRlbXBsYXRlLnJlbmRlcihyZXNwb25zZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnRyaWdnZXIoQ29tcG9uZW50RXZlbnRzLkNIQU5HRSwgdGhpcy5saXZlKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd0xpdmVSZXN1bHRzKCk7XG4gICAgICAgICAgICBQdXNoU3RhdGVzLmJpbmQodGhpcy5saXZlKTtcbiAgICAgICAgICAgIC8vIFdpZGdldHMuYmluZCh0aGlzLmxpdmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5xdWlja0hpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHNob3dMaXZlUmVzdWx0cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLWxpdmVzZWFyY2gtc2hvd24nKTtcbiAgICAgICAgdGhpcy5saXZlTGlzdCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtbGl2ZXNlYXJjaC1saXN0Jyk7XG4gICAgICAgIHRoaXMubGl2ZUxpID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1saXZlc2VhcmNoLWl0ZW0nKTtcblxuICAgICAgICAvLyBzZXQgbWF4LWhlaWdodCBvZiBsaXZlc2VhcmNoIHdyYXAgLSBwcmV2ZW50IGdyb3dpbmcgb3V0c2lkZSB2aWV3cG9ydFxuICAgICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1pbih0aGlzLmxpdmVMaXN0LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0ICogMC43NSk7XG5cbiAgICAgICAgZ3NhcC50aW1lbGluZSgpXG4gICAgICAgICAgICAudG8odGhpcy5saXZlTGlzdC5wYXJlbnRFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246ICF0aGlzLmlzTGl2ZVNob3duID8gMC44IDogMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgdGhpcy5saXZlTGksXG4gICAgICAgICAgICAgICAgeyB5OiB3aW5kb3cuaW5uZXJIZWlnaHQgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjksXG4gICAgICAgICAgICAgICAgICAgIHN0YWdnZXI6IDAuMSxcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuaXNMaXZlU2hvd24gPSB0cnVlO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHF1aWNrSGlkZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpdmVMaXN0KSByZXR1cm47XG4gICAgICAgIGdzYXAudG8odGhpcy5saXZlTGlzdC5wYXJlbnRFbGVtZW50LCB7XG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC4wMSxcbiAgICAgICAgICAgIGRlbGF5OiAwLjgsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMubGl2ZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGFuaW1hdGlvbkhpZGUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc0xpdmVTaG93bikgcmV0dXJuO1xuICAgICAgICBbLi4udGhpcy5saXZlTGldLnJldmVyc2UoKS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgZ3NhcC50byhpdGVtLCB7XG4gICAgICAgICAgICAgICAgeTogd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJvdGF0ZTogaW5kZXggJSAyID09PSAwID8gMTUgOiAtMTUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuOCxcbiAgICAgICAgICAgICAgICBkZWxheTogaW5kZXggKiAwLjEsXG4gICAgICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgYWxsIHR3ZWVuc1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubGl2ZUxpLmxlbmd0aCkgZ3NhcC5zZXQodGhpcy5saXZlTGlzdC5wYXJlbnRFbGVtZW50LCB7IGhlaWdodDogMCB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGhpcy5pc0xpdmVTaG93biA9IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGdzYXAgfSBmcm9tICdnc2FwL2Rpc3QvZ3NhcCc7XG5pbXBvcnQgeyBDdXN0b21FYXNlIH0gZnJvbSAnZ3NhcC9kaXN0L0N1c3RvbUVhc2UnO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuL1Njcm9sbCc7XG5pbXBvcnQgeyBwYWdlcyBhcyBQYWdlcyB9IGZyb20gJy4vQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdGF0cywgZGVib3VuY2UsIHNldEFwcEhlaWdodCB9IGZyb20gJy4vVXRpbHMnO1xuaW1wb3J0IHsgSUJyb3dzZXIsIGdldEJyb3dzZXIgfSBmcm9tICcuL0Jyb3dzZXInO1xuaW1wb3J0IHsgSUJyZWFrcG9pbnQsIGdldEJyZWFrcG9pbnQgfSBmcm9tICcuL0JyZWFrcG9pbnQnO1xuaW1wb3J0IHsgUHVzaFN0YXRlcywgUHVzaFN0YXRlc0V2ZW50cyB9IGZyb20gJy4vUHVzaFN0YXRlcyc7XG5pbXBvcnQgeyBQYWdlLCBQYWdlRXZlbnRzIH0gZnJvbSAnLi9wYWdlcy9QYWdlJztcbmltcG9ydCB7IE1lbnUgfSBmcm9tICcuL01lbnUnO1xuaW1wb3J0IHsgU2VhcmNoIH0gZnJvbSAnLi9TZWFyY2gnO1xuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvQXVkaW9QbGF5ZXInO1xuaW1wb3J0IHsgTGlnaHRib3ggfSBmcm9tICcuL2NvbXBvbmVudHMvTGlnaHRib3gvTGlnaHRib3gnO1xuXG5pbXBvcnQgV2lkZ2V0cyBmcm9tICcuL3dpZGdldHMvQWxsJztcblxuZXhwb3J0IGNvbnN0IGxvY2FsID0gISF3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUubWF0Y2goLyhsb2NhbGhvc3R8XFwubGh8MTkyXFwuMTY4XFwuKS9nKTtcbmV4cG9ydCBjb25zdCBkZWJ1ZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZignZGVidWcnKSA+PSAwO1xuXG5leHBvcnQgbGV0IGxhbmc6IHN0cmluZztcbmV4cG9ydCBsZXQgcGl4ZWxSYXRpbzogbnVtYmVyO1xuZXhwb3J0IGxldCBlYXNpbmc6IHN0cmluZztcbmV4cG9ydCBsZXQgYnJvd3NlcjogSUJyb3dzZXI7XG5leHBvcnQgbGV0IGJyZWFrcG9pbnQ6IElCcmVha3BvaW50O1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKEN1c3RvbUVhc2UpO1xuXG5cbmNsYXNzIFNpdGUge1xuXG4gICAgcHJpdmF0ZSBjdXJyZW50UGFnZTogUGFnZTtcbiAgICBwcml2YXRlIHB1c2hTdGF0ZXM6IFB1c2hTdGF0ZXM7XG4gICAgcHJpdmF0ZSBzY3JvbGw6IFNjcm9sbDtcbiAgICBwcml2YXRlIG1lbnU6IE1lbnU7XG4gICAgcHJpdmF0ZSBsaWdodGJveDogTGlnaHRib3g7XG4gICAgcHJpdmF0ZSBzZWFyY2g6IFNlYXJjaDtcbiAgICBwcml2YXRlIGF1ZGlvUGxheWVyOiBBdWRpb1BsYXllcjtcblxuICAgIHByaXZhdGUgaXNJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgcmVzaXppbmdUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcblxuXG5cbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcblxuICAgICAgICBjb25zb2xlLmdyb3VwKCk7XG5cbiAgICAgICAgYnJlYWtwb2ludCA9IGdldEJyZWFrcG9pbnQoKTtcbiAgICAgICAgYnJvd3NlciA9IGdldEJyb3dzZXIoKTtcbiAgICAgICAgZWFzaW5nID0gQ3VzdG9tRWFzZS5jcmVhdGUoJ2N1c3RvbScsICcwLjUsIDAsIDAuMSwgMScpO1xuICAgICAgICBsYW5nID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnbGFuZycpO1xuICAgICAgICBwaXhlbFJhdGlvID0gTWF0aC5taW4oMiwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSk7XG5cbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIHNldEFwcEhlaWdodCgpO1xuICAgICAgICBkZWJ1ZyAmJiBzdGF0cygpO1xuXG4gICAgICAgIHRoaXMucHVzaFN0YXRlcyA9IG5ldyBQdXNoU3RhdGVzKCk7XG4gICAgICAgIHRoaXMucHVzaFN0YXRlcy5vbihQdXNoU3RhdGVzRXZlbnRzLkNIQU5HRSwgdGhpcy5vblN0YXRlKTtcblxuICAgICAgICB0aGlzLnNjcm9sbCA9IG5ldyBTY3JvbGwoKTtcblxuICAgICAgICB0aGlzLmxpZ2h0Ym94ID0gbmV3IExpZ2h0Ym94KCk7XG4gICAgICAgIHRoaXMubWVudSA9IG5ldyBNZW51KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZW51JykpO1xuICAgICAgICB0aGlzLnNlYXJjaCA9IG5ldyBTZWFyY2goZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaCcpKTtcblxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1hdWRpb3BsYXllcicpKTtcblxuICAgICAgICBpZiAoYnJvd3Nlci5pZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUaGlzIGJyb3dzZXIgaXMgb3V0ZGF0ZWQhJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBQdXNoU3RhdGVzLnNldFRpdGxlKCk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGw8dm9pZD4oW1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50UGFnZSgpLFxuICAgICAgICAgICAgLy8gcHJlbG9hZCBvdGhlciBjb21wb25lbnRzIGlmIG5lZWRlZFxuICAgICAgICBdKS50aGVuKHRoaXMub25QYWdlTG9hZGVkKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGFkZCBzb21lIGdlbmVyYWwgZXZlbnQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgcHJpdmF0ZSBiaW5kKCk6IHZvaWQge1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keSEuY2xhc3NMaXN0LmFkZCgnaXMtbG9hZGVkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGRlbGF5ZWQgcmVzaXplIHRvIHByZXZlbnQgdHJhbnNpdGlvbnM6XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2lzLXJlc2l6aW5nJyk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemluZ1RpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVzaXplKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1yZXNpemluZycpO1xuICAgICAgICAgICAgfSwgMjUwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgZGVib3VuY2UoKCkgPT4gdGhpcy5vblJlc2l6ZSh0cnVlKSkpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogcmVzaXplIGhhbmRsZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uUmVzaXplID0gKGlzT3JpZW50YXRpb25DaGFuZ2VkPzogYm9vbGVhbik6IHZvaWQgPT4ge1xuXG4gICAgICAgIGNvbnN0IG9sZEJyZWFrcG9pbnQgPSBicmVha3BvaW50ID8gYnJlYWtwb2ludC52YWx1ZSA6IG51bGw7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBnZXRCcmVha3BvaW50KCk7XG5cbiAgICAgICAgY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gb2xkQnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludC52YWx1ZTtcblxuICAgICAgICAhYnJvd3Nlci50b3VjaCAmJiBzZXRBcHBIZWlnaHQoKTtcbiAgICAgICAgaXNPcmllbnRhdGlvbkNoYW5nZWQgJiYgc2V0QXBwSGVpZ2h0KCk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZT8ucmVzaXplKHdpZHRoLCBoZWlnaHQsIGJyZWFrcG9pbnQsIGNoYW5nZWQpO1xuICAgICAgICAoIWJyb3dzZXIudG91Y2ggfHwgY2hhbmdlZCkgJiYgU2Nyb2xsPy5yZXNpemUoKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiBhbnkgY29tcG9uZW50IGhhbmRsZSBvblN0YXRlIGV2ZW50XG4gICAgICogaWYgbm90LCByZWxvYWQgaHRtbDpcbiAgICAgKi9cbiAgICBwcml2YXRlIG9uU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzUmVuZGVyZWQgPSB0aGlzLnB1c2hTdGF0ZXMuaXNSZW5kZXJlZCgpO1xuICAgICAgICBjb25zdCBwYWdlQ2hhbmdlZFN0YXRlID0gdGhpcy5jdXJyZW50UGFnZS5vblN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGxpZ2h0Ym94Q2hhbmdlZFN0YXRlID0gdGhpcy5saWdodGJveC5vblN0YXRlKGlzUmVuZGVyZWQpO1xuICAgICAgICB0aGlzLm1lbnU/Lm9uU3RhdGUoKTtcblxuICAgICAgICBpZiAoIWlzUmVuZGVyZWQgJiYgIXBhZ2VDaGFuZ2VkU3RhdGUgJiYgIWxpZ2h0Ym94Q2hhbmdlZFN0YXRlKSB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbDx2b2lkPihbXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoU3RhdGVzLmxvYWQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLmFuaW1hdGVPdXQoKSxcbiAgICAgICAgICAgIF0pLnRoZW4odGhpcy5yZW5kZXIpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogY2FsbGVkIGFmdGVyIG5ldyBodG1sIGlzIGxvYWRlZFxuICAgICAqIGFuZCBvbGQgY29udGVudCBpcyBhbmltYXRlZCBvdXQ6XG4gICAgICovXG4gICAgcHJpdmF0ZSByZW5kZXIgPSBhc3luYygpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2Uub2ZmKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwKCk7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1yZW5kZXJpbmcnKTtcbiAgICAgICAgUHVzaFN0YXRlcy5zZXRUaXRsZSgpO1xuICAgICAgICB0aGlzLnB1c2hTdGF0ZXMucmVuZGVyKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0Q3VycmVudFBhZ2UoKTtcbiAgICAgICAgdGhpcy5vblBhZ2VMb2FkZWQoKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiB3aGVuIGN1cnJlbnQgcGFnZSBpcyBsb2FkZWQ6XG4gICAgICovXG4gICAgcHJpdmF0ZSBvblBhZ2VMb2FkZWQgPSBhc3luYygpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1ub3QtcmVhZHknLCAnaXMtcmVuZGVyaW5nJyk7XG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UuYW5pbWF0ZUluKDApO1xuICAgICAgICAhdGhpcy5pc0luaXRpYWxpemVkICYmIFNjcm9sbC5zY3JvbGxUb1RvcCh0cnVlKTtcbiAgICAgICAgU2Nyb2xsLnNjcm9sbFRvQ2FjaGVkKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsLmxvYWQoKTtcbiAgICAgICAgU2Nyb2xsLnN0YXJ0KCk7XG4gICAgICAgIFB1c2hTdGF0ZXMuc2V0VGl0bGUoKTtcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9O1xuXG5cblxuICAgIC8qKlxuICAgICAqIHJ1biBuZXcgUGFnZSBvYmplY3RcbiAgICAgKiAoZm91bmQgYnkgYGRhdGEtcGFnZWAgYXR0cmlidXRlKVxuICAgICAqIGJpbmQgaXQgYW5kIHN0b3JlIGFzIGN1cnJlbnRQYWdlOlxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0Q3VycmVudFBhZ2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHBhZ2VMaXN0OiBOb2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhZ2VdJyk7XG4gICAgICAgIGxldCBwYWdlRWw6IEhUTUxFbGVtZW50ID0gcGFnZUxpc3RbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGxldCBwYWdlTmFtZTogc3RyaW5nID0gcGFnZUVsLmRhdGFzZXQucGFnZSB8fCAnUGFnZSc7XG4gICAgICAgIGNvbnN0IHBhZ2VPcHRpb25zOiBPYmplY3QgPSBwYWdlRWwuZGF0YXNldC5vcHRpb25zO1xuXG4gICAgICAgIC8vIHBhZ2Ugbm90IGZvdW5kOlxuICAgICAgICBpZiAoUGFnZXNbcGFnZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChwYWdlTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZXJlIGlzIG5vIFwiJXNcIiBpbiBQYWdlcyEnLCBwYWdlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWdlTmFtZSA9ICdQYWdlJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1vcmUgdGhhbiBvbmUgZGF0YS1wYWdlOlxuICAgICAgICBpZiAocGFnZUxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdPbmx5IG9uZSBbZGF0YS1wYWdlXSBlbGVtZW50LCBwbGVhc2UhJyk7XG5cbiAgICAgICAgLy8gcGFnZSBub3QgZGVmaW5lZCBpbiBodG1sOlxuICAgICAgICB9IGVsc2UgaWYgKHBhZ2VMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgYXJ0aWNsZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5xdWVyeVNlbGVjdG9yKCdhcnRpY2xlJyk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuICAgICAgICAgICAgcGFnZUVsID0gYXJ0aWNsZUVsIHx8IGNvbnRlbnRFbCEuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCBjdXN0b20gY2xhc3NlcyB0byBib2R5IGJhc2VkIG9uIDxhcnRpY2xlPiBwYXJhbWV0ZXJzXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtNDA0JywgQm9vbGVhbihkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5vdC1mb3VuZF0nKSkpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBQYWdlIG9iamVjdDpcbiAgICAgICAgY29uc3QgcGFnZTogUGFnZSA9IG5ldyBQYWdlc1twYWdlTmFtZV0ocGFnZUVsLCBwYWdlT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlO1xuXG4gICAgICAgIC8vIGJpbmQgZXZlbnRzOlxuICAgICAgICBwYWdlLm9uKFBhZ2VFdmVudHMuQ0hBTkdFLCB0aGlzLm9uUGFnZUFwcGVuZCk7XG5cbiAgICAgICAgLy8gYmluZCB3aWRnZXRzOlxuICAgICAgICBXaWRnZXRzLmJpbmQoKTtcblxuICAgICAgICAvLyB1cGRhdGUgbGlua3M6XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlTGlua3MoKTtcblxuICAgICAgICB0aGlzLmxpZ2h0Ym94Py5jaGVjaygpO1xuXG4gICAgICAgIHJldHVybiBwYWdlLnByZWxvYWQoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGRlYWwgd2l0aCBuZXdseSBhZGRlZCBlbGVtZW50c1xuICAgICAqL1xuICAgIHByaXZhdGUgb25QYWdlQXBwZW5kID0gKGVsOiBIVE1MRWxlbWVudCk6IHZvaWQgPT4ge1xuICAgICAgICBQdXNoU3RhdGVzLmJpbmQoZWwpO1xuICAgICAgICB0aGlzLnNjcm9sbC5sb2FkKCk7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogdG9nZ2xlIGFjdGl2ZSBsaW5rcyB3aXRoIHRoZSBwYWdlIGNoYW5nZVxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0QWN0aXZlTGlua3MoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFuY2hvcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdJyk7XG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgJycpO1xuXG4gICAgICAgIFsuLi5hbmNob3JzXS5mb3JFYWNoKGFuY2hvciA9PiB7XG4gICAgICAgICAgICBhbmNob3IuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYGFbaHJlZj1cIiR7cGF0aG5hbWV9L1wiXSwgYVtocmVmPVwiJHtwYXRobmFtZX1cIl1gKS5mb3JFYWNoKGxpbmsgPT4gbGluaz8uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJykpO1xuICAgIH1cbn1cblxuXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNpdGUgPSBuZXcgU2l0ZSgpO1xuICAgIHNpdGUuaW5pdCgpO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVJRCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHsobmV3IERhdGUoKSkuZ2V0VGltZSgpfSR7TWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKX1gO1xufVxuXG5cblxuZXhwb3J0IGNvbnN0IGRlYm91bmNlID0gKGNhbGxiYWNrOiBGdW5jdGlvbiwgdGltZW91dDogbnVtYmVyID0gMzAwKSA9PiB7XG4gICAgbGV0IHRpbWVvdXRJZCA9IG51bGw7XG5cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB0aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9O1xufTtcblxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXBwSGVpZ2h0KCk6IHZvaWQge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hcHAtaGVpZ2h0JywgYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YCk7XG59XG5cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5leHBvcnQgZnVuY3Rpb24gc3RhdHMoKTogU3RhdHMge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIGNvbnN0IHN0YXRzID0gbmV3IFN0YXRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG5cbiAgICBzdGF0cy5zaG93UGFuZWwoMCk7IC8vIDA6IGZwcywgMTogbXMsIDI6IG1iLCAzKzogY3VzdG9tXG4gICAgc3RhdHMuZG9tLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdGF0cy5kb20pO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSgpOiB2b2lkIHtcbiAgICAgICAgc3RhdHMuYmVnaW4oKTtcbiAgICAgICAgLy8gbW9uaXRvcmVkIGNvZGUgZ29lcyBoZXJlXG4gICAgICAgIHN0YXRzLmVuZCgpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuXG4gICAgcmV0dXJuIHN0YXRzO1xufVxuXG5cbi8qKlxuICogQ292ZXIgY2FudmFzIHdpdGggaW1hZ2VcbiAqIEJ5IEtlbiBGeXJzdGVuYmVyZyBOaWxzZW5cbiAqIElmIGltYWdlIGFuZCBjb250ZXh0IGFyZSBvbmx5IGFyZ3VtZW50cyByZWN0YW5nbGUgd2lsbCBlcXVhbCBjYW52YXNcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudH0gICAgICAgICBpbWdcbiAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgICAgICB4XG4gKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgICAgICAgICAgeVxuICogQHBhcmFtIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgIHdcbiAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgICAgICBoXG4gKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgICAgICAgICAgb2Zmc2V0WCAwLi4xXG4gKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgICAgICAgICAgb2Zmc2V0WSAwLi4xXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkcmF3SW1hZ2VQcm9wKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBpbWc6IEhUTUxJbWFnZUVsZW1lbnQsIGl3OiBudW1iZXIsIGloOiBudW1iZXIsIHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHc/OiBudW1iZXIsIGg/OiBudW1iZXIsIG9mZnNldFg/OiBudW1iZXIsIG9mZnNldFk/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbXVsdGktYXNzaWduXG4gICAgICAgIHggPSB5ID0gMDtcbiAgICAgICAgdyA9IGN0eC5jYW52YXMud2lkdGg7XG4gICAgICAgIGggPSBjdHguY2FudmFzLmhlaWdodDtcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IG9mZnNldCBpcyBjZW50ZXJcbiAgICBvZmZzZXRYID0gdHlwZW9mIG9mZnNldFggPT09ICdudW1iZXInID8gb2Zmc2V0WCA6IDAuNTtcbiAgICBvZmZzZXRZID0gdHlwZW9mIG9mZnNldFkgPT09ICdudW1iZXInID8gb2Zmc2V0WSA6IDAuNTtcblxuICAgIC8vIGtlZXAgYm91bmRzIFswLjAsIDEuMF1cbiAgICBpZiAob2Zmc2V0WCA8IDApIHsgb2Zmc2V0WCA9IDA7IH1cbiAgICBpZiAob2Zmc2V0WSA8IDApIHsgb2Zmc2V0WSA9IDA7IH1cbiAgICBpZiAob2Zmc2V0WCA+IDEpIHsgb2Zmc2V0WCA9IDE7IH1cbiAgICBpZiAob2Zmc2V0WSA+IDEpIHsgb2Zmc2V0WSA9IDE7IH1cblxuXG4gICAgY29uc3QgciA9IE1hdGgubWluKHcgLyBpdywgaCAvIGloKTtcbiAgICBsZXQgbncgPSBpdyAqIHI7IC8vIG5ldyBwcm9wLiB3aWR0aFxuICAgIGxldCBuaCA9IGloICogcjsgLy8gbmV3IHByb3AuIGhlaWdodFxuICAgIGxldCBjeDsgbGV0IGN5OyBsZXQgY3c7IGxldCBjaDsgbGV0XG4gICAgICAgIGFyID0gMTtcblxuICAgIC8vIGRlY2lkZSB3aGljaCBnYXAgdG8gZmlsbFxuICAgIGlmIChudyA8IHcpIHsgYXIgPSB3IC8gbnc7IH1cbiAgICBpZiAoTWF0aC5hYnMoYXIgLSAxKSA8IDFlLTE0ICYmIG5oIDwgaCkgeyBhciA9IGggLyBuaDsgfSAvLyB1cGRhdGVkXG4gICAgbncgKj0gYXI7XG4gICAgbmggKj0gYXI7XG5cbiAgICAvLyBjYWxjIHNvdXJjZSByZWN0YW5nbGVcbiAgICBjdyA9IGl3IC8gKG53IC8gdyk7XG4gICAgY2ggPSBpaCAvIChuaCAvIGgpO1xuXG4gICAgY3ggPSAoaXcgLSBjdykgKiBvZmZzZXRYO1xuICAgIGN5ID0gKGloIC0gY2gpICogb2Zmc2V0WTtcblxuICAgIC8vIG1ha2Ugc3VyZSBzb3VyY2UgcmVjdGFuZ2xlIGlzIHZhbGlkXG4gICAgaWYgKGN4IDwgMCkgeyBjeCA9IDA7IH1cbiAgICBpZiAoY3kgPCAwKSB7IGN5ID0gMDsgfVxuICAgIGlmIChjdyA+IGl3KSB7IGN3ID0gaXc7IH1cbiAgICBpZiAoY2ggPiBpaCkgeyBjaCA9IGloOyB9XG5cbiAgICAvLyBmaWxsIGltYWdlIGluIGRlc3QuIHJlY3RhbmdsZVxuICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBjeCwgY3ksIGN3LCBjaCwgeCwgeSwgdywgaCk7XG59XG5cblxuZXhwb3J0IGNvbnN0IGNsZWFyVGhyZWUgPSAob2JqOiBhbnkpOiB2b2lkID0+IHtcbiAgICBpZiAoIW9iaikgeyByZXR1cm47IH1cbiAgICBpZiAoIW9iai5jaGlsZHJlbikgeyByZXR1cm47IH1cbiAgICB3aGlsZSAob2JqLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2xlYXJUaHJlZShvYmouY2hpbGRyZW5bMF0pO1xuICAgICAgICBvYmoucmVtb3ZlKG9iai5jaGlsZHJlblswXSk7XG4gICAgfVxuXG4gICAgaWYgKG9iai5nZW9tZXRyeSkgeyBvYmouZ2VvbWV0cnkuZGlzcG9zZSgpOyB9XG5cbiAgICBpZiAob2JqLm1hdGVyaWFsKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG9iai5tYXRlcmlhbCkuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAgIGlmICghb2JqLm1hdGVyaWFsW3Byb3BdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9iai5tYXRlcmlhbFtwcm9wXSAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqLm1hdGVyaWFsW3Byb3BdLmRpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvYmoubWF0ZXJpYWxbcHJvcF0uZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb2JqLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbG9uMnRpbGUobG9uOiBudW1iZXIsIHpvb206IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKChsb24gKyAxODApIC8gMzYwKSAqIDIgKiogem9vbSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxhdDJ0aWxlKGxhdDogbnVtYmVyLCB6b29tOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmZsb29yKFxuICAgICAgICAoKDFcbiAgICAgICAgICAgIC0gTWF0aC5sb2coXG4gICAgICAgICAgICAgICAgTWF0aC50YW4oKGxhdCAqIE1hdGguUEkpIC8gMTgwKVxuICAgICAgICAgICAgICAgICAgICArIDEgLyBNYXRoLmNvcygobGF0ICogTWF0aC5QSSkgLyAxODApLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC8gTWF0aC5QSSlcbiAgICAgICAgICAgIC8gMilcbiAgICAgICAgICAgICogMiAqKiB6b29tLFxuICAgICk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEltZ0Zyb21NYXBib3goem9vbTogbnVtYmVyLCBsb246IG51bWJlciwgbGF0OiBudW1iZXIsIHN0eWxlOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHogPSBNYXRoLmZsb29yKHpvb20gLSAwLjUpO1xuXG4gICAgY29uc3QgeCA9IGxvbjJ0aWxlKGxvbiwgeik7XG4gICAgY29uc3QgeSA9IGxhdDJ0aWxlKGxhdCwgeik7XG5cblxuICAgIGNvbnN0IGltZyA9IGA8aW1nIHNyYz1cImh0dHBzOi8vYXBpLm1hcGJveC5jb20vc3R5bGVzL3YxLyR7c3R5bGV9L3RpbGVzLzI1Ni8ke3p9LyR7eH0vJHt5fT9hY2Nlc3NfdG9rZW49JHt0b2tlbn1cIiBsb2FkaW5nPVwibGF6eVwiIGFsdD1cIlwiPmA7XG5cbiAgICByZXR1cm4gaW1nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbkZvcm1hdHRlcihudW06IG51bWJlciwgZGlnaXRzOiBudW1iZXIpIHtcbiAgICBjb25zdCBsb29rdXAgPSBbXG4gICAgICAgIHsgdmFsdWU6IDEsIHN5bWJvbDogJycgfSxcbiAgICAgICAgeyB2YWx1ZTogMWUzLCBzeW1ib2w6ICdrJyB9LFxuICAgICAgICB7IHZhbHVlOiAxZTYsIHN5bWJvbDogJ01JJyB9LFxuICAgICAgICB7IHZhbHVlOiAxZTksIHN5bWJvbDogJ0cnIH0sXG4gICAgICAgIHsgdmFsdWU6IDFlMTIsIHN5bWJvbDogJ1QnIH0sXG4gICAgICAgIHsgdmFsdWU6IDFlMTUsIHN5bWJvbDogJ1AnIH0sXG4gICAgICAgIHsgdmFsdWU6IDFlMTgsIHN5bWJvbDogJ0UnIH0sXG4gICAgXTtcbiAgICBjb25zdCByeCA9IC9cXC4wKyR8KFxcLlswLTldKlsxLTldKTArJC87XG4gICAgY29uc3QgaXRlbSA9IGxvb2t1cC5zbGljZSgpLnJldmVyc2UoKS5maW5kKGl0ZW1Jbm5lciA9PiBudW0gPj0gaXRlbUlubmVyLnZhbHVlKTtcbiAgICByZXR1cm4gaXRlbSA/IChudW0gLyBpdGVtLnZhbHVlKS50b0ZpeGVkKGRpZ2l0cykucmVwbGFjZShyeCwgJyQxJykgKyBpdGVtLnN5bWJvbCA6ICcwJztcbn1cblxuXG5leHBvcnQgY29uc3Qga2V5cyA9IHtcbiAgICBlbnRlcjogMTMsXG4gICAgZXNjOiAyNyxcbiAgICBzcGFjZTogMzIsXG4gICAgbGVmdDogMzcsXG4gICAgdXA6IDM4LFxuICAgIHJpZ2h0OiAzOSxcbiAgICBkb3duOiA0MCxcbiAgICBwYWdlVXA6IDMzLFxuICAgIHBhZ2VEb3duOiAzNCxcbiAgICBlbmQ6IDM1LFxuICAgIGhvbWU6IDM2LFxuICAgIG1pbnVzOiAxMDksXG4gICAgcGx1czogMTA3LFxufTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JpcHQoc291cmNlOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgbGV0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpIGFzIGFueTtcbiAgICBjb25zdCBwcmlvciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICBzY3JpcHQuYXN5bmMgPSAxO1xuICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKF8sIGlzQWJvcnQpIHtcbiAgICAgICAgaWYgKGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSB7XG4gICAgICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICBzY3JpcHQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmICghaXNBYm9ydCAmJiBjYWxsYmFjaykgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc2NyaXB0LnNyYyA9IHNvdXJjZTtcbiAgICBwcmlvci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIHByaW9yKTtcbn1cbi8qIGVzbGludC1lbmFibGUgKi9cblxuLyohXG4gKiBTZXJpYWxpemUgYWxsIGZvcm0gZGF0YSBpbnRvIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnNcbiAqIChjKSAyMDIwIENocmlzIEZlcmRpbmFuZGksIE1JVCBMaWNlbnNlLCBodHRwczovL2dvbWFrZXRoaW5ncy5jb21cbiAqIEBwYXJhbSAge05vZGV9ICAgZm9ybSBUaGUgZm9ybSB0byBzZXJpYWxpemVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICBUaGUgc2VyaWFsaXplZCBmb3JtIGRhdGFcbiAqL1xuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZU9iamVjdCA9IChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBvYmogPSB7fTtcbiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmb3JtLmVsZW1lbnRzKS5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgaWYgKCFmaWVsZC5uYW1lIHx8IGZpZWxkLmRpc2FibGVkIHx8IFsnZmlsZScsICdyZXNldCcsICdzdWJtaXQnLCAnYnV0dG9uJ10uaW5kZXhPZihmaWVsZC50eXBlKSA+IC0xKSByZXR1cm47XG4gICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmllbGQub3B0aW9ucykuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9uLnNlbGVjdGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9ialtmaWVsZC5uYW1lXSA9IG9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFsnY2hlY2tib3gnLCAncmFkaW8nXS5pbmRleE9mKGZpZWxkLnR5cGUpID4gLTEgJiYgIWZpZWxkLmNoZWNrZWQpIHJldHVybjtcbiAgICAgICAgb2JqW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuZXhwb3J0IGNvbnN0IHplcm9QYWQgPSAobnVtOiBudW1iZXIsIHBsYWNlczogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgICBjb25zdCB6ZXJvID0gcGxhY2VzIC0gbnVtLnRvU3RyaW5nKCkubGVuZ3RoICsgMTtcbiAgICByZXR1cm4gQXJyYXkoKyh6ZXJvID4gMCAmJiB6ZXJvKSkuam9pbignMCcpICsgbnVtO1xufTtcblxuXG5leHBvcnQgY29uc3Qgd2FpdCA9ICh0aW1lOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCB0aW1lKTtcbn0pO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYC8ke3VybC5yZXBsYWNlKC8jLiokLywgJycpLnJlcGxhY2UoL15cXC98XFwvJC9nLCAnJykucmVwbGFjZSgvXFw/LiokLywgJycpfWA7XG59XG5cblxuZXhwb3J0IGNvbnN0IGdldFF1ZXJ5U3RyaW5nID0gKGZvcm1zOiBIVE1MRm9ybUVsZW1lbnQgfCBIVE1MRm9ybUVsZW1lbnRbXSk6IHN0cmluZyA9PiB7XG5cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgKEFycmF5LmlzQXJyYXkoZm9ybXMpID8gZm9ybXMgOiBbZm9ybXNdKVxuICAgICAgICAuZmlsdGVyKChlLCBpLCBhKSA9PiBhLmluZGV4T2YoZSkgPT09IGkpIC8vIHJlbW92ZSBkdXBsaWNhdGVzXG4gICAgICAgIC5mb3JFYWNoKGZvcm0gPT4ge1xuICAgICAgICAgICAgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgRm9ybURhdGEoZm9ybSkgYXMgYW55KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSkpO1xuICAgICAgICB9KTtcblxuXG4gICAgY29uc3QgZm9ybVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoZm9ybURhdGEgYXMgYW55KTtcblxuICAgIC8vIGZpbHRlciBlbXB0eSB2YWx1ZXMgZnJvbSBmb3JtXG4gICAgY29uc3Qga2V5c0ZvckRlbCA9IFtdO1xuICAgIGZvcm1QYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBpZiAoIXZhbHVlKSBrZXlzRm9yRGVsLnB1c2goa2V5KTtcbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSBlbXB0eSBmaWVsZHMgZnJvbSBxdWVyeVxuICAgIGtleXNGb3JEZWwuZm9yRWFjaChrZXkgPT4gZm9ybVBhcmFtcy5kZWxldGUoa2V5KSk7XG5cbiAgICAvLyBzZXQgbmV3IFVSTFNlYXJjaFBhcmFtcyBPYmplY3QgZm9yIGZpbmFsIGNvbnZlcnRlZCBkYXRhXG4gICAgY29uc3QgZmluYWxGb3JtRGF0YTogVVJMU2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXG4gICAgLy8gd2hlbiBxdWVyeSBoYXMgc2FtZSBuYW1lIHBhcmFtZXRlcnMgd2l0aCBkaWZmZXJlbnQgdmFsdWVzIChlZyBtdWx0aSBjaGVja2JveGVzKSwgbWVyZ2UgdmFsdWVzIGludG8gb25lIGtleSAoZm9yIFVSTCBwcmV0dGlmeSAmIGJhY2tlbmQgcHVycG9zZXMpXG4gICAgZm9ybVBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmaW5hbEZvcm1EYXRhLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICBmaW5hbEZvcm1EYXRhLnNldChrZXksIGAke2ZpbmFsRm9ybURhdGEuZ2V0KGtleSl9LCR7dmFsdWV9YCk7XG4gICAgICAgIH0gZWxzZSBmaW5hbEZvcm1EYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChmaW5hbEZvcm1EYXRhLnRvU3RyaW5nKCkpO1xufTtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUYWdzKHN0cikge1xuICAgIGlmICgoc3RyID09PSBudWxsKSB8fCAoc3RyID09PSAnJykpIHJldHVybiBmYWxzZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBzdHIgPSBzdHIudG9TdHJpbmcoKTtcblxuICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBpZGVudGlmeSBIVE1MIHRhZ3MgaW5cbiAgICAvLyB0aGUgaW5wdXQgc3RyaW5nLiBSZXBsYWNpbmcgdGhlIGlkZW50aWZpZWRcbiAgICAvLyBIVE1MIHRhZyB3aXRoIGEgbnVsbCBzdHJpbmcuXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZywgJycpO1xufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0b3JhZ2VJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JhZ2VJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbn1cbiIsIi8vIFtkYXRhLWFuaW1hdGlvbl1cbmltcG9ydCB7IGZhZGVVcCB9IGZyb20gJy4vZmFkZVVwJztcblxuLy8gW2RhdGEtc2Nyb2xsXVxuaW1wb3J0IHsgaGVybyB9IGZyb20gJy4vc2Nyb2xsL2hlcm8nO1xuaW1wb3J0IHsgaW50ZXJ2aWV3cyB9IGZyb20gJy4vc2Nyb2xsL2ludGVydmlld3MnO1xuXG5leHBvcnQgY29uc3QgYW5pbWF0aW9ucyA9IHsgZmFkZVVwIH07XG5cbmV4cG9ydCBjb25zdCBzY3JvbGxzID0geyBoZXJvLCBpbnRlcnZpZXdzIH07XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uL0FuaW1hdGUnO1xuaW1wb3J0IHsgZWFzaW5nIH0gZnJvbSAnLi4vU2l0ZSc7XG5cbmV4cG9ydCBjb25zdCBmYWRlVXA6IEFuaW1hdGlvblR5cGUgPSAoZWwsIGRlbGF5ID0gMCkgPT4ge1xuICAgIGdzYXAua2lsbFR3ZWVuc09mKGVsLCB7IG9wYWNpdHk6IHRydWUsIHk6IHRydWUgfSk7XG4gICAgcmV0dXJuIGdzYXAuZnJvbVRvKGVsLCB7IG9wYWNpdHk6IDAsIHk6IDYwIH0sIHsgZHVyYXRpb246IDEuNCwgb3BhY2l0eTogMSwgeTogMCwgZWFzZTogZWFzaW5nLCBkZWxheSB9KTtcbn07XG4iLCJpbXBvcnQgZ3NhcCBmcm9tICdnc2FwJztcblxuZXhwb3J0IGNvbnN0IGhlcm8gPSBlbCA9PiB7XG4gICAgZ3NhcC50byhlbC5jaGlsZHJlbiwge1xuICAgICAgICB5OiAoKSA9PiBlbC5jbGllbnRIZWlnaHQgLyAtMixcbiAgICAgICAgZWFzZTogJ25vbmUnLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICB0cmlnZ2VyOiBlbCxcbiAgICAgICAgICAgIHNjcnViOiB0cnVlLFxuICAgICAgICAgICAgc3RhcnQ6ICd0b3AgdG9wJyxcbiAgICAgICAgICAgIGVuZDogJ2JvdHRvbSB0b3AnLFxuICAgICAgICB9LFxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IGdzYXAgfSBmcm9tICdnc2FwL2Rpc3QvZ3NhcCc7XG5cbmV4cG9ydCBjb25zdCBpbnRlcnZpZXdzID0gZWwgPT4ge1xuXG4gICAgY29uc3QgY29udHJvbHMgPSBlbC5xdWVyeVNlbGVjdG9yKCcuaW50ZXJ2aWV3cy1ncmlkX19jb250cm9scycpO1xuICAgIGNvbnN0IG1vcmVJbnRlcnZpZXdzID0gZWwucXVlcnlTZWxlY3RvcignLmludGVydmlld3NfX21vcmUnKTtcbiAgICBsZXQgbW9yZUludGVydmlld3NIZWlnaHQgPSAwO1xuICAgIGlmIChtb3JlSW50ZXJ2aWV3cykgbW9yZUludGVydmlld3NIZWlnaHQgPSBtb3JlSW50ZXJ2aWV3cy5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjb250cm9scyAmJiBnc2FwLnRvKGNvbnRyb2xzLCB7XG5cbiAgICAgICAgZWFzZTogJ25vbmUnLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICB0cmlnZ2VyOiBlbCxcbiAgICAgICAgICAgIHBpbjogY29udHJvbHMsXG4gICAgICAgICAgICBwaW5TcGFjaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXJ0OiAndG9wIHRvcCcsXG4gICAgICAgICAgICBlbmQ6ICgpID0+IGBib3R0b20gJHtjb250cm9scy5vZmZzZXRIZWlnaHQgKyBtb3JlSW50ZXJ2aWV3c0hlaWdodH1weGAsXG4gICAgICAgICAgICBvblRvZ2dsZTogc2VsZiA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1waW5uZWQnLCBzZWxmLmlzQWN0aXZlKSxcbiAgICAgICAgICAgIGludmFsaWRhdGVPblJlZnJlc2g6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbn07XG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudCc7XG5cblxuZXhwb3J0IGNsYXNzIEFjY29yZGVvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIodmlldyk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICB0aGlzLnNldEhlaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYmluZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1hY2NvcmRlb24tYnV0dG9uJyk7XG4gICAgICAgIGJ1dHRvbiAmJiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQ2xpY2spO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Ub2dnbGVDbGljayA9IGUgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QudG9nZ2xlKCdpcy1jbG9zZWQnKTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBzZXRIZWlnaHQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvcHk6IEhUTUxEaXZFbGVtZW50ID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1hY2NvcmRlb24tY29weScpO1xuXG4gICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBjb3B5LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIGNvcHkuc3R5bGUuaGVpZ2h0ID0gYCR7Y29weS5zY3JvbGxIZWlnaHR9cHhgO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9Db21wb25lbnQnO1xuXG5cbmV4cG9ydCBjbGFzcyBBY2NvcmRlb25MaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGFsbEl0ZW1zOiBIVE1MTElFbGVtZW50W107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIodmlldyk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICB0aGlzLnNldHVwTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFsbEl0ZW1zID0gWy4uLnRoaXMudmlldy5xdWVyeVNlbGVjdG9yQWxsKCcuanMtYWNjb3JkZW9uLWl0ZW0nKV0ubWFwKGVsID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSA8SFRNTExJRWxlbWVudD5lbDtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNsb3NlT3RoZXJzIH0gPSB0aGlzLnZpZXcuZGF0YXNldDtcblxuICAgICAgICB0aGlzLmFsbEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5qcy1hY2NvcmRlb24tYnV0dG9uJyk7XG4gICAgICAgICAgICBidXR0b24gJiYgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB0aGlzLm9uVG9nZ2xlQ2xpY2soZSwgaXRlbSkpO1xuXG4gICAgICAgICAgICBjbG9zZU90aGVycyAmJiB0aGlzLnNldHVwTXV0YXRpb25PYnNlcnZlcihpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXR1cE11dGF0aW9uT2JzZXJ2ZXIoaXRlbSk6IHZvaWQge1xuICAgICAgICBjb25zdCBsaW5rID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdhLmJ1dHRvbicpO1xuXG4gICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICB0aGlzLm9uTGlua1RvZ2dsZShpdGVtLmNsYXNzTGlzdC5jb250YWlucygnaXMtY2xvc2VkJyksIGxpbmspO1xuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB0aGlzLm9uTGlua1RvZ2dsZShpdGVtLmNsYXNzTGlzdC5jb250YWlucygnaXMtY2xvc2VkJyksIGxpbmspKTtcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoaXRlbSwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblRvZ2dsZUNsaWNrID0gKGUsIGl0ZW0pID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucygnaXMtY2xvc2VkJykpIHtcbiAgICAgICAgICAgIHRoaXMuYWxsSXRlbXMuZm9yRWFjaChpdGVtVG9jbG9zZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZShpdGVtVG9jbG9zZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vcGVuKGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZShpdGVtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIG9uTGlua1RvZ2dsZSA9IChpc0Nsb3NlZCwgZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LnRhYkluZGV4ID0gaXNDbG9zZWQgPyAtMSA6IDA7XG4gICAgfTtcblxuICAgIHByaXZhdGUgY2xvc2UoaXRlbSk6IHZvaWQge1xuICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2lzLWNsb3NlZCcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbihpdGVtKTogdm9pZCB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtY2xvc2VkJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRIZWlnaHQoaXRlbSk6IHZvaWQge1xuICAgICAgICBjb25zdCBjb3B5OiBIVE1MRGl2RWxlbWVudCA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLmpzLWFjY29yZGVvbi1jb3B5Jyk7XG5cbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIGNvcHkucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgICAgY29weS5zdHlsZS5oZWlnaHQgPSBgJHtjb3B5LnNjcm9sbEhlaWdodH1weGA7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgZWFzaW5nIH0gZnJvbSAnLi4vU2l0ZSc7XG5pbXBvcnQgeyBWaWRlbyB9IGZyb20gJy4vUGxheWVyL1ZpZGVvJztcblxuXG5leHBvcnQgY2xhc3MgQXVkaW9QbGF5ZXJTdGF0ZXNUZXh0IHtcbiAgICBwdWJsaWMgc3RhdGljIFJBTkRPTSA9ICdQbGF5IHJhbmRvbSBpbnRlcnZpZXcnO1xuICAgIHB1YmxpYyBzdGF0aWMgUExBWUlORyA9ICdQbGF5aW5nIGludGVydmlldyc7XG4gICAgcHVibGljIHN0YXRpYyBQQVVTRUQgPSAnUGxheSBpbnRlcnZpZXcnO1xufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9QbGF5ZXIgZXh0ZW5kcyBWaWRlbyB7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBwdWJsaWMgc3RhdGljIGluc3RhbmNlOiBBdWRpb1BsYXllcjtcblxuICAgIHB1YmxpYyBzdGF0aWMgY2xvc2VBdWRpb1BsYXllcigpOiB2b2lkIHtcbiAgICAgICAgQXVkaW9QbGF5ZXIuaW5zdGFuY2UubWluaW1pemUoKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgYXVkaW9UaXRsZTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBjYXNzZXR0ZVRpdGxlOiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcih2aWV3KTtcblxuICAgICAgICBBdWRpb1BsYXllci5pbnN0YW5jZSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy51aS50aHVtYm5haWwgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLnBsYXllcl9fdGh1bWJuYWlsJyk7XG4gICAgICAgIHRoaXMudWkubWluaW1pemUgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLnBsYXllcl9fbWluaW1pemUnKTtcbiAgICAgICAgdGhpcy5hdWRpb1RpdGxlID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXJfX3RpdGxlJyk7XG4gICAgICAgIHRoaXMuY2Fzc2V0dGVUaXRsZSA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcucGxheWVyX19tYXJxdWVlJyk7XG5cbiAgICAgICAgdGhpcy5iaW5kQXVkaW9QbGF5ZXIoKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uUGxheSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIub25QbGF5KCk7XG4gICAgICAgIHRoaXMuc2V0VGl0bGVJbkNhc3NldHRlKEF1ZGlvUGxheWVyU3RhdGVzVGV4dC5QTEFZSU5HKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uUGF1c2UoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLm9uUGF1c2UoKTtcbiAgICAgICAgdGhpcy5zZXRUaXRsZUluQ2Fzc2V0dGUoQXVkaW9QbGF5ZXJTdGF0ZXNUZXh0LlBBVVNFRCk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgYmluZEF1ZGlvUGxheWVyID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLnVpLnRodW1ibmFpbCAmJiB0aGlzLnVpLnRodW1ibmFpbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25UaHVtYm5haWxDbGljayk7XG4gICAgICAgIHRoaXMudWkubWluaW1pemUgJiYgdGhpcy51aS5taW5pbWl6ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25NaW5pbWl6ZUNsaWNrKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb25UaHVtYm5haWxDbGljayA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5pc0V4cGFuZGVkID8gdGhpcy5taW5pbWl6ZSgpIDogdGhpcy5leHBhbmQoKTtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC50b2dnbGUoJ2lzLWV4cGFuZGVkJyk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uTWluaW1pemVDbGljayA9ICgpOiB2b2lkID0+IHRoaXMubWluaW1pemUoKTtcblxuXG5cbiAgICBwcml2YXRlIG1pbmltaXplID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBnc2FwLnRvKHRoaXMudWkucGxheWVyQmFyLCB7XG4gICAgICAgICAgICB5UGVyY2VudDogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjcsXG4gICAgICAgICAgICBlYXNlOiBlYXNpbmcsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUaXRsZUluQ2Fzc2V0dGUodGhpcy5hdWRpb1RpdGxlLmlubmVyVGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgZXhwYW5kID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBnc2FwLnRvKHRoaXMudWkucGxheWVyQmFyLCB7XG4gICAgICAgICAgICB5UGVyY2VudDogLTEwMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjcsXG4gICAgICAgICAgICBlYXNlOiBlYXNpbmcsXG4gICAgICAgICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUaXRsZUluQ2Fzc2V0dGUodGhpcy5pc1BhdXNlZCgpID8gQXVkaW9QbGF5ZXJTdGF0ZXNUZXh0LlBBVVNFRCA6IEF1ZGlvUGxheWVyU3RhdGVzVGV4dC5QTEFZSU5HKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBzZXRUaXRsZUluQ2Fzc2V0dGUgPSAodGV4dDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICAgIFsuLi50aGlzLmNhc3NldHRlVGl0bGUucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpXS5mb3JFYWNoKHNwYW4gPT4ge1xuICAgICAgICAgICAgc3Bhbi5pbm5lclRleHQgPSB0ZXh0O1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gJy4uL0hhbmRsZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVVSUQgfSBmcm9tICcuLi9VdGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRFdmVudHMge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0hBTkdFOiBzdHJpbmcgPSAnY2hhbmdlJztcbn1cblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgSGFuZGxlciB7XG4gICAgcHVibGljIHV1aWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVJRCgpO1xuICAgICAgICBpZiAoIXZpZXcpIHsgY29uc29sZS53YXJuKCdjb21wb25lbnQgYnVpbHQgd2l0aG91dCB2aWV3Jyk7IH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25TdGF0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHB1YmxpYyBhbmltYXRlSW4oaW5kZXg/OiBudW1iZXIsIGRlbGF5PzogbnVtYmVyKTogdm9pZCB7IH1cblxuICAgIHB1YmxpYyBhbmltYXRlT3V0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBpZiB5b3UgZG9uJ3Qgd2FudCB0byBhbmltYXRlIGNvbXBvbmVudCxcbiAgICAgICAgLy8ganVzdCByZXR1cm4gZW1wdHkgUHJvbWlzZTpcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBwdWJsaWMgcmVzaXplID0gKHdkdDogbnVtYmVyLCBoZ3Q6IG51bWJlcik6IHZvaWQgPT4geyB9O1xuXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgVGVtcGxhdGVzIH0gZnJvbSAnLi4vLi4vdGVtcGxhdGVzL1RlbXBsYXRlcyc7XG5pbXBvcnQgeyBQdXNoU3RhdGVzIH0gZnJvbSAnLi4vLi4vUHVzaFN0YXRlcyc7XG5pbXBvcnQgeyBMaWdodGJveERhdGEgfSBmcm9tICcuL0xpZ2h0Ym94LnR5cGVzJztcbmltcG9ydCB7IGVhc2luZyB9IGZyb20gJy4uLy4uL1NpdGUnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Db21wb25lbnQnO1xuaW1wb3J0IHsgY29tcG9uZW50cyB9IGZyb20gJy4uLy4uL0NsYXNzZXMnO1xuXG5cblxuZXhwb3J0IGNsYXNzIExpZ2h0Ym94IHtcbiAgICBwcml2YXRlIGNvbXBvbmVudHM6IEFycmF5PENvbXBvbmVudD47XG4gICAgcHJpdmF0ZSB2aWV3OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHNob3duID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBjdXJyZW50UGF0aDogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBhbmltYXRpbmc6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpZ2h0Ym94Jyk7XG5cbiAgICAgICAgdGhpcy5oaWRlKHRydWUpO1xuXG5cbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBhc3luYyBsb2FkKHBheWxvYWQ/OiBPYmplY3QpOiBQcm9taXNlPExpZ2h0Ym94RGF0YT4ge1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtZmV0Y2hpbmcnKTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgICAgIGNvbnN0IGlzV29ya3NwYWNlID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoJy93b3Jrc3BhY2UvJykgPj0gMDtcbiAgICAgICAgLy8gY29uc3QgdXJsID0gaXNXb3Jrc3BhY2UgPyB0aGlzLnNldHRpbmdzLmFwaVt0eXBlXSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgY29uc3QgdXJsID0gaXNXb3Jrc3BhY2VcbiAgICAgICAgICAgID8gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vd29ya3NwYWNlL2pzb24vbGlnaHRib3gvJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKVszXX0uanNvbmBcbiAgICAgICAgICAgIDogd2luZG93LmxvY2F0aW9uLmhyZWYgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIHNpZ25hbDogdGhpcy5jb250cm9sbGVyPy5zaWduYWwsXG4gICAgICAgICAgICAgICAgYm9keTogbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXlsb2FkIGFzIGFueSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgICAgICdFbGRlci1BcGknOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWZldGNoaW5nJyk7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBudWxsO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWZldGNoaW5nJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBjaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVCeVBhdGhuYW1lKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBvblN0YXRlKGlzUmVuZGVyZWQ/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUJ5UGF0aG5hbWUoaXNSZW5kZXJlZCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cz8uZm9yRWFjaChjID0+IGMuZGVzdHJveSgpKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGJ1aWxkID0gKGRhdGE6IExpZ2h0Ym94RGF0YSk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IFRlbXBsYXRlcy5nZXQoJ2xpZ2h0Ym94Jyk7XG5cbiAgICAgICAgY29uc3QgaHRtbCA9IHRlbXBsYXRlLnJlbmRlcihkYXRhKTtcbiAgICAgICAgdGhpcy52aWV3LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgICAgUHVzaFN0YXRlcy5iaW5kKHRoaXMudmlldyk7XG5cbiAgICAgICAgdGhpcy5idWlsZENvbXBvbmVudHModGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNvbXBvbmVudF0nKSk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGJpbmQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uS2V5RG93biA9IChlKTogdm9pZCA9PiB7XG4gICAgICAgIC8vIE9OTFkgZm9yIHRlc3RpbmdcbiAgICAgICAgaWYgKGUua2V5ID09PSAncicpIHRoaXMuc2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdygpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBidWlsZENvbXBvbmVudHMoY29tcG9uZW50c0xpc3Q6IE5vZGVMaXN0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFsuLi5jb21wb25lbnRzTGlzdF0ubWFwKGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZWw7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZWxlbWVudC5kYXRhc2V0LmNvbXBvbmVudDtcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQgJiYgY29tcG9uZW50c1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxldCBvcHRpb25zOiBPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5kYXRhc2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IEpTT04ucGFyc2UoZWxlbWVudC5kYXRhc2V0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBuZXcgY29tcG9uZW50c1tuYW1lXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUud2FybignVGhlcmUgaXMgbm8gYCVzYCBjb21wb25lbnQhJywgbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHRvZ2dsZUJ5UGF0aG5hbWUoaXNSZW5kZXJlZD86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcGF0dGVybkZvdW5kID0gdGhpcy5tYXRjaFBhdGhuYW1lUGF0dGVybigpO1xuXG4gICAgICAgIGlmIChwYXR0ZXJuRm91bmQpIHtcbiAgICAgICAgICAgIC8vIHNob3cgdGhlIGludGVydmlldyBsaWdodGJveDpcbiAgICAgICAgICAgIGlmICghdGhpcy5zaG93bikgeyB0aGlzLnNob3coKTsgfVxuXG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQoKSxcbiAgICAgICAgICAgIF0pLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdHMuZmlsdGVyKEJvb2xlYW4pLnJlZHVjZSgocCwgYykgPT4gKHsgLi4ucCwgLi4uYyB9KSkgYXMgTGlnaHRib3hEYXRhO1xuXG4gICAgICAgICAgICAgICAgZGF0YT8udGl0bGUgJiYgUHVzaFN0YXRlcy5zZXRUaXRsZShkYXRhLnRpdGxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZChkYXRhKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUluKCk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBqdXN0IGhpZGU6XG4gICAgICAgIGlmICh0aGlzLnNob3duKSB7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRlID0gaXNSZW5kZXJlZDtcbiAgICAgICAgICAgICEhYW5pbWF0ZSAmJiB0aGlzLmFuaW1hdGVPdXQoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZSghYW5pbWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgaGlkZShmYXN0PzogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXI/LmFib3J0KCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QuYWRkKCdpcy1jbG9zaW5nJyk7XG4gICAgICAgICAgICBnc2FwLnRvKHRoaXMudmlldywge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBmYXN0ID8gMCA6IDAuMDEsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcblxuICAgICAgICAgICAgICAgIC8vIENPTk5FQ1RFRCBXSVRIIENTUyAtIC5pcy1jbG9zaW5nXG4gICAgICAgICAgICAgICAgZGVsYXk6IGZhc3QgPyAwIDogMSxcbiAgICAgICAgICAgICAgICBlYXNlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2hvd2luZycpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc2hvdygpOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5zaG93bikgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLnNob3duID0gdHJ1ZTtcblxuICAgICAgICBnc2FwLnRvKHRoaXMudmlldywge1xuICAgICAgICAgICAgZHVyYXRpb246IDAuMyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICBlYXNlOiAnbm9uZScsXG4gICAgICAgICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWNsb3NpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gdGhhdCBjbGFzcyBydW5zIENTUyBhbmltYXRpb25cbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHRoaXMudmlldy5jbGFzc0xpc3QuYWRkKCdpcy1zaG93aW5nJyksXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIG1hdGNoUGF0aG5hbWVQYXR0ZXJuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gL15cXC8od29ya3NwYWNlXFwvbGlnaHRib3h8aW50ZXJ2aWV3cylcXC9bYS16MC05LV0vZ21pXG4gICAgICAgICAgICAudGVzdCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBhbmltYXRlSW4oZmFzdD86IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgZ3NhcC50aW1lbGluZSh7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtdmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0czogeyBlYXNlOiBlYXNpbmcsIGR1cmF0aW9uOiAhZmFzdCA/IDEgOiAwIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmF2aWdhdG9yLnZpYnJhdGUoWzEsIDQwMCwgMV0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBhbmltYXRlT3V0KGZhc3Q/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG5cbiAgICAgICAgaWYgKCF0aGlzLnZpZXcuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy12aXNpYmxlJykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGdzYXAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmYXVsdHM6IHsgZWFzZTogJ2V4cG8uaW5PdXQnIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ3NhcCB9IGZyb20gJ2dzYXAvZGlzdC9nc2FwJztcbmltcG9ydCB7IGVhc2luZyB9IGZyb20gJy4uLy4uL1NpdGUnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Db21wb25lbnQnO1xuXG5cbmV4cG9ydCBjbGFzcyBMaWdodGJveE5hdiBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBwcml2YXRlIG5hdkJ1dHRvbnM6IE5vZGVMaXN0T2Y8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuICAgIHByaXZhdGUgbmF2VGFiczogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD47XG4gICAgcHJpdmF0ZSBhY3RpdmVUYWI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgbGlnaHRib3hFbDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIodmlldyk7XG5cbiAgICAgICAgdGhpcy5saWdodGJveEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpZ2h0Ym94Jyk7XG4gICAgICAgIHRoaXMubmF2QnV0dG9ucyA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcbiAgICAgICAgdGhpcy5uYXZUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWxpZ2h0Ym94LXRhYicpO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGJpbmQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIFsuLi50aGlzLm5hdkJ1dHRvbnNdLmZvckVhY2goYnRuID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25CdG5DbGljaykpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvbkJ0bkNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50VGFyZ2V0OiBidXR0b24gfSA9IGU7XG5cbiAgICAgICAgY29uc3QgdGFiU2x1Zzogc3RyaW5nID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpO1xuICAgICAgICBjb25zdCB0YWJUb09wZW46IEhUTUxFbGVtZW50ID0gWy4uLnRoaXMubmF2VGFic10uZmluZCh0YWIgPT4gdGFiLmlkID09PSB0YWJTbHVnKTtcblxuICAgICAgICB0aGlzLnNob3dUYWIodGFiVG9PcGVuKTtcblxuICAgICAgICBbLi4udGhpcy5uYXZCdXR0b25zXS5mb3JFYWNoKGJ0biA9PiB7XG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICBidG4uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBzaG93VGFiID0gKHRhYjogSFRNTEVsZW1lbnQpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZVRhYih0aGlzLmFjdGl2ZVRhYikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRhYikge1xuICAgICAgICAgICAgICAgIC8vIGZvciBhbmltYXRlIGltYWdlXG4gICAgICAgICAgICAgICAgdGhpcy5saWdodGJveEVsLmNsYXNzTGlzdC5hZGQoJ2lzLWRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0Ym94RWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbm90LWRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYiA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3NhcC5mcm9tVG8odGFiLCB7IHlQZXJjZW50OiAxMDAgfSwge1xuICAgICAgICAgICAgICAgIHlQZXJjZW50OiAwLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgICAgIGNsZWFyUHJvcHM6ICdhbGwnLFxuICAgICAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHRhYi5jbGFzc0xpc3QuYWRkKCdpcy12aXNpYmxlJyksXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYiA9IHRhYjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBjbG9zZVRhYiA9ICh0YWI6IEhUTUxFbGVtZW50KTogUHJvbWlzZTx2b2lkPiA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgaWYgKCF0YWIpIHtcbiAgICAgICAgICAgIC8vIGZvciBhbmltYXRlIGltYWdlXG4gICAgICAgICAgICB0aGlzLmxpZ2h0Ym94RWwuY2xhc3NMaXN0LmFkZCgnaXMtbm90LWRlZmF1bHQnKTtcbiAgICAgICAgICAgIHRoaXMubGlnaHRib3hFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kZWZhdWx0Jyk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnc2FwLmZyb21Ubyh0YWIsIHsgeVBlcmNlbnQ6IDAgfSwge1xuICAgICAgICAgICAgICAgIHlQZXJjZW50OiAxMDAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMyxcbiAgICAgICAgICAgICAgICBlYXNlOiBlYXNpbmcsXG4gICAgICAgICAgICAgICAgY2xlYXJQcm9wczogJ2FsbCcsXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YWIuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Db21wb25lbnQnO1xuaW1wb3J0IHsgZWFzaW5nIH0gZnJvbSAnLi4vLi4vU2l0ZSc7XG5cblxuZXhwb3J0IGNsYXNzIExpZ2h0Ym94U2xpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIHByaXZhdGUgd3JhcDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzbGlkZXM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xuICAgIHByaXZhdGUgYXJyb3dQcmV2OiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGFycm93TmV4dDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBhY3RpdmVTbGlkZTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBhY3RpdmVTbGlkZUluZGV4OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIodmlldyk7XG5cbiAgICAgICAgdGhpcy53cmFwID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zbGlkZXItd3JhcCcpO1xuICAgICAgICB0aGlzLnNsaWRlcyA9IHRoaXMud3JhcC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc2xpZGUnKTtcbiAgICAgICAgdGhpcy5hcnJvd1ByZXYgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXNsaWRlci1wcmV2Jyk7XG4gICAgICAgIHRoaXMuYXJyb3dOZXh0ID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zbGlkZXItbmV4dCcpO1xuXG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGluaXQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZ29UbygwLCB0cnVlKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgYmluZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5hcnJvd05leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmdvVG8odGhpcy5hY3RpdmVTbGlkZUluZGV4ICsgMSkpO1xuICAgICAgICB0aGlzLmFycm93UHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZ29Ubyh0aGlzLmFjdGl2ZVNsaWRlSW5kZXggLSAxKSk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGdvVG8gPSAoaW5kZXg6IG51bWJlciwgZmFzdD86IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uOiBudW1iZXIgPSBpbmRleCA+IHRoaXMuYWN0aXZlU2xpZGVJbmRleCA/IDEgOiAtMTtcblxuICAgICAgICB0aGlzLmhpZGVTbGlkZSh0aGlzLmFjdGl2ZVNsaWRlLCBkaXJlY3Rpb24sIGZhc3QpO1xuICAgICAgICB0aGlzLnNob3dTbGlkZSh0aGlzLnNsaWRlc1tpbmRleF0sIGRpcmVjdGlvbiwgZmFzdCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGhpZGVTbGlkZSA9IChzbGlkZTogSFRNTEVsZW1lbnQsIGRpcmVjdGlvbjogbnVtYmVyLCBmYXN0PzogYm9vbGVhbik6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIXNsaWRlKSByZXR1cm47XG5cbiAgICAgICAgZ3NhcC5mcm9tVG8oc2xpZGUsIHsgeFBlcmNlbnQ6IDAgfSwge1xuICAgICAgICAgICAgeFBlcmNlbnQ6IGRpcmVjdGlvbiAqIC0xMDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogZmFzdCA/IDAgOiAwLjI1LFxuICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgc2hvd1NsaWRlID0gKHNsaWRlOiBIVE1MRWxlbWVudCwgZGlyZWN0aW9uOiBudW1iZXIsIGZhc3Q/OiBib29sZWFuKTogdm9pZCA9PiB7XG5cbiAgICAgICAgZ3NhcC5mcm9tVG8oc2xpZGUsIHsgeFBlcmNlbnQ6IGRpcmVjdGlvbiAqIDEwMCB9LCB7XG4gICAgICAgICAgICB4UGVyY2VudDogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBmYXN0ID8gMC4wMSA6IDAuNCxcbiAgICAgICAgICAgIGVhc2U6IGVhc2luZyxcbiAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBzbGlkZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU2xpZGVJbmRleCA9IFsuLi50aGlzLnNsaWRlc10uZmluZEluZGV4KGVsID0+IGVsID09PSBzbGlkZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSB1cGRhdGVBcnJvd3MoKTogdm9pZCB7XG4gICAgICAgICh0aGlzLmFycm93UHJldi5xdWVyeVNlbGVjdG9yKCcuanMtdGV4dCcpIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQgPSBgMCR7dGhpcy5hY3RpdmVTbGlkZUluZGV4fWA7XG4gICAgICAgICh0aGlzLmFycm93TmV4dC5xdWVyeVNlbGVjdG9yKCcuanMtdGV4dCcpIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQgPSBgMCR7dGhpcy5hY3RpdmVTbGlkZUluZGV4ICsgMn1gO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy5hY3RpdmVTbGlkZUluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLWZpcnN0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWxhc3QnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5zbGlkZXMubGVuZ3RoIC0gMTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZmlyc3QnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtbGFzdCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZmlyc3QnLCAnaXMtbGFzdCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuLi8uLi9VdGlscyc7XG5cbmRlY2xhcmUgbGV0IFNjcm9sbFRvUGx1Z2luO1xuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUb1BsdWdpbik7XG5cbmV4cG9ydCBjbGFzcyBMaWdodGJveFRyYW5zY3JpcHQgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgcHJpdmF0ZSBzZWFyY2hGb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzZWFyY2hJbnB1dDogSFRNTElucHV0RWxlbWVudDtcbiAgICBwcml2YXRlIGlucHV0V3JhcDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBmYWtlU3BhbjogSFRNTFNwYW5FbGVtZW50O1xuICAgIHByaXZhdGUgbGFuZ0J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsYW5nV3JhcHBlcnM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xuICAgIHByaXZhdGUgaXNNYWluTGFuZyA9IHRydWU7XG4gICAgcHJpdmF0ZSBhY3RpdmVMYW5ndWFnZVdyYXA6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgZm91bmRFbGVtZW50czogTm9kZUxpc3RPZjxIVE1MRWxlbWVudD47XG4gICAgcHJpdmF0ZSB0cmFuc2NyaXB0TmF2aWdhdGlvbjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50TWFya0luZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSB0cmFuc2NyaXB0TmF2TmV4dEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0cmFuc2NyaXB0TmF2UHJldkJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0cmFuc2NyaXB0TmF2Q2xvc2VCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHByaXZhdGUgdHJhbnNjcmlwdFNjcm9sbENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIodmlldyk7XG5cbiAgICAgICAgdGhpcy5zZWFyY2hGb3JtID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy10cmFuc2NyaXB0LXNlYXJjaCcpO1xuICAgICAgICB0aGlzLmlucHV0V3JhcCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdHJhbnNjcmlwdC1pbnB1dC13cmFwJyk7XG4gICAgICAgIHRoaXMuc2VhcmNoSW5wdXQgPSB0aGlzLnNlYXJjaEZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgICAgdGhpcy5mYWtlU3BhbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdHJhbnNjcmlwdC1zcGFuJyk7XG4gICAgICAgIHRoaXMubGFuZ0J1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdHJhbnNjcmlwdC1zd2l0Y2gnKTtcbiAgICAgICAgdGhpcy5sYW5nV3JhcHBlcnMgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvckFsbCgnLmpzLXRyYW5zY3JpcHQtbGFuZycpO1xuICAgICAgICB0aGlzLmFjdGl2ZUxhbmd1YWdlV3JhcCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdHJhbnNjcmlwdC1sYW5nLmlzLWFjdGl2ZScpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHROYXZpZ2F0aW9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy10cmFuc2NyaXB0LW5hdicpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHROYXZOZXh0QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy10cmFuc2NyaXB0LW5leHQnKTtcbiAgICAgICAgdGhpcy50cmFuc2NyaXB0TmF2UHJldkJ1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdHJhbnNjcmlwdC1wcmV2Jyk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdE5hdkNsb3NlQnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy10cmFuc2NyaXB0LWNsb3NlJyk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdFNjcm9sbENvbnRhaW5lciA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtc2Nyb2xsZWQnKTtcblxuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGJpbmQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBlID0+IHRoaXMub25LZXlVcChlKSk7XG4gICAgICAgIHRoaXMuc2VhcmNoRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHRoaXMub25TdWJtaXQoZSkpO1xuICAgICAgICB0aGlzLmxhbmdCdXR0b24gJiYgdGhpcy5sYW5nQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkxhbmdCdXR0b25DbGljayk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdE5hdk5leHRCdXR0b24gJiYgdGhpcy50cmFuc2NyaXB0TmF2TmV4dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZ29UbygxKSk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdE5hdlByZXZCdXR0b24gJiYgdGhpcy50cmFuc2NyaXB0TmF2UHJldkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZ29UbygtMSkpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHROYXZDbG9zZUJ1dHRvbiAmJiB0aGlzLnRyYW5zY3JpcHROYXZDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VOYXYpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvbktleVVwID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgLy8gZmFrZSBzcGFuIGlzIGNyZWF0ZWQgdG8gbWVhc3VyZSBpdHMnIHdpZHRoICYgdXBkYXRlIGlucHV0J3Mgd2lkdGggZHluYW1pY2FsbHlcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZTogc3RyaW5nID0gdGhpcy5zZWFyY2hJbnB1dC52YWx1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVJbnB1dChpbnB1dFZhbHVlKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgdXBkYXRlSW5wdXQgPSAodmFsdWU6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmZha2VTcGFuLmlubmVyVGV4dCA9IHZhbHVlO1xuICAgICAgICBjb25zdCBzcGFuV2lkdGggPSB0aGlzLmZha2VTcGFuLnNjcm9sbFdpZHRoO1xuICAgICAgICB0aGlzLmlucHV0V3JhcC5zdHlsZS53aWR0aCA9IGAke3NwYW5XaWR0aH1weGA7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGdvVG8gPSAoZGlyOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWFya0luZGV4ICs9IGRpcjtcblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFya0luZGV4ID4gdGhpcy5mb3VuZEVsZW1lbnRzLmxlbmd0aCkgdGhpcy5jdXJyZW50TWFya0luZGV4ID0gMTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hcmtJbmRleCA8IDEpIHRoaXMuY3VycmVudE1hcmtJbmRleCA9IHRoaXMuZm91bmRFbGVtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMudXBkYXRlVHJhbnNjcmlwdE5hdigpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBjbG9zZU5hdiA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy50cmFuc2NyaXB0TmF2aWdhdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgdGhpcy5zZWFyY2hJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICB0aGlzLnVwZGF0ZUlucHV0KCcnKTtcbiAgICAgICAgdGhpcy5jbGVhck1hcmtlZEVsZW1lbnRzKCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uU3VibWl0ID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmZpbmRXb3JkSW5UcmFuc2NyaXB0KCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGZpbmRXb3JkSW5UcmFuc2NyaXB0ID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAvLyBnZXQgc2VhcmNoIHZhbHVlXG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWU6IHN0cmluZyA9IHRoaXMuc2VhcmNoSW5wdXQudmFsdWU7XG5cbiAgICAgICAgLy8gZmluZCBhbGwgc2VhcmNoIHZhbHVlJ3MgcmVzdWx0cyBpbiB0cmFuc2NyaXB0IHRleHQsIGFuZCB3cmFwIGVhY2ggaW4gPG1hcms+IHRhZyB0byBoaWdobGlnaHRcbiAgICAgICAgY29uc3Qgc2VhcmNoRWxlbWVudHM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gdGhpcy5hY3RpdmVMYW5ndWFnZVdyYXAucXVlcnlTZWxlY3RvckFsbCgnLnRyYW5zY3JpcHRfX3RleHQnKTtcbiAgICAgICAgWy4uLnNlYXJjaEVsZW1lbnRzXS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICAgICAgZWxlbS5pbm5lckhUTUwgPSBlbGVtLmlubmVySFRNTC5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7aW5wdXRWYWx1ZX0oPyEoW148XSspPzwpYCwgJ2dpJyksICc8bWFyaz4kJjwvbWFyaz4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc3RvcmUgYWxsIGZvdW5kIHdvcmRzXG4gICAgICAgIHRoaXMuZm91bmRFbGVtZW50cyA9IHRoaXMuYWN0aXZlTGFuZ3VhZ2VXcmFwLnF1ZXJ5U2VsZWN0b3JBbGwoJ21hcmsnKTtcblxuICAgICAgICAvLyBpZiBmb3VuZCBhbnkgd29yZHMsIGRlY2xhcmUgd29yZHMnIGNvdW50ZXIgYW5kIHNob3cgbmF2XG4gICAgICAgIGlmICh0aGlzLmZvdW5kRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zY3JpcHROYXZpZ2F0aW9uLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFya0luZGV4ID0gMTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVHJhbnNjcmlwdE5hdigpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIHVwZGF0ZVRyYW5zY3JpcHROYXYgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIC8vIHVwZGF0ZSBuYXYgbnVtYmVyc1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHROYXZpZ2F0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy10cmFuc2NyaXB0LWNvdW50ZXJzJykuaW5uZXJIVE1MID0gYCR7dGhpcy5jdXJyZW50TWFya0luZGV4fS8ke3RoaXMuZm91bmRFbGVtZW50cy5sZW5ndGh9YDtcblxuICAgICAgICAvLyBmaW5kIGN1cnJlbnQgc2VsZWN0ZWQgaXRlbSBhbmQgc2Nyb2xsIHRvIGl0XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkTWFyayA9IHRoaXMuZm91bmRFbGVtZW50c1t0aGlzLmN1cnJlbnRNYXJrSW5kZXggLSAxXTtcbiAgICAgICAgZ3NhcC50byh0aGlzLnRyYW5zY3JpcHRTY3JvbGxDb250YWluZXIsIHtcbiAgICAgICAgICAgIHNjcm9sbFRvOiB7XG4gICAgICAgICAgICAgICAgeTogc2VsZWN0ZWRNYXJrLFxuICAgICAgICAgICAgICAgIG9mZnNldFk6IHRoaXMuc2VhcmNoRm9ybS5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHVyYXRpb246IDAuMDEsXG4gICAgICAgICAgICBlYXNlOiAncG93ZXIzLmluT3V0JyxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uTGFuZ0J1dHRvbkNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgLy8gZ2V0IGF0dHJpYnV0ZXMgZnJvbSBidXR0b24gdG8gc3dpdGNoIGxhbmd1YWdlc1xuICAgICAgICBjb25zdCBidXR0b24gPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGNvbnN0IG9sZFNsdWcgPSBidXR0b24uZ2V0QXR0cmlidXRlKGBkYXRhLSR7IXRoaXMuaXNNYWluTGFuZyA/ICdhbHRlcm5hdGUnIDogJ21haW4nfS1sYW5nYCk7XG4gICAgICAgIGNvbnN0IG5ld1NsdWcgPSBidXR0b24uZ2V0QXR0cmlidXRlKGBkYXRhLSR7dGhpcy5pc01haW5MYW5nID8gJ2FsdGVybmF0ZScgOiAnbWFpbid9LWxhbmdgKTtcblxuICAgICAgICAvLyBzZXQgb2xkIGxhbmd1YWdlIGFzIGJ1dHRvbnMndGV4dFxuICAgICAgICBidXR0b24uaW5uZXJUZXh0ID0gb2xkU2x1ZztcblxuICAgICAgICB0aGlzLmlzTWFpbkxhbmcgPSAhdGhpcy5pc01haW5MYW5nO1xuXG4gICAgICAgIC8vIGhpZGUgb2xkIGxhbmcgd3JhcHBlciBhbmQgc2hvdyB0aGUgbmV3IG9uZVxuICAgICAgICB0aGlzLmFjdGl2ZUxhbmd1YWdlV3JhcC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcblxuICAgICAgICBjb25zdCBuZXdBY3RpdmVXcmFwID0gWy4uLnRoaXMubGFuZ1dyYXBwZXJzXS5maW5kKHdyYXAgPT4gd3JhcC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGFuZycpID09PSBuZXdTbHVnKTtcbiAgICAgICAgbmV3QWN0aXZlV3JhcC5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgdGhpcy5hY3RpdmVMYW5ndWFnZVdyYXAgPSBuZXdBY3RpdmVXcmFwO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBjbGVhck1hcmtlZEVsZW1lbnRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuZm91bmRFbGVtZW50cy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgWy4uLnRoaXMuZm91bmRFbGVtZW50c10uZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICAgIGVsZW0ucmVwbGFjZVdpdGgoVXRpbHMucmVtb3ZlVGFncyhlbGVtLmlubmVySFRNTCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mb3VuZEVsZW1lbnRzID0gbnVsbDtcbiAgICB9O1xufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9kaXN0L1Njcm9sbFRyaWdnZXInO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuLi9TY3JvbGwnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vVXRpbHMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRFdmVudHMgfSBmcm9tICcuL0NvbXBvbmVudCc7XG5pbXBvcnQgeyBQdXNoU3RhdGVzIH0gZnJvbSAnLi4vUHVzaFN0YXRlcyc7XG5cbmludGVyZmFjZSBJTG9hZFNldHRpbmdzIHtcbiAgICBjb250ZW50U2VsZWN0b3I/OiBzdHJpbmc7XG4gICAgbGl2ZT86IGJvb2xlYW47IC8vIGxpdmUgcmVsb2FkIG9uIGZvcm0gY2hhbmdlIGV2ZW50c1xuICAgIGV4dHJhPzogc3RyaW5nOyAvLyBhZGRpdGlvbmFsIGZvcm0gdG8gcGFyc2VcbiAgICB0b3RhbD86IHN0cmluZzsgLy8gdXBkYXRpbmcgdG90YWwgdmFsdWUgb24gZmlsdGVycycgY2hhbmdlXG4gICAgZmlsdGVyZWQ/OiBzdHJpbmc7IC8vIHNob3cgZmlsdGVyZWQgaXRlbXMnIGxpc3RcbiAgICBzY3JvbGxUbz86IHN0cmluZzsgLy8gc2Nyb2xsIHRvIGdpdmVuIGVsZW1lbnQgd2hlbiByZWxvYWRpbmcgZmlsdGVyc1xufVxuXG5cbi8qIFRoaXMgY2FuIGJlIHVzZWQgb24gZm9ybSBvciBhbnkgb3RoZXIgZWxlbWVudFxuICogdG8gbG9hZCBodG1sIGRhdGEgdG8gc3BlY2lmaWVkIGNvbnRhaW5lciAqL1xuXG5leHBvcnQgY2xhc3MgTG9hZCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBwcml2YXRlIGlzUGVuZGluZyA9IGZhbHNlO1xuICAgIHByaXZhdGUgaXNGaW5pc2hlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgc2V0dGluZ3M6IElMb2FkU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBpc0NvbnRlbnRIaWRkZW46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0b3RhbEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgbGl2ZVRpbWVvdXQ7XG4gICAgcHJpdmF0ZSB2aWV3c0J1dHRvbnM6IE5vZGVMaXN0T2Y8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuICAgIHByaXZhdGUgZmlsdGVyZWRFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZXNldEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcih2aWV3KTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLmpzLWxvYWQtY29udGVudCcsXG4gICAgICAgICAgICBsaXZlOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih0aGlzLnNldHRpbmdzLCBKU09OLnBhcnNlKHRoaXMudmlldy5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9ucycpKSk7XG5cbiAgICAgICAgdGhpcy5pc0NvbnRlbnRIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5ncy5jb250ZW50U2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnZpZXdzQnV0dG9ucyA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12aWV3XScpO1xuICAgICAgICB0aGlzLnJlc2V0QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1yZXNldCcpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRvdGFsKSB0aGlzLnRvdGFsRWxlbWVudCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3MudG90YWwpO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5maWx0ZXJlZCkgdGhpcy5maWx0ZXJlZEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNldHRpbmdzLmZpbHRlcmVkKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkKCk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgYmluZCgpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLnZpZXcuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5vblN1Ym1pdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubGl2ZSkge1xuICAgICAgICAgICAgWy4uLnRoaXMudmlldy5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgc2VsZWN0JyldLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmxpdmVUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXZlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5vblN1Ym1pdCwgMTApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBbLi4udGhpcy52aWV3c0J1dHRvbnNdLmZvckVhY2goYnRuID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25WaWV3QnRuQ2xpY2spKTtcbiAgICAgICAgdGhpcy5yZXNldEJ1dHRvbiAmJiB0aGlzLnJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblJlc2V0KTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIGhpZGVDb250ZW50KCk6IFByb21pc2U8dm9pZD4ge1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0NvbnRlbnRIaWRkZW4pIHtcbiAgICAgICAgICAgICAgICBnc2FwLnRvKHRoaXMuY29udGVudEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMjUsXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6ICdzaW5lJyxcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NvbnRlbnRIaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgc2hvd0NvbnRlbnQgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuaXNDb250ZW50SGlkZGVuID0gZmFsc2U7XG4gICAgICAgIGdzYXAuZnJvbVRvKHRoaXMuY29udGVudEVsZW1lbnQsIHsgb3BhY2l0eTogMCB9LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuNDUsXG4gICAgICAgICAgICBlYXNlOiAnc2luZScsXG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uVmlld0J0bkNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50VGFyZ2V0OiBidXR0b24gfSA9IGU7XG4gICAgICAgIGNvbnN0IHsgdmlldyB9ID0gYnV0dG9uLmRhdGFzZXQ7XG4gICAgICAgIHRoaXMuaGlkZUNvbnRlbnQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbGlzdC12aWV3JywgJ2lzLWdyaWQtdmlldycpO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKGBpcy0ke3ZpZXd9LXZpZXdgKTtcbiAgICAgICAgfSkudGhlbih0aGlzLnNob3dDb250ZW50KTtcbiAgICB9O1xuXG5cblxuICAgIHByb3RlY3RlZCBsb2FkKHVybCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoISF0aGlzLmlzUGVuZGluZyB8fCAhIXRoaXMuaXNGaW5pc2hlZCkgeyByZXR1cm47IH1cblxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMubGl2ZVRpbWVvdXQpO1xuICAgICAgICB0aGlzLmlzUGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QuYWRkKCdpcy1wZW5kaW5nJyk7XG4gICAgICAgIFB1c2hTdGF0ZXMuY2hhbmdlUGF0aCh1cmwsIHRydWUpO1xuICAgICAgICBTY3JvbGxUcmlnZ2VyLnJlZnJlc2goKTtcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5maWx0ZXJlZCkgdGhpcy51cGRhdGVGaWx0ZXJlZCgpO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zY3JvbGxUbykgdGhpcy5zY3JvbGxUb0NvbnRhaW5lcigpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgICAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCcgfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuc2V0dGluZ3MuY29udGVudFNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIG5ld0Rpdi5pbm5lckhUTUwgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbExvYWRlZENvbnRlbnQgPSBuZXdEaXYucXVlcnlTZWxlY3RvcihzZWxlY3RvcikuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQuaW5uZXJIVE1MID0gZWxMb2FkZWRDb250ZW50O1xuXG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdG90YWwgaW4gZmlsdGVyc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRvdGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gbmV3RGl2LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5ncy50b3RhbCkuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsRWxlbWVudC5pbm5lckhUTUwgPSB0b3RhbDtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihDb21wb25lbnRFdmVudHMuQ0hBTkdFLCB0aGlzLmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgZXJyb3I6ICR7ZXJyb3J9YCwgZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtcGVuZGluZycpO1xuICAgICAgICAgICAgICAgIFNjcm9sbFRyaWdnZXIucmVmcmVzaCgpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgMjUwKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBvblN1Ym1pdCA9IChlPyk6IHZvaWQgPT4ge1xuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxvYWRQYXRoID0gdGhpcy52aWV3LmdldEF0dHJpYnV0ZSgnYWN0aW9uJykgfHwgdGhpcy52aWV3LmRhdGFzZXQuYXBpIHx8IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcblxuICAgICAgICBjb25zdCBleHRyYUZvcm1zID0gdGhpcy5zZXR0aW5ncy5leHRyYSA/IChbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNldHRpbmdzLmV4dHJhKV0gYXMgSFRNTEZvcm1FbGVtZW50W10pIDogbnVsbDtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBVdGlscy5nZXRRdWVyeVN0cmluZyhbLi4uZXh0cmFGb3JtcywgdGhpcy52aWV3IGFzIEhUTUxGb3JtRWxlbWVudF0pO1xuXG4gICAgICAgIGlmIChmb3JtRGF0YSkge1xuICAgICAgICAgICAgbG9hZFBhdGggKz0gYD8ke2Zvcm1EYXRhfWA7XG4gICAgICAgIH1cblxuICAgICAgICBQcm9taXNlLmFsbChbdGhpcy5oaWRlQ29udGVudCgpLCB0aGlzLmxvYWQobG9hZFBhdGgpXSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3dDb250ZW50KCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSB1cGRhdGVGaWx0ZXJlZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgLy8gdXBkYXRpbmcgb24gZnJvbnQgc2lkZSBiZWNhdXNlIHJlc3BvbnNlIGlzIGFsd2F5cyBpbiBodG1sXG5cbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcmVkRWwpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzZWxlY3RlZElucHV0czogSFRNTElucHV0RWxlbWVudFtdID0gWy4uLnRoaXMudmlldy5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpXS5maWx0ZXIoaW5wdXQgPT4gaW5wdXQuY2hlY2tlZCk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkSXRlbXMgPSBzZWxlY3RlZElucHV0cy5tYXAoaW5wdXQgPT4gYFxuICAgICAgICAgICAgPGxpIGNsYXNzPVwiZmlsdGVyZWRfX2xhYmVsXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIiR7aW5wdXQuaWR9XCI+JHtpbnB1dC5kYXRhc2V0Lm5hbWV9PGkgY2xhc3M9XCJpY29uLWNsb3NlXCI+PC9pPjwvbGFiZWw+XG4gICAgICAgICAgICA8L2xpPmApO1xuICAgICAgICB0aGlzLmZpbHRlcmVkRWwuaW5uZXJIVE1MID0gZmlsdGVyZWRJdGVtcy5qb2luKCcnKTtcbiAgICAgICAgdGhpcy5iaW5kRmlsdGVyZWQoKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgYmluZEZpbHRlcmVkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICAvLyB3aGVuIGxpdmU9dHJ1ZSwgdGhlcmUncyBubyBuZWVkIHRvIHRyaWdnZXIgc3VibWl0IG1hbnVhbGx5IC0gZm9ybSBzdWJtaXRzIG9uIGVhY2ggY2hhbmdlXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxpdmUpIHJldHVybjtcblxuICAgICAgICAvLyBmb3JjZSBmb3JtIHN1Ym1pdCBvbiBlYWNoIGZpbHRlcmVkIGxhYmVsIGNsaWNrXG4gICAgICAgIFsuLi50aGlzLmZpbHRlcmVkRWwucXVlcnlTZWxlY3RvckFsbCgnbGFiZWwnKV0uZm9yRWFjaChsYWJlbCA9PiBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIC8vIHN1Ym1pdCBuZWVkcyB0byBiZSB0cmlnZ2VyZWQgbWFudWFsbHkgZm9yIGNsb3NpbmcgbW9kYWwgb24gc3VibWl0IGV2ZW50XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudmlldy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnc3VibWl0JykpLCAxMCk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgc2Nyb2xsVG9Db250YWluZXIgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3Muc2Nyb2xsVG8pIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBpZiAoIWVsZW0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGVsZW1lbnQgJHt0aGlzLnNldHRpbmdzLnNjcm9sbFRvfSBkb2Vzbid0IGV4aXN0IWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgU2Nyb2xsLnNjcm9sbFRvKHtcbiAgICAgICAgICAgIGVsOiBlbGVtLFxuICAgICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvblJlc2V0ID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBbLi4udGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JyldLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9Db21wb25lbnQnO1xuaW1wb3J0IFNjcm9sbCBmcm9tICcuLi9TY3JvbGwnO1xuXG5cbmV4cG9ydCBjbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBwcml2YXRlIHRyaWdnZXJCdG46IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHByaXZhdGUgY2xvc2VyQnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGZvcm06IEhUTUxGb3JtRWxlbWVudDtcbiAgICBwcml2YXRlIGlzT3BlbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHZpZXc6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKHZpZXcpO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlckJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFthcmlhLWNvbnRyb2xzPVwiJHt0aGlzLnZpZXcuaWR9XCJdYCk7XG4gICAgICAgIHRoaXMuY2xvc2VyQnRuID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tb2RhbC1jbG9zZScpO1xuICAgICAgICB0aGlzLmZvcm0gPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignZm9ybScpO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyQnRuICYmIHRoaXMudHJpZ2dlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25UcmlnZ2VyQ2xpY2spO1xuICAgICAgICB0aGlzLmZvcm0gJiYgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuY2xvc2UpO1xuICAgICAgICB0aGlzLmNsb3NlckJ0biAmJiB0aGlzLmNsb3NlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2UpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIG9uVHJpZ2dlckNsaWNrID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmlzT3BlbiA/IHRoaXMuY2xvc2UoKSA6IHRoaXMub3BlbigpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBjbG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW9wZW4nKTtcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb3BlbiA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLW9wZW4nKTtcbiAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICBTY3JvbGwuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgZWw6IHRoaXMudmlldyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjc1LFxuICAgICAgICAgICAgZWFzZTogJ3NpbmUub3V0JyxcbiAgICAgICAgICAgIG9mZnNldFk6IHRoaXMudmlldy5wYXJlbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbiIsImltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gJ2dzYXAvZGlzdC9TY3JvbGxUcmlnZ2VyJztcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50RXZlbnRzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db21wb25lbnQnO1xuaW1wb3J0IHsgZWFzaW5nIH0gZnJvbSAnLi4vU2l0ZSc7XG5pbXBvcnQgeyBQdXNoU3RhdGVzIH0gZnJvbSAnLi4vUHVzaFN0YXRlcyc7XG5pbXBvcnQgV2lkZ2V0cyBmcm9tICcuLi93aWRnZXRzL0FsbCc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJTW9yZVNldHRpbmdzIHtcbiAgICBjb250ZW50U2VsZWN0b3I/OiBzdHJpbmc7XG4gICAgaXRlbVNlbGVjdG9yPzogc3RyaW5nO1xuICAgIGluZmluaXRlPzogYm9vbGVhbjtcbiAgICB1cGRhdGVVUkw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgTW9yZSBleHRlbmRzIENvbXBvbmVudCB7XG5cblxuICAgIHByaXZhdGUgc2V0dGluZ3M6IElNb3JlU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBjb250ZW50RWw6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgcGVuZGluZzogYm9vbGVhbjtcbiAgICBwcml2YXRlIHNjcm9sbFRyaWdnZXI6IFNjcm9sbFRyaWdnZXI7XG4gICAgcHJpdmF0ZSBsaW5rRWw6IEhUTUxBbmNob3JFbGVtZW50O1xuXG5cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcih2aWV3KTtcblxuICAgICAgICB0aGlzLmxpbmtFbCA9ICh0aGlzLnZpZXcubm9kZU5hbWUgPT09ICdBJykgPyB0aGlzLnZpZXcgYXMgSFRNTEFuY2hvckVsZW1lbnQgOiB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignYScpO1xuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBpdGVtU2VsZWN0b3I6ICdsaScsXG4gICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICB1cGRhdGVVUkw6IGZhbHNlLFxuICAgICAgICAgICAgLi4uSlNPTi5wYXJzZSh0aGlzLnZpZXcuZGF0YXNldC5vcHRpb25zKSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5ncy5jb250ZW50U2VsZWN0b3IpO1xuXG4gICAgICAgIC8vIGNoZWNrIG11c3QtaGF2ZSBvcHRpb25zOlxuICAgICAgICBjb25zb2xlLmFzc2VydCghIXRoaXMuY29udGVudEVsLCAnVGhlcmUgaXMgbm8gd3JhcCBlbGVtZW50IHRvIGxvYWQgbW9yZSBjb250ZW50IScsIHRydWUpO1xuXG4gICAgICAgIGlmICghdGhpcy5jb250ZW50RWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmluZCBjbGljazpcbiAgICAgICAgdGhpcy5saW5rRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuXG4gICAgICAgIC8vIGJpbmQgaW5maW5pdGUgc2Nyb2xsOlxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5pbmZpbml0ZSkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUcmlnZ2VyID0gU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRoaXMudmlldyxcbiAgICAgICAgICAgICAgICBzdGFydDogJ2JvdHRvbSBib3R0b20nLFxuICAgICAgICAgICAgICAgIG9uRW50ZXI6ICgpID0+IHRoaXMubG9hZCgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVHJpZ2dlcj8ua2lsbCgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcblxuICAgICAgICBpZiAodGhpcy5wZW5kaW5nKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5saW5rRWwuaHJlZjtcbiAgICAgICAgY29uc3QgdGllID0gdXJsLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJic7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoeyBwYXJ0aWFsOiAndHJ1ZScgfSk7XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLWRvaW5nLXJlcXVlc3QnKTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzLnVwZGF0ZVVSTCAmJiBQdXNoU3RhdGVzLmNoYW5nZVBhdGgodXJsKTtcblxuICAgICAgICAvLyBzZW5kIEFQSSByZXF1ZXN0XG4gICAgICAgIGZldGNoKHVybCArIHRpZSArIHBhcmFtcywge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuc2V0dGluZ3MuY29udGVudFNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgLy8gbWFyayBleGlzdGluZyBpdGVtcyB0byBub3QgYW5pbWF0ZSB0aGVtIGxhdGVyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJdGVtcyA9IHRoaXMuY29udGVudEVsLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZXR0aW5ncy5pdGVtU2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIFsuLi5leGlzdGluZ0l0ZW1zXS5tYXAoaSA9PiBpLmNsYXNzTGlzdC5hZGQoJ2lzLWV4aXN0aW5nJykpO1xuXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgY3VycmVudCBoZWlnaHRcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgbmV3IGh0bWwgZnJvbSByZXNwb25zZSB0byBjb250ZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBuZXdEaXYuaW5uZXJIVE1MID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxMb2FkZWRDb250ZW50ID0gbmV3RGl2LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGVsTG9hZGVkQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgYnV0dG9uXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLnZpZXcuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0J1dHRvbjogSFRNTExpbmtFbGVtZW50ID0gbmV3RGl2LnF1ZXJ5U2VsZWN0b3IoaWQgPyBgIyR7aWR9YCA6ICdbZGF0YS1jb21wb25lbnQ9XCJNb3JlXCJdIGEnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdVUkwgPSBuZXdCdXR0b24/LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdCdXR0b24gJiYgbmV3VVJMICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtFbC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBuZXdVUkwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRyaWdnZXI/LnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVHJpZ2dlcj8ua2lsbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihDb21wb25lbnRFdmVudHMuQ0hBTkdFLCB0aGlzLmNvbnRlbnRFbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBuZXcgaXRlbXMnIGFuaW1hdGlvbiAtIGV4Y2x1ZGluZyBpdGVtcyB0aGF0IHdlcmUgYWRkZWQgdG8gY29udGVudCBlYXJsaWVyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKGAke3RoaXMuc2V0dGluZ3MuaXRlbVNlbGVjdG9yfTpub3QoLmlzLWV4aXN0aW5nKWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRsID0gZ3NhcC50aW1lbGluZSgpO1xuICAgICAgICAgICAgICAgIFsuLi5pdGVtc10uZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGwuZnJvbShpdGVtLCB7IG9wYWNpdHk6IDAsIGR1cmF0aW9uOiAwLjUsIHk6IDUwLCBlYXNlOiBlYXNpbmcgfSwgaW5kZXggKiAwLjEpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gYW5pbWF0ZSBoZWlnaHRcbiAgICAgICAgICAgICAgICBnc2FwLmZyb21Ubyh0aGlzLmNvbnRlbnRFbCwgeyBoZWlnaHQgfSwge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNCxcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBlcnJvcjogJHtlcnJvcn1gLCBlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kb2luZy1yZXF1ZXN0Jyk7XG4gICAgICAgICAgICAgICAgLy8gYmluZCB3aWRnZXRzXG4gICAgICAgICAgICAgICAgV2lkZ2V0cy5iaW5kKCk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgMjUwKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIG9uQ2xpY2sgPSAoZTogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgcGFyc2VUb1RpbWUgfSBmcm9tICcuL1BsYXllci51dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJUaW1lIHtcblxuXG4gICAgcHJpdmF0ZSBkdXJhdGlvblRpbWVFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50VGltZUVsOiBIVE1MRWxlbWVudDtcblxuXG5cbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZUVsID0gcGxheWVyRWwucXVlcnlTZWxlY3RvcignLmpzLXBsYXllci10aW1lJyk7XG4gICAgICAgIHRoaXMuZHVyYXRpb25UaW1lRWwgPSBwbGF5ZXJFbC5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWR1cmF0aW9uJyk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lRWwgPSBudWxsO1xuICAgICAgICB0aGlzLmR1cmF0aW9uVGltZUVsID0gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHVwZGF0ZShtZXRhZGF0YTogeyBkdXJhdGlvbjogbnVtYmVyLCBjdXJyZW50PzogbnVtYmVyIH0sIGlzTG9uZz86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25UaW1lRWwpIHtcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb25UaW1lRWwuaW5uZXJUZXh0ID0gcGFyc2VUb1RpbWUobWV0YWRhdGEuZHVyYXRpb24sIGlzTG9uZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFRpbWVFbCAmJiB0eXBlb2YgbWV0YWRhdGEuY3VycmVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWVFbC5pbm5lclRleHQgPSBwYXJzZVRvVGltZShtZXRhZGF0YS5jdXJyZW50IHx8IDAsIGlzTG9uZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSAnZ3NhcC9kaXN0L1Njcm9sbFRyaWdnZXInO1xuXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vLi4vVXRpbHMnO1xuaW1wb3J0IHsgSVBsYXllclNldHRpbmdzLCBQbGF5ZXJFdmVudHMsIFBsYXllclNpemUgfSBmcm9tICcuL1BsYXllci50eXBlcyc7XG5pbXBvcnQgeyBQbGF5ZXJUaW1lbGluZSwgUGxheWVyVGltZWxpbmVFdmVudHMgfSBmcm9tICcuL1BsYXllclRpbWVsaW5lJztcbmltcG9ydCB7IFBsYXllclBvcHVwcyB9IGZyb20gJy4vUGxheWVyUG9wdXBzJztcbmltcG9ydCB7IFBsYXllclRpbWUgfSBmcm9tICcuL1BsYXllci5UaW1lJztcbmltcG9ydCB7IFBsYXllclBvc3RlciB9IGZyb20gJy4vUGxheWVyUG9zdGVyJztcbmltcG9ydCB7IFBsYXllclZvbHVtZSwgUGxheWVyVm9sdW1lRXZlbnRzIH0gZnJvbSAnLi9QbGF5ZXJWb2x1bWUnO1xuaW1wb3J0IHsgUGxheWVyRnVsbHNjcmVlbiwgUGxheWVyRnVsbHNjcmVlbkV2ZW50cyB9IGZyb20gJy4vUGxheWVyRnVsbHNjcmVlbic7XG5pbXBvcnQgeyBWaWRlb0NhcHRpb25zIH0gZnJvbSAnLi9WaWRlb0NhcHRpb25zJztcbmltcG9ydCB7IFBsYXllclN0b3JhZ2UgfSBmcm9tICcuL1ZpZGVvLnR5cGVzJztcbmltcG9ydCB7IFBsYXllclNldHRpbmdzLCBQbGF5ZXJTZXR0aW5nc0V2ZW50cyB9IGZyb20gJy4vUGxheWVyU2V0dGluZ3MnO1xuaW1wb3J0IHsgVGVtcGxhdGVzLCBUZW1wbGF0ZU5hbWVzIH0gZnJvbSAnLi4vLi4vdGVtcGxhdGVzL1RlbXBsYXRlcyc7XG5pbXBvcnQgeyBQdXNoU3RhdGVzIH0gZnJvbSAnLi4vLi4vUHVzaFN0YXRlcyc7XG5cblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgcHVibGljIHN0YXRpYyBpbnN0YW5jZXM6IHsgW2tleTogc3RyaW5nXTogUGxheWVyIH0gPSB7fTtcblxuXG4gICAgLy8gcGF1c2UgYWxsIGluc3RhbmNlcyBvZiBQbGF5ZXIgY2xhc3M6XG4gICAgc3RhdGljIHBhdXNlQWxsKG9taXRVSUQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGZvciAoY29uc3QgdWlkIGluIFBsYXllci5pbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb21pdFVJRCA9PT0gJ3VuZGVmaW5lZCcgfHwgb21pdFVJRCAhPT0gdWlkKSB7XG4gICAgICAgICAgICAgICAgUGxheWVyLmluc3RhbmNlc1t1aWRdLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIHBhdXNlIGFsbCBpbnN0YW5jZXMgb2YgUGxheWVyIGNsYXNzIGluc2lkZSBlbGVtZW50OlxuICAgIHN0YXRpYyBwYXVzZUFsbEluKGVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIGd1YXJkLWZvci1pblxuICAgICAgICBmb3IgKGNvbnN0IHVpZCBpbiBQbGF5ZXIuaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gUGxheWVyLmluc3RhbmNlc1t1aWRdO1xuICAgICAgICAgICAgaWYgKGVsLmNvbnRhaW5zKGl0ZW0udmlldykpIHtcbiAgICAgICAgICAgICAgICBpdGVtLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHB1YmxpYyB1c2VyUGF1c2VkID0gZmFsc2U7XG5cbiAgICBwcm90ZWN0ZWQgdWlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIG1lZGlhOiBIVE1MRWxlbWVudDtcbiAgICBwcm90ZWN0ZWQgaXNMb2FkZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzUmVhZHkgPSBmYWxzZTtcbiAgICBwcm90ZWN0ZWQgc2V0dGluZ3M6IElQbGF5ZXJTZXR0aW5ncztcbiAgICBwcm90ZWN0ZWQgd2FzUGF1c2VkID0gZmFsc2U7XG4gICAgcHJvdGVjdGVkIHN0OiBTY3JvbGxUcmlnZ2VyO1xuXG4gICAgcHJvdGVjdGVkIHVpOiB7XG4gICAgICAgIHBvc3Rlcj86IFBsYXllclBvc3RlcjtcbiAgICAgICAgdGltZT86IFBsYXllclRpbWU7XG4gICAgICAgIHRpbWVsaW5lPzogUGxheWVyVGltZWxpbmU7XG4gICAgICAgIHBvcHVwcz86IFBsYXllclBvcHVwcztcbiAgICAgICAgdm9sdW1lPzogUGxheWVyVm9sdW1lO1xuICAgICAgICBzZXR0aW5ncz86IFBsYXllclNldHRpbmdzO1xuICAgICAgICBjYXB0aW9ucz86IFZpZGVvQ2FwdGlvbnM7XG4gICAgICAgIGZ1bGxzY3JlZW4/OiBQbGF5ZXJGdWxsc2NyZWVuO1xuICAgICAgICB0b2dnbGVCdG4/OiBIVE1MRWxlbWVudCxcbiAgICAgICAgcGxheVBhdXNlQnRuPzogSFRNTEVsZW1lbnQsXG4gICAgICAgIGJvdHRvbVBhbmVsPzogSFRNTEVsZW1lbnQsXG4gICAgICAgIHRodW1ibmFpbD86IEhUTUxFbGVtZW50O1xuICAgICAgICBtaW5pbWl6ZT86IEhUTUxFbGVtZW50O1xuICAgICAgICBwbGF5ZXJCYXI/OiBIVE1MRWxlbWVudDtcbiAgICB9O1xuXG5cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCwgb3B0aW9ucz86IE9iamVjdCkge1xuICAgICAgICBzdXBlcih2aWV3KTtcblxuICAgICAgICAvLyBleHRlbmQgc2V0dGluZ3M6XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICBsb29wOiBmYWxzZSxcbiAgICAgICAgICAgIG11dGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgIHZvbHVtZTogMSxcbiAgICAgICAgICAgIHdpZHRoOiA0ODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI3MCxcbiAgICAgICAgICAgIHNpemU6IFBsYXllclNpemUuQVVUTyxcbiAgICAgICAgICAgIHJlYWR5VGltZTogMC4wMDEsXG4gICAgICAgICAgICBob3RrZXlzOiB0cnVlLFxuICAgICAgICAgICAgcGF1c2VPblNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICAuLi5KU09OLnBhcnNlKHZpZXcuZGF0YXNldC5vcHRpb25zIHx8ICd7fScpLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZW5lcmF0ZSB1bmlxdWUgaWQ6XG4gICAgICAgIHRoaXMudWlkID0gVXRpbHMuZ2VuZXJhdGVVSUQoKTtcblxuICAgICAgICAvLyBzZXR1cDpcbiAgICAgICAgdGhpcy5zZXR1cCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgUGxheWVyLmluc3RhbmNlcyA9PT0gJ3VuZGVmaW5lZCcpIHsgUGxheWVyLmluc3RhbmNlcyA9IHt9OyB9XG4gICAgICAgIFBsYXllci5pbnN0YW5jZXNbdGhpcy51aWRdID0gdGhpcztcblxuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgcHVibGljIGFic3RyYWN0IHBsYXkoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcGF1c2UoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgdG9nZ2xlKCk6IGJvb2xlYW47XG4gICAgcHVibGljIGFic3RyYWN0IHNlZWsodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IHRvZ2dsZU11dGUobXV0ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCB1bmxvYWQoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgbG9hZChkYXRhOiBJUGxheWVyU2V0dGluZ3MpOiBhbnkgfCBQcm9taXNlPGFueT47XG4gICAgcHVibGljIGFic3RyYWN0IHByZWxvYWQoKTogUHJvbWlzZTxhbnk+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBza2lwRm9yd2FyZChtb3JlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IHNraXBCYWNrd2FyZChtb3JlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IHJlc3RhcnQoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZW5kKCk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IHZvbHVtZVVwKCk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IHZvbHVtZURvd24oKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3Qgc3BlZWRVcCgpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBzcGVlZERvd24oKTogdm9pZDtcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBpc1BhdXNlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBzZXR1cCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVQbGF5ZXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYmluZFBsYXllcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCB1bmJpbmRQbGF5ZXIoKTogdm9pZDtcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBvbkR1cmF0aW9uQ2hhbmdlKGRhdGE/KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25FcnJvciAoZXJyb3IpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBvblByb2dyZXNzKGRhdGE/KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25UaW1ldXBkYXRlKGRhdGE/KTogdm9pZDtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cblxuICAgIHB1YmxpYyBoaWRlKCk6IHZvaWQgeyB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgfVxuICAgIHB1YmxpYyBzaG93KCk6IHZvaWQgeyB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7IH1cbiAgICBwdWJsaWMgcmVzaXplID0gKCk6IHZvaWQgPT4ge307XG5cbiAgICBwdWJsaWMgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMudWkudm9sdW1lLnVwZGF0ZSh2b2x1bWUpO1xuICAgICAgICB0aGlzLnVpLnZvbHVtZS50b2dnbGUodm9sdW1lIDwgMC4wNSk7XG4gICAgICAgIFV0aWxzLnNldFN0b3JhZ2VJdGVtKFBsYXllclN0b3JhZ2UuVk9MVU1FLCBgJHt2b2x1bWV9YCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFNwZWVkKHNwZWVkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51aS5zZXR0aW5ncz8udXBkYXRlU3BlZWQoc3BlZWQpO1xuICAgICAgICBVdGlscy5zZXRTdG9yYWdlSXRlbShQbGF5ZXJTdG9yYWdlLlNQRUVELCBgJHtzcGVlZH1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgZGVsZXRlIFBsYXllci5pbnN0YW5jZXNbdGhpcy51aWRdO1xuXG4gICAgICAgIGlmICh0aGlzLnVpKSB7XG4gICAgICAgICAgICB0aGlzLnVpLnRpbWU/LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMudWkudGltZWxpbmU/LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMudWkudm9sdW1lPy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnVpLnBvcHVwcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnVpLnNldHRpbmdzPy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnVpLnRpbWUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy51aS50aW1lbGluZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnVpLnZvbHVtZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnVpLnBsYXlQYXVzZUJ0biA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnVpLmJvdHRvbVBhbmVsID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudWkudG9nZ2xlQnRuID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgIHRoaXMudW5sb2FkKCk7XG5cbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgYnVpbGRVSSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBUZW1wbGF0ZXMuZ2V0KFRlbXBsYXRlTmFtZXMuUExBWUVSKTtcbiAgICAgICAgY29uc3QgaHRtbCA9IHRlbXBsYXRlLnJlbmRlcih7fSk7XG5cbiAgICAgICAgdGhpcy52aWV3Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbCk7XG5cbiAgICAgICAgdGhpcy51aSA9IHtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IG5ldyBQbGF5ZXJGdWxsc2NyZWVuKHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWZ1bGxzY3JlZW4nKSwgdGhpcy52aWV3KSxcbiAgICAgICAgICAgIHRpbWVsaW5lOiBuZXcgUGxheWVyVGltZWxpbmUodGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wbGF5ZXItdGltZWxpbmUnKSwgdGhpcy52aWV3KSxcbiAgICAgICAgICAgIHBvcHVwczogbmV3IFBsYXllclBvcHVwcyh0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXBsYXllci1wb3B1cHMnKSksXG4gICAgICAgICAgICB2b2x1bWU6IG5ldyBQbGF5ZXJWb2x1bWUodGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wbGF5ZXItdm9sdW1lJyksIHRoaXMudmlldyksXG4gICAgICAgICAgICB0aW1lOiBuZXcgUGxheWVyVGltZSh0aGlzLnZpZXcpLFxuICAgICAgICAgICAgcG9zdGVyOiBuZXcgUGxheWVyUG9zdGVyKHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLXBvc3RlcicpLCB0aGlzLnZpZXcpLFxuICAgICAgICAgICAgLy8gc2V0dGluZ3M6IG5ldyBQbGF5ZXJTZXR0aW5ncyh0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXBsYXllci1zZXR0aW5ncycpLCB0aGlzLnZpZXcpLFxuICAgICAgICAgICAgYm90dG9tUGFuZWw6IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWJvdHRvbScpLFxuICAgICAgICAgICAgcGxheVBhdXNlQnRuOiB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXBsYXllci1wbGF5cGF1c2UnKSxcbiAgICAgICAgICAgIHRvZ2dsZUJ0bjogdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wbGF5ZXItdG9nZ2xlJyksXG4gICAgICAgICAgICBwbGF5ZXJCYXI6IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWJhcicpLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QudG9nZ2xlKCdoYXMtYXV0b3BsYXknLCB0aGlzLnNldHRpbmdzLmF1dG9wbGF5KTtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC50b2dnbGUoJ2hhcy1hdXRvcGxheScsIHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkpO1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaGFzLWNvbnRyb2xzJyk7XG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncy5tdXRlZCAmJiB0aGlzLnVpLnZvbHVtZT8udG9nZ2xlKHRydWUpO1xuXG4gICAgICAgIC8vIHBvc3RlclxuICAgICAgICB0aGlzLnVpLnBvc3Rlci5sb2FkKHRoaXMuc2V0dGluZ3MpO1xuXG5cbiAgICAgICAgUHVzaFN0YXRlcy5iaW5kKHRoaXMudmlldyk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBiaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVpLnRpbWVsaW5lPy5vbihQbGF5ZXJUaW1lbGluZUV2ZW50cy5TRUVLLCAocG9zaXRpb246IG51bWJlcikgPT4gdGhpcy5zZWVrKHBvc2l0aW9uKSk7XG4gICAgICAgIHRoaXMudWkudm9sdW1lPy5vbihQbGF5ZXJWb2x1bWVFdmVudHMuQ0hBTkdFLCAodm9sdW1lOiBudW1iZXIpID0+IHRoaXMuc2V0Vm9sdW1lKHZvbHVtZSkpO1xuICAgICAgICB0aGlzLnVpLnZvbHVtZT8ub24oUGxheWVyVm9sdW1lRXZlbnRzLk1VVEUsICgpID0+IHRoaXMudG9nZ2xlTXV0ZSh0cnVlKSk7XG4gICAgICAgIHRoaXMudWkudm9sdW1lPy5vbihQbGF5ZXJWb2x1bWVFdmVudHMuVU5NVVRFLCAoKSA9PiB0aGlzLnRvZ2dsZU11dGUoZmFsc2UpKTtcbiAgICAgICAgdGhpcy51aS5zZXR0aW5ncz8ub24oUGxheWVyU2V0dGluZ3NFdmVudHMuU1BFRUQsIHNwZWVkID0+IHRoaXMuc2V0U3BlZWQoc3BlZWQpKTtcblxuICAgICAgICB0aGlzLnVpLnBsYXlQYXVzZUJ0bj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQ2xpY2spO1xuICAgICAgICB0aGlzLnVpLnRvZ2dsZUJ0bj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQ2xpY2spO1xuICAgICAgICB0aGlzLnVpLnRvZ2dsZUJ0bj8uYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLm9uRG91YmxlQ2xpY2spO1xuXG4gICAgICAgICEhdGhpcy5zZXR0aW5ncy5ob3RrZXlzICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7XG5cbiAgICAgICAgdGhpcy51aS5mdWxsc2NyZWVuPy5vbihQbGF5ZXJGdWxsc2NyZWVuRXZlbnRzLkVOVEVSLCB0aGlzLm9uRnVsbHNjcmVlbkVudGVyKTtcbiAgICAgICAgdGhpcy51aS5mdWxsc2NyZWVuPy5vbihQbGF5ZXJGdWxsc2NyZWVuRXZlbnRzLkVYSVQsIHRoaXMub25GdWxsc2NyZWVuRXhpdCk7XG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncy5wYXVzZU9uU2Nyb2xsICYmIHRoaXMucGF1c2VPblNjcm9sbCgpO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoKSA9PiB0aGlzLm9uQmVmb3JldW5sb2FkKCkpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCAoKSA9PiB0aGlzLm9uQmVmb3JldW5sb2FkKCkpO1xuXG4gICAgICAgIHRoaXMuYmluZFBsYXllcigpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgdW5iaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVpPy50aW1lbGluZT8ub2ZmKCk7XG4gICAgICAgIHRoaXMudWk/LnZvbHVtZT8ub2ZmKCk7XG5cbiAgICAgICAgdGhpcy51aT8ucGxheVBhdXNlQnRuPy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Ub2dnbGVDbGljayk7XG4gICAgICAgIHRoaXMudWk/LnRvZ2dsZUJ0bj8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQ2xpY2spO1xuICAgICAgICB0aGlzLnVpPy50b2dnbGVCdG4/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5vbkRvdWJsZUNsaWNrKTtcblxuICAgICAgICAhIXRoaXMuc2V0dGluZ3MuaG90a2V5cyAmJiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuXG4gICAgICAgIHRoaXMudWkuZnVsbHNjcmVlbj8ub2ZmKCk7XG4gICAgICAgIHRoaXMuc3Q/LmtpbGwoKTtcblxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4gdGhpcy5vbkJlZm9yZXVubG9hZCgpKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BhZ2VoaWRlJywgKCkgPT4gdGhpcy5vbkJlZm9yZXVubG9hZCgpKTtcblxuICAgICAgICB0aGlzLnVuYmluZFBsYXllcigpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgb25DYW5wbGF5KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtY2FucGxheScpO1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uUGxheSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLXBsYXllZCcpO1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZW5kZWQnLCAnaXMtZXJyb3InLCAnaXMtc2hhcmUtb3BlbicpO1xuICAgICAgICBQbGF5ZXIucGF1c2VBbGwodGhpcy51aWQpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1lZGlhU2Vzc2lvbigpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgb25QbGF5aW5nKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtcGxheWluZycpO1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbG9hZGluZycsICdpcy1lcnJvcicpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoUGxheWVyRXZlbnRzLlBMQVkpO1xuICAgICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnBsYXliYWNrU3RhdGUgPSAncGxheWluZyc7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBvblBhdXNlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtcGxheWluZycsICdpcy1zaGFyZS1vcGVuJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJFdmVudHMuUEFVU0UpO1xuICAgICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnBsYXliYWNrU3RhdGUgPSAncGF1c2VkJztcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uV2FpdGluZygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXBsYXlpbmcnKTtcbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLWxvYWRpbmcnKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uRW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtcGxheWluZycsICdpcy1wbGF5ZWQnLCAnaXMtc3RhcnRlZCcsICdpcy1sb2FkaW5nJyk7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QuYWRkKCdpcy1lbmRlZCcpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5hdXRvcGxheSkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFBsYXllckV2ZW50cy5FTkQpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBvblRvZ2dsZUNsaWNrID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH07XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uRG91YmxlQ2xpY2sgPSAoZSk6IHZvaWQgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMudWk/LmZ1bGxzY3JlZW4/LnRvZ2dsZSgpO1xuICAgIH07XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uQmVmb3JldW5sb2FkKCk6IHZvaWQge31cblxuXG5cbiAgICBwcm90ZWN0ZWQgb25LZXlEb3duID0gZSA9PiB7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFuc2NyaXB0LXNlYXJjaCcpID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7IHJldHVybjsgfVxuXG4gICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwRm9yd2FyZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBGb3J3YXJkKHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2tpcEJhY2t3YXJkKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2onOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2tpcEJhY2t3YXJkKHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZU11dGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGVlZFVwKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3BlZWREb3duKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52b2x1bWVVcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMudm9sdW1lRG93bigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpPy5mdWxsc2NyZWVuPy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51aT8uY2FwdGlvbnM/LnRvZ2dsZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcblxuXG5cbiAgICBwcm90ZWN0ZWQgb25GdWxsc2NyZWVuRW50ZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMudWk/LmNhcHRpb25zPy5zaG93TmF0aXZlKCk7XG4gICAgfTtcblxuXG5cbiAgICBwcm90ZWN0ZWQgb25GdWxsc2NyZWVuRXhpdCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy51aT8uY2FwdGlvbnM/LmhpZGVOYXRpdmUoKTtcbiAgICB9O1xuXG5cblxuICAgIHByb3RlY3RlZCBwYXVzZU9uU2Nyb2xsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0ID0gU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy52aWV3LFxuICAgICAgICAgICAgb25Ub2dnbGU6IHNlbGYgPT4ge1xuICAgICAgICAgICAgICAgICFzZWxmLmlzQWN0aXZlICYmICF0aGlzLnVpLmZ1bGxzY3JlZW4/LmlzRnVsbHNjcmVlbigpICYmIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlTWVkaWFTZXNzaW9uKCk6IHZvaWQge1xuICAgICAgICBpZiAoJ21lZGlhU2Vzc2lvbicgaW4gbmF2aWdhdG9yICYmIHRoaXMuc2V0dGluZ3MubWV0YWRhdGEpIHtcblxuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5tZXRhZGF0YSA9IG5ldyBNZWRpYU1ldGFkYXRhKHsgLi4udGhpcy5zZXR0aW5ncy5tZXRhZGF0YSBhcyBhbnkgfSk7XG5cbiAgICAgICAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcigncGxheScsICgpID0+IHRoaXMucGxheSgpKTtcbiAgICAgICAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcigncGF1c2UnLCAoKSA9PiB0aGlzLnBhdXNlKCkpO1xuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKCdzZWVrYmFja3dhcmQnLCAoKSA9PiB0aGlzLnNraXBCYWNrd2FyZCh0cnVlKSk7XG4gICAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnNldEFjdGlvbkhhbmRsZXIoJ3NlZWtmb3J3YXJkJywgKCkgPT4gdGhpcy5za2lwRm9yd2FyZCh0cnVlKSk7XG4gICAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnNldEFjdGlvbkhhbmRsZXIoJ3NlZWt0bycsICgpID0+IHt9KTsgLy8ganVzdCBlbmFibGUgc2Vla2luZ1xuXG4gICAgICAgICAgICAvLyBUT0RPOiB1c2UgdGhpcyBpbiBwbGF5bGlzdHMgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAgICAgLy8gbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKCdwcmV2aW91c3RyYWNrJywgKCkgPT4geyB9KTtcbiAgICAgICAgICAgIC8vIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcignbmV4dHRyYWNrJywgKCkgPT4geyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQbGF5ZXJFdmVudHMge1xuICAgIHB1YmxpYyBzdGF0aWMgRU5EID0gJ2VuZCc7XG4gICAgcHVibGljIHN0YXRpYyBORVhUID0gJ25leHQnO1xuICAgIHB1YmxpYyBzdGF0aWMgUFJFViA9ICdwcmV2JztcbiAgICBwdWJsaWMgc3RhdGljIFRJTUVfVVBEQVRFID0gJ3RpbWVVcGRhdGUnO1xuICAgIHB1YmxpYyBzdGF0aWMgUExBWSA9ICdwbGF5JztcbiAgICBwdWJsaWMgc3RhdGljIFBBVVNFID0gJ3BhdXNlJztcbn1cblxuXG5leHBvcnQgY2xhc3MgUGxheWVyU2l6ZSB7XG4gICAgcHVibGljIHN0YXRpYyBDT1ZFUiA9ICdjb3Zlcic7XG4gICAgcHVibGljIHN0YXRpYyBDT05UQUlOID0gJ2NvbnRhaW4nO1xuICAgIHB1YmxpYyBzdGF0aWMgQVVUTyA9ICdhdXRvJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGxheWVyU2V0dGluZ3Mge1xuICAgIHBhdXNlT25TY3JvbGw6IGJvb2xlYW47XG4gICAgYXV0b3BsYXk/OiBib29sZWFuO1xuICAgIGxvb3A/OiBib29sZWFuO1xuICAgIG11dGVkPzogYm9vbGVhbjtcbiAgICBjb250cm9scz86IGJvb2xlYW47XG5cbiAgICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBzcmM/OiBzdHJpbmc7XG4gICAgc3JjTW9iaWxlPzogc3RyaW5nO1xuICAgIHBvc3Rlcj86IHN0cmluZztcbiAgICBwb3N0ZXJNb2JpbGU/OiBzdHJpbmc7XG5cbiAgICByYXRpbz86IG51bWJlcjtcbiAgICByYXRpb01vYmlsZT86IG51bWJlcjtcbiAgICB3aWR0aD86IG51bWJlcjtcbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gICAgc2l6ZT86IFBsYXllclNpemU7XG5cbiAgICB0aW1lRnJvbT86IG51bWJlcjtcbiAgICBkdXJhdGlvbj86IG51bWJlcjtcbiAgICB0aW1lRm9ybWF0TG9uZz86IGJvb2xlYW47XG4gICAgY2FjaGVUaW1lPzogYm9vbGVhbjtcblxuICAgIHZvbHVtZT86IG51bWJlcjtcbiAgICBob3RrZXlzPzogYm9vbGVhbjtcbiAgICByZWFkeVRpbWU/OiBudW1iZXI7IC8vIHN0YXJ0ZWQgY2xhc3NcbiAgICAvLyB0cmFja2luZz86IEFycmF5PElUcmFja2luZ0VsZW0+O1xuXG4gICAgbWV0YWRhdGE/OiBNZWRpYU1ldGFkYXRhO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNwb3REYXRhIHtcbiAgICBlbD86IEhUTUxFbGVtZW50O1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGVsSG90c3BvdD86IEhUTUxFbGVtZW50O1xuICAgIGVsTGlnaHRib3g/OiBIVE1MRWxlbWVudDtcbiAgICBzdGFydD86IG51bWJlcjtcbiAgICBzdG9wPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQbGF5ZXJFbGVtZW50cyB7XG4gICAgZHVyYXRpb24/OiBIVE1MRWxlbWVudDtcbiAgICBmdWxsQnRuPzogSFRNTEVsZW1lbnQ7XG4gICAgbG9hZGVkPzogSFRNTEVsZW1lbnQ7XG4gICAgbmV4dD86IEhUTUxFbGVtZW50O1xuICAgIHBsYXlCdG4/OiBIVE1MRWxlbWVudDtcbiAgICBwbGF5ZXJCYXI/OiBIVE1MRWxlbWVudDtcbiAgICBwb3N0ZXI/OiBIVE1MRWxlbWVudDtcbiAgICBwcmV2PzogSFRNTEVsZW1lbnQ7XG4gICAgcHJvZ3Jlc3M/OiBIVE1MRWxlbWVudDtcbiAgICBzY3J1YmJlcj86IEhUTUxFbGVtZW50O1xuICAgIHRpbWU/OiBIVE1MRWxlbWVudDtcbiAgICB0aXRsZT86IEhUTUxFbGVtZW50O1xuICAgIHRvZ2dsZUJ0bj86IEhUTUxFbGVtZW50O1xuICAgIHZvbHVtZT86IEhUTUxFbGVtZW50O1xuICAgIHZvbHVtZUJhcj86IEhUTUxFbGVtZW50O1xuICAgIHZvbHVtZUJ1dHRvbj86IEhUTUxFbGVtZW50O1xuICAgIHZvbHVtZVZhbHVlPzogSFRNTEVsZW1lbnQ7XG4gICAgY2FwdGlvbnM/OiBIVE1MRWxlbWVudDtcbiAgICBjYz86IEhUTUxFbGVtZW50O1xuICAgIHNwb3RzPzogQXJyYXk8SVNwb3REYXRhPjtcbiAgICBleGl0RnVsbEJ0bj86IEhUTUxCdXR0b25FbGVtZW50O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVSTChzcmM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZGVjb2RlID0gKHMpOiBzdHJpbmcgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZCA9IHdpbmRvdy5hdG9iKHMpO1xuICAgICAgICAgICAgcmV0dXJuIC9ed3F8eEAkL2cudGVzdChkKSA/IGQucmVwbGFjZSgvXndxfHhAJC9nLCAnJykgOiBzO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIC9cXC5tcDQkLy50ZXN0KHNyYykgPyBzcmMgOiBkZWNvZGUoc3JjKTtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRvVGltZSh0b3RhbFNlY29uZHM6IG51bWJlciwgaXNMb25nPzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgY29uc3QgdG90YWxTZWMgPSBwYXJzZUludChgJHt0b3RhbFNlY29uZHN9YCwgMTApO1xuICAgIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQoYCR7dG90YWxTZWMgLyAzNjAwfWAsIDEwKSAlIDI0O1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludChgJHt0b3RhbFNlYyAvIDYwfWAsIDEwKSAlIDYwO1xuICAgIGNvbnN0IHNlY29uZHMgPSB0b3RhbFNlYyAlIDYwO1xuXG4gICAgcmV0dXJuIGAkeyhob3VycyA8IDEwID8gYDAke2hvdXJzfWAgOiBob3Vycyl9OiR7KG1pbnV0ZXMgPCAxMCA/IGAwJHttaW51dGVzfWAgOiBtaW51dGVzKX06JHtzZWNvbmRzIDwgMTAgPyBgMCR7c2Vjb25kc31gIDogc2Vjb25kc31gO1xufVxuIiwiaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gJy4uLy4uL0hhbmRsZXInO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uLy4uL1NpdGUnO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyRnVsbHNjcmVlbkV2ZW50cyB7XG4gICAgcHVibGljIHN0YXRpYyBFWElUOiBzdHJpbmcgPSAnZXhpdCc7XG4gICAgcHVibGljIHN0YXRpYyBFTlRFUjogc3RyaW5nID0gJ2VudGVyJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbmRlZERvY3VtZW50IGV4dGVuZHMgRG9jdW1lbnQge1xuICAgIG1vekZ1bGxTY3JlZW5FbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICB3ZWJraXRGdWxsc2NyZWVuRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgbXNGdWxsc2NyZWVuRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgZXhpdEZ1bGxzY3JlZW4oKTogUHJvbWlzZTx2b2lkPjtcbiAgICBtb3pDYW5jZWxGdWxsU2NyZWVuKCk6IFByb21pc2U8dm9pZD47XG4gICAgd2Via2l0RXhpdEZ1bGxzY3JlZW4oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGNvbnN0IGh0bWxEb2N1bWVudDogRXh0ZW5kZWREb2N1bWVudCA9IGRvY3VtZW50IGFzIEV4dGVuZGVkRG9jdW1lbnQ7XG5cblxuXG5leHBvcnQgY2xhc3MgUGxheWVyRnVsbHNjcmVlbiBleHRlbmRzIEhhbmRsZXIge1xuXG5cblxuICAgIHByaXZhdGUgc3RhdGljIGdldEZ1bGxzY3JlZW5FbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgYW55IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgcmV0dXJuIGh0bWxEb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBodG1sRG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgaHRtbERvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8IGh0bWxEb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50O1xuICAgIH1cblxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJ0bkVsOiBIVE1MRWxlbWVudCwgcHJpdmF0ZSBwbGF5ZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmJ0bkVsID0gYnRuRWw7XG4gICAgICAgIHRoaXMucGxheWVyRWwgPSBwbGF5ZXJFbDtcblxuICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBpc0Z1bGxzY3JlZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBQbGF5ZXJGdWxsc2NyZWVuLmdldEZ1bGxzY3JlZW5FbGVtZW50KCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyB0b2dnbGUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdvRnVsbHNjcmVlbih0aGlzLnBsYXllckVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgZXhpdEZ1bGxzY3JlZW4oKTogdm9pZCB7XG4gICAgICAgIGlmIChodG1sRG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIGh0bWxEb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGh0bWxEb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICBodG1sRG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGh0bWxEb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgaHRtbERvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHVibGljIGdvRnVsbHNjcmVlbihlbGVtZW50OiBIVE1MRWxlbWVudCB8IGFueSk6IHZvaWQge1xuXG4gICAgICAgIGxldCBwcm9taXNlO1xuICAgICAgICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgcHJvbWlzZSA9IGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICBwcm9taXNlID0gZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QuYWRkKCdpcy1mdWxsc2NyZWVuJyk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBhdHRlbXB0aW5nIHRvIGVuYWJsZSBmdWxsc2NyZWVuIG1vZGU6ICR7ZXJyLm1lc3NhZ2V9ICgke2Vyci5uYW1lfSlgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5idG5FbD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQnRuQ2xpY2spO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgdGhpcy5vbkZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgICAgICBjb25zdCBtbSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcob3JpZW50YXRpb246IGxhbmRzY2FwZSkgYW5kIChtYXgtaGVpZ2h0OiAxMDIzcHgpJyk7XG4gICAgICAgIG1tLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgWy4uLnRoaXMucGxheWVyRWwucXVlcnlTZWxlY3RvckFsbCgndmlkZW8nKV0uZm9yRWFjaCh2aWRlbyA9PiB7XG4gICAgICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRlbmRmdWxsc2NyZWVuJywgdGhpcy5vblZpZGVvRnVsbHNjcmVlbkV4aXQsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgdW5iaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ0bkVsPy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25CdG5DbGljayk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB0aGlzLm9uRnVsbHNjcmVlbkNoYW5nZSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgb25CdG5DbGljayA9IChlOiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoUGxheWVyRnVsbHNjcmVlbi5nZXRGdWxsc2NyZWVuRWxlbWVudCgpKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnJvd3Nlci5tb2JpbGUgfHwgYnJvd3Nlci5pb3MpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhRWxlbWVudCA9IHRoaXMucGxheWVyRWwucXVlcnlTZWxlY3RvcigndmlkZW8uaXMtY3VycmVudCcpIGFzIGFueTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJGdWxsc2NyZWVuRXZlbnRzLkVOVEVSKTtcbiAgICAgICAgICAgIG1lZGlhRWxlbWVudD8ud2Via2l0RW50ZXJGdWxsc2NyZWVuICYmIG1lZGlhRWxlbWVudD8ud2Via2l0RW50ZXJGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICBtZWRpYUVsZW1lbnQ/LmVudGVyRnVsbHNjcmVlbiAmJiBtZWRpYUVsZW1lbnQ/LmVudGVyRnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QuYWRkKCdpcy1mdWxsc2NyZWVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdvRnVsbHNjcmVlbih0aGlzLnBsYXllckVsKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBvbkZ1bGxzY3JlZW5DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChQbGF5ZXJGdWxsc2NyZWVuLmdldEZ1bGxzY3JlZW5FbGVtZW50KCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMucGxheWVyRWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZnVsbHNjcmVlbicpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoUGxheWVyRnVsbHNjcmVlbkV2ZW50cy5FWElUKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb25WaWRlb0Z1bGxzY3JlZW5FeGl0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXllckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFBsYXllckZ1bGxzY3JlZW5FdmVudHMuRVhJVCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uT3JpZW50YXRpb25DaGFuZ2UgPSBlID0+IHtcbiAgICAgICAgaWYgKGJyb3dzZXIubW9iaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBtZWRpYUVsZW1lbnQgPSB0aGlzLnBsYXllckVsLnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvLmlzLWN1cnJlbnQnKSBhcyBhbnk7XG4gICAgICAgICAgICBpZiAoZS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gbGFuZHNjYXBlXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QuYWRkKCdpcy1mdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFBsYXllckZ1bGxzY3JlZW5FdmVudHMuRU5URVIpO1xuICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudD8ud2Via2l0RW50ZXJGdWxsc2NyZWVuICYmIG1lZGlhRWxlbWVudD8ud2Via2l0RW50ZXJGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50Py5lbnRlckZ1bGxzY3JlZW4gJiYgbWVkaWFFbGVtZW50Py5lbnRlckZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcG9ydHJhaXRcbiAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQ/LndlYmtpdEV4aXRGdWxsc2NyZWVuICYmIG1lZGlhRWxlbWVudD8ud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQ/LmV4aXRGdWxsc2NyZWVuICYmIG1lZGlhRWxlbWVudD8uZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gJy4uLy4uL0hhbmRsZXInO1xuaW1wb3J0IHsgZWFzaW5nIH0gZnJvbSAnLi4vLi4vU2l0ZSc7XG5pbXBvcnQgeyBQb3B1cERhdGEgfSBmcm9tICcuL1ZpZGVvLnR5cGVzJztcblxuZXhwb3J0IGNsYXNzIFBsYXllclBvcHVwcyBleHRlbmRzIEhhbmRsZXIge1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgRFVSQVRJT046IG51bWJlciA9IDM7XG5cbiAgICBwcml2YXRlIHJlbGF0ZWQ6IEFycmF5PFBvcHVwRGF0YT47XG4gICAgcHJpdmF0ZSBwb3B1cHM6IEFycmF5PEhUTUxFbGVtZW50PjtcblxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5wb3B1cHMgPSB2aWV3ID8gWy4uLnRoaXMudmlldy5jaGlsZHJlbl0gYXMgSFRNTEVsZW1lbnRbXSA6IG51bGw7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBsb2FkRGF0YSh7IHJlbGF0ZWQgfSk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbGF0ZWQgPSByZWxhdGVkO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgY2hlY2soY3VycmVudD86IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGlmICghY3VycmVudCkgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLnJlbGF0ZWQ/LmZvckVhY2goKGVsZW1lbnQsIGtleSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQudGltZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudCA8IGVsZW1lbnQudGltZVN0YXJ0IHx8IGN1cnJlbnQgPiBlbGVtZW50LnRpbWVTdGFydCArIFBsYXllclBvcHVwcy5EVVJBVElPTikge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnNob3duKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2hvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlUG9wdXAodGhpcy5wb3B1cHNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuc2hvd24pIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgIHRoaXMucG9wdXBzW2tleV0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBlbGVtZW50LnNob3duID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5zaG93UG9wdXAodGhpcy5wb3B1cHNba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHNob3dQb3B1cChwb3B1cEVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBnc2FwLmZyb21Ubyhwb3B1cEVsLCB7XG4gICAgICAgICAgICB5OiAtMjAsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgc2NhbGU6IDAuOSxcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2JvdHRvbScsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICBkdXJhdGlvbjogMC43LFxuICAgICAgICAgICAgZGVsYXk6IDAuMTUsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnYWxsJyxcbiAgICAgICAgICAgIGVhc2U6IGVhc2luZyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgaGlkZVBvcHVwKHBvcHVwRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGdzYXAudG8ocG9wdXBFbCwge1xuICAgICAgICAgICAgeTogMjAsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuNyxcbiAgICAgICAgICAgIHNjYWxlOiAwLjksXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICBlYXNlOiBlYXNpbmcsXG4gICAgICAgICAgICBjbGVhclByb3BzOiAnaGVpZ2h0LHNjYWxlJyxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBwb3B1cEVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBicm93c2VyIH0gZnJvbSAnLi4vLi4vU2l0ZSc7XG5pbXBvcnQgeyBJUGxheWVyU2V0dGluZ3MgfSBmcm9tICcuL1BsYXllci50eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJQb3N0ZXIge1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IEhUTUxFbGVtZW50LCBwcml2YXRlIHBsYXllckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnBsYXllckVsID0gcGxheWVyRWw7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBsb2FkKGRhdGE6IElQbGF5ZXJTZXR0aW5ncyk6IHZvaWQge1xuICAgICAgICBpZiAoZGF0YS5wb3N0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc3RlciA9ICEhYnJvd3Nlci5tb2JpbGVcbiAgICAgICAgICAgICAgICAmJiBkYXRhLnBvc3Rlck1vYmlsZVxuICAgICAgICAgICAgICAgICYmIGRhdGEucG9zdGVyTW9iaWxlICE9PSAnJ1xuICAgICAgICAgICAgICAgID8gZGF0YS5wb3N0ZXJNb2JpbGVcbiAgICAgICAgICAgICAgICA6IGRhdGEucG9zdGVyO1xuXG4gICAgICAgICAgICB0aGlzLnZpZXcuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke3Bvc3Rlcn0pYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgnaGFzLXBvc3RlcicsICEhZGF0YS5wb3N0ZXIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEhhbmRsZXIgfSBmcm9tICcuLi8uLi9IYW5kbGVyJztcblxuXG5leHBvcnQgY2xhc3MgUGxheWVyU2V0dGluZ3NFdmVudHMge1xuICAgIHB1YmxpYyBzdGF0aWMgU1BFRUQ6IHN0cmluZyA9ICdzcGVlZCc7XG59XG5cblxuZXhwb3J0IGNsYXNzIFBsYXllclNldHRpbmdzIGV4dGVuZHMgSGFuZGxlciB7XG5cbiAgICBwdWJsaWMgc3RhdGljIE1BWF9TUEVFRCA9IDI7XG4gICAgcHVibGljIHN0YXRpYyBNSU5fU1BFRUQgPSAwLjI1O1xuICAgIHB1YmxpYyBzdGF0aWMgU1BFRURfU1RFUCA9IDAuMjU7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbnN0cmFpblNwZWVkKHNwZWVkOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoUGxheWVyU2V0dGluZ3MuTUlOX1NQRUVELCBNYXRoLm1pbihQbGF5ZXJTZXR0aW5ncy5NQVhfU1BFRUQsIHNwZWVkKSk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGxpc3RCdXR0b25zOiBBcnJheTxIVE1MTElFbGVtZW50PjtcbiAgICBwcml2YXRlIHRpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+O1xuICAgIHByaXZhdGUgaXNJbml0aWFsU2V0dXA6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcblxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBwbGF5ZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnBsYXllckVsID0gcGxheWVyRWw7XG4gICAgICAgIHRoaXMubGlzdEJ1dHRvbnMgPSBbLi4udmlldy5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wbGF5YmFjay1yYXRlXScpXSBhcyBIVE1MTElFbGVtZW50W107XG5cbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYXllckVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5saXN0QnV0dG9ucyA9IG51bGw7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyB1cGRhdGVTcGVlZChzcGVlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc0luaXRpYWxTZXR1cCkge1xuICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLXVwZGF0aW5nJyk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy52aWV3LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXVwZGF0aW5nJyksICg2MDAgKyAzMDApKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzSW5pdGlhbFNldHVwID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5saXN0QnV0dG9ucy5mb3JFYWNoKGJ0biA9PiB7XG4gICAgICAgICAgICBidG4ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnLCBwYXJzZUZsb2F0KGJ0bi5kYXRhc2V0LnBsYXliYWNrUmF0ZSkgPT09IHNwZWVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5saXN0QnV0dG9ucy5mb3JFYWNoKGJ0biA9PiBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uU3BlZWRCdG5DbGljaykpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHVuYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5saXN0QnV0dG9ucy5mb3JFYWNoKGJ0biA9PiBidG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uU3BlZWRCdG5DbGljaykpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIG9uU3BlZWRCdG5DbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJTZXR0aW5nc0V2ZW50cy5TUEVFRCwgcGFyc2VGbG9hdCgoZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LnBsYXliYWNrUmF0ZSkpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gJy4uLy4uL0hhbmRsZXInO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uLy4uL1NpdGUnO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyVGltZWxpbmVFdmVudHMge1xuICAgIHB1YmxpYyBzdGF0aWMgU0VFSzogc3RyaW5nID0gJ3NlZWsnO1xufVxuXG5leHBvcnQgY2xhc3MgUGxheWVyVGltZWxpbmUgZXh0ZW5kcyBIYW5kbGVyIHtcblxuICAgIHByaXZhdGUgaXNTY3J1YmJpbmc6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBob3ZlckVsOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGN1cnJlbnRFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2FkZWRFbDogSFRNTEVsZW1lbnQ7XG5cblxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3OiBIVE1MRWxlbWVudCwgcHJpdmF0ZSBwbGF5ZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5ob3ZlckVsID0gdmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWhvdmVyJyk7XG4gICAgICAgIHRoaXMuY3VycmVudEVsID0gdmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLXByb2dyZXNzJyk7XG4gICAgICAgIHRoaXMubG9hZGVkRWwgPSB2aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wbGF5ZXItbG9hZGVkJyk7XG5cbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICB0aGlzLmhvdmVyRWwgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRFbCA9IG51bGw7XG4gICAgICAgIHRoaXMubG9hZGVkRWwgPSBudWxsO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudEVsLnN0eWxlLndpZHRoID0gJzAnO1xuICAgICAgICB0aGlzLmxvYWRlZEVsLnN0eWxlLndpZHRoID0gJzAnO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgdXBkYXRlKG1ldGFkYXRhOiB7IGR1cmF0aW9uOiBudW1iZXIsIGJ1ZmZlcmVkPzogbnVtYmVyLCBjdXJyZW50PzogbnVtYmVyIH0sIHF1aWNrPzogYm9vbGVhbik6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IHsgZHVyYXRpb24sIGJ1ZmZlcmVkLCBjdXJyZW50IH0gPSBtZXRhZGF0YTtcblxuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGlmIChidWZmZXJlZCAmJiB0aGlzLmxvYWRlZEVsKSB7XG4gICAgICAgICAgICBnc2FwLnRvKHRoaXMubG9hZGVkRWwsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogYCR7KE1hdGgubWF4KGJ1ZmZlcmVkLCBjdXJyZW50IHx8IDApIC8gZHVyYXRpb24pICogMTAwfSVgLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAhcXVpY2sgPyAwLjMgOiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBnc2FwLnRvKHRoaXMuY3VycmVudEVsLCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGAkeygoY3VycmVudCB8fCAwKSAvIGR1cmF0aW9uKSAqIDEwMH0lYCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogIXF1aWNrID8gMC4zIDogMCxcbiAgICAgICAgICAgICAgICBlYXNlOiAnbm9uZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgYWRkSG90c3BvdHMoZGF0YSwgZHVyYXRpb24pOiB2b2lkIHtcblxuICAgICAgICBkYXRhLnJlbGF0ZWQ/LmZvckVhY2goKHsgdGltZVN0YXJ0LCBjb2xvciB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBob3RzcG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIGhvdHNwb3QuY2xhc3NMaXN0LmFkZCgncGxheWVyX19ob3RzcG90Jyk7XG4gICAgICAgICAgICBob3RzcG90LnN0eWxlLmxlZnQgPSBgJHsoKHRpbWVTdGFydCB8fCAwKSAvIGR1cmF0aW9uKSAqIDEwMH0lYDtcbiAgICAgICAgICAgIGhvdHNwb3Quc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG5cbiAgICAgICAgICAgIHRoaXMudmlldy5hcHBlbmRDaGlsZChob3RzcG90KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uTW91c2VEb3duID0gKGU6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5pc1NjcnViYmluZyA9IHRydWU7XG4gICAgfTtcblxuXG5cbiAgICBwcm90ZWN0ZWQgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xuXG4gICAgICAgIGNvbnN0IHsgc2VlayB9ID0gdGhpcy5nZXRQb3NpdGlvbihlKTtcbiAgICAgICAgaWYgKHRoaXMuaG92ZXJFbCkgdGhpcy5ob3ZlckVsLnN0eWxlLndpZHRoID0gYCR7c2VlayAqIDEwMH0lYDtcblxuICAgICAgICBpZiAodGhpcy5pc1NjcnViYmluZykge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJUaW1lbGluZUV2ZW50cy5TRUVLLCBzZWVrLCB0cnVlKTtcbiAgICAgICAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHRoaXMuY3VycmVudEVsKTtcbiAgICAgICAgICAgIGdzYXAuc2V0KHRoaXMuY3VycmVudEVsLCB7IHdpZHRoOiBgJHtzZWVrICogMTAwfSVgIH0pO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QuYWRkKCdpcy1zY3J1YmJpbmcnKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uTW91c2VVcCA9IChlOiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh0aGlzLmlzU2NydWJiaW5nKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgeyBzZWVrIH0gPSB0aGlzLmdldFBvc2l0aW9uKGUpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFBsYXllclRpbWVsaW5lRXZlbnRzLlNFRUssIHNlZWspO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTY3J1YmJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zY3J1YmJpbmcnKTtcbiAgICB9O1xuXG5cblxuICAgIHByb3RlY3RlZCBvbk1vdXNlTGVhdmUgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuaXNTY3J1YmJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zY3J1YmJpbmcnKTtcbiAgICB9O1xuXG5cblxuICAgIHByb3RlY3RlZCBvbkNsaWNrID0gKGU6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgeyBzZWVrIH0gPSB0aGlzLmdldFBvc2l0aW9uKGUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoUGxheWVyVGltZWxpbmVFdmVudHMuU0VFSywgc2Vlayk7XG4gICAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHRoaXMuY3VycmVudEVsKTtcbiAgICAgICAgZ3NhcC5zZXQodGhpcy5jdXJyZW50RWwsIHsgd2lkdGg6IGAke3NlZWsgKiAxMDB9JWAgfSk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIGJpbmQoKTogdm9pZCB7XG4gICAgICAgICFicm93c2VyLnRvdWNoICYmIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgICFicm93c2VyLnRvdWNoICYmIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZSk7XG4gICAgICAgICFicm93c2VyLnRvdWNoICYmIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICBicm93c2VyLnRvdWNoICYmIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICBicm93c2VyLnRvdWNoICYmIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbk1vdXNlVXApO1xuXG4gICAgICAgICFicm93c2VyLnRvdWNoICYmIHRoaXMudmlldz8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICAhYnJvd3Nlci50b3VjaCAmJiB0aGlzLnZpZXc/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgICBicm93c2VyLnRvdWNoICYmIHRoaXMudmlldz8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Nb3VzZURvd24pO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHVuYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICAgIHRoaXMucGxheWVyRWw/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLnBsYXllckVsPy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Nb3VzZVVwKTtcblxuICAgICAgICB0aGlzLnZpZXc/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgICB0aGlzLnZpZXc/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgICAgdGhpcy52aWV3Py5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgZ2V0UG9zaXRpb24oZTogVG91Y2hFdmVudHxNb3VzZUV2ZW50KTogeyB4OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IHNlZWs6IG51bWJlciB9IHtcbiAgICAgICAgY29uc3QgcGFnZVggPSAoZSBhcyBNb3VzZUV2ZW50KS5wYWdlWCB8fCAoZSBhcyBUb3VjaEV2ZW50KS50b3VjaGVzWzBdPy5wYWdlWCB8fCAoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXT8ucGFnZVg7XG4gICAgICAgIGNvbnN0IHggPSBwYWdlWCAtIHRoaXMudmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMudmlldy5jbGllbnRXaWR0aDtcbiAgICAgICAgY29uc3Qgc2VlayA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHggLyB3aWR0aCkpO1xuICAgICAgICByZXR1cm4geyB4LCB3aWR0aCwgc2VlayB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGdzYXAgfSBmcm9tICdnc2FwL2Rpc3QvZ3NhcCc7XG5pbXBvcnQgeyBIYW5kbGVyIH0gZnJvbSAnLi4vLi4vSGFuZGxlcic7XG5pbXBvcnQgeyBlYXNpbmcgfSBmcm9tICcuLi8uLi9TaXRlJztcblxuZXhwb3J0IGNsYXNzIFBsYXllclZvbHVtZUV2ZW50cyB7XG4gICAgcHVibGljIHN0YXRpYyBDSEFOR0U6IHN0cmluZyA9ICdjaGFuZ2UnO1xuICAgIHB1YmxpYyBzdGF0aWMgTVVURTogc3RyaW5nID0gJ211dGUnO1xuICAgIHB1YmxpYyBzdGF0aWMgVU5NVVRFOiBzdHJpbmcgPSAndW5tdXRlJztcbn1cblxuXG5leHBvcnQgY2xhc3MgUGxheWVyVm9sdW1lIGV4dGVuZHMgSGFuZGxlciB7XG5cbiAgICBwcml2YXRlIGlzU2NydWJiaW5nOiBib29sZWFuO1xuICAgIHByaXZhdGUgaXNNdXRlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzSW5pdGlhbFNldHVwOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIHZvbHVtZTogbnVtYmVyO1xuICAgIHByaXZhdGUgYnV0dG9uRWw6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgYmFyRWw6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgdmFsdWVFbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0aW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcblxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXc6IEhUTUxFbGVtZW50LCBwcml2YXRlIHBsYXllckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnBsYXllckVsID0gcGxheWVyRWw7XG4gICAgICAgIHRoaXMuYnV0dG9uRWwgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXZvbHVtZS1idG4nKTtcbiAgICAgICAgdGhpcy5iYXJFbCA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdm9sdW1lLWJhcicpO1xuICAgICAgICB0aGlzLnZhbHVlRWwgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLXZvbHVtZS12YWx1ZScpO1xuICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHVwZGF0ZSh2b2x1bWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgdGhpcy52YWx1ZUVsICYmIGdzYXAudG8odGhpcy52YWx1ZUVsLCB7XG4gICAgICAgICAgICBzY2FsZVk6IHZvbHVtZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmlzU2NydWJiaW5nID8gMC4wMDAxIDogMC4yLFxuICAgICAgICAgICAgZWFzZTogZWFzaW5nLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdGlhbFNldHVwKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnaXMtdXBkYXRpbmcnKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdXBkYXRpbmcnKSwgKDYwMCArIDMwMCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNJbml0aWFsU2V0dXAgPSBmYWxzZTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHRvZ2dsZShtdXRlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmlzTXV0ZWQgPSBtdXRlZDtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1tdXRlZCcsIHRoaXMuaXNNdXRlZCk7XG4gICAgICAgIHRoaXMudmFsdWVFbCAmJiBnc2FwLnRvKHRoaXMudmFsdWVFbCwgeyBzY2FsZVk6IHRoaXMuaXNNdXRlZCA/IDAgOiB0aGlzLnZvbHVtZSwgZHVyYXRpb246IDAuMiwgZWFzZTogZWFzaW5nIH0pO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYnV0dG9uRWwgPSBudWxsO1xuICAgICAgICB0aGlzLmJhckVsID0gbnVsbDtcbiAgICAgICAgdGhpcy52YWx1ZUVsID0gbnVsbDtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBiaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ1dHRvbkVsPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Wb2x1bWVCdXR0b25DbGljayk7XG4gICAgICAgIHRoaXMuYmFyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblZvbHVtZUJhckNsaWNrKTtcbiAgICAgICAgdGhpcy5iYXJFbD8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICAgIHRoaXMucGxheWVyRWw/LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLnBsYXllckVsPy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICAgICAgICB0aGlzLnBsYXllckVsPy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmUpO1xuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIHVuYmluZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5idXR0b25FbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVm9sdW1lQnV0dG9uQ2xpY2spO1xuICAgICAgICB0aGlzLmJhckVsPy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Wb2x1bWVCYXJDbGljayk7XG4gICAgICAgIHRoaXMuYmFyRWw/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgICB0aGlzLnBsYXllckVsPy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlKTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBvblZvbHVtZUJ1dHRvbkNsaWNrID0gKGU6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnRyaWdnZXIodGhpcy5pc011dGVkID8gUGxheWVyVm9sdW1lRXZlbnRzLlVOTVVURSA6IFBsYXllclZvbHVtZUV2ZW50cy5NVVRFKTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb25Wb2x1bWVCYXJDbGljayA9IChlOiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgMSAtIGUub2Zmc2V0WSAvIHRoaXMuYmFyRWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJWb2x1bWVFdmVudHMuQ0hBTkdFLCB2YWx1ZSk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uTW91c2VEb3duID0gKGU6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5pc1NjcnViYmluZyA9IHRydWU7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uTW91c2VNb3ZlID0gKGUpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNTY3J1YmJpbmcpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBwb3NZID0gZS5jbGllbnRZIC0gdGhpcy5iYXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIDEgLSBwb3NZIC8gdGhpcy5iYXJFbC5jbGllbnRIZWlnaHQpKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihQbGF5ZXJWb2x1bWVFdmVudHMuQ0hBTkdFLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgb25Nb3VzZVVwID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmlzU2NydWJiaW5nID0gZmFsc2U7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uTW91c2VMZWF2ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5pc1NjcnViYmluZyA9IGZhbHNlO1xuICAgIH07XG5cbn1cbiIsImltcG9ydCB7IGRlY29kZVVSTCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUGxheWVyL1BsYXllci51dGlscyc7XG5pbXBvcnQgeyBJUGxheWVyU2V0dGluZ3MsIFBsYXllckV2ZW50cyB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUGxheWVyL1BsYXllci50eXBlcyc7XG5pbXBvcnQgeyBNZWRpYVN0YXRlLCBQbGF5ZXJTdG9yYWdlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9QbGF5ZXIvVmlkZW8udHlwZXMnO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJy4uLy4uL1NpdGUnO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9QbGF5ZXIvUGxheWVyJztcbmltcG9ydCB7IGdldFN0b3JhZ2VJdGVtLCBub3JtYWxpemVVcmwsIHNldFN0b3JhZ2VJdGVtIH0gZnJvbSAnLi4vLi4vVXRpbHMnO1xuaW1wb3J0IHsgVmlkZW9DYXB0aW9ucyB9IGZyb20gJy4vVmlkZW9DYXB0aW9ucyc7XG5pbXBvcnQgeyBQbGF5ZXJTZXR0aW5ncyB9IGZyb20gJy4vUGxheWVyU2V0dGluZ3MnO1xuXG5cblxuZXhwb3J0IGNsYXNzIFZpZGVvIGV4dGVuZHMgUGxheWVyIHtcblxuICAgIHByb3RlY3RlZCBtZWRpYTogSFRNTFZpZGVvRWxlbWVudCB8IEhUTUxBdWRpb0VsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIGlzQXVkaW86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgcHJlbG9hZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSAhYnJvd3Nlci5zYWZhcmlcbiAgICAgICAgICAgID8gTWVkaWFTdGF0ZS5IQVZFX0VOT1VHSF9EQVRBXG4gICAgICAgICAgICA6IE1lZGlhU3RhdGUuSEFWRV9NRVRBREFUQTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaWYgKCEhYnJvd3Nlci5tb2JpbGUgfHwgIXRoaXMuc2V0dGluZ3MuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1lZGlhLnJlYWR5U3RhdGUgPj0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lZGlhLnJlYWR5U3RhdGUgPj0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhY2hlVGltZVBvc2l0aW9uKHRydWUpO1xuICAgICAgICB0aGlzLm1lZGlhLnBhdXNlKCk7XG4gICAgICAgIHRoaXMubWVkaWEuc3JjID0gJyc7XG4gICAgICAgIHRoaXMubWVkaWEubG9hZCgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBsb2FkKGRhdGE6IElQbGF5ZXJTZXR0aW5ncyk6IFByb21pc2U8bnVtYmVyfHt9PiB7XG4gICAgICAgIGNvbnN0IHNyYyA9ICEhYnJvd3Nlci5tb2JpbGUgJiYgZGF0YS5zcmNNb2JpbGUgJiYgZGF0YS5zcmNNb2JpbGUgIT09ICcnID8gZGF0YS5zcmNNb2JpbGUgOiBkYXRhLnNyYztcblxuICAgICAgICB0aGlzLm1lZGlhLnBhdXNlKCk7XG4gICAgICAgIHRoaXMubWVkaWEuc3JjID0gZGVjb2RlVVJMKHNyYyk7XG4gICAgICAgIHRoaXMubWVkaWEubG9hZCgpO1xuXG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lbmRlZCcsICdpcy1zdGFydGVkJywgJ2lzLXBsYXllZCcsICdpcy1wbGF5aW5nJyk7XG5cbiAgICAgICAgdGhpcy51aSAmJiB0aGlzLnVpLnRpbWVsaW5lPy5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkgJiYgdGhpcy5wbGF5KCk7XG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncy5yYXRpbyA9IGRhdGEucmF0aW87XG4gICAgICAgIHRoaXMuc2V0dGluZ3MucmF0aW9Nb2JpbGUgPSBkYXRhLnJhdGlvTW9iaWxlO1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0dGluZ3MucG9zdGVyID0gZGF0YS5wb3N0ZXI7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MucG9zdGVyTW9iaWxlID0gZGF0YS5wb3N0ZXJNb2JpbGU7XG5cbiAgICAgICAgdGhpcy51aS5wb3N0ZXIubG9hZChkYXRhKTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzLmNhY2hlVGltZSAmJiB0aGlzLnNlZWtUb0NhY2hlZCgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBwbGF5KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tZWRpYSAmJiB0aGlzLm1lZGlhLnBhdXNlZCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRDdXJyZW50VGltZSgpID49IHRoaXMuZ2V0RHVyYXRpb24oKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudWk/LnRpbWVsaW5lPy51cGRhdGUoeyBjdXJyZW50OiAwLCBkdXJhdGlvbjogdGhpcy5nZXREdXJhdGlvbigpIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VlaygwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGxheVByb21pc2UgPSB0aGlzLm1lZGlhLnBsYXkoKTtcblxuICAgICAgICAgICAgaWYgKHBsYXlQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAocGxheVByb21pc2UpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnYXV0b3BsYXktZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LmFkZCgnYXV0b3BsYXktZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNob3cgcG9zdGVyIGlmIGF1dG9wbGF5IGZhaWxzOlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ3Nob3VsZC1wbGF5Jyk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5tZWRpYSB8fCB0aGlzLm1lZGlhLnBhdXNlZCkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5tZWRpYS5wYXVzZSgpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgdG9nZ2xlKHBsYXk/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHBsYXlpbmc6IGJvb2xlYW4gPSAhdGhpcy5tZWRpYS5wYXVzZWQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwbGF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKCEhcGxheSAmJiAhcGxheWluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghcGxheSAmJiAhIXBsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5aW5nID8gdGhpcy5wYXVzZSgpIDogdGhpcy5wbGF5KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gIXBsYXlpbmc7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyB1bmxvYWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLnBhdXNlKCk7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLnNyYyA9ICcnO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHVibGljIHNlZWsodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0RHVyYXRpb24oKSkgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IHRoaXMuZ2V0U3RhcnQoKSArIHRoaXMuZ2V0RHVyYXRpb24oKSAqIHZhbHVlO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc2Vla1RvVGltZSh0aW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IHRoaXMuZ2V0U3RhcnQoKSArIHRpbWU7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBza2lwRm9yd2FyZChtb3JlPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnNlZWtUb1RpbWUodGhpcy5nZXRDdXJyZW50VGltZSgpICsgKG1vcmUgPyAxMCA6IDUpKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHNraXBCYWNrd2FyZChtb3JlPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnNlZWtUb1RpbWUodGhpcy5nZXRDdXJyZW50VGltZSgpIC0gKG1vcmUgPyAxMCA6IDUpKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGVuZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWVrKDEpO1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyByZXN0YXJ0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlZWsoMCk7XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc2V0Vm9sdW1lKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZWRpYS52b2x1bWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5tZWRpYS5tdXRlZCA9IHZhbHVlID09PSAwO1xuICAgICAgICBzdXBlci5zZXRWb2x1bWUodmFsdWUpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgdG9nZ2xlTXV0ZShtdXRlPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAodHlwZW9mIG11dGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLm11dGVkID0gbXV0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVkaWEubXV0ZWQgPSAhdGhpcy5tZWRpYS5tdXRlZDtcbiAgICAgICAgfVxuICAgICAgICAhdGhpcy5tZWRpYS5tdXRlZCAmJiB0aGlzLm1lZGlhLnZvbHVtZSA8IDAuMDUgJiYgKHRoaXMubWVkaWEudm9sdW1lID0gMSk7XG4gICAgICAgIHRoaXMudWkudm9sdW1lLnVwZGF0ZSh0aGlzLm1lZGlhLnZvbHVtZSk7XG4gICAgICAgIHRoaXMudWkudm9sdW1lLnRvZ2dsZSh0aGlzLm1lZGlhLm11dGVkKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHZvbHVtZVVwKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tZWRpYS5tdXRlZCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVNdXRlKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vm9sdW1lKDAuMDUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRWb2x1bWUoTWF0aC5taW4oMSwgdGhpcy5tZWRpYS52b2x1bWUgKyAwLjA1KSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHVibGljIHZvbHVtZURvd24oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lKE1hdGgubWF4KDAsIHRoaXMubWVkaWEudm9sdW1lIC0gMC4wNSkpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc2V0U3BlZWQoc3BlZWQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBjb25zdHJhaW5lZFNwZWVkID0gUGxheWVyU2V0dGluZ3MuY29uc3RyYWluU3BlZWQoc3BlZWQpO1xuICAgICAgICB0aGlzLm1lZGlhLnBsYXliYWNrUmF0ZSA9IGNvbnN0cmFpbmVkU3BlZWQ7XG4gICAgICAgIHN1cGVyLnNldFNwZWVkKGNvbnN0cmFpbmVkU3BlZWQpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc3BlZWRVcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRTcGVlZCh0aGlzLm1lZGlhLnBsYXliYWNrUmF0ZSArIFBsYXllclNldHRpbmdzLlNQRUVEX1NURVApO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc3BlZWREb3duKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNldFNwZWVkKHRoaXMubWVkaWEucGxheWJhY2tSYXRlIC0gUGxheWVyU2V0dGluZ3MuU1BFRURfU1RFUCk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBzZXRIb3RzcG90cyhkYXRhKTogdm9pZCB7XG4gICAgICAgIHRoaXMudWkudGltZWxpbmUuYWRkSG90c3BvdHMoZGF0YSwgdGhpcy5nZXREdXJhdGlvbigpKTtcbiAgICAgICAgdGhpcy51aS5wb3B1cHMubG9hZERhdGEoZGF0YSk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBpc1BhdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEucGF1c2VkO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgc2V0dXAoKTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcblxuICAgICAgICAvLyBtYWtlIHN1cmUgcmF0aW9zIGFyZSBmbG9hdCBudW1iZXJzOlxuICAgICAgICB0aGlzLnNldHRpbmdzLnJhdGlvID0gcGFyc2VGbG9hdChgJHt0aGlzLnNldHRpbmdzLnJhdGlvfWApO1xuICAgICAgICB0aGlzLnNldHRpbmdzLnJhdGlvTW9iaWxlID0gPG51bWJlcj5wYXJzZUZsb2F0KGAke3RoaXMuc2V0dGluZ3MucmF0aW9Nb2JpbGV9YCk7XG5cblxuICAgICAgICAvLyByZW1vdmUgbW9iaWxlIHJhdGlvIGlmIG5vIG1vYmlsZSBzcmM6XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5zcmNNb2JpbGUgfHwgdGhpcy5zZXR0aW5ncy5zcmNNb2JpbGUgPT09ICcnKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZXR0aW5ncy5yYXRpb01vYmlsZTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNldHRpbmdzLnNyY01vYmlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1vYmlsZSBzcmM6XG4gICAgICAgIGlmICghIWJyb3dzZXIubW9iaWxlICYmIHRoaXMuc2V0dGluZ3Muc3JjTW9iaWxlICYmIHRoaXMuc2V0dGluZ3Muc3JjTW9iaWxlICE9PSB0aGlzLm1lZGlhLnNyYykge1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5zcmMgPSBkZWNvZGVVUkwodGhpcy5zZXR0aW5ncy5zcmNNb2JpbGUpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5sb2FkKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWJyb3dzZXIubW9iaWxlICYmIHRoaXMuc2V0dGluZ3Muc3JjICYmIHRoaXMuc2V0dGluZ3Muc3JjICE9PSB0aGlzLm1lZGlhLnNyYykge1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5zcmMgPSBkZWNvZGVVUkwodGhpcy5zZXR0aW5ncy5zcmMpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5sb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB2b2x1bWU6XG4gICAgICAgIHRoaXMuc2V0dGluZ3Mudm9sdW1lICYmICh0aGlzLm1lZGlhLnZvbHVtZSA9IHRoaXMuc2V0dGluZ3Mudm9sdW1lKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5tdXRlZCA9IHRoaXMubWVkaWEubXV0ZWQ7XG5cbiAgICAgICAgLy8gYXV0b3BsYXk6XG4gICAgICAgIC8vIGlmICh0aGlzLm1lZGlhLmF1dG9wbGF5IHx8IHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkpIHtcbiAgICAgICAgLy8gICAgIHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICAvLyAgICAgdGhpcy5tZWRpYS5hdXRvcGxheSA9IGZhbHNlO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gbG9vcDpcbiAgICAgICAgaWYgKHRoaXMubWVkaWEubG9vcCkge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5sb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5sb29wKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLmxvb3AgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcG9zdGVyOlxuICAgICAgICBjb25zdCBtZWRpYSA9IDxIVE1MVmlkZW9FbGVtZW50PiB0aGlzLm1lZGlhO1xuICAgICAgICBpZiAobWVkaWEucG9zdGVyICYmICF0aGlzLnNldHRpbmdzLnBvc3Rlcikge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5wb3N0ZXIgPSBtZWRpYS5wb3N0ZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5tZWRpYS5jb250cm9scykge1xuICAgICAgICAgICAgICAgIG1lZGlhLnBvc3RlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udHJvbHM6XG4gICAgICAgIGlmICghIXRoaXMubWVkaWEuY29udHJvbHMgfHwgdGhpcy5zZXR0aW5ncy5jb250cm9scykge1xuICAgICAgICAgICAgdGhpcy5idWlsZFVJKCk7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLmNvbnRyb2xzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnY29udHJvbHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuXG4gICAgICAgIC8vIHNlZWsgdG8gcGFyYW0gb3IgdG8gbG9jYWwgc3RvcmFnZTpcbiAgICAgICAgIXRoaXMuc2Vla1RvUGFyYW1zKCkgJiYgdGhpcy5zZXR0aW5ncy5jYWNoZVRpbWUgJiYgdGhpcy5zZWVrVG9DYWNoZWQoKTtcblxuICAgICAgICAvLyBzZXQgY2FjaGVkIHZvbHVtZTpcbiAgICAgICAgY29uc3QgY2FjaGVkVm9sdW1lID0gZ2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5WT0xVTUUpO1xuICAgICAgICB0aGlzLnVpICYmIHRoaXMudWkudm9sdW1lPy50b2dnbGUodGhpcy5zZXR0aW5ncy5tdXRlZCk7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lKHBhcnNlRmxvYXQoY2FjaGVkVm9sdW1lKSB8fCB0aGlzLm1lZGlhLnZvbHVtZSk7XG5cbiAgICAgICAgLy8gc2V0IHBsYXliYWNrIHJhdGU6XG4gICAgICAgIGNvbnN0IGNhY2hlZFNwZWVkID0gZ2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5TUEVFRCk7XG4gICAgICAgIHRoaXMuc2V0U3BlZWQocGFyc2VGbG9hdChjYWNoZWRTcGVlZCkgfHwgMSk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBjcmVhdGVQbGF5ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubWVkaWEgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignYXVkaW8sIHZpZGVvJyk7XG4gICAgICAgIGlmICghdGhpcy5tZWRpYSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVmlkZW8vQXVkaW8gY29tcG9uZW50IG11c3QgY29udGFpbiBodG1sIGA8YXVkaW8+YCBvciBgPHZpZGVvPmAgZWxlbWVudCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc0F1ZGlvID0gdGhpcy5tZWRpYS50YWdOYW1lID09PSAnQVVESU8nO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgYnVpbGRVSSgpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuYnVpbGRVSSgpO1xuICAgICAgICB0aGlzLmxvYWRDYXB0aW9ucygpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgbG9hZENhcHRpb25zKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjYXB0aW9uc0VsID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wbGF5ZXItY2MnKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgY2FwdGlvbnNFbCAmJiB0aGlzLnVpICYmICh0aGlzLnVpLmNhcHRpb25zID0gbmV3IFZpZGVvQ2FwdGlvbnMoY2FwdGlvbnNFbCwgdGhpcy52aWV3KSk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBiaW5kUGxheWVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCAoKSA9PiB0aGlzLm9uTG9hZGVkKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4gdGhpcy5vbkxvYWRlZCgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdkdXJhdGlvbmNoYW5nZScsICgpID0+IHRoaXMub25EdXJhdGlvbkNoYW5nZSgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVNZWRpYVN0YXRlJywgKCkgPT4gdGhpcy5vbkR1cmF0aW9uQ2hhbmdlKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgKCkgPT4gdGhpcy5vblByb2dyZXNzKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZU1lZGlhU3RhdGUnLCAoKSA9PiB0aGlzLm9uUHJvZ3Jlc3MoKSk7XG4gICAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsICgpID0+IHRoaXMub25UaW1ldXBkYXRlKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCAoKSA9PiB0aGlzLm9uUGxheSgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5JywgKCkgPT4gdGhpcy5vbkNhbnBsYXkoKSk7XG4gICAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsICgpID0+IHRoaXMub25QbGF5aW5nKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgKCkgPT4gdGhpcy5vblBhdXNlKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCAoKSA9PiB0aGlzLm9uV2FpdGluZygpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsICgpID0+IHRoaXMub25FbmQoKSk7XG4gICAgICAgIHRoaXMubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlID0+IHRoaXMub25FcnJvcihlKSk7XG5cbiAgICAgICAgaWYgKHRoaXMubWVkaWEucmVhZHlTdGF0ZSA+PSBNZWRpYVN0YXRlLkhBVkVfQ1VSUkVOVF9EQVRBKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIHVuYmluZFBsYXllcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZWRkYXRhJywgKCkgPT4gdGhpcy5vbkxvYWRlZCgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsICgpID0+IHRoaXMub25Mb2FkZWQoKSk7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHVyYXRpb25jaGFuZ2UnLCAoKSA9PiB0aGlzLm9uRHVyYXRpb25DaGFuZ2UoKSk7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlTWVkaWFTdGF0ZScsICgpID0+IHRoaXMub25EdXJhdGlvbkNoYW5nZSgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsICgpID0+IHRoaXMub25Qcm9ncmVzcygpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCd1cGRhdGVNZWRpYVN0YXRlJywgKCkgPT4gdGhpcy5vblByb2dyZXNzKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoKSA9PiB0aGlzLm9uVGltZXVwZGF0ZSgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5JywgKCkgPT4gdGhpcy5vblBsYXkoKSk7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheScsICgpID0+IHRoaXMub25DYW5wbGF5KCkpO1xuICAgICAgICB0aGlzLm1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCAoKSA9PiB0aGlzLm9uUGxheWluZygpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXVzZScsICgpID0+IHRoaXMub25QYXVzZSgpKTtcbiAgICAgICAgdGhpcy5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgKCkgPT4gdGhpcy5vbldhaXRpbmcoKSk7XG4gICAgICAgIHRoaXMubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCAoKSA9PiB0aGlzLm9uRW5kKCkpO1xuICAgICAgICB0aGlzLm1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZSA9PiB0aGlzLm9uRXJyb3IoZSkpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgb25Mb2FkZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudWkgJiYgdGhpcy51aS5jYXB0aW9ucz8ubG9hZCh0aGlzLm1lZGlhKTtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgb25EdXJhdGlvbkNoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgb25Qcm9ncmVzcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKCk7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgb25UaW1ldXBkYXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnN0cmFpblRpbWUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lKCk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBvbkVycm9yKGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudmlldyAmJiBlLnRhcmdldC5uZXR3b3JrU3RhdGUgJiYgZS50YXJnZXQubmV0d29ya1N0YXRlID09PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENhbid0IGxvYWQgbWVkaWEgJHsoZS50YXJnZXQgYXMgSFRNTE1lZGlhRWxlbWVudCkuc3JjfWApO1xuICAgICAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBvbkJlZm9yZXVubG9hZCgpIHtcbiAgICAgICAgdGhpcy5jYWNoZVRpbWVQb3NpdGlvbih0cnVlKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVRpbWUoKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKCF0aGlzLm1lZGlhKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgICBjb25zdCB7IGJ1ZmZlcmVkIH0gPSB0aGlzLm1lZGlhO1xuICAgICAgICBjb25zdCBidWZmZXJlZFRpbWUgPSBidWZmZXJlZCAmJiBidWZmZXJlZC5sZW5ndGggPyBidWZmZXJlZC5lbmQoMCkgOiAwO1xuXG4gICAgICAgIHRoaXMudWkudGltZS51cGRhdGUoeyBkdXJhdGlvbiwgY3VycmVudCB9LCB0aGlzLnNldHRpbmdzLnRpbWVGb3JtYXRMb25nKTtcbiAgICAgICAgdGhpcy51aS50aW1lbGluZS51cGRhdGUoeyBkdXJhdGlvbiwgYnVmZmVyZWQ6IGJ1ZmZlcmVkVGltZSwgY3VycmVudCB9KTtcbiAgICAgICAgdGhpcy51aS5wb3B1cHMuY2hlY2soY3VycmVudCk7XG5cbiAgICAgICAgdGhpcy52aWV3LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXN0YXJ0ZWQnLCBjdXJyZW50ID4gdGhpcy5zZXR0aW5ncy5yZWFkeVRpbWUpO1xuXG4gICAgICAgIHRoaXMuY2FjaGVUaW1lUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFBsYXllckV2ZW50cy5USU1FX1VQREFURSwgY3VycmVudCk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBzZWVrVG9QYXJhbXMoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSAobmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKSkuZ2V0KCd0aW1lJyk7XG4gICAgICAgIGlmICh0aW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNlZWtUb1RpbWUocGFyc2VJbnQodGltZSwgMTApKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIHNlZWtUb0NhY2hlZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IG5vcm1hbGl6ZVVybCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgICBjb25zdCBjYWNoZWRUaW1lID0gZ2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5TRUVLICsgcGF0aCk7XG4gICAgICAgIGNhY2hlZFRpbWUgJiYgdGhpcy5zZWVrVG9UaW1lKHBhcnNlRmxvYXQoY2FjaGVkVGltZSkpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgY2FjaGVUaW1lUG9zaXRpb24oZm9yY2U/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBub3JtYWxpemVVcmwod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgICAgY29uc3QgdGltZSA9IHRoaXMuZ2V0Q3VycmVudFRpbWUoKSA+PSB0aGlzLmdldER1cmF0aW9uKCkgLSAxID8gMCA6IHRoaXMuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgKCFicm93c2VyLmlvcyB8fCBmb3JjZSkgJiYgc2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5TRUVLICsgcGF0aCwgYCR7dGltZX1gKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmR1cmF0aW9uIHx8IHRoaXMubWVkaWEuZHVyYXRpb247XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgZ2V0U3RhcnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudGltZUZyb20gfHwgMDtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBnZXRDdXJyZW50VGltZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYS5jdXJyZW50VGltZSAtIHRoaXMuZ2V0U3RhcnQoKTtcbiAgICB9XG5cblxuICAgIHByb3RlY3RlZCBjb25zdHJhaW5UaW1lKCk6IHZvaWQge1xuXG4gICAgICAgIGlmICghdGhpcy5tZWRpYSkgeyByZXR1cm47IH1cblxuICAgICAgICBpZiAodGhpcy5tZWRpYS5jdXJyZW50VGltZSA8IHRoaXMuZ2V0U3RhcnQoKSkge1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IHRoaXMuZ2V0U3RhcnQoKTtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID09PSB0aGlzLmdldFN0YXJ0KCkgKyB0aGlzLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMub25FbmQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID4gdGhpcy5nZXRTdGFydCgpICsgdGhpcy5nZXREdXJhdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lID0gdGhpcy5nZXRTdGFydCgpICsgdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuZXhwb3J0IGVudW0gTWVkaWFTdGF0ZSB7XG4gICAgSEFWRV9OT1RISU5HLFxuICAgIEhBVkVfTUVUQURBVEEsXG4gICAgSEFWRV9DVVJSRU5UX0RBVEEsXG4gICAgSEFWRV9GVVRVUkVfREFUQSxcbiAgICBIQVZFX0VOT1VHSF9EQVRBLFxufVxuXG5cblxuZXhwb3J0IGNsYXNzIFBsYXllclN0b3JhZ2Uge1xuICAgIHB1YmxpYyBzdGF0aWMgQ0NfQUNUSVZFOiBzdHJpbmcgPSAnYWN0aXZlJztcbiAgICBwdWJsaWMgc3RhdGljIENDX0lOREVYOiBzdHJpbmcgPSAnY2FwdGlvbnMnO1xuICAgIHB1YmxpYyBzdGF0aWMgQ0NfTk9UX0FDVElWRTogc3RyaW5nID0gJ25vdC1hY3RpdmUnO1xuICAgIHB1YmxpYyBzdGF0aWMgQ0M6IHN0cmluZyA9ICdjYyc7XG4gICAgcHVibGljIHN0YXRpYyBTRUVLOiBzdHJpbmcgPSAnc2Vlayc7XG4gICAgcHVibGljIHN0YXRpYyBTUEVFRDogc3RyaW5nID0gJ3NwZWVkJztcbiAgICBwdWJsaWMgc3RhdGljIFZPTFVNRTogc3RyaW5nID0gJ3ZvbHVtZSc7XG59XG5cblxuXG5leHBvcnQgdHlwZSBQb3B1cERhdGEgPSB7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgc2Vzc2lvbjogbnVtYmVyO1xuICAgIHRpbWVTdGFydDogbnVtYmVyO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgY29sb3I6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGltYWdlOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHNob3duPzogYm9vbGVhbjtcbiAgICB0aW1lbGluZT87XG59XG4iLCJpbXBvcnQgeyBnZXRTdG9yYWdlSXRlbSwgc2V0U3RvcmFnZUl0ZW0gfSBmcm9tICcuLi8uLi9VdGlscyc7XG5pbXBvcnQgeyBQbGF5ZXJTdG9yYWdlIH0gZnJvbSAnLi9WaWRlby50eXBlcyc7XG5cblxuZXhwb3J0IGNsYXNzIFZpZGVvQ2FwdGlvbnMge1xuXG5cbiAgICBwcm90ZWN0ZWQgdHJhY2tzOiBUZXh0VHJhY2tMaXN0IHwgVGV4dFRyYWNrTGlzdFtdO1xuICAgIHByb3RlY3RlZCBjdXJyZW50SW5kZXg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjYXB0aW9uczogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBidG46IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHByaXZhdGUgbGlzdEJ1dHRvbnM6IEhUTUxMSUVsZW1lbnRbXTtcbiAgICBwcml2YXRlIHRpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+O1xuXG5cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2aWV3OiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIHBsYXllckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnBsYXllckVsID0gcGxheWVyRWw7XG4gICAgICAgIHRoaXMuYnRuID0gdmlldy5xdWVyeVNlbGVjdG9yKCcuanMtcGxheWVyLWNjLWJ0bicpO1xuICAgICAgICB0aGlzLmNhcHRpb25zID0gcGxheWVyRWwucXVlcnlTZWxlY3RvcignLmpzLXBsYXllci1jYy10ZXh0Jyk7XG4gICAgICAgIHRoaXMubGlzdEJ1dHRvbnMgPSBbLi4udmlldy5xdWVyeVNlbGVjdG9yQWxsKCcuanMtcGxheWVyLWNjLWl0ZW0nKV0gYXMgSFRNTExJRWxlbWVudFtdO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYnRuID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYXB0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMubGlzdEJ1dHRvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLnVubG9hZENDKCk7XG4gICAgICAgIHRoaXMudHJhY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBudWxsO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgbG9hZChtZWRpYTogSFRNTE1lZGlhRWxlbWVudCB8IEhUTUxNZWRpYUVsZW1lbnRbXSk6IHZvaWQge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVkaWEpICYmIG1lZGlhLnRleHRUcmFja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QuYWRkKCdoYXMtY2MnKTtcbiAgICAgICAgICAgIHRoaXMudHJhY2tzID0gbWVkaWEudGV4dFRyYWNrcztcbiAgICAgICAgICAgIFsuLi50aGlzLnRyYWNrc10uZm9yRWFjaCgodHJhY2s6IFRleHRUcmFjaykgPT4geyB0cmFjay5tb2RlID0gJ2hpZGRlbic7IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtY2MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hlY2tMb2NhbFN0b3JhZ2UoKTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHRvZ2dsZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9ICF0aGlzLmlzQWN0aXZlO1xuICAgICAgICBzZXRTdG9yYWdlSXRlbShQbGF5ZXJTdG9yYWdlLkNDLCB0aGlzLmlzQWN0aXZlID8gUGxheWVyU3RvcmFnZS5DQ19BQ1RJVkUgOiBQbGF5ZXJTdG9yYWdlLkNDX05PVF9BQ1RJVkUpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRDQyh0aGlzLmN1cnJlbnRJbmRleCA+PSAwID8gdGhpcy5jdXJyZW50SW5kZXggOiAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5sb2FkQ0MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QuYWRkKCdpcy11cGRhdGluZycpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaXMtdXBkYXRpbmcnKSwgKDYwMCArIDMwMCkpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc2hvd05hdGl2ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50cmFja3MgJiYgWy4uLnRoaXMudHJhY2tzXS5mb3JFYWNoKCh0cmFjazogVGV4dFRyYWNrKSA9PiB7XG4gICAgICAgICAgICB0cmFjay5tb2RlID0gdHJhY2subW9kZSA9PT0gJ2hpZGRlbicgPyAnc2hvd2luZycgOiAnZGlzYWJsZWQnO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGhpZGVOYXRpdmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudHJhY2tzICYmIFsuLi50aGlzLnRyYWNrc10uZm9yRWFjaCgodHJhY2s6IFRleHRUcmFjaykgPT4ge1xuICAgICAgICAgICAgdHJhY2subW9kZSA9IHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJyA/ICdoaWRkZW4nIDogJ2Rpc2FibGVkJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBsb2FkQ0MoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudHJhY2tzKSkgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBpbmRleDtcblxuICAgICAgICBzZXRTdG9yYWdlSXRlbShQbGF5ZXJTdG9yYWdlLkNDX0lOREVYLCBgJHtpbmRleH1gKTtcbiAgICAgICAgc2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5DQywgUGxheWVyU3RvcmFnZS5DQ19BQ1RJVkUpO1xuXG4gICAgICAgIHRoaXMubG9hZFRyYWNrbGlzdCh0aGlzLnRyYWNrcyk7XG4gICAgICAgIHRoaXMudXBkYXRlQnV0dG9ucygpO1xuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgbG9hZFRyYWNrbGlzdCh0cmFja2xpc3Q6IFRleHRUcmFja0xpc3QpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0cmFja2xpc3QpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgWy4uLnRyYWNrbGlzdF0uZm9yRWFjaCgodHJhY2s6IFRleHRUcmFjaywgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICB0cmFjay5tb2RlID0gaSA9PT0gdGhpcy5jdXJyZW50SW5kZXggPyAnaGlkZGVuJyA6ICdkaXNhYmxlZCc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRyYWNrID0gdHJhY2tsaXN0W3RoaXMuY3VycmVudEluZGV4XTtcbiAgICAgICAgY29uc3QgeyBjdWVzIH0gPSB0cmFjaztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1ZTogVlRUQ3VlID0gY3Vlc1tpXSBhcyBWVFRDdWU7XG4gICAgICAgICAgICBjdWUub25lbnRlciA9IHRoaXMub25DdWVFbnRlcjtcbiAgICAgICAgICAgIGN1ZS5vbmV4aXQgPSB0aGlzLm9uQ3VlRXhpdDtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwcm90ZWN0ZWQgdW5sb2FkQ0MoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cmFja3MgJiYgWy4uLnRoaXMudHJhY2tzXS5mb3JFYWNoKCh0cmFjazogVGV4dFRyYWNrKSA9PiB7IHRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnOyB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVCdXR0b25zKCk7XG4gICAgICAgIHNldFN0b3JhZ2VJdGVtKFBsYXllclN0b3JhZ2UuQ0MsIFBsYXllclN0b3JhZ2UuQ0NfTk9UX0FDVElWRSk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCB1cGRhdGVCdXR0b25zKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxpc3RCdXR0b25zLmZvckVhY2goKGJ0biwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNDdXJyZW50ID0gKCF0aGlzLmlzQWN0aXZlICYmIGkgPT09IDApIHx8ICh0aGlzLmlzQWN0aXZlICYmIGkgLSAxID09PSB0aGlzLmN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICBidG4ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnLCBpc0N1cnJlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wbGF5ZXJFbC5jbGFzc0xpc3QudG9nZ2xlKCdoYXMtY2FwdGlvbnMtb24nLCB0aGlzLmlzQWN0aXZlKTtcbiAgICB9XG5cblxuXG4gICAgcHJvdGVjdGVkIG9uQ3VlRW50ZXIgPSAoZTogRXZlbnQpOiBhbnkgPT4ge1xuICAgICAgICB0aGlzLmNhcHRpb25zICYmICh0aGlzLmNhcHRpb25zLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snKTtcbiAgICAgICAgdGhpcy5jYXB0aW9ucyAmJiAodGhpcy5jYXB0aW9ucy5pbm5lckhUTUwgPSBgPHNwYW4+JHsoZS5jdXJyZW50VGFyZ2V0IGFzIFZUVEN1ZSkudGV4dH08L3NwYW4+YCk7XG4gICAgfTtcblxuXG5cbiAgICBwcm90ZWN0ZWQgb25DdWVFeGl0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNhcHRpb25zICYmICh0aGlzLmNhcHRpb25zLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpO1xuICAgIH07XG5cblxuXG4gICAgcHJvdGVjdGVkIGNoZWNrTG9jYWxTdG9yYWdlKCk6IHZvaWQge1xuICAgICAgICBpZiAoZ2V0U3RvcmFnZUl0ZW0oUGxheWVyU3RvcmFnZS5DQykgPT09IFBsYXllclN0b3JhZ2UuQ0NfQUNUSVZFKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRDQyhwYXJzZUludChQbGF5ZXJTdG9yYWdlLkNDX0lOREVYLCAxMCkgfHwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBiaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ0bj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQnRuQ2xpY2spO1xuICAgICAgICB0aGlzLmxpc3RCdXR0b25zPy5mb3JFYWNoKGJ0biA9PiBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ0NUcmFja0NsaWNrKSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgdW5iaW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJ0bj8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQnRuQ2xpY2spO1xuICAgICAgICB0aGlzLmxpc3RCdXR0b25zPy5mb3JFYWNoKGJ0biA9PiBidG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ0NUcmFja0NsaWNrKSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgb25Ub2dnbGVCdG5DbGljayA9IChlKTogdm9pZCA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIG9uQ0NUcmFja0NsaWNrID0gZSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleCB8fCAtMSwgMTApO1xuICAgICAgICBpbmRleCA8IDAgPyB0aGlzLnVubG9hZENDKCkgOiB0aGlzLmxvYWRDQyhpbmRleCk7XG4gICAgfTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBhcnJheS1jYWxsYmFjay1yZXR1cm4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXG5pbXBvcnQgeyBnc2FwIH0gZnJvbSAnZ3NhcC9kaXN0L2dzYXAnO1xuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gJy4uL0hhbmRsZXInO1xuaW1wb3J0IHsgSUJyZWFrcG9pbnQgfSBmcm9tICcuLi9CcmVha3BvaW50JztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29tcG9uZW50JztcbmltcG9ydCB7IGNvbXBvbmVudHMgfSBmcm9tICcuLi9DbGFzc2VzJztcbmltcG9ydCB7IEltYWdlcyB9IGZyb20gJy4uL3dpZGdldHMvSW1hZ2VzJztcblxuXG5leHBvcnQgY2xhc3MgUGFnZUV2ZW50cyB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9HUkVTUzogc3RyaW5nID0gJ3Byb2dyZXNzJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENPTVBMRVRFOiBzdHJpbmcgPSAnY29tcGxldGUnO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0hBTkdFOiBzdHJpbmcgPSAnYXBwZW5kJztcbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBQYWdlIGV4dGVuZHMgSGFuZGxlciB7XG5cbiAgICBwdWJsaWMgY29tcG9uZW50czogQXJyYXk8Q29tcG9uZW50PjtcblxuXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlldzogSFRNTEVsZW1lbnQsIG9wdGlvbnM/KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmlldy5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xuICAgICAgICB0aGlzLmJ1aWxkQ29tcG9uZW50cyh0aGlzLnZpZXcucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jb21wb25lbnRdJykpO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBwcmVsb2FkIG5lY2Vzc2FyeSBhc3NldHM6XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gbG9hZGluZyBpbWFnZXMgcHJvbWlzZVxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gSW1hZ2VzLnByZWxvYWQodGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZy5wcmVsb2FkJykpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFBhZ2VFdmVudHMuQ09NUExFVEUpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGlmIGFueSBDb21wb25lbnQgY2FuIGJlIGNoYW5nZWQgYWZ0ZXIgb25TdGF0ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHJldHVybnMgdHJ1ZSB3aGVuIG9uZSBvZiB0aGUgY29tcG9uZW50c1xuICAgICAqIHRha2VzIGFjdGlvbiBpbiBvblN0YXRlIGZ1bmN0aW9uIGNhbGxcbiAgICAgKi9cbiAgICBwdWJsaWMgb25TdGF0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGNoYW5nZWQ6IGJvb2xlYW4gPSAhIWZhbHNlO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb21wb25lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRDaGFuZ2VkOiBib29sZWFuID0gY29tcG9uZW50Lm9uU3RhdGUoKTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlZCAmJiAhIWNvbXBvbmVudENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBwYWdlIGVudGVyaW5nIGFuaW1hdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBhbmltYXRpb24gZGVsYXlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW5pbWF0ZUluKGRlbGF5PzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb21wb25lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW2ldLmFuaW1hdGVJbihpLCBkZWxheSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdzYXAudG8odGhpcy52aWV3LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHJlc29sdmUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogcGFnZSBleGl0IGFuaW1hdGlvblxuICAgICAqIChjYWxsZWQgYWZ0ZXIgbmV3IGNvbnRlbnQgaXMgbG9hZGVkIGFuZCBiZWZvcmUgaXMgcmVuZGVyZWQpXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gYW5pbWF0aW9uIHByb21pc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgYW5pbWF0ZU91dCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gYW5pbWF0aW9uIG9mIHRoZSBwYWdlOlxuICAgICAgICBjb25zdCBwYWdlQW5pbWF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgZ3NhcC50byh0aGlzLnZpZXcsIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4yLFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhbmltYXRpb25zIG9mIGFsbCBjb21wb25lbnRzOlxuICAgICAgICBjb25zdCBjb21wb25lbnRBbmltYXRpb25zOiBQcm9taXNlPHZvaWQ+W10gPSB0aGlzLmNvbXBvbmVudHMubWFwKG9iaiA9PiBvYmouYW5pbWF0ZU91dCgpKTtcblxuICAgICAgICAvLyByZXR1cm4gb25lIHByb21pc2Ugd2FpdGluZyBmb3IgYWxsIGFuaW1hdGlvbnM6XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBjb21wb25lbnRBbmltYXRpb25zLmNvbmNhdChwYWdlQW5pbWF0aW9uUHJvbWlzZSk7XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsPHZvaWQ+KGFsbFByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIHJlc2l6ZSBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtbdHlwZV19IHdkdCAgICAgICAgd2luZG93IHdpZHRoXG4gICAgICogQHBhcmFtIHtbdHlwZV19IGhndCAgICAgICAgd2luZG93IGhlaWdodFxuICAgICAqIEBwYXJhbSB7W3R5cGVdfSBicmVha3BvaW50IElCcmVha3BvaW50IG9iamVjdFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHB1YmxpYyByZXNpemUod2R0OiBudW1iZXIsIGhndDogbnVtYmVyLCBicmVha3BvaW50OiBJQnJlYWtwb2ludCwgYnBDaGFuZ2VkPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGl0ZW0ucmVzaXplKHdkdCwgaGd0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIGNsZWFudXAgd2hlbiBjbG9zaW5nIFBhZ2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzLmZvckVhY2goaXRlbSA9PiBpdGVtLmRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG5cblxuICAgIHByb3RlY3RlZCBidWlsZENvbXBvbmVudHMoY29tcG9uZW50c0xpc3Q6IE5vZGVMaXN0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IFsuLi5jb21wb25lbnRzTGlzdF0ubWFwKGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZWw7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZWxlbWVudC5kYXRhc2V0LmNvbXBvbmVudDtcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQgJiYgY29tcG9uZW50c1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxldCBvcHRpb25zOiBPYmplY3Q7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuZGF0YXNldC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKGVsZW1lbnQuZGF0YXNldC5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gbmV3IGNvbXBvbmVudHNbbmFtZV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLndhcm4oJ1RoZXJlIGlzIG5vIGAlc2AgY29tcG9uZW50IScsIG5hbWUpO1xuICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgb25Db21wb25lbnRDaGFuZ2UgPSAoZWwpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5idWlsZENvbXBvbmVudHMoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY29tcG9uZW50XScpKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFBhZ2VFdmVudHMuQ0hBTkdFLCBlbCk7XG4gICAgfTtcblxuXG5cbiAgICAvLyBzaG9ydCBjYWxsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgcHJpdmF0ZSBjYWxsQWxsKGZuOiBzdHJpbmcsIC4uLmFyZ3MpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50W2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFtmbl0oLi4uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlZmluaXRpb25zL3R3aWcuZC50c1wiIC8+XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTmFtZXMge1xuICAgIHB1YmxpYyBzdGF0aWMgTElHSFRCT1ggPSAnbGlnaHRib3gnO1xuICAgIHB1YmxpYyBzdGF0aWMgTElWRVNFQVJDSCA9ICdsaXZlc2VhcmNoJztcbiAgICBwdWJsaWMgc3RhdGljIFBMQVlFUiA9ICdwbGF5ZXInO1xufVxuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVzIHtcbiAgICBwdWJsaWMgc3RhdGljIGdldChuYW1lOiBzdHJpbmcpOiBUd2lnLlRlbXBsYXRlIHtcbiAgICAgICAgY29uc3QgdG1wbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCN0bXBsLSR7bmFtZX1gKTtcbiAgICAgICAgaWYgKCF0bXBsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZXJlIGlzIG5vIGAlc2AgdGVtcGxhdGUhJywgbmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVHdpZy50d2lnKHsgZGF0YTogdG1wbC5pbm5lckhUTUwgfSk7XG4gICAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNhc2UtZGVjbGFyYXRpb25zICovXG5pbXBvcnQgeyBQdXNoU3RhdGVzIH0gZnJvbSAnLi4vUHVzaFN0YXRlcyc7XG5pbXBvcnQgeyBSZWNhcHRjaGEgfSBmcm9tICcuL1JlY2FwdGNoYSc7XG5pbXBvcnQgeyBzZXJpYWxpemVPYmplY3QgfSBmcm9tICcuLi9VdGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFwaURhdGEge1xuICAgIHVybD86IHN0cmluZztcbiAgICBiZWZvcmVDYWxsPzogc3RyaW5nO1xuICAgIGNhbGxiYWNrPzogc3RyaW5nO1xuICAgIGZvcm1TZWxlY3Rvcj86IHN0cmluZztcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWFueVxuICAgIHBhcmFtcz86IGFueTtcbiAgICBhY3Rpb24/OiAnUE9TVCcgfCAnREVMRVRFJyB8ICdHRVQnIHwgJ1BVVCcgfCAnUEFUQ0gnO1xufVxuXG5pbnRlcmZhY2UgSUFwaUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgYXBpOiBJQXBpRGF0YTtcbn1cblxuXG5leHBvcnQgY2xhc3MgQVBJIHtcbiAgICBwcml2YXRlIHN0YXRpYyBiZWZvcmVDYWxscyA9IHtcblxuXG4gICAgICAgIHZhbGlkYXRlKGRhdGE6IElBcGlEYXRhLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCBwYXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcblxuICAgICAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnaXMtZG9uZScpKSB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZG9uZScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLmpzLWVycm9yJykuZm9yRWFjaChlcnJvckVsID0+IHtcbiAgICAgICAgICAgICAgICBlcnJvckVsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIGVycm9yRWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3JlcXVpcmVkXTpub3QoW2RhdGEtcmVjYXB0Y2hhXSknKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlLnRlc3QodmFsdWUpIHx8ICF2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHZhbHVlLmxlbmd0aCA+IDAgPyBcIkl0IHNlZW1zIHRoZXJlJ3MgYW4gaXNzdWUgd2l0aCB0aGUgZW1haWwgeW91IGVudGVyZWQuIDxicj4gUGxlYXNlIGRvdWJsZS1jaGVjayBhbmQgdHJ5IGFnYWluLlwiIDogJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbG9zZXN0KCdmaWVsZHNldCcpLnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbG9zZXN0KCdmaWVsZHNldCcpLnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzcyA9IChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3MubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHBhc3MubGVuZ3RoID4gMCA/ICdpbnZhbGlkLXBhc3MnIDogJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RleHRhcmVhW3JlcXVpcmVkXScpLmZvckVhY2godGV4dGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgodGV4dGFyZWEgYXMgSFRNTFRleHRBcmVhRWxlbWVudCkudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW1JlY2FwdGNoYSA/IFJlY2FwdGNoYS5jaGVjayhlbCBhcyBIVE1MRm9ybUVsZW1lbnQpIDogbnVsbF0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBBUEkuY2FsbEl0KGRhdGEsIGVsKTtcbiAgICAgICAgICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLmpzLWVycm9yJykuZm9yRWFjaChlcnJvckVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3JzJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcnMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB2YWxpZGF0ZUJsdXIoZGF0YTogSUFwaURhdGEsIGVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHBhc3NlZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuXG4gICAgICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1kb25lJykpIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kb25lJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZXJyb3InKS5mb3JFYWNoKGVycm9yRWwgPT4ge1xuICAgICAgICAgICAgICAgIGVycm9yRWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgZXJyb3JFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbcmVxdWlyZWRdOm5vdChbZGF0YS1yZWNhcHRjaGFdKScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW1haWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmUudGVzdCh2YWx1ZSkgfHwgIXZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gdmFsdWUubGVuZ3RoID4gMCA/ICdOT1QgVkFMSUQgRS1NQUlMIEZPUk1BVCcgOiAnUmVxdWlyZWQgZmllbGQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNsb3Nlc3QoJ2ZpZWxkc2V0JykucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNsb3Nlc3QoJ2ZpZWxkc2V0JykucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzID0gKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzcy5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gcGFzcy5sZW5ndGggPiAwID8gJ2ludmFsaWQtcGFzcycgOiAnUmVxdWlyZWQgZmllbGQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnUmVxdWlyZWQgZmllbGQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgndGV4dGFyZWFbcmVxdWlyZWRdJykuZm9yRWFjaCh0ZXh0YXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCh0ZXh0YXJlYSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KS52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGlmIChwYXNzZWQpIHtcbiAgICAgICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZXJyb3InKS5mb3JFYWNoKGVycm9yRWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckVsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBlcnJvckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9ycycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3JzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICB9O1xuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBjYWxsYmFja3MgPSB7XG5cblxuICAgICAgICBvblN1YnNjcmliZShkYXRhOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50LCByZXNwb25zZSk6IHZvaWQge1xuICAgICAgICAgICAgbGV0ICRtZXNzYWdlID0gZWwucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcblxuICAgICAgICAgICAgaWYgKCEkbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdqcy1tZXNzYWdlJywgJ21lc3NhZ2UnKTtcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmQoZGl2KTtcbiAgICAgICAgICAgICAgICAkbWVzc2FnZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZXNzYWdlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAocmVzcG9uc2UubWVzc2FnZSk7XG5cbiAgICAgICAgICAgICRtZXNzYWdlLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLWNvbXBsZXRlZCcpO1xuXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goZWxlbSA9PiBlbGVtLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdibHVyJykpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvblNlbmRNZXNzYWdlKGRhdGE6IElBcGlEYXRhLCBlbDogSFRNTEVsZW1lbnQsIHJlc3BvbnNlKTogdm9pZCB7XG4gICAgICAgICAgICBsZXQgJG1lc3NhZ2UgPSBlbC5xdWVyeVNlbGVjdG9yKCcuanMtbWVzc2FnZScpO1xuXG4gICAgICAgICAgICBpZiAoISRtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kKCc8ZGl2IGNsYXNzPVwianMtbWVzc2FnZSBtZXNzYWdlXCI+Jyk7XG4gICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSBlbC5xdWVyeVNlbGVjdG9yKCcuanMtbWVzc2FnZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBodG1sID0gKHJlc3BvbnNlLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAkbWVzc2FnZS5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdpcy1jb21wbGV0ZWQnKTtcblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKGVsZW0gPT4gZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnYmx1cicpKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVsb2FkOiAoKTogdm9pZCA9PiB7XG4gICAgICAgICAgICBQdXNoU3RhdGVzLnJlbG9hZCgpO1xuICAgICAgICB9LFxuICAgIH07XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgYmluZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFwaV06bm90KGZvcm0pJykpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFwaV06bm90KGZvcm0pJykuZm9yRWFjaChhcGlFbCA9PiB7XG4gICAgICAgICAgICAgICAgYXBpRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBBUEkub25BY3Rpb24pO1xuICAgICAgICAgICAgICAgIGFwaUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgQVBJLm9uQWN0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm1bZGF0YS1hcGldJykpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm1bZGF0YS1hcGldJykuZm9yRWFjaChhcGlGb3JtRWwgPT4ge1xuICAgICAgICAgICAgICAgIGFwaUZvcm1FbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBBUEkub25BY3Rpb24pO1xuICAgICAgICAgICAgICAgIGFwaUZvcm1FbC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBBUEkub25BY3Rpb24pO1xuICAgICAgICAgICAgICAgIGFwaUZvcm1FbC5zZXRBdHRyaWJ1dGUoJ25vdmFsaWRhdGUnLCAnbm92YWxpZGF0ZScpO1xuXG4gICAgICAgICAgICAgICAgYXBpRm9ybUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3JlcXVpcmVkJykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBJQXBpRGF0YSA9IHsgLi4uSlNPTi5wYXJzZShhcGlGb3JtRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFwaScpKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmJlZm9yZUNhbGxzLnZhbGlkYXRlQmx1cihkYXRhLCBhcGlGb3JtRWwgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgc3RhdGljIGNhbGxJdChkYXRhQXBpOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50LCBjdXN0b21DYWxsYmFjaz86IEZ1bmN0aW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEFQSS5wcmVwcm9jZXNzRGF0YShkYXRhQXBpLCBlbCk7XG5cbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaXMtZG9pbmctcmVxdWVzdCcpO1xuXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGRhdGEuYWN0aW9uIHx8ICdQT1NUJztcbiAgICAgICAgZGVsZXRlIGRhdGEuYWN0aW9uO1xuXG4gICAgICAgIGNvbnN0IHVybCA9IGRhdGEudXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgZGVsZXRlIGRhdGEudXJsO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRvaW5nLXJlcXVlc3QnKTtcblxuICAgICAgICAgICAgY29uc3QgZGF0YUJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGRhdGEgYXMgYW55KTtcblxuICAgICAgICAgICAgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBhY3Rpb24sXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBkYXRhQm9keSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5vblN1Y2Nlc3MoZGF0YSwgZWwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21DYWxsYmFjayAmJiB0eXBlb2YgY3VzdG9tQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNhbGxiYWNrKGRhdGEsIGVsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQVBJIGVycm9yOiAke2Vycm9yfWAsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIHByZXByb2Nlc3NEYXRhKGRhdGE6IElBcGlEYXRhLCBlbDogSFRNTEVsZW1lbnQpOiBJQXBpRGF0YSB7XG4gICAgICAgIC8vIGdldCBkYXRhIGlmIGFwaSBjYWxsZWQgb24gZm9ybSBlbGVtZW50OlxuICAgICAgICBpZiAoZWwubWF0Y2hlcygnZm9ybScpKSB7XG4gICAgICAgICAgICBkYXRhLnVybCA9ICFkYXRhLnVybCAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpID8gZWwuZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSA6IGRhdGEudXJsO1xuICAgICAgICAgICAgZGF0YSA9IE9iamVjdC5hc3NpZ24oZGF0YSwgc2VyaWFsaXplT2JqZWN0KGVsIGFzIEhUTUxGb3JtRWxlbWVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGRhdGEgaWYgYXBpIGNhbGxlZCBvbiBsaW5rIGVsZW1lbnQ6XG4gICAgICAgIGlmIChlbC5tYXRjaGVzKCdbaHJlZl0nKSkge1xuICAgICAgICAgICAgZGF0YS51cmwgPSAhZGF0YS51cmwgJiYgZWwuZ2V0QXR0cmlidXRlKCdocmVmJykgPyBlbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSA6IGRhdGEudXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IGFkZGl0aW9uYWwgZGF0YSBmcm9tIGV4dGVybmFsIGZvcm06XG4gICAgICAgIGlmIChkYXRhLmZvcm1TZWxlY3Rvcikge1xuICAgICAgICAgICAgZGF0YSA9IE9iamVjdC5hc3NpZ24oZGF0YSwgc2VyaWFsaXplT2JqZWN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YS5mb3JtU2VsZWN0b3IpKSk7XG4gICAgICAgICAgICBkZWxldGUgZGF0YS5mb3JtU2VsZWN0b3I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmbGF0dGVuOlxuICAgICAgICBpZiAoZGF0YS5wYXJhbXMpIHtcbiAgICAgICAgICAgIGRhdGEgPSBPYmplY3QuYXNzaWduKGRhdGEsIGRhdGEucGFyYW1zKTtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhLnBhcmFtcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgb25BY3Rpb24gPSAoZTogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGVsID0gZS5jdXJyZW50VGFyZ2V0IGFzIElBcGlFbGVtZW50O1xuICAgICAgICBjb25zdCBkYXRhOiBJQXBpRGF0YSA9IHsgLi4uSlNPTi5wYXJzZShlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXBpJykpIH07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEsIGVsKTtcblxuICAgICAgICAvLyBiZWZvcmVDYWxsIGhhbmRsZXI6XG4gICAgICAgIGlmIChkYXRhLmJlZm9yZUNhbGwpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmJlZm9yZUNhbGwgaW4gQVBJLmJlZm9yZUNhbGxzKSB7XG4gICAgICAgICAgICAgICAgQVBJLmJlZm9yZUNhbGxzW2RhdGEuYmVmb3JlQ2FsbF0oZGF0YSwgZWwpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEFQSS5jYWxsSXQoZGF0YSwgZWwpO1xuICAgIH07XG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uU3VjY2VzcyA9IChkYXRhOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50LCByZXNwb25zZSk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoZGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2sgaW4gQVBJLmNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIEFQSS5jYWxsYmFja3NbZGF0YS5jYWxsYmFja10oZGF0YSwgZWwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVmcmVzaCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybScpXTtcblxuICAgICAgICBmb3Jtcy5mb3JFYWNoKGZvcm0gPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gWy4uLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmlzLWVycm9yJyksIC4uLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmhhcy1lcnJvcnMnKV07XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZXJyb3InKTtcbiAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtZG9pbmctcmVxdWVzdCcsICdpcy1jb21wbGV0ZWQnLCAnaGFzLWVycm9ycycpO1xuXG5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGVycm9yTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgICAgIGZvciAoY29uc3QgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVyciBvZiBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBlcnIuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InLCAnaGFzLWVycm9ycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgQVBJIH0gZnJvbSAnLi9BcGknO1xuaW1wb3J0IHsgQ1NTQW5pbWF0ZSB9IGZyb20gJy4vQ1NTQW5pbWF0ZSc7XG5pbXBvcnQgeyBFeHBhbmQgfSBmcm9tICcuL0V4cGFuZCc7XG5pbXBvcnQgeyBJbWFnZXMgfSBmcm9tICcuL0ltYWdlcyc7XG5pbXBvcnQgeyBSZWNhcHRjaGEgfSBmcm9tICcuL1JlY2FwdGNoYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpZGdldHMge1xuXG4gICAgcHVibGljIHN0YXRpYyBiaW5kKCk6IHZvaWQge1xuXG4gICAgICAgIEFQSS5iaW5kKCk7XG4gICAgICAgIENTU0FuaW1hdGUuYmluZCgpO1xuICAgICAgICBFeHBhbmQuYmluZCgpO1xuICAgICAgICBJbWFnZXMuYmluZCgpO1xuICAgICAgICBSZWNhcHRjaGEuYmluZCgpO1xuICAgIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jYXNlLWRlY2xhcmF0aW9ucyAqL1xuaW1wb3J0IHsgUHVzaFN0YXRlcyB9IGZyb20gJy4uL1B1c2hTdGF0ZXMnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhIH0gZnJvbSAnLi9SZWNhcHRjaGEnO1xuaW1wb3J0IHsgc2VyaWFsaXplT2JqZWN0IH0gZnJvbSAnLi4vVXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBcGlEYXRhIHtcbiAgICB1cmw/OiBzdHJpbmc7XG4gICAgYmVmb3JlQ2FsbD86IHN0cmluZztcbiAgICBjYWxsYmFjaz86IHN0cmluZztcbiAgICBmb3JtU2VsZWN0b3I/OiBzdHJpbmc7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1hbnlcbiAgICBwYXJhbXM/OiBhbnk7XG4gICAgYWN0aW9uPzogJ1BPU1QnIHwgJ0RFTEVURScgfCAnR0VUJyB8ICdQVVQnIHwgJ1BBVENIJztcbn1cblxuaW50ZXJmYWNlIElBcGlFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGFwaTogSUFwaURhdGE7XG59XG5cblxuZXhwb3J0IGNsYXNzIEFQSSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgYmVmb3JlQ2FsbHMgPSB7XG5cblxuICAgICAgICB2YWxpZGF0ZShkYXRhOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgICAgICBsZXQgcGFzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG5cbiAgICAgICAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWRvbmUnKSkge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRvbmUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1lcnJvcicpLmZvckVhY2goZXJyb3JFbCA9PiB7XG4gICAgICAgICAgICAgICAgZXJyb3JFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICBlcnJvckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtyZXF1aXJlZF06bm90KFtkYXRhLXJlY2FwdGNoYV0pJykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICgoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZS50ZXN0KHZhbHVlKSB8fCAhdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB2YWx1ZS5sZW5ndGggPiAwID8gXCJJdCBzZWVtcyB0aGVyZSdzIGFuIGlzc3VlIHdpdGggdGhlIGVtYWlsIHlvdSBlbnRlcmVkLiA8YnI+IFBsZWFzZSBkb3VibGUtY2hlY2sgYW5kIHRyeSBhZ2Fpbi5cIiA6ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2xvc2VzdCgnZmllbGRzZXQnKS5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2xvc2VzdCgnZmllbGRzZXQnKS5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3MgPSAoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXNzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBwYXNzLmxlbmd0aCA+IDAgPyAnaW52YWxpZC1wYXNzJyA6ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnUmVxdWlyZWQgZmllbGQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCd0ZXh0YXJlYVtyZXF1aXJlZF0nKS5mb3JFYWNoKHRleHRhcmVhID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKHRleHRhcmVhIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQpLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnUmVxdWlyZWQgZmllbGQnO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgaWYgKHBhc3NlZCkge1xuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtSZWNhcHRjaGEgPyBSZWNhcHRjaGEuY2hlY2soZWwgYXMgSFRNTEZvcm1FbGVtZW50KSA6IG51bGxdKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgQVBJLmNhbGxJdChkYXRhLCBlbCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1lcnJvcicpLmZvckVhY2goZXJyb3JFbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckVsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9ycycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3JzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGVCbHVyKGRhdGE6IElBcGlEYXRhLCBlbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCBwYXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcblxuICAgICAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnaXMtZG9uZScpKSB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZG9uZScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLmpzLWVycm9yJykuZm9yRWFjaChlcnJvckVsID0+IHtcbiAgICAgICAgICAgICAgICBlcnJvckVsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIGVycm9yRWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3JlcXVpcmVkXTpub3QoW2RhdGEtcmVjYXB0Y2hhXSknKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlLnRlc3QodmFsdWUpIHx8ICF2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHZhbHVlLmxlbmd0aCA+IDAgPyAnTk9UIFZBTElEIEUtTUFJTCBGT1JNQVQnIDogJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbG9zZXN0KCdmaWVsZHNldCcpLnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbG9zZXN0KCdmaWVsZHNldCcpLnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzcyA9IChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3MubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHBhc3MubGVuZ3RoID4gMCA/ICdpbnZhbGlkLXBhc3MnIDogJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZXJyb3InKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1JlcXVpcmVkIGZpZWxkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lcnJvcicpLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RleHRhcmVhW3JlcXVpcmVkXScpLmZvckVhY2godGV4dGFyZWEgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgodGV4dGFyZWEgYXMgSFRNTFRleHRBcmVhRWxlbWVudCkudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdSZXF1aXJlZCBmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWVycm9yJykuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLmpzLWVycm9yJykuZm9yRWFjaChlcnJvckVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lcnJvcicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcnMnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9ycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgfTtcblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2FsbGJhY2tzID0ge1xuXG5cbiAgICAgICAgb25TdWJzY3JpYmUoZGF0YTogSUFwaURhdGEsIGVsOiBIVE1MRWxlbWVudCwgcmVzcG9uc2UpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCAkbWVzc2FnZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZXNzYWdlJyk7XG5cbiAgICAgICAgICAgIGlmICghJG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgnanMtbWVzc2FnZScsICdtZXNzYWdlJyk7XG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kKGRpdik7XG4gICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSBlbC5xdWVyeVNlbGVjdG9yKCcuanMtbWVzc2FnZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBodG1sID0gKHJlc3BvbnNlLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAkbWVzc2FnZS5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdpcy1jb21wbGV0ZWQnKTtcblxuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKGVsZW0gPT4gZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnYmx1cicpKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25TZW5kTWVzc2FnZShkYXRhOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50LCByZXNwb25zZSk6IHZvaWQge1xuICAgICAgICAgICAgbGV0ICRtZXNzYWdlID0gZWwucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcblxuICAgICAgICAgICAgaWYgKCEkbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZCgnPGRpdiBjbGFzcz1cImpzLW1lc3NhZ2UgbWVzc2FnZVwiPicpO1xuICAgICAgICAgICAgICAgICRtZXNzYWdlID0gZWwucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IChyZXNwb25zZS5tZXNzYWdlKTtcblxuICAgICAgICAgICAgJG1lc3NhZ2UuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaXMtY29tcGxldGVkJyk7XG5cbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykuZm9yRWFjaChlbGVtID0+IGVsZW0uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2JsdXInKSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbG9hZDogKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgUHVzaFN0YXRlcy5yZWxvYWQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xuXG5cbiAgICBwdWJsaWMgc3RhdGljIGJpbmQoKTogdm9pZCB7XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hcGldOm5vdChmb3JtKScpKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hcGldOm5vdChmb3JtKScpLmZvckVhY2goYXBpRWwgPT4ge1xuICAgICAgICAgICAgICAgIGFwaUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgQVBJLm9uQWN0aW9uKTtcbiAgICAgICAgICAgICAgICBhcGlFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEFQSS5vbkFjdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtW2RhdGEtYXBpXScpKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtW2RhdGEtYXBpXScpLmZvckVhY2goYXBpRm9ybUVsID0+IHtcbiAgICAgICAgICAgICAgICBhcGlGb3JtRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgQVBJLm9uQWN0aW9uKTtcbiAgICAgICAgICAgICAgICBhcGlGb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgQVBJLm9uQWN0aW9uKTtcbiAgICAgICAgICAgICAgICBhcGlGb3JtRWwuc2V0QXR0cmlidXRlKCdub3ZhbGlkYXRlJywgJ25vdmFsaWRhdGUnKTtcblxuICAgICAgICAgICAgICAgIGFwaUZvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtyZXF1aXJlZCcpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YTogSUFwaURhdGEgPSB7IC4uLkpTT04ucGFyc2UoYXBpRm9ybUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hcGknKSkgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5iZWZvcmVDYWxscy52YWxpZGF0ZUJsdXIoZGF0YSwgYXBpRm9ybUVsIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgcHVibGljIHN0YXRpYyBjYWxsSXQoZGF0YUFwaTogSUFwaURhdGEsIGVsOiBIVE1MRWxlbWVudCwgY3VzdG9tQ2FsbGJhY2s/OiBGdW5jdGlvbik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBBUEkucHJlcHJvY2Vzc0RhdGEoZGF0YUFwaSwgZWwpO1xuXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2lzLWRvaW5nLXJlcXVlc3QnKTtcblxuICAgICAgICBjb25zdCBhY3Rpb24gPSBkYXRhLmFjdGlvbiB8fCAnUE9TVCc7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmFjdGlvbjtcblxuICAgICAgICBjb25zdCB1cmwgPSBkYXRhLnVybCB8fCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgIGRlbGV0ZSBkYXRhLnVybDtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kb2luZy1yZXF1ZXN0Jyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGFCb2R5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhkYXRhIGFzIGFueSk7XG5cbiAgICAgICAgICAgIGZldGNoKHVybCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogYWN0aW9uLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXG4gICAgICAgICAgICAgICAgYm9keTogZGF0YUJvZHksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkub25TdWNjZXNzKGRhdGEsIGVsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tQ2FsbGJhY2sgJiYgdHlwZW9mIGN1c3RvbUNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DYWxsYmFjayhkYXRhLCBlbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEFQSSBlcnJvcjogJHtlcnJvcn1gLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBwcmVwcm9jZXNzRGF0YShkYXRhOiBJQXBpRGF0YSwgZWw6IEhUTUxFbGVtZW50KTogSUFwaURhdGEge1xuICAgICAgICAvLyBnZXQgZGF0YSBpZiBhcGkgY2FsbGVkIG9uIGZvcm0gZWxlbWVudDpcbiAgICAgICAgaWYgKGVsLm1hdGNoZXMoJ2Zvcm0nKSkge1xuICAgICAgICAgICAgZGF0YS51cmwgPSAhZGF0YS51cmwgJiYgZWwuZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSA/IGVsLmdldEF0dHJpYnV0ZSgnYWN0aW9uJykgOiBkYXRhLnVybDtcbiAgICAgICAgICAgIGRhdGEgPSBPYmplY3QuYXNzaWduKGRhdGEsIHNlcmlhbGl6ZU9iamVjdChlbCBhcyBIVE1MRm9ybUVsZW1lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBkYXRhIGlmIGFwaSBjYWxsZWQgb24gbGluayBlbGVtZW50OlxuICAgICAgICBpZiAoZWwubWF0Y2hlcygnW2hyZWZdJykpIHtcbiAgICAgICAgICAgIGRhdGEudXJsID0gIWRhdGEudXJsICYmIGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpID8gZWwuZ2V0QXR0cmlidXRlKCdocmVmJykgOiBkYXRhLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBhZGRpdGlvbmFsIGRhdGEgZnJvbSBleHRlcm5hbCBmb3JtOlxuICAgICAgICBpZiAoZGF0YS5mb3JtU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGRhdGEgPSBPYmplY3QuYXNzaWduKGRhdGEsIHNlcmlhbGl6ZU9iamVjdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRhdGEuZm9ybVNlbGVjdG9yKSkpO1xuICAgICAgICAgICAgZGVsZXRlIGRhdGEuZm9ybVNlbGVjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmxhdHRlbjpcbiAgICAgICAgaWYgKGRhdGEucGFyYW1zKSB7XG4gICAgICAgICAgICBkYXRhID0gT2JqZWN0LmFzc2lnbihkYXRhLCBkYXRhLnBhcmFtcyk7XG4gICAgICAgICAgICBkZWxldGUgZGF0YS5wYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uQWN0aW9uID0gKGU6IEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBlbCA9IGUuY3VycmVudFRhcmdldCBhcyBJQXBpRWxlbWVudDtcbiAgICAgICAgY29uc3QgZGF0YTogSUFwaURhdGEgPSB7IC4uLkpTT04ucGFyc2UoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFwaScpKSB9O1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhLCBlbCk7XG5cbiAgICAgICAgLy8gYmVmb3JlQ2FsbCBoYW5kbGVyOlxuICAgICAgICBpZiAoZGF0YS5iZWZvcmVDYWxsKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5iZWZvcmVDYWxsIGluIEFQSS5iZWZvcmVDYWxscykge1xuICAgICAgICAgICAgICAgIEFQSS5iZWZvcmVDYWxsc1tkYXRhLmJlZm9yZUNhbGxdKGRhdGEsIGVsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBBUEkuY2FsbEl0KGRhdGEsIGVsKTtcbiAgICB9O1xuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBvblN1Y2Nlc3MgPSAoZGF0YTogSUFwaURhdGEsIGVsOiBIVE1MRWxlbWVudCwgcmVzcG9uc2UpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmNhbGxiYWNrIGluIEFQSS5jYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBBUEkuY2FsbGJhY2tzW2RhdGEuY2FsbGJhY2tdKGRhdGEsIGVsLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBwdWJsaWMgc3RhdGljIHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1zID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0nKV07XG5cbiAgICAgICAgZm9ybXMuZm9yRWFjaChmb3JtID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IFsuLi5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pcy1lcnJvcicpLCAuLi5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5oYXMtZXJyb3JzJyldO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmpzLWVycm9yJyk7XG4gICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRvaW5nLXJlcXVlc3QnLCAnaXMtY29tcGxldGVkJywgJ2hhcy1lcnJvcnMnKTtcblxuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBlcnJvck1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlucHV0IG9mIGlucHV0cykge1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICAgICAgZm9yIChjb25zdCBlcnIgb2YgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZXJyLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWVycm9yJywgJ2hhcy1lcnJvcnMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbiIsIi8qKlxuICogRmlyZSBzaW5nbGUgb25lLXdheSBhbmltYXRpb25zIG9uIGhvdmVyLlxuICpcbiAqIExpc3RlbmVycyBhcmUgYm91bmQgb24gYFtkYXRhLWNzc2FuaW1hdGVdYCBlbGVtZW50cyB0aGVtc2VsdmVzXG4gKiBvciBvbiBlbGVtZW50cyBzcGVjaWZpZWQgYnkgc2VsZWN0b3IgcGFzc2VkIGluIHRoZSBkYXRhc2V0OlxuICogYGBgPGRpdiBkYXRhLWNzc2FuaW1hdGU9XCIuanMtY2hpbGRcIj48c3BhbiBjbGFzcz1cImpzLWNoaWxkXCI+YGBgXG4gKlxuICogVG8gZmlyZSB0aGUgYW5pbWF0aW9uIHVzZSBgaXMtYW5pbWF0aW5nYCBjbGFzcyB3aGljaCBpcyBhZGRlZCBvbiBgbW91c2VlbnRlcmAgZXZlbnQuXG4gKiBgYGBbZGF0YS1jc3NhbmltYXRlXS5pcy1hbmltYXRpbmcgeyBhbmltYXRpb246IGN1c3RvbUFuaW1hdGlvbjsgfWBgYFxuICpcbiAqIEl0IGNhbiBiZSB1c2VkIHdpdGggYm90aDogY3NzLXRyYW5zaXRpb24gYW5kIGNzcy1hbmltYXRpb247XG4gKi9cblxuZXhwb3J0IGNsYXNzIENTU0FuaW1hdGUge1xuXG5cbiAgICBwdWJsaWMgc3RhdGljIGJpbmQoKTogdm9pZCB7XG4gICAgICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jc3NhbmltYXRlXScpXS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKGVsIGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LmNzc2FuaW1hdGU7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3RvciA/IGVsLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogZWw7XG4gICAgICAgICAgICB0YXJnZXQ/LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBDU1NBbmltYXRlLm9uQW5pbWF0aW9uRW5kKTtcbiAgICAgICAgICAgIHRhcmdldD8uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgQ1NTQW5pbWF0ZS5vbkFuaW1hdGlvbkVuZCk7XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgQ1NTQW5pbWF0ZS5vbk1vdXNlRW50ZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uQW5pbWF0aW9uRW5kID0gZSA9PiB7XG4gICAgICAgIGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWNzc2FuaW1hdGVdJykuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYW5pbWF0aW5nJyk7XG4gICAgfTtcblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgb25Nb3VzZUVudGVyID0gZSA9PiB7XG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdpcy1hbmltYXRpbmcnKTtcbiAgICB9O1xufVxuIiwiZXhwb3J0IGNsYXNzIEV4cGFuZCB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRNYXhIZWlnaHQoKTtcbiAgICB9O1xuXG5cblxuICAgIHB1YmxpYyBzdGF0aWMgYmluZCgpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLnNldE1heEhlaWdodCgpO1xuXG4gICAgICAgIChbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZXhwYW5kXVtpZF0nKV0gYXMgSFRNTEVsZW1lbnRbXSkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFthcmlhLWNvbnRyb2xzPVwiJHtlbGVtZW50LmlkfVwiXWApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEV4cGFuZC5vbkFyaWFDb250cm9sc0NsaWNrKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVsZW1lbnQsIHRvZ2dsZUJ1dHRvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgc3RhdGljIHVuYmluZCA9ICgpOiB2b2lkID0+IHtcblxuICAgICAgICAoWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWV4cGFuZF1baWRdJyldIGFzIEhUTUxFbGVtZW50W10pLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1thcmlhLWNvbnRyb2xzXScpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgICAgICB0b2dnbGVCdXR0b24/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgRXhwYW5kLm9uQXJpYUNvbnRyb2xzQ2xpY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uQXJpYUNvbnRyb2xzQ2xpY2sgPSAoZTogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgY29uc3QgaXNFeHBhbmRlZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnO1xuXG4gICAgICAgIGlzRXhwYW5kZWQgPyB0aGlzLmNvbGxhcHNlKHRhcmdldCkgOiB0aGlzLmV4cGFuZCh0YXJnZXQpO1xuICAgIH07XG5cblxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZXhwYW5kID0gKHRhcmdldDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIHRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWV4cGFuZGVkJyk7XG4gICAgICAgICh0YXJnZXQucXVlcnlTZWxlY3RvcignLmpzLWV4cGFuZC10ZXh0JykgYXMgSFRNTEVsZW1lbnQpLmlubmVyVGV4dCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXhwYW5kZWQtdGV4dCcpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJykpLmNsYXNzTGlzdC5hZGQoJ2lzLWV4cGFuZGVkJyk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb2xsYXBzZSA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZXhwYW5kZWQnKTtcbiAgICAgICAgKHRhcmdldC5xdWVyeVNlbGVjdG9yKCcuanMtZXhwYW5kLXRleHQnKSBhcyBIVE1MRWxlbWVudCkuaW5uZXJUZXh0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1oaWRkZW4tdGV4dCcpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJykpLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWV4cGFuZGVkJyk7XG4gICAgfTtcblxuXG5cbiAgICBwcml2YXRlIHN0YXRpYyBzZXRNYXhIZWlnaHQgPSAoKSA9PiB7XG4gICAgICAgIChbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZXhwYW5kXVtpZF0nKV0gYXMgSFRNTEVsZW1lbnRbXSkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVpZ2h0IH0gPSBlbGVtZW50LmNoaWxkcmVuWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RlZmluaXRpb25zL2ltYWdlc2xvYWRlZC5kLnRzXCIgLz5cblxuXG5leHBvcnQgY2xhc3MgSW1hZ2VzIHtcblxuXG4gICAgLyoqXG4gICAgICogcHJlbG9hZCBpbWFnZXNcbiAgICAgKiBAcGFyYW0ge05vZGVMaXN0T2Y8SFRNTEltYWdlRWxlbWVudD59IGltZ0VsZW1lbnRzIGltYWdlcyB0byBwcmVsb2FkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gbG9hZGluZyBpbWFnZXMgcHJvbWlzZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcHJlbG9hZChpbWdFbGVtZW50czogTm9kZUxpc3RPZjxIVE1MSW1hZ2VFbGVtZW50Pik6IFByb21pc2U8dm9pZD4ge1xuXG4gICAgICAgIGlmICghaW1nRWxlbWVudHMgfHwgIWltZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaW1hZ2VzTG9hZGVkKGltZ0VsZW1lbnRzKS5vbignYWx3YXlzJywgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGxpc3RlbiB0byBhbGwgaW1hZ2VzIGxvYWRlZCBldmVudFxuICAgICAqIG1hcmsgdGhlbSBhcyBsb2FkZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJpbmQoKTogdm9pZCB7XG4gICAgICAgIGltYWdlc0xvYWRlZCAmJiBpbWFnZXNMb2FkZWQoZG9jdW1lbnQuYm9keSwgSW1hZ2VzLm9uTG9hZGVkKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGltYWdlc0xvYWRlZCBzdWNjZXNzZnVsIGNhbGxiYWNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgb25Mb2FkZWQgPSBpbnN0YW5jZSA9PiB7XG5cbiAgICAgICAgWy4uLmluc3RhbmNlLmltYWdlc10uZm9yRWFjaCgoeyBpbWcsIGlzTG9hZGVkIH0pID0+IHtcblxuICAgICAgICAgICAgaWYgKGlzTG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgaW1nLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZCgnaXMtbG9hZGVkJyk7XG4gICAgICAgICAgICAgICAgaW1nLmNsb3Nlc3QoJ2ZpZ3VyZScpPy5jbGFzc0xpc3QuYWRkKCdpcy1sb2FkZWQnKTtcbiAgICAgICAgICAgICAgICBpbWcuY2xvc2VzdCgnLmltYWdlJyk/LmNsYXNzTGlzdC5hZGQoJ2lzLWxvYWRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZWZpbml0aW9ucy9ncmVjYXB0Y2hhLmQudHNcIiAvPlxuXG5pbXBvcnQgeyBnZXRTY3JpcHQgfSBmcm9tICcuLi9VdGlscyc7XG5cblxuZXhwb3J0IGNsYXNzIFJlY2FwdGNoYSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgU0lURV9LRVk6IHN0cmluZztcbiAgICBwcml2YXRlIHN0YXRpYyBpbnB1dFNlbGVjdG9yID0gJ1tkYXRhLXJlY2FwdGNoYV0nO1xuXG5cbiAgICBwdWJsaWMgc3RhdGljIGJpbmQoc2VsZWN0b3I/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmJvZHkgOiBzZWxlY3RvcjtcblxuICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJlY2FwdGNoYWtleV0nKSkgeyByZXR1cm47IH1cblxuICAgICAgICBSZWNhcHRjaGEuU0lURV9LRVkgPSBSZWNhcHRjaGEuU0lURV9LRVlcbiAgICAgICAgfHwgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJlY2FwdGNoYWtleV0nKSBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC5yZWNhcHRjaGFrZXk7XG5cbiAgICAgICAgaWYgKCF0YXJnZXQucXVlcnlTZWxlY3RvcihSZWNhcHRjaGEuaW5wdXRTZWxlY3RvcikpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBncmVjYXB0Y2hhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZ2V0U2NyaXB0KFxuICAgICAgICAgICAgICAgIGAvL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/cmVuZGVyPSR7UmVjYXB0Y2hhLlNJVEVfS0VZfWAsXG4gICAgICAgICAgICAgICAgKCkgPT4gUmVjYXB0Y2hhLmF0dGFjaCh0YXJnZXQucXVlcnlTZWxlY3RvcihSZWNhcHRjaGEuaW5wdXRTZWxlY3RvcikpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlY2FwdGNoYS5hdHRhY2godGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoUmVjYXB0Y2hhLmlucHV0U2VsZWN0b3IpKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gbGlua2VkIHdpdGggYFdpZGdldHMuRm9ybWBcbiAgICBwdWJsaWMgc3RhdGljIGNoZWNrKGZvcm06IEhUTUxGb3JtRWxlbWVudCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpLnNwbGl0KCcvJykucG9wKCkucmVwbGFjZSgvW14wLTlhLXpdL2dpLCAnJykgfHwgJ2FjdGlvbic7XG4gICAgICAgICAgICBncmVjYXB0Y2hhLmV4ZWN1dGUoUmVjYXB0Y2hhLlNJVEVfS0VZLCB7IGFjdGlvbiB9KVxuICAgICAgICAgICAgICAgIC50aGVuKHRva2VuID0+IHtcbiAgICAgICAgICAgICAgICAgICAgUmVjYXB0Y2hhLm9uRXhlY3V0ZShmb3JtLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodG9rZW4pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIGF0dGFjaCh0YXJnZXQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGdyZWNhcHRjaGEucmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKS5kYXRhID0geyBSZWNhcHRjaGEgfTtcbiAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KCdmb3JtJykuY2xhc3NMaXN0LmFkZCgnaGFzLXJlY2FwdGNoYScpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIG9uRXhlY3V0ZShmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIHRva2VuOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPXRva2VuXScpKSB7IGZvcm0uYXBwZW5kKCc8aW5wdXQgbmFtZT1cInRva2VuXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiXCI+Jyk7IH1cbiAgICAgICAgY29uc3QgaW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPXRva2VuXScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdG9rZW47XG4gICAgfVxufVxuIl19"}