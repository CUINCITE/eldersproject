{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gsap/dist/CustomEase.js","node_modules/gsap/dist/ScrollToPlugin.js","node_modules/gsap/dist/ScrollTrigger.js","node_modules/gsap/dist/gsap.js","src/ts/Animate.ts","src/ts/Breakpoint.ts","src/ts/Browser.ts","src/ts/Classes.ts","src/ts/Handler.ts","src/ts/Menu.ts","src/ts/PushStates.ts","src/ts/Scroll.ts","src/ts/Search.ts","src/ts/Site.ts","src/ts/Utils.ts","src/ts/animations/all.ts","src/ts/animations/fadeUp.ts","src/ts/animations/scroll/hero.ts","src/ts/animations/scroll/interviews.ts","src/ts/components/Accordeon.ts","src/ts/components/AccordeonList.ts","src/ts/components/AudioPlayer.ts","src/ts/components/Component.ts","src/ts/components/FilterLetters.ts","src/ts/components/Lightbox/Lightbox.ts","src/ts/components/Lightbox/LightboxNav.ts","src/ts/components/Lightbox/LightboxSlider.ts","src/ts/components/Lightbox/LightboxTranscript.ts","src/ts/components/Load.ts","src/ts/components/Modal.ts","src/ts/components/More.ts","src/ts/components/Player/Player.Time.ts","src/ts/components/Player/Player.ts","src/ts/components/Player/Player.types.ts","src/ts/components/Player/Player.utils.ts","src/ts/components/Player/PlayerFullscreen.ts","src/ts/components/Player/PlayerPopups.ts","src/ts/components/Player/PlayerPoster.ts","src/ts/components/Player/PlayerSettings.ts","src/ts/components/Player/PlayerTimeline.ts","src/ts/components/Player/PlayerVolume.ts","src/ts/components/Player/Video.ts","src/ts/components/Player/Video.types.ts","src/ts/components/Player/VideoCaptions.ts","src/ts/pages/Page.ts","src/ts/templates/Templates.ts","src/ts/widgets/API.ts","src/ts/widgets/Accessibility.ts","src/ts/widgets/All.ts","src/ts/widgets/Analytics.ts","src/ts/widgets/Api.ts","src/ts/widgets/CSSAnimate.ts","src/ts/widgets/Expand.ts","src/ts/widgets/Images.ts","src/ts/widgets/Recaptcha.ts","src/ts/widgets/Sound.ts","src/ts/widgets/Sounds.ts","src/ts/widgets/Vibration.ts"],"names":[],"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\tvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t    _DEG2RAD = Math.PI / 180,\n\t    _sin = Math.sin,\n\t    _cos = Math.cos,\n\t    _abs = Math.abs,\n\t    _sqrt = Math.sqrt,\n\t    _isNumber = function _isNumber(value) {\n\t  return typeof value === \"number\";\n\t},\n\t    _roundingNum = 1e5,\n\t    _round = function _round(value) {\n\t  return Math.round(value * _roundingNum) / _roundingNum || 0;\n\t};\n\tfunction transformRawPath(rawPath, a, b, c, d, tx, ty) {\n\t  var j = rawPath.length,\n\t      segment,\n\t      l,\n\t      i,\n\t      x,\n\t      y;\n\n\t  while (--j > -1) {\n\t    segment = rawPath[j];\n\t    l = segment.length;\n\n\t    for (i = 0; i < l; i += 2) {\n\t      x = segment[i];\n\t      y = segment[i + 1];\n\t      segment[i] = x * a + y * c + tx;\n\t      segment[i + 1] = x * b + y * d + ty;\n\t    }\n\t  }\n\n\t  rawPath._dirty = 1;\n\t  return rawPath;\n\t}\n\n\tfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n\t  if (lastX === x && lastY === y) {\n\t    return;\n\t  }\n\n\t  rx = _abs(rx);\n\t  ry = _abs(ry);\n\n\t  var angleRad = angle % 360 * _DEG2RAD,\n\t      cosAngle = _cos(angleRad),\n\t      sinAngle = _sin(angleRad),\n\t      PI = Math.PI,\n\t      TWOPI = PI * 2,\n\t      dx2 = (lastX - x) / 2,\n\t      dy2 = (lastY - y) / 2,\n\t      x1 = cosAngle * dx2 + sinAngle * dy2,\n\t      y1 = -sinAngle * dx2 + cosAngle * dy2,\n\t      x1_sq = x1 * x1,\n\t      y1_sq = y1 * y1,\n\t      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n\t  if (radiiCheck > 1) {\n\t    rx = _sqrt(radiiCheck) * rx;\n\t    ry = _sqrt(radiiCheck) * ry;\n\t  }\n\n\t  var rx_sq = rx * rx,\n\t      ry_sq = ry * ry,\n\t      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n\t  if (sq < 0) {\n\t    sq = 0;\n\t  }\n\n\t  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n\t      cx1 = coef * (rx * y1 / ry),\n\t      cy1 = coef * -(ry * x1 / rx),\n\t      sx2 = (lastX + x) / 2,\n\t      sy2 = (lastY + y) / 2,\n\t      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n\t      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n\t      ux = (x1 - cx1) / rx,\n\t      uy = (y1 - cy1) / ry,\n\t      vx = (-x1 - cx1) / rx,\n\t      vy = (-y1 - cy1) / ry,\n\t      temp = ux * ux + uy * uy,\n\t      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n\t      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n\t  isNaN(angleExtent) && (angleExtent = PI);\n\n\t  if (!sweepFlag && angleExtent > 0) {\n\t    angleExtent -= TWOPI;\n\t  } else if (sweepFlag && angleExtent < 0) {\n\t    angleExtent += TWOPI;\n\t  }\n\n\t  angleStart %= TWOPI;\n\t  angleExtent %= TWOPI;\n\n\t  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n\t      rawPath = [],\n\t      angleIncrement = angleExtent / segments,\n\t      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n\t      ma = cosAngle * rx,\n\t      mb = sinAngle * rx,\n\t      mc = sinAngle * -ry,\n\t      md = cosAngle * ry,\n\t      i;\n\n\t  for (i = 0; i < segments; i++) {\n\t    angle = angleStart + i * angleIncrement;\n\t    x1 = _cos(angle);\n\t    y1 = _sin(angle);\n\t    ux = _cos(angle += angleIncrement);\n\t    uy = _sin(angle);\n\t    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n\t  }\n\n\t  for (i = 0; i < rawPath.length; i += 2) {\n\t    x1 = rawPath[i];\n\t    y1 = rawPath[i + 1];\n\t    rawPath[i] = x1 * ma + y1 * mc + cx;\n\t    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n\t  }\n\n\t  rawPath[i - 2] = x;\n\t  rawPath[i - 1] = y;\n\t  return rawPath;\n\t}\n\n\tfunction stringToRawPath(d) {\n\t  var a = (d + \"\").replace(_scientific, function (m) {\n\t    var n = +m;\n\t    return n < 0.0001 && n > -0.0001 ? 0 : n;\n\t  }).match(_svgPathExp) || [],\n\t      path = [],\n\t      relativeX = 0,\n\t      relativeY = 0,\n\t      twoThirds = 2 / 3,\n\t      elements = a.length,\n\t      points = 0,\n\t      errorMessage = \"ERROR: malformed path: \" + d,\n\t      i,\n\t      j,\n\t      x,\n\t      y,\n\t      command,\n\t      isRelative,\n\t      segment,\n\t      startX,\n\t      startY,\n\t      difX,\n\t      difY,\n\t      beziers,\n\t      prevCommand,\n\t      flag1,\n\t      flag2,\n\t      line = function line(sx, sy, ex, ey) {\n\t    difX = (ex - sx) / 3;\n\t    difY = (ey - sy) / 3;\n\t    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n\t  };\n\n\t  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n\t    console.log(errorMessage);\n\t    return path;\n\t  }\n\n\t  for (i = 0; i < elements; i++) {\n\t    prevCommand = command;\n\n\t    if (isNaN(a[i])) {\n\t      command = a[i].toUpperCase();\n\t      isRelative = command !== a[i];\n\t    } else {\n\t      i--;\n\t    }\n\n\t    x = +a[i + 1];\n\t    y = +a[i + 2];\n\n\t    if (isRelative) {\n\t      x += relativeX;\n\t      y += relativeY;\n\t    }\n\n\t    if (!i) {\n\t      startX = x;\n\t      startY = y;\n\t    }\n\n\t    if (command === \"M\") {\n\t      if (segment) {\n\t        if (segment.length < 8) {\n\t          path.length -= 1;\n\t        } else {\n\t          points += segment.length;\n\t        }\n\t      }\n\n\t      relativeX = startX = x;\n\t      relativeY = startY = y;\n\t      segment = [x, y];\n\t      path.push(segment);\n\t      i += 2;\n\t      command = \"L\";\n\t    } else if (command === \"C\") {\n\t      if (!segment) {\n\t        segment = [0, 0];\n\t      }\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n\t      i += 6;\n\t    } else if (command === \"S\") {\n\t      difX = relativeX;\n\t      difY = relativeY;\n\n\t      if (prevCommand === \"C\" || prevCommand === \"S\") {\n\t        difX += relativeX - segment[segment.length - 4];\n\t        difY += relativeY - segment[segment.length - 3];\n\t      }\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n\t      i += 4;\n\t    } else if (command === \"Q\") {\n\t      difX = relativeX + (x - relativeX) * twoThirds;\n\t      difY = relativeY + (y - relativeY) * twoThirds;\n\n\t      if (!isRelative) {\n\t        relativeX = relativeY = 0;\n\t      }\n\n\t      relativeX += a[i + 3] * 1;\n\t      relativeY += a[i + 4] * 1;\n\t      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n\t      i += 4;\n\t    } else if (command === \"T\") {\n\t      difX = relativeX - segment[segment.length - 4];\n\t      difY = relativeY - segment[segment.length - 3];\n\t      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n\t      i += 2;\n\t    } else if (command === \"H\") {\n\t      line(relativeX, relativeY, relativeX = x, relativeY);\n\t      i += 1;\n\t    } else if (command === \"V\") {\n\t      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n\t      i += 1;\n\t    } else if (command === \"L\" || command === \"Z\") {\n\t      if (command === \"Z\") {\n\t        x = startX;\n\t        y = startY;\n\t        segment.closed = true;\n\t      }\n\n\t      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n\t        line(relativeX, relativeY, x, y);\n\n\t        if (command === \"L\") {\n\t          i += 2;\n\t        }\n\t      }\n\n\t      relativeX = x;\n\t      relativeY = y;\n\t    } else if (command === \"A\") {\n\t      flag1 = a[i + 4];\n\t      flag2 = a[i + 5];\n\t      difX = a[i + 6];\n\t      difY = a[i + 7];\n\t      j = 7;\n\n\t      if (flag1.length > 1) {\n\t        if (flag1.length < 3) {\n\t          difY = difX;\n\t          difX = flag2;\n\t          j--;\n\t        } else {\n\t          difY = flag2;\n\t          difX = flag1.substr(2);\n\t          j -= 2;\n\t        }\n\n\t        flag2 = flag1.charAt(1);\n\t        flag1 = flag1.charAt(0);\n\t      }\n\n\t      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n\t      i += j;\n\n\t      if (beziers) {\n\t        for (j = 0; j < beziers.length; j++) {\n\t          segment.push(beziers[j]);\n\t        }\n\t      }\n\n\t      relativeX = segment[segment.length - 2];\n\t      relativeY = segment[segment.length - 1];\n\t    } else {\n\t      console.log(errorMessage);\n\t    }\n\t  }\n\n\t  i = segment.length;\n\n\t  if (i < 6) {\n\t    path.pop();\n\t    i = 0;\n\t  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n\t    segment.closed = true;\n\t  }\n\n\t  path.totalPoints = points + i;\n\t  return path;\n\t}\n\tfunction rawPathToString(rawPath) {\n\t  if (_isNumber(rawPath[0])) {\n\t    rawPath = [rawPath];\n\t  }\n\n\t  var result = \"\",\n\t      l = rawPath.length,\n\t      sl,\n\t      s,\n\t      i,\n\t      segment;\n\n\t  for (s = 0; s < l; s++) {\n\t    segment = rawPath[s];\n\t    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n\t    sl = segment.length;\n\n\t    for (i = 2; i < sl; i++) {\n\t      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n\t    }\n\n\t    if (segment.closed) {\n\t      result += \"z\";\n\t    }\n\t  }\n\n\t  return result;\n\t}\n\n\t/*!\n\t * CustomEase 3.12.2\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2023, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\n\tvar gsap,\n\t    _coreInitted,\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _initCore = function _initCore() {\n\t  gsap = _getGSAP();\n\n\t  if (gsap) {\n\t    gsap.registerEase(\"_CE\", CustomEase.create);\n\t    _coreInitted = 1;\n\t  } else {\n\t    console.warn(\"Please gsap.registerPlugin(CustomEase)\");\n\t  }\n\t},\n\t    _bigNum = 1e20,\n\t    _round$1 = function _round(value) {\n\t  return ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000;\n\t},\n\t    _numExp = /[-+=\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/gi,\n\t    _needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,\n\t    _findMinimum = function _findMinimum(values) {\n\t  var l = values.length,\n\t      min = _bigNum,\n\t      i;\n\n\t  for (i = 1; i < l; i += 6) {\n\t    +values[i] < min && (min = +values[i]);\n\t  }\n\n\t  return min;\n\t},\n\t    _normalize = function _normalize(values, height, originY) {\n\t  if (!originY && originY !== 0) {\n\t    originY = Math.max(+values[values.length - 1], +values[1]);\n\t  }\n\n\t  var tx = +values[0] * -1,\n\t      ty = -originY,\n\t      l = values.length,\n\t      sx = 1 / (+values[l - 2] + tx),\n\t      sy = -height || (Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0]) ? _findMinimum(values) + ty : +values[l - 1] + ty),\n\t      i;\n\n\t  if (sy) {\n\t    sy = 1 / sy;\n\t  } else {\n\t    sy = -sx;\n\t  }\n\n\t  for (i = 0; i < l; i += 2) {\n\t    values[i] = (+values[i] + tx) * sx;\n\t    values[i + 1] = (+values[i + 1] + ty) * sy;\n\t  }\n\t},\n\t    _bezierToPoints = function _bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n\t  var x12 = (x1 + x2) / 2,\n\t      y12 = (y1 + y2) / 2,\n\t      x23 = (x2 + x3) / 2,\n\t      y23 = (y2 + y3) / 2,\n\t      x34 = (x3 + x4) / 2,\n\t      y34 = (y3 + y4) / 2,\n\t      x123 = (x12 + x23) / 2,\n\t      y123 = (y12 + y23) / 2,\n\t      x234 = (x23 + x34) / 2,\n\t      y234 = (y23 + y34) / 2,\n\t      x1234 = (x123 + x234) / 2,\n\t      y1234 = (y123 + y234) / 2,\n\t      dx = x4 - x1,\n\t      dy = y4 - y1,\n\t      d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),\n\t      d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),\n\t      length;\n\n\t  if (!points) {\n\t    points = [{\n\t      x: x1,\n\t      y: y1\n\t    }, {\n\t      x: x4,\n\t      y: y4\n\t    }];\n\t    index = 1;\n\t  }\n\n\t  points.splice(index || points.length - 1, 0, {\n\t    x: x1234,\n\t    y: y1234\n\t  });\n\n\t  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n\t    length = points.length;\n\n\t    _bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n\n\t    _bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));\n\t  }\n\n\t  return points;\n\t};\n\n\tvar CustomEase = function () {\n\t  function CustomEase(id, data, config) {\n\t    _coreInitted || _initCore();\n\t    this.id = id;\n\t     this.setData(data, config);\n\t  }\n\n\t  var _proto = CustomEase.prototype;\n\n\t  _proto.setData = function setData(data, config) {\n\t    config = config || {};\n\t    data = data || \"0,0,1,1\";\n\t    var values = data.match(_numExp),\n\t        closest = 1,\n\t        points = [],\n\t        lookup = [],\n\t        precision = config.precision || 1,\n\t        fast = precision <= 1,\n\t        l,\n\t        a1,\n\t        a2,\n\t        i,\n\t        inc,\n\t        j,\n\t        point,\n\t        prevPoint,\n\t        p;\n\t    this.data = data;\n\n\t    if (_needsParsingExp.test(data) || ~data.indexOf(\"M\") && data.indexOf(\"C\") < 0) {\n\t      values = stringToRawPath(data)[0];\n\t    }\n\n\t    l = values.length;\n\n\t    if (l === 4) {\n\t      values.unshift(0, 0);\n\t      values.push(1, 1);\n\t      l = 8;\n\t    } else if ((l - 2) % 6) {\n\t      throw \"Invalid CustomEase\";\n\t    }\n\n\t    if (+values[0] !== 0 || +values[l - 2] !== 1) {\n\t      _normalize(values, config.height, config.originY);\n\t    }\n\n\t    this.segment = values;\n\n\t    for (i = 2; i < l; i += 6) {\n\t      a1 = {\n\t        x: +values[i - 2],\n\t        y: +values[i - 1]\n\t      };\n\t      a2 = {\n\t        x: +values[i + 4],\n\t        y: +values[i + 5]\n\t      };\n\t      points.push(a1, a2);\n\n\t      _bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);\n\t    }\n\n\t    l = points.length;\n\n\t    for (i = 0; i < l; i++) {\n\t      point = points[i];\n\t      prevPoint = points[i - 1] || point;\n\n\t      if ((point.x > prevPoint.x || prevPoint.y !== point.y && prevPoint.x === point.x || point === prevPoint) && point.x <= 1) {\n\t        prevPoint.cx = point.x - prevPoint.x;\n\t        prevPoint.cy = point.y - prevPoint.y;\n\t        prevPoint.n = point;\n\t        prevPoint.nx = point.x;\n\n\t        if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) {\n\t          fast = 0;\n\t        }\n\n\t        if (prevPoint.cx < closest) {\n\t          if (!prevPoint.cx) {\n\t            prevPoint.cx = 0.001;\n\n\t            if (i === l - 1) {\n\t              prevPoint.x -= 0.001;\n\t              closest = Math.min(closest, 0.001);\n\t              fast = 0;\n\t            }\n\t          } else {\n\t            closest = prevPoint.cx;\n\t          }\n\t        }\n\t      } else {\n\t        points.splice(i--, 1);\n\t        l--;\n\t      }\n\t    }\n\n\t    l = 1 / closest + 1 | 0;\n\t    inc = 1 / l;\n\t    j = 0;\n\t    point = points[0];\n\n\t    if (fast) {\n\t      for (i = 0; i < l; i++) {\n\t        p = i * inc;\n\n\t        if (point.nx < p) {\n\t          point = points[++j];\n\t        }\n\n\t        a1 = point.y + (p - point.x) / point.cx * point.cy;\n\t        lookup[i] = {\n\t          x: p,\n\t          cx: inc,\n\t          y: a1,\n\t          cy: 0,\n\t          nx: 9\n\t        };\n\n\t        if (i) {\n\t          lookup[i - 1].cy = a1 - lookup[i - 1].y;\n\t        }\n\t      }\n\n\t      lookup[l - 1].cy = points[points.length - 1].y - a1;\n\t    } else {\n\t      for (i = 0; i < l; i++) {\n\t        if (point.nx < i * inc) {\n\t          point = points[++j];\n\t        }\n\n\t        lookup[i] = point;\n\t      }\n\n\t      if (j < points.length - 1) {\n\t        lookup[i - 1] = points[points.length - 2];\n\t      }\n\t    }\n\n\t    this.ease = function (p) {\n\t      var point = lookup[p * l | 0] || lookup[l - 1];\n\n\t      if (point.nx < p) {\n\t        point = point.n;\n\t      }\n\n\t      return point.y + (p - point.x) / point.cx * point.cy;\n\t    };\n\n\t    this.ease.custom = this;\n\t    this.id && gsap && gsap.registerEase(this.id, this.ease);\n\t    return this;\n\t  };\n\n\t  _proto.getSVGData = function getSVGData(config) {\n\t    return CustomEase.getSVGData(this, config);\n\t  };\n\n\t  CustomEase.create = function create(id, data, config) {\n\t    return new CustomEase(id, data, config).ease;\n\t  };\n\n\t  CustomEase.register = function register(core) {\n\t    gsap = core;\n\n\t    _initCore();\n\t  };\n\n\t  CustomEase.get = function get(id) {\n\t    return gsap.parseEase(id);\n\t  };\n\n\t  CustomEase.getSVGData = function getSVGData(ease, config) {\n\t    config = config || {};\n\t    var width = config.width || 100,\n\t        height = config.height || 100,\n\t        x = config.x || 0,\n\t        y = (config.y || 0) + height,\n\t        e = gsap.utils.toArray(config.path)[0],\n\t        a,\n\t        slope,\n\t        i,\n\t        inc,\n\t        tx,\n\t        ty,\n\t        precision,\n\t        threshold,\n\t        prevX,\n\t        prevY;\n\n\t    if (config.invert) {\n\t      height = -height;\n\t      y = 0;\n\t    }\n\n\t    if (typeof ease === \"string\") {\n\t      ease = gsap.parseEase(ease);\n\t    }\n\n\t    if (ease.custom) {\n\t      ease = ease.custom;\n\t    }\n\n\t    if (ease instanceof CustomEase) {\n\t      a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));\n\t    } else {\n\t      a = [x, y];\n\t      precision = Math.max(5, (config.precision || 1) * 200);\n\t      inc = 1 / precision;\n\t      precision += 2;\n\t      threshold = 5 / precision;\n\t      prevX = _round$1(x + inc * width);\n\t      prevY = _round$1(y + ease(inc) * -height);\n\t      slope = (prevY - y) / (prevX - x);\n\n\t      for (i = 2; i < precision; i++) {\n\t        tx = _round$1(x + i * inc * width);\n\t        ty = _round$1(y + ease(i * inc) * -height);\n\n\t        if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) {\n\t          a.push(prevX, prevY);\n\t          slope = (ty - prevY) / (tx - prevX);\n\t        }\n\n\t        prevX = tx;\n\t        prevY = ty;\n\t      }\n\n\t      a = \"M\" + a.join(\",\");\n\t    }\n\n\t    e && e.setAttribute(\"d\", a);\n\t    return a;\n\t  };\n\n\t  return CustomEase;\n\t}();\n\t_getGSAP() && gsap.registerPlugin(CustomEase);\n\tCustomEase.version = \"3.12.2\";\n\n\texports.CustomEase = CustomEase;\n\texports.default = CustomEase;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\t/*!\n\t * ScrollToPlugin 3.12.2\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2023, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\tvar gsap,\n\t    _coreInitted,\n\t    _window,\n\t    _docEl,\n\t    _body,\n\t    _toArray,\n\t    _config,\n\t    ScrollTrigger,\n\t    _windowExists = function _windowExists() {\n\t  return typeof window !== \"undefined\";\n\t},\n\t    _getGSAP = function _getGSAP() {\n\t  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n\t},\n\t    _isString = function _isString(value) {\n\t  return typeof value === \"string\";\n\t},\n\t    _isFunction = function _isFunction(value) {\n\t  return typeof value === \"function\";\n\t},\n\t    _max = function _max(element, axis) {\n\t  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n\t      scroll = \"scroll\" + dim,\n\t      client = \"client\" + dim;\n\t  return element === _window || element === _docEl || element === _body ? Math.max(_docEl[scroll], _body[scroll]) - (_window[\"inner\" + dim] || _docEl[client] || _body[client]) : element[scroll] - element[\"offset\" + dim];\n\t},\n\t    _buildGetter = function _buildGetter(e, axis) {\n\t  var p = \"scroll\" + (axis === \"x\" ? \"Left\" : \"Top\");\n\n\t  if (e === _window) {\n\t    if (e.pageXOffset != null) {\n\t      p = \"page\" + axis.toUpperCase() + \"Offset\";\n\t    } else {\n\t      e = _docEl[p] != null ? _docEl : _body;\n\t    }\n\t  }\n\n\t  return function () {\n\t    return e[p];\n\t  };\n\t},\n\t    _clean = function _clean(value, index, target, targets) {\n\t  _isFunction(value) && (value = value(index, target, targets));\n\n\t  if (typeof value !== \"object\") {\n\t    return _isString(value) && value !== \"max\" && value.charAt(1) !== \"=\" ? {\n\t      x: value,\n\t      y: value\n\t    } : {\n\t      y: value\n\t    };\n\t  } else if (value.nodeType) {\n\t    return {\n\t      y: value,\n\t      x: value\n\t    };\n\t  } else {\n\t    var result = {},\n\t        p;\n\n\t    for (p in value) {\n\t      result[p] = p !== \"onAutoKill\" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];\n\t    }\n\n\t    return result;\n\t  }\n\t},\n\t    _getOffset = function _getOffset(element, container) {\n\t  element = _toArray(element)[0];\n\n\t  if (!element || !element.getBoundingClientRect) {\n\t    return console.warn(\"scrollTo target doesn't exist. Using 0\") || {\n\t      x: 0,\n\t      y: 0\n\t    };\n\t  }\n\n\t  var rect = element.getBoundingClientRect(),\n\t      isRoot = !container || container === _window || container === _body,\n\t      cRect = isRoot ? {\n\t    top: _docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0),\n\t    left: _docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)\n\t  } : container.getBoundingClientRect(),\n\t      offsets = {\n\t    x: rect.left - cRect.left,\n\t    y: rect.top - cRect.top\n\t  };\n\n\t  if (!isRoot && container) {\n\t    offsets.x += _buildGetter(container, \"x\")();\n\t    offsets.y += _buildGetter(container, \"y\")();\n\t  }\n\n\t  return offsets;\n\t},\n\t    _parseVal = function _parseVal(value, target, axis, currentVal, offset) {\n\t  return !isNaN(value) && typeof value !== \"object\" ? parseFloat(value) - offset : _isString(value) && value.charAt(1) === \"=\" ? parseFloat(value.substr(2)) * (value.charAt(0) === \"-\" ? -1 : 1) + currentVal - offset : value === \"max\" ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset);\n\t},\n\t    _initCore = function _initCore() {\n\t  gsap = _getGSAP();\n\n\t  if (_windowExists() && gsap && typeof document !== \"undefined\" && document.body) {\n\t    _window = window;\n\t    _body = document.body;\n\t    _docEl = document.documentElement;\n\t    _toArray = gsap.utils.toArray;\n\t    gsap.config({\n\t      autoKillThreshold: 7\n\t    });\n\t    _config = gsap.config();\n\t    _coreInitted = 1;\n\t  }\n\t};\n\n\tvar ScrollToPlugin = {\n\t  version: \"3.12.2\",\n\t  name: \"scrollTo\",\n\t  rawVars: 1,\n\t  register: function register(core) {\n\t    gsap = core;\n\n\t    _initCore();\n\t  },\n\t  init: function init(target, value, tween, index, targets) {\n\t    _coreInitted || _initCore();\n\t    var data = this,\n\t        snapType = gsap.getProperty(target, \"scrollSnapType\");\n\t    data.isWin = target === _window;\n\t    data.target = target;\n\t    data.tween = tween;\n\t    value = _clean(value, index, target, targets);\n\t    data.vars = value;\n\t    data.autoKill = !!value.autoKill;\n\t    data.getX = _buildGetter(target, \"x\");\n\t    data.getY = _buildGetter(target, \"y\");\n\t    data.x = data.xPrev = data.getX();\n\t    data.y = data.yPrev = data.getY();\n\t    ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);\n\t    gsap.getProperty(target, \"scrollBehavior\") === \"smooth\" && gsap.set(target, {\n\t      scrollBehavior: \"auto\"\n\t    });\n\n\t    if (snapType && snapType !== \"none\") {\n\t      data.snap = 1;\n\t      data.snapInline = target.style.scrollSnapType;\n\t      target.style.scrollSnapType = \"none\";\n\t    }\n\n\t    if (value.x != null) {\n\t      data.add(data, \"x\", data.x, _parseVal(value.x, target, \"x\", data.x, value.offsetX || 0), index, targets);\n\n\t      data._props.push(\"scrollTo_x\");\n\t    } else {\n\t      data.skipX = 1;\n\t    }\n\n\t    if (value.y != null) {\n\t      data.add(data, \"y\", data.y, _parseVal(value.y, target, \"y\", data.y, value.offsetY || 0), index, targets);\n\n\t      data._props.push(\"scrollTo_y\");\n\t    } else {\n\t      data.skipY = 1;\n\t    }\n\t  },\n\t  render: function render(ratio, data) {\n\t    var pt = data._pt,\n\t        target = data.target,\n\t        tween = data.tween,\n\t        autoKill = data.autoKill,\n\t        xPrev = data.xPrev,\n\t        yPrev = data.yPrev,\n\t        isWin = data.isWin,\n\t        snap = data.snap,\n\t        snapInline = data.snapInline,\n\t        x,\n\t        y,\n\t        yDif,\n\t        xDif,\n\t        threshold;\n\n\t    while (pt) {\n\t      pt.r(ratio, pt.d);\n\t      pt = pt._next;\n\t    }\n\n\t    x = isWin || !data.skipX ? data.getX() : xPrev;\n\t    y = isWin || !data.skipY ? data.getY() : yPrev;\n\t    yDif = y - yPrev;\n\t    xDif = x - xPrev;\n\t    threshold = _config.autoKillThreshold;\n\n\t    if (data.x < 0) {\n\t      data.x = 0;\n\t    }\n\n\t    if (data.y < 0) {\n\t      data.y = 0;\n\t    }\n\n\t    if (autoKill) {\n\t      if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, \"x\")) {\n\t        data.skipX = 1;\n\t      }\n\n\t      if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, \"y\")) {\n\t        data.skipY = 1;\n\t      }\n\n\t      if (data.skipX && data.skipY) {\n\t        tween.kill();\n\t        data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);\n\t      }\n\t    }\n\n\t    if (isWin) {\n\t      _window.scrollTo(!data.skipX ? data.x : x, !data.skipY ? data.y : y);\n\t    } else {\n\t      data.skipY || (target.scrollTop = data.y);\n\t      data.skipX || (target.scrollLeft = data.x);\n\t    }\n\n\t    if (snap && (ratio === 1 || ratio === 0)) {\n\t      y = target.scrollTop;\n\t      x = target.scrollLeft;\n\t      snapInline ? target.style.scrollSnapType = snapInline : target.style.removeProperty(\"scroll-snap-type\");\n\t      target.scrollTop = y + 1;\n\t      target.scrollLeft = x + 1;\n\t      target.scrollTop = y;\n\t      target.scrollLeft = x;\n\t    }\n\n\t    data.xPrev = data.x;\n\t    data.yPrev = data.y;\n\t    ScrollTrigger && ScrollTrigger.update();\n\t  },\n\t  kill: function kill(property) {\n\t    var both = property === \"scrollTo\";\n\n\t    if (both || property === \"scrollTo_x\") {\n\t      this.skipX = 1;\n\t    }\n\n\t    if (both || property === \"scrollTo_y\") {\n\t      this.skipY = 1;\n\t    }\n\t  }\n\t};\n\tScrollToPlugin.max = _max;\n\tScrollToPlugin.getOffset = _getOffset;\n\tScrollToPlugin.buildGetter = _buildGetter;\n\t_getGSAP() && gsap.registerPlugin(ScrollToPlugin);\n\n\texports.ScrollToPlugin = ScrollToPlugin;\n\texports.default = ScrollToPlugin;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /*!\n   * Observer 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var gsap,\n      _coreInitted,\n      _clamp,\n      _win,\n      _doc,\n      _docEl,\n      _body,\n      _isTouch,\n      _pointerType,\n      ScrollTrigger,\n      _root,\n      _normalizer,\n      _eventTypes,\n      _context,\n      _getGSAP = function _getGSAP() {\n    return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n  },\n      _startup = 1,\n      _observers = [],\n      _scrollers = [],\n      _proxies = [],\n      _getTime = Date.now,\n      _bridge = function _bridge(name, value) {\n    return value;\n  },\n      _integrate = function _integrate() {\n    var core = ScrollTrigger.core,\n        data = core.bridge || {},\n        scrollers = core._scrollers,\n        proxies = core._proxies;\n    scrollers.push.apply(scrollers, _scrollers);\n    proxies.push.apply(proxies, _proxies);\n    _scrollers = scrollers;\n    _proxies = proxies;\n\n    _bridge = function _bridge(name, value) {\n      return data[name](value);\n    };\n  },\n      _getProxyProp = function _getProxyProp(element, property) {\n    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n  },\n      _isViewport = function _isViewport(el) {\n    return !!~_root.indexOf(el);\n  },\n      _addListener = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _scrollLeft = \"scrollLeft\",\n      _scrollTop = \"scrollTop\",\n      _onScroll = function _onScroll() {\n    return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n  },\n      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n    var cachingFunc = function cachingFunc(value) {\n      if (value || value === 0) {\n        _startup && (_win.history.scrollRestoration = \"manual\");\n        var isNormalizing = _normalizer && _normalizer.isPressed;\n        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0);\n        f(value);\n        cachingFunc.cacheID = _scrollers.cache;\n        isNormalizing && _bridge(\"ss\", value);\n      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n        cachingFunc.cacheID = _scrollers.cache;\n        cachingFunc.v = f();\n      }\n\n      return cachingFunc.v + cachingFunc.offset;\n    };\n\n    cachingFunc.offset = 0;\n    return f && cachingFunc;\n  },\n      _horizontal = {\n    s: _scrollLeft,\n    p: \"left\",\n    p2: \"Left\",\n    os: \"right\",\n    os2: \"Right\",\n    d: \"width\",\n    d2: \"Width\",\n    a: \"x\",\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n    })\n  },\n      _vertical = {\n    s: _scrollTop,\n    p: \"top\",\n    p2: \"Top\",\n    os: \"bottom\",\n    os2: \"Bottom\",\n    d: \"height\",\n    d2: \"Height\",\n    a: \"y\",\n    op: _horizontal,\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n    })\n  },\n      _getTarget = function _getTarget(t, self) {\n    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n  },\n      _getScrollFunc = function _getScrollFunc(element, _ref) {\n    var s = _ref.s,\n        sc = _ref.sc;\n    _isViewport(element) && (element = _doc.scrollingElement || _docEl);\n\n    var i = _scrollers.indexOf(element),\n        offset = sc === _vertical.sc ? 1 : 2;\n\n    !~i && (i = _scrollers.push(element) - 1);\n    _scrollers[i + offset] || _addListener(element, \"scroll\", _onScroll);\n    var prev = _scrollers[i + offset],\n        func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {\n      return arguments.length ? element[s] = value : element[s];\n    })));\n    func.target = element;\n    prev || (func.smooth = gsap.getProperty(element, \"scrollBehavior\") === \"smooth\");\n    return func;\n  },\n      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n    var v1 = value,\n        v2 = value,\n        t1 = _getTime(),\n        t2 = t1,\n        min = minTimeRefresh || 50,\n        dropToZeroTime = Math.max(500, min * 3),\n        update = function update(value, force) {\n      var t = _getTime();\n\n      if (force || t - t1 > min) {\n        v2 = v1;\n        v1 = value;\n        t2 = t1;\n        t1 = t;\n      } else if (useDelta) {\n        v1 += value;\n      } else {\n        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n      }\n    },\n        reset = function reset() {\n      v2 = v1 = useDelta ? 0 : v1;\n      t2 = t1 = 0;\n    },\n        getVelocity = function getVelocity(latestValue) {\n      var tOld = t2,\n          vOld = v2,\n          t = _getTime();\n\n      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n    };\n\n    return {\n      update: update,\n      reset: reset,\n      getVelocity: getVelocity\n    };\n  },\n      _getEvent = function _getEvent(e, preventDefault) {\n    preventDefault && !e._gsapAllow && e.preventDefault();\n    return e.changedTouches ? e.changedTouches[0] : e;\n  },\n      _getAbsoluteMax = function _getAbsoluteMax(a) {\n    var max = Math.max.apply(Math, a),\n        min = Math.min.apply(Math, a);\n    return Math.abs(max) >= Math.abs(min) ? max : min;\n  },\n      _setScrollTrigger = function _setScrollTrigger() {\n    ScrollTrigger = gsap.core.globals().ScrollTrigger;\n    ScrollTrigger && ScrollTrigger.core && _integrate();\n  },\n      _initCore = function _initCore(core) {\n    gsap = core || _getGSAP();\n\n    if (gsap && typeof document !== \"undefined\" && document.body) {\n      _win = window;\n      _doc = document;\n      _docEl = _doc.documentElement;\n      _body = _doc.body;\n      _root = [_win, _doc, _docEl, _body];\n      _clamp = gsap.utils.clamp;\n\n      _context = gsap.core.context || function () {};\n\n      _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\";\n      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n      _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n      setTimeout(function () {\n        return _startup = 0;\n      }, 500);\n\n      _setScrollTrigger();\n\n      _coreInitted = 1;\n    }\n\n    return _coreInitted;\n  };\n\n  _horizontal.op = _vertical;\n  _scrollers.cache = 0;\n  var Observer = function () {\n    function Observer(vars) {\n      this.init(vars);\n    }\n\n    var _proto = Observer.prototype;\n\n    _proto.init = function init(vars) {\n      _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n      ScrollTrigger || _setScrollTrigger();\n      var tolerance = vars.tolerance,\n          dragMinimum = vars.dragMinimum,\n          type = vars.type,\n          target = vars.target,\n          lineHeight = vars.lineHeight,\n          debounce = vars.debounce,\n          preventDefault = vars.preventDefault,\n          onStop = vars.onStop,\n          onStopDelay = vars.onStopDelay,\n          ignore = vars.ignore,\n          wheelSpeed = vars.wheelSpeed,\n          event = vars.event,\n          onDragStart = vars.onDragStart,\n          onDragEnd = vars.onDragEnd,\n          onDrag = vars.onDrag,\n          onPress = vars.onPress,\n          onRelease = vars.onRelease,\n          onRight = vars.onRight,\n          onLeft = vars.onLeft,\n          onUp = vars.onUp,\n          onDown = vars.onDown,\n          onChangeX = vars.onChangeX,\n          onChangeY = vars.onChangeY,\n          onChange = vars.onChange,\n          onToggleX = vars.onToggleX,\n          onToggleY = vars.onToggleY,\n          onHover = vars.onHover,\n          onHoverEnd = vars.onHoverEnd,\n          onMove = vars.onMove,\n          ignoreCheck = vars.ignoreCheck,\n          isNormalizer = vars.isNormalizer,\n          onGestureStart = vars.onGestureStart,\n          onGestureEnd = vars.onGestureEnd,\n          onWheel = vars.onWheel,\n          onEnable = vars.onEnable,\n          onDisable = vars.onDisable,\n          onClick = vars.onClick,\n          scrollSpeed = vars.scrollSpeed,\n          capture = vars.capture,\n          allowClicks = vars.allowClicks,\n          lockAxis = vars.lockAxis,\n          onLockAxis = vars.onLockAxis;\n      this.target = target = _getTarget(target) || _docEl;\n      this.vars = vars;\n      ignore && (ignore = gsap.utils.toArray(ignore));\n      tolerance = tolerance || 1e-9;\n      dragMinimum = dragMinimum || 0;\n      wheelSpeed = wheelSpeed || 1;\n      scrollSpeed = scrollSpeed || 1;\n      type = type || \"wheel,touch,pointer\";\n      debounce = debounce !== false;\n      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22);\n\n      var id,\n          onStopDelayedCall,\n          dragged,\n          moved,\n          wheeled,\n          locked,\n          axis,\n          self = this,\n          prevDeltaX = 0,\n          prevDeltaY = 0,\n          scrollFuncX = _getScrollFunc(target, _horizontal),\n          scrollFuncY = _getScrollFunc(target, _vertical),\n          scrollX = scrollFuncX(),\n          scrollY = scrollFuncY(),\n          limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\",\n          isViewport = _isViewport(target),\n          ownerDoc = target.ownerDocument || _doc,\n          deltaX = [0, 0, 0],\n          deltaY = [0, 0, 0],\n          onClickTime = 0,\n          clickCapture = function clickCapture() {\n        return onClickTime = _getTime();\n      },\n          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n      },\n          onStopFunc = function onStopFunc() {\n        self._vx.reset();\n\n        self._vy.reset();\n\n        onStopDelayedCall.pause();\n        onStop && onStop(self);\n      },\n          update = function update() {\n        var dx = self.deltaX = _getAbsoluteMax(deltaX),\n            dy = self.deltaY = _getAbsoluteMax(deltaY),\n            changedX = Math.abs(dx) >= tolerance,\n            changedY = Math.abs(dy) >= tolerance;\n\n        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY);\n\n        if (changedX) {\n          onRight && self.deltaX > 0 && onRight(self);\n          onLeft && self.deltaX < 0 && onLeft(self);\n          onChangeX && onChangeX(self);\n          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n          prevDeltaX = self.deltaX;\n          deltaX[0] = deltaX[1] = deltaX[2] = 0;\n        }\n\n        if (changedY) {\n          onDown && self.deltaY > 0 && onDown(self);\n          onUp && self.deltaY < 0 && onUp(self);\n          onChangeY && onChangeY(self);\n          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n          prevDeltaY = self.deltaY;\n          deltaY[0] = deltaY[1] = deltaY[2] = 0;\n        }\n\n        if (moved || dragged) {\n          onMove && onMove(self);\n\n          if (dragged) {\n            onDrag(self);\n            dragged = false;\n          }\n\n          moved = false;\n        }\n\n        locked && !(locked = false) && onLockAxis && onLockAxis(self);\n\n        if (wheeled) {\n          onWheel(self);\n          wheeled = false;\n        }\n\n        id = 0;\n      },\n          onDelta = function onDelta(x, y, index) {\n        deltaX[index] += x;\n        deltaY[index] += y;\n\n        self._vx.update(x);\n\n        self._vy.update(y);\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n        if (lockAxis && !axis) {\n          self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n          locked = true;\n        }\n\n        if (axis !== \"y\") {\n          deltaX[2] += x;\n\n          self._vx.update(x, true);\n        }\n\n        if (axis !== \"x\") {\n          deltaY[2] += y;\n\n          self._vy.update(y, true);\n        }\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          _onDrag = function _onDrag(e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y,\n            isDragging = self.isDragging;\n        self.x = x;\n        self.y = y;\n\n        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {\n          onDrag && (dragged = true);\n          isDragging || (self.isDragging = true);\n          onTouchOrPointerDelta(dx, dy);\n          isDragging || onDragStart && onDragStart(self);\n        }\n      },\n          _onPress = self.onPress = function (e) {\n        if (_ignoreCheck(e, 1) || e && e.button) {\n          return;\n        }\n\n        self.axis = axis = null;\n        onStopDelayedCall.pause();\n        self.isPressed = true;\n        e = _getEvent(e);\n        prevDeltaX = prevDeltaY = 0;\n        self.startX = self.x = e.clientX;\n        self.startY = self.y = e.clientY;\n\n        self._vx.reset();\n\n        self._vy.reset();\n\n        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);\n\n        self.deltaX = self.deltaY = 0;\n        onPress && onPress(self);\n      },\n          _onRelease = self.onRelease = function (e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n\n        var isTrackingDrag = !isNaN(self.y - self.startY),\n            wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),\n            eventData = _getEvent(e);\n\n        if (!wasDragging && isTrackingDrag) {\n          self._vx.reset();\n\n          self._vy.reset();\n\n          if (preventDefault && allowClicks) {\n            gsap.delayedCall(0.08, function () {\n              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n                if (e.target.click) {\n                  e.target.click();\n                } else if (ownerDoc.createEvent) {\n                  var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                  syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                  e.target.dispatchEvent(syntheticEvent);\n                }\n              }\n            });\n          }\n        }\n\n        self.isDragging = self.isGesturing = self.isPressed = false;\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n        onDragEnd && wasDragging && onDragEnd(self);\n        onRelease && onRelease(self, wasDragging);\n      },\n          _onGestureStart = function _onGestureStart(e) {\n        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n      },\n          _onGestureEnd = function _onGestureEnd() {\n        return (self.isGesturing = false) || onGestureEnd(self);\n      },\n          onScroll = function onScroll(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = scrollFuncX(),\n            y = scrollFuncY();\n        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n        scrollX = x;\n        scrollY = y;\n        onStop && onStopDelayedCall.restart(true);\n      },\n          _onWheel = function _onWheel(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        onWheel && (wheeled = true);\n        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n      },\n          _onMove = function _onMove(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y;\n        self.x = x;\n        self.y = y;\n        moved = true;\n        (dx || dy) && onTouchOrPointerDelta(dx, dy);\n      },\n          _onHover = function _onHover(e) {\n        self.event = e;\n        onHover(self);\n      },\n          _onHoverEnd = function _onHoverEnd(e) {\n        self.event = e;\n        onHoverEnd(self);\n      },\n          _onClick = function _onClick(e) {\n        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n      };\n\n      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n      self.deltaX = self.deltaY = 0;\n      self._vx = _getVelocityProp(0, 50, true);\n      self._vy = _getVelocityProp(0, 50, true);\n      self.scrollX = scrollFuncX;\n      self.scrollY = scrollFuncY;\n      self.isDragging = self.isGesturing = self.isPressed = false;\n\n      _context(this);\n\n      self.enable = function (e) {\n        if (!self.isEnabled) {\n          _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, preventDefault, capture);\n          type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, preventDefault, capture);\n\n          if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);\n\n            _addListener(ownerDoc, _eventTypes[2], _onRelease);\n\n            _addListener(ownerDoc, _eventTypes[3], _onRelease);\n\n            allowClicks && _addListener(target, \"click\", clickCapture, false, true);\n            onClick && _addListener(target, \"click\", _onClick);\n            onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n            onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n            onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n            onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n            onMove && _addListener(target, _pointerType + \"move\", _onMove);\n          }\n\n          self.isEnabled = true;\n          e && e.type && _onPress(e);\n          onEnable && onEnable(self);\n        }\n\n        return self;\n      };\n\n      self.disable = function () {\n        if (self.isEnabled) {\n          _observers.filter(function (o) {\n            return o !== self && _isViewport(o.target);\n          }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          if (self.isPressed) {\n            self._vx.reset();\n\n            self._vy.reset();\n\n            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n          }\n\n          _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n\n          _removeListener(target, \"wheel\", _onWheel, capture);\n\n          _removeListener(target, _eventTypes[0], _onPress, capture);\n\n          _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n\n          _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n\n          _removeListener(target, \"click\", clickCapture, true);\n\n          _removeListener(target, \"click\", _onClick);\n\n          _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n\n          _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n\n          _removeListener(target, _pointerType + \"enter\", _onHover);\n\n          _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n\n          _removeListener(target, _pointerType + \"move\", _onMove);\n\n          self.isEnabled = self.isPressed = self.isDragging = false;\n          onDisable && onDisable(self);\n        }\n      };\n\n      self.kill = self.revert = function () {\n        self.disable();\n\n        var i = _observers.indexOf(self);\n\n        i >= 0 && _observers.splice(i, 1);\n        _normalizer === self && (_normalizer = 0);\n      };\n\n      _observers.push(self);\n\n      isNormalizer && _isViewport(target) && (_normalizer = self);\n      self.enable(event);\n    };\n\n    _createClass(Observer, [{\n      key: \"velocityX\",\n      get: function get() {\n        return this._vx.getVelocity();\n      }\n    }, {\n      key: \"velocityY\",\n      get: function get() {\n        return this._vy.getVelocity();\n      }\n    }]);\n\n    return Observer;\n  }();\n  Observer.version = \"3.12.2\";\n\n  Observer.create = function (vars) {\n    return new Observer(vars);\n  };\n\n  Observer.register = _initCore;\n\n  Observer.getAll = function () {\n    return _observers.slice();\n  };\n\n  Observer.getById = function (id) {\n    return _observers.filter(function (o) {\n      return o.vars.id === id;\n    })[0];\n  };\n\n  _getGSAP() && gsap.registerPlugin(Observer);\n\n  /*!\n   * ScrollTrigger 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n\n  var gsap$1,\n      _coreInitted$1,\n      _win$1,\n      _doc$1,\n      _docEl$1,\n      _body$1,\n      _root$1,\n      _resizeDelay,\n      _toArray,\n      _clamp$1,\n      _time2,\n      _syncInterval,\n      _refreshing,\n      _pointerIsDown,\n      _transformProp,\n      _i,\n      _prevWidth,\n      _prevHeight,\n      _autoRefresh,\n      _sort,\n      _suppressOverwrites,\n      _ignoreResize,\n      _normalizer$1,\n      _ignoreMobileResize,\n      _baseScreenHeight,\n      _baseScreenWidth,\n      _fixIOSBug,\n      _context$1,\n      _scrollRestoration,\n      _div100vh,\n      _100vh,\n      _limitCallbacks,\n      _startup$1 = 1,\n      _getTime$1 = Date.now,\n      _time1 = _getTime$1(),\n      _lastScrollTime = 0,\n      _enabled = 0,\n      _parseClamp = function _parseClamp(value, type, self) {\n    var clamp = _isString(value) && (value.substr(0, 6) === \"clamp(\" || value.indexOf(\"max\") > -1);\n    self[\"_\" + type + \"Clamp\"] = clamp;\n    return clamp ? value.substr(6, value.length - 7) : value;\n  },\n      _keepClamp = function _keepClamp(value, clamp) {\n    return clamp && (!_isString(value) || value.substr(0, 6) !== \"clamp(\") ? \"clamp(\" + value + \")\" : value;\n  },\n      _rafBugFix = function _rafBugFix() {\n    return _enabled && requestAnimationFrame(_rafBugFix);\n  },\n      _pointerDownHandler = function _pointerDownHandler() {\n    return _pointerIsDown = 1;\n  },\n      _pointerUpHandler = function _pointerUpHandler() {\n    return _pointerIsDown = 0;\n  },\n      _passThrough = function _passThrough(v) {\n    return v;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _getGSAP$1 = function _getGSAP() {\n    return gsap$1 || _windowExists() && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;\n  },\n      _isViewport$1 = function _isViewport(e) {\n    return !!~_root$1.indexOf(e);\n  },\n      _getViewportDimension = function _getViewportDimension(dimensionProperty) {\n    return (dimensionProperty === \"Height\" ? _100vh : _win$1[\"inner\" + dimensionProperty]) || _docEl$1[\"client\" + dimensionProperty] || _body$1[\"client\" + dimensionProperty];\n  },\n      _getBoundsFunc = function _getBoundsFunc(element) {\n    return _getProxyProp(element, \"getBoundingClientRect\") || (_isViewport$1(element) ? function () {\n      _winOffsets.width = _win$1.innerWidth;\n      _winOffsets.height = _100vh;\n      return _winOffsets;\n    } : function () {\n      return _getBounds(element);\n    });\n  },\n      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n    var d = _ref.d,\n        d2 = _ref.d2,\n        a = _ref.a;\n    return (a = _getProxyProp(scroller, \"getBoundingClientRect\")) ? function () {\n      return a()[d];\n    } : function () {\n      return (isViewport ? _getViewportDimension(d2) : scroller[\"client\" + d2]) || 0;\n    };\n  },\n      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {\n      return _winOffsets;\n    };\n  },\n      _maxScroll = function _maxScroll(element, _ref2) {\n    var s = _ref2.s,\n        d2 = _ref2.d2,\n        d = _ref2.d,\n        a = _ref2.a;\n    return Math.max(0, (s = \"scroll\" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport$1(element) ? (_docEl$1[s] || _body$1[s]) - _getViewportDimension(d2) : element[s] - element[\"offset\" + d2]);\n  },\n      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n    for (var i = 0; i < _autoRefresh.length; i += 3) {\n      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n    }\n  },\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _endAnimation = function _endAnimation(animation, reversed, pause) {\n    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n  },\n      _callback = function _callback(self, func) {\n    if (self.enabled) {\n      var result = func(self);\n      result && result.totalTime && (self.callbackAnimation = result);\n    }\n  },\n      _abs = Math.abs,\n      _left = \"left\",\n      _top = \"top\",\n      _right = \"right\",\n      _bottom = \"bottom\",\n      _width = \"width\",\n      _height = \"height\",\n      _Right = \"Right\",\n      _Left = \"Left\",\n      _Top = \"Top\",\n      _Bottom = \"Bottom\",\n      _padding = \"padding\",\n      _margin = \"margin\",\n      _Width = \"Width\",\n      _Height = \"Height\",\n      _px = \"px\",\n      _getComputedStyle = function _getComputedStyle(element) {\n    return _win$1.getComputedStyle(element);\n  },\n      _makePositionable = function _makePositionable(element) {\n    var position = _getComputedStyle(element).position;\n\n    element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _getBounds = function _getBounds(element, withoutTransforms) {\n    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap$1.to(element, {\n      x: 0,\n      y: 0,\n      xPercent: 0,\n      yPercent: 0,\n      rotation: 0,\n      rotationX: 0,\n      rotationY: 0,\n      scale: 1,\n      skewX: 0,\n      skewY: 0\n    }).progress(1),\n        bounds = element.getBoundingClientRect();\n    tween && tween.progress(0).kill();\n    return bounds;\n  },\n      _getSize = function _getSize(element, _ref3) {\n    var d2 = _ref3.d2;\n    return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n  },\n      _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n    var a = [],\n        labels = timeline.labels,\n        duration = timeline.duration(),\n        p;\n\n    for (p in labels) {\n      a.push(labels[p] / duration);\n    }\n\n    return a;\n  },\n      _getClosestLabel = function _getClosestLabel(animation) {\n    return function (value) {\n      return gsap$1.utils.snap(_getLabelRatioArray(animation), value);\n    };\n  },\n      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n    var snap = gsap$1.utils.snap(snapIncrementOrArray),\n        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {\n      return a - b;\n    });\n    return a ? function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var i;\n\n      if (!direction) {\n        return snap(value);\n      }\n\n      if (direction > 0) {\n        value -= threshold;\n\n        for (i = 0; i < a.length; i++) {\n          if (a[i] >= value) {\n            return a[i];\n          }\n        }\n\n        return a[i - 1];\n      } else {\n        i = a.length;\n        value += threshold;\n\n        while (i--) {\n          if (a[i] <= value) {\n            return a[i];\n          }\n        }\n      }\n\n      return a[0];\n    } : function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var snapped = snap(value);\n      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n    };\n  },\n      _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n    return function (value, st) {\n      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n    };\n  },\n      _multiListener = function _multiListener(func, element, types, callback) {\n    return types.split(\",\").forEach(function (type) {\n      return func(element, type, callback);\n    });\n  },\n      _addListener$1 = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener$1 = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _wheelListener = function _wheelListener(func, el, scrollFunc) {\n    scrollFunc = scrollFunc && scrollFunc.wheelHandler;\n\n    if (scrollFunc) {\n      func(el, \"wheel\", scrollFunc);\n      func(el, \"touchmove\", scrollFunc);\n    }\n  },\n      _markerDefaults = {\n    startColor: \"green\",\n    endColor: \"red\",\n    indent: 0,\n    fontSize: \"16px\",\n    fontWeight: \"normal\"\n  },\n      _defaults = {\n    toggleActions: \"play\",\n    anticipatePin: 0\n  },\n      _keywords = {\n    top: 0,\n    left: 0,\n    center: 0.5,\n    bottom: 1,\n    right: 1\n  },\n      _offsetToPx = function _offsetToPx(value, size) {\n    if (_isString(value)) {\n      var eqIndex = value.indexOf(\"=\"),\n          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\n      if (~eqIndex) {\n        value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n        value = value.substr(0, eqIndex - 1);\n      }\n\n      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n    }\n\n    return value;\n  },\n      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n    var startColor = _ref4.startColor,\n        endColor = _ref4.endColor,\n        fontSize = _ref4.fontSize,\n        indent = _ref4.indent,\n        fontWeight = _ref4.fontWeight;\n\n    var e = _doc$1.createElement(\"div\"),\n        useFixedPosition = _isViewport$1(container) || _getProxyProp(container, \"pinType\") === \"fixed\",\n        isScroller = type.indexOf(\"scroller\") !== -1,\n        parent = useFixedPosition ? _body$1 : container,\n        isStart = type.indexOf(\"start\") !== -1,\n        color = isStart ? startColor : endColor,\n        css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\n    css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n    matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n    e._isStart = isStart;\n    e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n    e.style.cssText = css;\n    e.innerText = name || name === 0 ? type + \"-\" + name : type;\n    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n    e._offset = e[\"offset\" + direction.op.d2];\n\n    _positionMarker(e, 0, direction, isStart);\n\n    return e;\n  },\n      _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n    var vars = {\n      display: \"block\"\n    },\n        side = direction[flipped ? \"os2\" : \"p2\"],\n        oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n    marker._isFlipped = flipped;\n    vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n    vars[direction.a] = flipped ? \"1px\" : 0;\n    vars[\"border\" + side + _Width] = 1;\n    vars[\"border\" + oppositeSide + _Width] = 0;\n    vars[direction.p] = start + \"px\";\n    gsap$1.set(marker, vars);\n  },\n      _triggers = [],\n      _ids = {},\n      _rafID,\n      _sync = function _sync() {\n    return _getTime$1() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));\n  },\n      _onScroll$1 = function _onScroll() {\n    if (!_normalizer$1 || !_normalizer$1.isPressed || _normalizer$1.startX > _body$1.clientWidth) {\n      _scrollers.cache++;\n\n      if (_normalizer$1) {\n        _rafID || (_rafID = requestAnimationFrame(_updateAll));\n      } else {\n        _updateAll();\n      }\n\n      _lastScrollTime || _dispatch(\"scrollStart\");\n      _lastScrollTime = _getTime$1();\n    }\n  },\n      _setBaseDimensions = function _setBaseDimensions() {\n    _baseScreenWidth = _win$1.innerWidth;\n    _baseScreenHeight = _win$1.innerHeight;\n  },\n      _onResize = function _onResize() {\n    _scrollers.cache++;\n    !_refreshing && !_ignoreResize && !_doc$1.fullscreenElement && !_doc$1.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win$1.innerWidth || Math.abs(_win$1.innerHeight - _baseScreenHeight) > _win$1.innerHeight * 0.25) && _resizeDelay.restart(true);\n  },\n      _listeners = {},\n      _emptyArray = [],\n      _softRefresh = function _softRefresh() {\n    return _removeListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n  },\n      _dispatch = function _dispatch(type) {\n    return _listeners[type] && _listeners[type].map(function (f) {\n      return f();\n    }) || _emptyArray;\n  },\n      _savedStyles = [],\n      _revertRecorded = function _revertRecorded(media) {\n    for (var i = 0; i < _savedStyles.length; i += 5) {\n      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {\n        _savedStyles[i].style.cssText = _savedStyles[i + 1];\n        _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n        _savedStyles[i + 3].uncache = 1;\n      }\n    }\n  },\n      _revertAll = function _revertAll(kill, media) {\n    var trigger;\n\n    for (_i = 0; _i < _triggers.length; _i++) {\n      trigger = _triggers[_i];\n\n      if (trigger && (!media || trigger._ctx === media)) {\n        if (kill) {\n          trigger.kill(1);\n        } else {\n          trigger.revert(true, true);\n        }\n      }\n    }\n\n    media && _revertRecorded(media);\n    media || _dispatch(\"revert\");\n  },\n      _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {\n    _scrollers.cache++;\n    (force || !_refreshingAll) && _scrollers.forEach(function (obj) {\n      return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);\n    });\n    _isString(scrollRestoration) && (_win$1.history.scrollRestoration = _scrollRestoration = scrollRestoration);\n  },\n      _refreshingAll,\n      _refreshID = 0,\n      _queueRefreshID,\n      _queueRefreshAll = function _queueRefreshAll() {\n    if (_queueRefreshID !== _refreshID) {\n      var id = _queueRefreshID = _refreshID;\n      requestAnimationFrame(function () {\n        return id === _refreshID && _refreshAll(true);\n      });\n    }\n  },\n      _refresh100vh = function _refresh100vh() {\n    _body$1.appendChild(_div100vh);\n\n    _100vh = _div100vh.offsetHeight || _win$1.innerHeight;\n\n    _body$1.removeChild(_div100vh);\n  },\n      _refreshAll = function _refreshAll(force, skipRevert) {\n    if (_lastScrollTime && !force) {\n      _addListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh);\n\n      return;\n    }\n\n    _refresh100vh();\n\n    _refreshingAll = ScrollTrigger$1.isRefreshing = true;\n\n    _scrollers.forEach(function (obj) {\n      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());\n    });\n\n    var refreshInits = _dispatch(\"refreshInit\");\n\n    _sort && ScrollTrigger$1.sort();\n    skipRevert || _revertAll();\n\n    _scrollers.forEach(function (obj) {\n      if (_isFunction(obj)) {\n        obj.smooth && (obj.target.style.scrollBehavior = \"auto\");\n        obj(0);\n      }\n    });\n\n    _triggers.slice(0).forEach(function (t) {\n      return t.refresh();\n    });\n\n    _triggers.forEach(function (t, i) {\n      if (t._subPinOffset && t.pin) {\n        var prop = t.vars.horizontal ? \"offsetWidth\" : \"offsetHeight\",\n            original = t.pin[prop];\n        t.revert(true, 1);\n        t.adjustPinSpacing(t.pin[prop] - original);\n        t.refresh();\n      }\n    });\n\n    _triggers.forEach(function (t) {\n      var max = _maxScroll(t.scroller, t._dir);\n\n      (t.vars.end === \"max\" || t._endClamp && t.end > max) && t.setPositions(t.start, Math.max(t.start + 1, max), true);\n    });\n\n    refreshInits.forEach(function (result) {\n      return result && result.render && result.render(-1);\n    });\n\n    _scrollers.forEach(function (obj) {\n      if (_isFunction(obj)) {\n        obj.smooth && requestAnimationFrame(function () {\n          return obj.target.style.scrollBehavior = \"smooth\";\n        });\n        obj.rec && obj(obj.rec);\n      }\n    });\n\n    _clearScrollMemory(_scrollRestoration, 1);\n\n    _resizeDelay.pause();\n\n    _refreshID++;\n    _refreshingAll = 2;\n\n    _updateAll(2);\n\n    _triggers.forEach(function (t) {\n      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);\n    });\n\n    _refreshingAll = ScrollTrigger$1.isRefreshing = false;\n\n    _dispatch(\"refresh\");\n  },\n      _lastScroll = 0,\n      _direction = 1,\n      _primary,\n      _updateAll = function _updateAll(force) {\n    if (!_refreshingAll || force === 2) {\n      ScrollTrigger$1.isUpdating = true;\n      _primary && _primary.update(0);\n\n      var l = _triggers.length,\n          time = _getTime$1(),\n          recordVelocity = time - _time1 >= 50,\n          scroll = l && _triggers[0].scroll();\n\n      _direction = _lastScroll > scroll ? -1 : 1;\n      _refreshingAll || (_lastScroll = scroll);\n\n      if (recordVelocity) {\n        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n          _lastScrollTime = 0;\n\n          _dispatch(\"scrollEnd\");\n        }\n\n        _time2 = _time1;\n        _time1 = time;\n      }\n\n      if (_direction < 0) {\n        _i = l;\n\n        while (_i-- > 0) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n\n        _direction = 1;\n      } else {\n        for (_i = 0; _i < l; _i++) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n      }\n\n      ScrollTrigger$1.isUpdating = false;\n    }\n\n    _rafID = 0;\n  },\n      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\", \"float\", \"zIndex\", \"gridColumnStart\", \"gridColumnEnd\", \"gridRowStart\", \"gridRowEnd\", \"gridArea\", \"justifySelf\", \"alignSelf\", \"placeSelf\", \"order\"],\n      _stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n      _swapPinOut = function _swapPinOut(pin, spacer, state) {\n    _setState(state);\n\n    var cache = pin._gsap;\n\n    if (cache.spacerIsNative) {\n      _setState(cache.spacerState);\n    } else if (pin._gsap.swappedIn) {\n      var parent = spacer.parentNode;\n\n      if (parent) {\n        parent.insertBefore(pin, spacer);\n        parent.removeChild(spacer);\n      }\n    }\n\n    pin._gsap.swappedIn = false;\n  },\n      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n    if (!pin._gsap.swappedIn) {\n      var i = _propNamesToCopy.length,\n          spacerStyle = spacer.style,\n          pinStyle = pin.style,\n          p;\n\n      while (i--) {\n        p = _propNamesToCopy[i];\n        spacerStyle[p] = cs[p];\n      }\n\n      spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n      cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n      pinStyle[_bottom] = pinStyle[_right] = \"auto\";\n      spacerStyle.flexBasis = cs.flexBasis || \"auto\";\n      spacerStyle.overflow = \"visible\";\n      spacerStyle.boxSizing = \"border-box\";\n      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;\n      spacerStyle[_height] = _getSize(pin, _vertical) + _px;\n      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\n      _setState(spacerState);\n\n      pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n      pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n      pinStyle[_padding] = cs[_padding];\n\n      if (pin.parentNode !== spacer) {\n        pin.parentNode.insertBefore(spacer, pin);\n        spacer.appendChild(pin);\n      }\n\n      pin._gsap.swappedIn = true;\n    }\n  },\n      _capsExp = /([A-Z])/g,\n      _setState = function _setState(state) {\n    if (state) {\n      var style = state.t.style,\n          l = state.length,\n          i = 0,\n          p,\n          value;\n      (state.t._gsap || gsap$1.core.getCache(state.t)).uncache = 1;\n\n      for (; i < l; i += 2) {\n        value = state[i + 1];\n        p = state[i];\n\n        if (value) {\n          style[p] = value;\n        } else if (style[p]) {\n          style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n        }\n      }\n    }\n  },\n      _getState = function _getState(element) {\n    var l = _stateProps.length,\n        style = element.style,\n        state = [],\n        i = 0;\n\n    for (; i < l; i++) {\n      state.push(_stateProps[i], style[_stateProps[i]]);\n    }\n\n    state.t = element;\n    return state;\n  },\n      _copyState = function _copyState(state, override, omitOffsets) {\n    var result = [],\n        l = state.length,\n        i = omitOffsets ? 8 : 0,\n        p;\n\n    for (; i < l; i += 2) {\n      p = state[i];\n      result.push(p, p in override ? override[p] : state[i + 1]);\n    }\n\n    result.t = state.t;\n    return result;\n  },\n      _winOffsets = {\n    left: 0,\n    top: 0\n  },\n      _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {\n    _isFunction(value) && (value = value(self));\n\n    if (_isString(value) && value.substr(0, 3) === \"max\") {\n      value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n    }\n\n    var time = containerAnimation ? containerAnimation.time() : 0,\n        p1,\n        p2,\n        element;\n    containerAnimation && containerAnimation.seek(0);\n    isNaN(value) || (value = +value);\n\n    if (!_isNumber(value)) {\n      _isFunction(trigger) && (trigger = trigger(self));\n      var offsets = (value || \"0\").split(\" \"),\n          bounds,\n          localOffset,\n          globalOffset,\n          display;\n      element = _getTarget(trigger, self) || _body$1;\n      bounds = _getBounds(element) || {};\n\n      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n        display = element.style.display;\n        element.style.display = \"block\";\n        bounds = _getBounds(element);\n        display ? element.style.display = display : element.style.removeProperty(\"display\");\n      }\n\n      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n      globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n      scrollerSize -= scrollerSize - globalOffset;\n    } else {\n      containerAnimation && (value = gsap$1.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));\n      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);\n    }\n\n    if (clampZeroProp) {\n      self[clampZeroProp] = value || -0.001;\n      value < 0 && (value = 0);\n    }\n\n    if (marker) {\n      var position = value + scrollerSize,\n          isStart = marker._isStart;\n      p1 = \"scroll\" + direction.d2;\n\n      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body$1[p1], _docEl$1[p1]) : marker.parentNode[p1]) <= position + 1);\n\n      if (useFixedPosition) {\n        scrollerBounds = _getBounds(markerScroller);\n        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n      }\n    }\n\n    if (containerAnimation && element) {\n      p1 = _getBounds(element);\n      containerAnimation.seek(scrollerMax);\n      p2 = _getBounds(element);\n      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n      value = value / containerAnimation._caScrollDist * scrollerMax;\n    }\n\n    containerAnimation && containerAnimation.seek(time);\n    return containerAnimation ? value : Math.round(value);\n  },\n      _prefixExp = /(webkit|moz|length|cssText|inset)/i,\n      _reparent = function _reparent(element, parent, top, left) {\n    if (element.parentNode !== parent) {\n      var style = element.style,\n          p,\n          cs;\n\n      if (parent === _body$1) {\n        element._stOrig = style.cssText;\n        cs = _getComputedStyle(element);\n\n        for (p in cs) {\n          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n            style[p] = cs[p];\n          }\n        }\n\n        style.top = top;\n        style.left = left;\n      } else {\n        style.cssText = element._stOrig;\n      }\n\n      gsap$1.core.getCache(element).uncache = 1;\n      parent.appendChild(element);\n    }\n  },\n      _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {\n    var last1 = initialValue,\n        last2 = last1;\n    return function (value) {\n      var current = Math.round(getValueFunc());\n\n      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {\n        value = current;\n        onInterrupt && onInterrupt();\n      }\n\n      last2 = last1;\n      last1 = value;\n      return value;\n    };\n  },\n      _shiftMarker = function _shiftMarker(marker, direction, value) {\n    var vars = {};\n    vars[direction.p] = \"+=\" + value;\n    gsap$1.set(marker, vars);\n  },\n      _getTweenCreator = function _getTweenCreator(scroller, direction) {\n    var getScroll = _getScrollFunc(scroller, direction),\n        prop = \"_scroll\" + direction.p2,\n        getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n      var tween = getTween.tween,\n          onComplete = vars.onComplete,\n          modifiers = {};\n      initialValue = initialValue || getScroll();\n\n      var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {\n        tween.kill();\n        getTween.tween = 0;\n      });\n\n      change2 = change1 && change2 || 0;\n      change1 = change1 || scrollTo - initialValue;\n      tween && tween.kill();\n      vars[prop] = scrollTo;\n      vars.modifiers = modifiers;\n\n      modifiers[prop] = function () {\n        return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);\n      };\n\n      vars.onUpdate = function () {\n        _scrollers.cache++;\n\n        _updateAll();\n      };\n\n      vars.onComplete = function () {\n        getTween.tween = 0;\n        onComplete && onComplete.call(tween);\n      };\n\n      tween = getTween.tween = gsap$1.to(scroller, vars);\n      return tween;\n    };\n\n    scroller[prop] = getScroll;\n\n    getScroll.wheelHandler = function () {\n      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n    };\n\n    _addListener$1(scroller, \"wheel\", getScroll.wheelHandler);\n\n    ScrollTrigger$1.isTouch && _addListener$1(scroller, \"touchmove\", getScroll.wheelHandler);\n    return getTween;\n  };\n\n  var ScrollTrigger$1 = function () {\n    function ScrollTrigger(vars, animation) {\n      _coreInitted$1 || ScrollTrigger.register(gsap$1) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n\n      _context$1(this);\n\n      this.init(vars, animation);\n    }\n\n    var _proto = ScrollTrigger.prototype;\n\n    _proto.init = function init(vars, animation) {\n      this.progress = this.start = 0;\n      this.vars && this.kill(true, true);\n\n      if (!_enabled) {\n        this.update = this.refresh = this.kill = _passThrough;\n        return;\n      }\n\n      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n        trigger: vars\n      } : vars, _defaults);\n\n      var _vars = vars,\n          onUpdate = _vars.onUpdate,\n          toggleClass = _vars.toggleClass,\n          id = _vars.id,\n          onToggle = _vars.onToggle,\n          onRefresh = _vars.onRefresh,\n          scrub = _vars.scrub,\n          trigger = _vars.trigger,\n          pin = _vars.pin,\n          pinSpacing = _vars.pinSpacing,\n          invalidateOnRefresh = _vars.invalidateOnRefresh,\n          anticipatePin = _vars.anticipatePin,\n          onScrubComplete = _vars.onScrubComplete,\n          onSnapComplete = _vars.onSnapComplete,\n          once = _vars.once,\n          snap = _vars.snap,\n          pinReparent = _vars.pinReparent,\n          pinSpacer = _vars.pinSpacer,\n          containerAnimation = _vars.containerAnimation,\n          fastScrollEnd = _vars.fastScrollEnd,\n          preventOverlaps = _vars.preventOverlaps,\n          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,\n          isToggle = !scrub && scrub !== 0,\n          scroller = _getTarget(vars.scroller || _win$1),\n          scrollerCache = gsap$1.core.getCache(scroller),\n          isViewport = _isViewport$1(scroller),\n          useFixedPosition = (\"pinType\" in vars ? vars.pinType : _getProxyProp(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\",\n          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n          toggleActions = isToggle && vars.toggleActions.split(\" \"),\n          markers = \"markers\" in vars ? vars.markers : _defaults.markers,\n          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n          self = this,\n          onRefreshInit = vars.onRefreshInit && function () {\n        return vars.onRefreshInit(self);\n      },\n          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),\n          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),\n          lastSnap = 0,\n          lastRefresh = 0,\n          prevProgress = 0,\n          scrollFunc = _getScrollFunc(scroller, direction),\n          tweenTo,\n          pinCache,\n          snapFunc,\n          scroll1,\n          scroll2,\n          start,\n          end,\n          markerStart,\n          markerEnd,\n          markerStartTrigger,\n          markerEndTrigger,\n          markerVars,\n          executingOnRefresh,\n          change,\n          pinOriginalState,\n          pinActiveState,\n          pinState,\n          spacer,\n          offset,\n          pinGetter,\n          pinSetter,\n          pinStart,\n          pinChange,\n          spacingStart,\n          spacerState,\n          markerStartSetter,\n          pinMoves,\n          markerEndSetter,\n          cs,\n          snap1,\n          snap2,\n          scrubTween,\n          scrubSmooth,\n          snapDurClamp,\n          snapDelayedCall,\n          prevScroll,\n          prevAnimProgress,\n          caMarkerSetter,\n          customRevertReturn;\n\n      self._startClamp = self._endClamp = false;\n      self._dir = direction;\n      anticipatePin *= 45;\n      self.scroller = scroller;\n      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n      scroll1 = scrollFunc();\n      self.vars = vars;\n      animation = animation || vars.animation;\n\n      if (\"refreshPriority\" in vars) {\n        _sort = 1;\n        vars.refreshPriority === -9999 && (_primary = self);\n      }\n\n      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n        top: _getTweenCreator(scroller, _vertical),\n        left: _getTweenCreator(scroller, _horizontal)\n      };\n      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\n      self.scrubDuration = function (value) {\n        scrubSmooth = _isNumber(value) && value;\n\n        if (!scrubSmooth) {\n          scrubTween && scrubTween.progress(1).kill();\n          scrubTween = 0;\n        } else {\n          scrubTween ? scrubTween.duration(value) : scrubTween = gsap$1.to(animation, {\n            ease: \"expo\",\n            totalProgress: \"+=0\",\n            duration: scrubSmooth,\n            paused: true,\n            onComplete: function onComplete() {\n              return onScrubComplete && onScrubComplete(self);\n            }\n          });\n        }\n      };\n\n      if (animation) {\n        animation.vars.lazy = false;\n        animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true);\n        self.animation = animation.pause();\n        animation.scrollTrigger = self;\n        self.scrubDuration(scrub);\n        snap1 = 0;\n        id || (id = animation.vars.id);\n      }\n\n      if (snap) {\n        if (!_isObject(snap) || snap.push) {\n          snap = {\n            snapTo: snap\n          };\n        }\n\n        \"scrollBehavior\" in _body$1.style && gsap$1.set(isViewport ? [_body$1, _docEl$1] : scroller, {\n          scrollBehavior: \"auto\"\n        });\n\n        _scrollers.forEach(function (o) {\n          return _isFunction(o) && o.target === (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller) && (o.smooth = false);\n        });\n\n        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {\n          return _snapDirectional(snap.snapTo)(value, _getTime$1() - lastRefresh < 500 ? 0 : st.direction);\n        } : gsap$1.utils.snap(snap.snapTo);\n        snapDurClamp = snap.duration || {\n          min: 0.1,\n          max: 2\n        };\n        snapDurClamp = _isObject(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);\n        snapDelayedCall = gsap$1.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {\n          var scroll = scrollFunc(),\n              refreshedRecently = _getTime$1() - lastRefresh < 500,\n              tween = tweenTo.tween;\n\n          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n            var progress = (scroll - start) / change,\n                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,\n                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime$1() - _time2) * 1000 || 0,\n                change1 = gsap$1.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),\n                naturalEnd = progress + (snap.inertia === false ? 0 : change1),\n                endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),\n                endScroll = Math.round(start + endValue * change),\n                _snap = snap,\n                onStart = _snap.onStart,\n                _onInterrupt = _snap.onInterrupt,\n                _onComplete = _snap.onComplete;\n\n            if (scroll <= end && scroll >= start && endScroll !== scroll) {\n              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n                return;\n              }\n\n              if (snap.inertia === false) {\n                change1 = endValue - progress;\n              }\n\n              tweenTo(endScroll, {\n                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n                ease: snap.ease || \"power3\",\n                data: _abs(endScroll - scroll),\n                onInterrupt: function onInterrupt() {\n                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n                },\n                onComplete: function onComplete() {\n                  self.update();\n                  lastSnap = scrollFunc();\n                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                  onSnapComplete && onSnapComplete(self);\n                  _onComplete && _onComplete(self);\n                }\n              }, scroll, change1 * change, endScroll - scroll - change1 * change);\n              onStart && onStart(self, tweenTo.tween);\n            }\n          } else if (self.isActive && lastSnap !== scroll) {\n            snapDelayedCall.restart(true);\n          }\n        }).pause();\n      }\n\n      id && (_ids[id] = self);\n      trigger = self.trigger = _getTarget(trigger || pin !== true && pin);\n      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n      customRevertReturn && (customRevertReturn = customRevertReturn(self));\n      pin = pin === true ? trigger : _getTarget(pin);\n      _isString(toggleClass) && (toggleClass = {\n        targets: trigger,\n        className: toggleClass\n      });\n\n      if (pin) {\n        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding);\n        self.pin = pin;\n        pinCache = gsap$1.core.getCache(pin);\n\n        if (!pinCache.spacer) {\n          if (pinSpacer) {\n            pinSpacer = _getTarget(pinSpacer);\n            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement);\n            pinCache.spacerIsNative = !!pinSpacer;\n            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n          }\n\n          pinCache.spacer = spacer = pinSpacer || _doc$1.createElement(\"div\");\n          spacer.classList.add(\"pin-spacer\");\n          id && spacer.classList.add(\"pin-spacer-\" + id);\n          pinCache.pinState = pinOriginalState = _getState(pin);\n        } else {\n          pinOriginalState = pinCache.pinState;\n        }\n\n        vars.force3D !== false && gsap$1.set(pin, {\n          force3D: true\n        });\n        self.spacer = spacer = pinCache.spacer;\n        cs = _getComputedStyle(pin);\n        spacingStart = cs[pinSpacing + direction.os2];\n        pinGetter = gsap$1.getProperty(pin);\n        pinSetter = gsap$1.quickSetter(pin, direction.a, _px);\n\n        _swapPinIn(pin, spacer, cs);\n\n        pinState = _getState(pin);\n      }\n\n      if (markers) {\n        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n        markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n        markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n        offset = markerStartTrigger[\"offset\" + direction.op.d2];\n\n        var content = _getTarget(_getProxyProp(scroller, \"content\") || scroller);\n\n        markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        containerAnimation && (caMarkerSetter = gsap$1.quickSetter([markerStart, markerEnd], direction.a, _px));\n\n        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, \"fixedMarkers\") === true)) {\n          _makePositionable(isViewport ? _body$1 : scroller);\n\n          gsap$1.set([markerStartTrigger, markerEndTrigger], {\n            force3D: true\n          });\n          markerStartSetter = gsap$1.quickSetter(markerStartTrigger, direction.a, _px);\n          markerEndSetter = gsap$1.quickSetter(markerEndTrigger, direction.a, _px);\n        }\n      }\n\n      if (containerAnimation) {\n        var oldOnUpdate = containerAnimation.vars.onUpdate,\n            oldParams = containerAnimation.vars.onUpdateParams;\n        containerAnimation.eventCallback(\"onUpdate\", function () {\n          self.update(0, 0, 1);\n          oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);\n        });\n      }\n\n      self.previous = function () {\n        return _triggers[_triggers.indexOf(self) - 1];\n      };\n\n      self.next = function () {\n        return _triggers[_triggers.indexOf(self) + 1];\n      };\n\n      self.revert = function (revert, temp) {\n        if (!temp) {\n          return self.kill(true);\n        }\n\n        var r = revert !== false || !self.enabled,\n            prevRefreshing = _refreshing;\n\n        if (r !== self.isReverted) {\n          if (r) {\n            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0);\n            prevProgress = self.progress;\n            prevAnimProgress = animation && animation.progress();\n          }\n\n          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n            return m.style.display = r ? \"none\" : \"block\";\n          });\n\n          if (r) {\n            _refreshing = self;\n            self.update(r);\n          }\n\n          if (pin && (!pinReparent || !self.isActive)) {\n            if (r) {\n              _swapPinOut(pin, spacer, pinOriginalState);\n            } else {\n              _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);\n            }\n          }\n\n          r || self.update(r);\n          _refreshing = prevRefreshing;\n          self.isReverted = r;\n        }\n      };\n\n      self.refresh = function (soft, force, position, pinOffset) {\n        if ((_refreshing || !self.enabled) && !force) {\n          return;\n        }\n\n        if (pin && soft && _lastScrollTime) {\n          _addListener$1(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\n          return;\n        }\n\n        !_refreshingAll && onRefreshInit && onRefreshInit(self);\n        _refreshing = self;\n\n        if (tweenTo.tween && !position) {\n          tweenTo.tween.kill();\n          tweenTo.tween = 0;\n        }\n\n        scrubTween && scrubTween.pause();\n        invalidateOnRefresh && animation && animation.revert({\n          kill: false\n        }).invalidate();\n        self.isReverted || self.revert(true, true);\n        self._subPinOffset = false;\n\n        var size = getScrollerSize(),\n            scrollerBounds = getScrollerOffsets(),\n            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),\n            isFirstRefresh = change <= 0.01,\n            offset = 0,\n            otherPinOffset = pinOffset || 0,\n            parsedEnd = _isObject(position) ? position.end : vars.end,\n            parsedEndTrigger = vars.endTrigger || trigger,\n            parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"),\n            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),\n            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,\n            i = triggerIndex,\n            cs,\n            bounds,\n            scroll,\n            isVertical,\n            override,\n            curTrigger,\n            curPin,\n            oppositeScroll,\n            initted,\n            revertedPins,\n            forcedOverflow,\n            markerStartOffset,\n            markerEndOffset;\n\n        if (markers && _isObject(position)) {\n          markerStartOffset = gsap$1.getProperty(markerStartTrigger, direction.p);\n          markerEndOffset = gsap$1.getProperty(markerEndTrigger, direction.p);\n        }\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self);\n          curPin = curTrigger.pin;\n\n          if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {\n            revertedPins || (revertedPins = []);\n            revertedPins.unshift(curTrigger);\n            curTrigger.revert(true, true);\n          }\n\n          if (curTrigger !== _triggers[i]) {\n            triggerIndex--;\n            i--;\n          }\n        }\n\n        _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n        parsedStart = _parseClamp(parsedStart, \"start\", self);\n        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && \"_startClamp\") || (pin ? -0.001 : 0);\n        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\n        if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n          if (~parsedEnd.indexOf(\" \")) {\n            parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n          } else {\n            offset = _offsetToPx(parsedEnd.substr(2), size);\n            parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap$1.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset;\n            parsedEndTrigger = trigger;\n          }\n        }\n\n        parsedEnd = _parseClamp(parsedEnd, \"end\", self);\n        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && \"_endClamp\")) || -0.001;\n        offset = 0;\n        i = triggerIndex;\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curPin = curTrigger.pin;\n\n          if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {\n            cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);\n\n            if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {\n              offset += cs * (1 - curTrigger.progress);\n            }\n\n            curPin === pin && (otherPinOffset += cs);\n          }\n        }\n\n        start += offset;\n        end += offset;\n        self._startClamp && (self._startClamp += offset);\n\n        if (self._endClamp && !_refreshingAll) {\n          self._endClamp = end || -0.001;\n          end = Math.min(end, _maxScroll(scroller, direction));\n        }\n\n        change = end - start || (start -= 0.01) && 0.001;\n\n        if (isFirstRefresh) {\n          prevProgress = gsap$1.utils.clamp(0, 1, gsap$1.utils.normalize(start, end, prevScroll));\n        }\n\n        self._pinPush = otherPinOffset;\n\n        if (markerStart && offset) {\n          cs = {};\n          cs[direction.a] = \"+=\" + offset;\n          pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n          gsap$1.set([markerStart, markerEnd], cs);\n        }\n\n        if (pin) {\n          cs = _getComputedStyle(pin);\n          isVertical = direction === _vertical;\n          scroll = scrollFunc();\n          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n\n          if (!max && end > 1) {\n            forcedOverflow = (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller).style;\n            forcedOverflow = {\n              style: forcedOverflow,\n              value: forcedOverflow[\"overflow\" + direction.a.toUpperCase()]\n            };\n\n            if (isViewport && _getComputedStyle(_body$1)[\"overflow\" + direction.a.toUpperCase()] !== \"scroll\") {\n              forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = \"scroll\";\n            }\n          }\n\n          _swapPinIn(pin, spacer, cs);\n\n          pinState = _getState(pin);\n          bounds = _getBounds(pin, true);\n          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();\n\n          if (pinSpacing) {\n            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];\n            spacerState.t = spacer;\n            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n            i && spacerState.push(direction.d, i + _px);\n\n            _setState(spacerState);\n\n            if (pinnedContainer) {\n              _triggers.forEach(function (t) {\n                if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {\n                  t._subPinOffset = true;\n                }\n              });\n            }\n\n            useFixedPosition && scrollFunc(prevScroll);\n          }\n\n          if (useFixedPosition) {\n            override = {\n              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n              boxSizing: \"border-box\",\n              position: \"fixed\"\n            };\n            override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n            override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n            override[_padding] = cs[_padding];\n            override[_padding + _Top] = cs[_padding + _Top];\n            override[_padding + _Right] = cs[_padding + _Right];\n            override[_padding + _Bottom] = cs[_padding + _Bottom];\n            override[_padding + _Left] = cs[_padding + _Left];\n            pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n            _refreshingAll && scrollFunc(0);\n          }\n\n          if (animation) {\n            initted = animation._initted;\n\n            _suppressOverwrites(1);\n\n            animation.render(animation.duration(), true, true);\n            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n            pinMoves = Math.abs(change - pinChange) > 1;\n            useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2);\n            animation.render(0, true, true);\n            initted || animation.invalidate(true);\n            animation.parent || animation.totalTime(animation.totalTime());\n\n            _suppressOverwrites(0);\n          } else {\n            pinChange = change;\n          }\n\n          forcedOverflow && (forcedOverflow.value ? forcedOverflow.style[\"overflow\" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty(\"overflow-\" + direction.a));\n        } else if (trigger && scrollFunc() && !containerAnimation) {\n          bounds = trigger.parentNode;\n\n          while (bounds && bounds !== _body$1) {\n            if (bounds._pinOffset) {\n              start -= bounds._pinOffset;\n              end -= bounds._pinOffset;\n            }\n\n            bounds = bounds.parentNode;\n          }\n        }\n\n        revertedPins && revertedPins.forEach(function (t) {\n          return t.revert(false, true);\n        });\n        self.start = start;\n        self.end = end;\n        scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc();\n\n        if (!containerAnimation && !_refreshingAll) {\n          scroll1 < prevScroll && scrollFunc(prevScroll);\n          self.scroll.rec = 0;\n        }\n\n        self.revert(false, true);\n        lastRefresh = _getTime$1();\n\n        if (snapDelayedCall) {\n          lastSnap = -1;\n          snapDelayedCall.restart(true);\n        }\n\n        _refreshing = 0;\n        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true);\n\n        if (isFirstRefresh || prevProgress !== self.progress || containerAnimation) {\n          animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap$1.utils.normalize(start, end, 0) : prevProgress, true);\n          self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;\n        }\n\n        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n        scrubTween && scrubTween.invalidate();\n\n        if (!isNaN(markerStartOffset)) {\n          markerStartOffset -= gsap$1.getProperty(markerStartTrigger, direction.p);\n          markerEndOffset -= gsap$1.getProperty(markerEndTrigger, direction.p);\n\n          _shiftMarker(markerStartTrigger, direction, markerStartOffset);\n\n          _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));\n\n          _shiftMarker(markerEndTrigger, direction, markerEndOffset);\n\n          _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));\n        }\n\n        isFirstRefresh && !_refreshingAll && self.update();\n\n        if (onRefresh && !_refreshingAll && !executingOnRefresh) {\n          executingOnRefresh = true;\n          onRefresh(self);\n          executingOnRefresh = false;\n        }\n      };\n\n      self.getVelocity = function () {\n        return (scrollFunc() - scroll2) / (_getTime$1() - _time2) * 1000 || 0;\n      };\n\n      self.endAnimation = function () {\n        _endAnimation(self.callbackAnimation);\n\n        if (animation) {\n          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n        }\n      };\n\n      self.labelToScroll = function (label) {\n        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n      };\n\n      self.getTrailing = function (name) {\n        var i = _triggers.indexOf(self),\n            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n\n        return (_isString(name) ? a.filter(function (t) {\n          return t.vars.preventOverlaps === name;\n        }) : a).filter(function (t) {\n          return self.direction > 0 ? t.end <= start : t.start >= end;\n        });\n      };\n\n      self.update = function (reset, recordVelocity, forceFake) {\n        if (containerAnimation && !forceFake && !reset) {\n          return;\n        }\n\n        var scroll = _refreshingAll === true ? prevScroll : self.scroll(),\n            p = reset ? 0 : (scroll - start) / change,\n            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n            prevProgress = self.progress,\n            isActive,\n            wasActive,\n            toggleState,\n            action,\n            stateChanged,\n            toggled,\n            isAtMax,\n            isTakingAction;\n\n        if (recordVelocity) {\n          scroll2 = scroll1;\n          scroll1 = containerAnimation ? scrollFunc() : scroll;\n\n          if (snap) {\n            snap2 = snap1;\n            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n          }\n        }\n\n        anticipatePin && !clipped && pin && !_refreshing && !_startup$1 && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime$1() - _time2) * anticipatePin && (clipped = 0.0001);\n\n        if (clipped !== prevProgress && self.enabled) {\n          isActive = self.isActive = !!clipped && clipped < 1;\n          wasActive = !!prevProgress && prevProgress < 1;\n          toggled = isActive !== wasActive;\n          stateChanged = toggled || !!clipped !== !!prevProgress;\n          self.direction = clipped > prevProgress ? 1 : -1;\n          self.progress = clipped;\n\n          if (stateChanged && !_refreshing) {\n            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3;\n\n            if (isToggle) {\n              action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState];\n              isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n            }\n          }\n\n          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {\n            return t.endAnimation();\n          }));\n\n          if (!isToggle) {\n            if (scrubTween && !_refreshing && !_startup$1) {\n              scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start);\n\n              if (scrubTween.resetTo) {\n                scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n              } else {\n                scrubTween.vars.totalProgress = clipped;\n                scrubTween.invalidate().restart();\n              }\n            } else if (animation) {\n              animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));\n            }\n          }\n\n          if (pin) {\n            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\n            if (!useFixedPosition) {\n              pinSetter(_round(pinStart + pinChange * clipped));\n            } else if (stateChanged) {\n              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction);\n\n              if (pinReparent) {\n                if (!reset && (isActive || isAtMax)) {\n                  var bounds = _getBounds(pin, true),\n                      _offset = scroll - start;\n\n                  _reparent(pin, _body$1, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);\n                } else {\n                  _reparent(pin, spacer);\n                }\n              }\n\n              _setState(isActive || isAtMax ? pinActiveState : pinState);\n\n              pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n            }\n          }\n\n          snap && !tweenTo.tween && !_refreshing && !_startup$1 && snapDelayedCall.restart(true);\n          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {\n            return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n          });\n          onUpdate && !isToggle && !reset && onUpdate(self);\n\n          if (stateChanged && !_refreshing) {\n            if (isToggle) {\n              if (isTakingAction) {\n                if (action === \"complete\") {\n                  animation.pause().totalProgress(1);\n                } else if (action === \"reset\") {\n                  animation.restart(true).pause();\n                } else if (action === \"restart\") {\n                  animation.restart(true);\n                } else {\n                  animation[action]();\n                }\n              }\n\n              onUpdate && onUpdate(self);\n            }\n\n            if (toggled || !_limitCallbacks) {\n              onToggle && toggled && _callback(self, onToggle);\n              callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0);\n\n              if (!toggled) {\n                toggleState = clipped === 1 ? 1 : 3;\n                callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              }\n            }\n\n            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n              _endAnimation(self.callbackAnimation);\n\n              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === \"reverse\" ? 1 : !clipped, 1);\n            }\n          } else if (isToggle && onUpdate && !_refreshing) {\n            onUpdate(self);\n          }\n        }\n\n        if (markerEndSetter) {\n          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n          markerEndSetter(n);\n        }\n\n        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n      };\n\n      self.enable = function (reset, refresh) {\n        if (!self.enabled) {\n          self.enabled = true;\n\n          _addListener$1(scroller, \"resize\", _onResize);\n\n          isViewport || _addListener$1(scroller, \"scroll\", _onScroll$1);\n          onRefreshInit && _addListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (reset !== false) {\n            self.progress = prevProgress = 0;\n            scroll1 = scroll2 = lastSnap = scrollFunc();\n          }\n\n          refresh !== false && self.refresh();\n        }\n      };\n\n      self.getTween = function (snap) {\n        return snap && tweenTo ? tweenTo.tween : scrubTween;\n      };\n\n      self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {\n        if (containerAnimation) {\n          var st = containerAnimation.scrollTrigger,\n              duration = containerAnimation.duration(),\n              _change = st.end - st.start;\n\n          newStart = st.start + _change * newStart / duration;\n          newEnd = st.start + _change * newEnd / duration;\n        }\n\n        self.refresh(false, false, {\n          start: _keepClamp(newStart, keepClamp && !!self._startClamp),\n          end: _keepClamp(newEnd, keepClamp && !!self._endClamp)\n        }, pinOffset);\n        self.update();\n      };\n\n      self.adjustPinSpacing = function (amount) {\n        if (spacerState && amount) {\n          var i = spacerState.indexOf(direction.d) + 1;\n          spacerState[i] = parseFloat(spacerState[i]) + amount + _px;\n          spacerState[1] = parseFloat(spacerState[1]) + amount + _px;\n\n          _setState(spacerState);\n        }\n      };\n\n      self.disable = function (reset, allowAnimation) {\n        if (self.enabled) {\n          reset !== false && self.revert(true, true);\n          self.enabled = self.isActive = false;\n          allowAnimation || scrubTween && scrubTween.pause();\n          prevScroll = 0;\n          pinCache && (pinCache.uncache = 1);\n          onRefreshInit && _removeListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (snapDelayedCall) {\n            snapDelayedCall.pause();\n            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n          }\n\n          if (!isViewport) {\n            var i = _triggers.length;\n\n            while (i--) {\n              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n                return;\n              }\n            }\n\n            _removeListener$1(scroller, \"resize\", _onResize);\n\n            isViewport || _removeListener$1(scroller, \"scroll\", _onScroll$1);\n          }\n        }\n      };\n\n      self.kill = function (revert, allowAnimation) {\n        self.disable(revert, allowAnimation);\n        scrubTween && !allowAnimation && scrubTween.kill();\n        id && delete _ids[id];\n\n        var i = _triggers.indexOf(self);\n\n        i >= 0 && _triggers.splice(i, 1);\n        i === _i && _direction > 0 && _i--;\n        i = 0;\n\n        _triggers.forEach(function (t) {\n          return t.scroller === self.scroller && (i = 1);\n        });\n\n        i || _refreshingAll || (self.scroll.rec = 0);\n\n        if (animation) {\n          animation.scrollTrigger = null;\n          revert && animation.revert({\n            kill: false\n          });\n          allowAnimation || animation.kill();\n        }\n\n        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n          return m.parentNode && m.parentNode.removeChild(m);\n        });\n        _primary === self && (_primary = 0);\n\n        if (pin) {\n          pinCache && (pinCache.uncache = 1);\n          i = 0;\n\n          _triggers.forEach(function (t) {\n            return t.pin === pin && i++;\n          });\n\n          i || (pinCache.spacer = 0);\n        }\n\n        vars.onKill && vars.onKill(self);\n      };\n\n      _triggers.push(self);\n\n      self.enable(false, false);\n      customRevertReturn && customRevertReturn(self);\n\n      if (animation && animation.add && !change) {\n        var updateFunc = self.update;\n\n        self.update = function () {\n          self.update = updateFunc;\n          start || end || self.refresh();\n        };\n\n        gsap$1.delayedCall(0.01, self.update);\n        change = 0.01;\n        start = end = 0;\n      } else {\n        self.refresh();\n      }\n\n      pin && _queueRefreshAll();\n    };\n\n    ScrollTrigger.register = function register(core) {\n      if (!_coreInitted$1) {\n        gsap$1 = core || _getGSAP$1();\n        _windowExists() && window.document && ScrollTrigger.enable();\n        _coreInitted$1 = _enabled;\n      }\n\n      return _coreInitted$1;\n    };\n\n    ScrollTrigger.defaults = function defaults(config) {\n      if (config) {\n        for (var p in config) {\n          _defaults[p] = config[p];\n        }\n      }\n\n      return _defaults;\n    };\n\n    ScrollTrigger.disable = function disable(reset, kill) {\n      _enabled = 0;\n\n      _triggers.forEach(function (trigger) {\n        return trigger[kill ? \"kill\" : \"disable\"](reset);\n      });\n\n      _removeListener$1(_win$1, \"wheel\", _onScroll$1);\n\n      _removeListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n      clearInterval(_syncInterval);\n\n      _removeListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n      _removeListener$1(_body$1, \"touchstart\", _passThrough);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n      _resizeDelay.kill();\n\n      _iterateAutoRefresh(_removeListener$1);\n\n      for (var i = 0; i < _scrollers.length; i += 3) {\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n      }\n    };\n\n    ScrollTrigger.enable = function enable() {\n      _win$1 = window;\n      _doc$1 = document;\n      _docEl$1 = _doc$1.documentElement;\n      _body$1 = _doc$1.body;\n\n      if (gsap$1) {\n        _toArray = gsap$1.utils.toArray;\n        _clamp$1 = gsap$1.utils.clamp;\n        _context$1 = gsap$1.core.context || _passThrough;\n        _suppressOverwrites = gsap$1.core.suppressOverwrites || _passThrough;\n        _scrollRestoration = _win$1.history.scrollRestoration || \"auto\";\n        _lastScroll = _win$1.pageYOffset;\n        gsap$1.core.globals(\"ScrollTrigger\", ScrollTrigger);\n\n        if (_body$1) {\n          _enabled = 1;\n          _div100vh = document.createElement(\"div\");\n          _div100vh.style.height = \"100vh\";\n          _div100vh.style.position = \"absolute\";\n\n          _refresh100vh();\n\n          _rafBugFix();\n\n          Observer.register(gsap$1);\n          ScrollTrigger.isTouch = Observer.isTouch;\n          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent);\n\n          _addListener$1(_win$1, \"wheel\", _onScroll$1);\n\n          _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];\n\n          if (gsap$1.matchMedia) {\n            ScrollTrigger.matchMedia = function (vars) {\n              var mm = gsap$1.matchMedia(),\n                  p;\n\n              for (p in vars) {\n                mm.add(p, vars[p]);\n              }\n\n              return mm;\n            };\n\n            gsap$1.addEventListener(\"matchMediaInit\", function () {\n              return _revertAll();\n            });\n            gsap$1.addEventListener(\"matchMediaRevert\", function () {\n              return _revertRecorded();\n            });\n            gsap$1.addEventListener(\"matchMedia\", function () {\n              _refreshAll(0, 1);\n\n              _dispatch(\"matchMedia\");\n            });\n            gsap$1.matchMedia(\"(orientation: portrait)\", function () {\n              _setBaseDimensions();\n\n              return _setBaseDimensions;\n            });\n          } else {\n            console.warn(\"Requires GSAP 3.11.0 or later\");\n          }\n\n          _setBaseDimensions();\n\n          _addListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n          var bodyStyle = _body$1.style,\n              border = bodyStyle.borderTopStyle,\n              AnimationProto = gsap$1.core.Animation.prototype,\n              bounds,\n              i;\n          AnimationProto.revert || Object.defineProperty(AnimationProto, \"revert\", {\n            value: function value() {\n              return this.time(-0.01, true);\n            }\n          });\n          bodyStyle.borderTopStyle = \"solid\";\n          bounds = _getBounds(_body$1);\n          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0;\n          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;\n          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\");\n          _syncInterval = setInterval(_sync, 250);\n          gsap$1.delayedCall(0.5, function () {\n            return _startup$1 = 0;\n          });\n\n          _addListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n          _addListener$1(_body$1, \"touchstart\", _passThrough);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n          _transformProp = gsap$1.utils.checkPrefix(\"transform\");\n\n          _stateProps.push(_transformProp);\n\n          _coreInitted$1 = _getTime$1();\n          _resizeDelay = gsap$1.delayedCall(0.2, _refreshAll).pause();\n          _autoRefresh = [_doc$1, \"visibilitychange\", function () {\n            var w = _win$1.innerWidth,\n                h = _win$1.innerHeight;\n\n            if (_doc$1.hidden) {\n              _prevWidth = w;\n              _prevHeight = h;\n            } else if (_prevWidth !== w || _prevHeight !== h) {\n              _onResize();\n            }\n          }, _doc$1, \"DOMContentLoaded\", _refreshAll, _win$1, \"load\", _refreshAll, _win$1, \"resize\", _onResize];\n\n          _iterateAutoRefresh(_addListener$1);\n\n          _triggers.forEach(function (trigger) {\n            return trigger.enable(0, 1);\n          });\n\n          for (i = 0; i < _scrollers.length; i += 3) {\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n          }\n        }\n      }\n    };\n\n    ScrollTrigger.config = function config(vars) {\n      \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n      var ms = vars.syncInterval;\n      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n      \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n\n      if (\"autoRefreshEvents\" in vars) {\n        _iterateAutoRefresh(_removeListener$1) || _iterateAutoRefresh(_addListener$1, vars.autoRefreshEvents || \"none\");\n        _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n      }\n    };\n\n    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n      var t = _getTarget(target),\n          i = _scrollers.indexOf(t),\n          isViewport = _isViewport$1(t);\n\n      if (~i) {\n        _scrollers.splice(i, isViewport ? 6 : 2);\n      }\n\n      if (vars) {\n        isViewport ? _proxies.unshift(_win$1, vars, _body$1, vars, _docEl$1, vars) : _proxies.unshift(t, vars);\n      }\n    };\n\n    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n      _triggers.forEach(function (t) {\n        return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);\n      });\n    };\n\n    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n      var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),\n          offset = bounds[horizontal ? _width : _height] * ratio || 0;\n      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win$1.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win$1.innerHeight;\n    };\n\n    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n      _isString(element) && (element = _getTarget(element));\n      var bounds = element.getBoundingClientRect(),\n          size = bounds[horizontal ? _width : _height],\n          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n      return horizontal ? (bounds.left + offset) / _win$1.innerWidth : (bounds.top + offset) / _win$1.innerHeight;\n    };\n\n    ScrollTrigger.killAll = function killAll(allowListeners) {\n      _triggers.slice(0).forEach(function (t) {\n        return t.vars.id !== \"ScrollSmoother\" && t.kill();\n      });\n\n      if (allowListeners !== true) {\n        var listeners = _listeners.killAll || [];\n        _listeners = {};\n        listeners.forEach(function (f) {\n          return f();\n        });\n      }\n    };\n\n    return ScrollTrigger;\n  }();\n  ScrollTrigger$1.version = \"3.12.2\";\n\n  ScrollTrigger$1.saveStyles = function (targets) {\n    return targets ? _toArray(targets).forEach(function (target) {\n      if (target && target.style) {\n        var i = _savedStyles.indexOf(target);\n\n        i >= 0 && _savedStyles.splice(i, 5);\n\n        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap$1.core.getCache(target), _context$1());\n      }\n    }) : _savedStyles;\n  };\n\n  ScrollTrigger$1.revert = function (soft, media) {\n    return _revertAll(!soft, media);\n  };\n\n  ScrollTrigger$1.create = function (vars, animation) {\n    return new ScrollTrigger$1(vars, animation);\n  };\n\n  ScrollTrigger$1.refresh = function (safe) {\n    return safe ? _onResize() : (_coreInitted$1 || ScrollTrigger$1.register()) && _refreshAll(true);\n  };\n\n  ScrollTrigger$1.update = function (force) {\n    return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);\n  };\n\n  ScrollTrigger$1.clearScrollMemory = _clearScrollMemory;\n\n  ScrollTrigger$1.maxScroll = function (element, horizontal) {\n    return _maxScroll(element, horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getScrollFunc = function (element, horizontal) {\n    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getById = function (id) {\n    return _ids[id];\n  };\n\n  ScrollTrigger$1.getAll = function () {\n    return _triggers.filter(function (t) {\n      return t.vars.id !== \"ScrollSmoother\";\n    });\n  };\n\n  ScrollTrigger$1.isScrolling = function () {\n    return !!_lastScrollTime;\n  };\n\n  ScrollTrigger$1.snapDirectional = _snapDirectional;\n\n  ScrollTrigger$1.addEventListener = function (type, callback) {\n    var a = _listeners[type] || (_listeners[type] = []);\n    ~a.indexOf(callback) || a.push(callback);\n  };\n\n  ScrollTrigger$1.removeEventListener = function (type, callback) {\n    var a = _listeners[type],\n        i = a && a.indexOf(callback);\n    i >= 0 && a.splice(i, 1);\n  };\n\n  ScrollTrigger$1.batch = function (targets, vars) {\n    var result = [],\n        varsCopy = {},\n        interval = vars.interval || 0.016,\n        batchMax = vars.batchMax || 1e9,\n        proxyCallback = function proxyCallback(type, callback) {\n      var elements = [],\n          triggers = [],\n          delay = gsap$1.delayedCall(interval, function () {\n        callback(elements, triggers);\n        elements = [];\n        triggers = [];\n      }).pause();\n      return function (self) {\n        elements.length || delay.restart(true);\n        elements.push(self.trigger);\n        triggers.push(self);\n        batchMax <= elements.length && delay.progress(1);\n      };\n    },\n        p;\n\n    for (p in vars) {\n      varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n    }\n\n    if (_isFunction(batchMax)) {\n      batchMax = batchMax();\n\n      _addListener$1(ScrollTrigger$1, \"refresh\", function () {\n        return batchMax = vars.batchMax();\n      });\n    }\n\n    _toArray(targets).forEach(function (target) {\n      var config = {};\n\n      for (p in varsCopy) {\n        config[p] = varsCopy[p];\n      }\n\n      config.trigger = target;\n      result.push(ScrollTrigger$1.create(config));\n    });\n\n    return result;\n  };\n\n  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n  },\n      _allowNativePanning = function _allowNativePanning(target, direction) {\n    if (direction === true) {\n      target.style.removeProperty(\"touch-action\");\n    } else {\n      target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\";\n    }\n\n    target === _docEl$1 && _allowNativePanning(_body$1, direction);\n  },\n      _overflow = {\n    auto: 1,\n    scroll: 1\n  },\n      _nestedScroll = function _nestedScroll(_ref5) {\n    var event = _ref5.event,\n        target = _ref5.target,\n        axis = _ref5.axis;\n\n    var node = (event.changedTouches ? event.changedTouches[0] : event).target,\n        cache = node._gsap || gsap$1.core.getCache(node),\n        time = _getTime$1(),\n        cs;\n\n    if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n      while (node && node !== _body$1 && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {\n        node = node.parentNode;\n      }\n\n      cache._isScroll = node && node !== target && !_isViewport$1(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n      cache._isScrollT = time;\n    }\n\n    if (cache._isScroll || axis === \"x\") {\n      event.stopPropagation();\n      event._gsapAllow = true;\n    }\n  },\n      _inputObserver = function _inputObserver(target, type, inputs, nested) {\n    return Observer.create({\n      target: target,\n      capture: true,\n      debounce: false,\n      lockAxis: true,\n      type: type,\n      onWheel: nested = nested && _nestedScroll,\n      onPress: nested,\n      onDrag: nested,\n      onScroll: nested,\n      onEnable: function onEnable() {\n        return inputs && _addListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, false, true);\n      },\n      onDisable: function onDisable() {\n        return _removeListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, true);\n      }\n    });\n  },\n      _inputExp = /(input|label|select|textarea)/i,\n      _inputIsFocused,\n      _captureInputs = function _captureInputs(e) {\n    var isInput = _inputExp.test(e.target.tagName);\n\n    if (isInput || _inputIsFocused) {\n      e._gsapAllow = true;\n      _inputIsFocused = isInput;\n    }\n  },\n      _getScrollNormalizer = function _getScrollNormalizer(vars) {\n    _isObject(vars) || (vars = {});\n    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n    vars.type || (vars.type = \"wheel,touch\");\n    vars.debounce = !!vars.debounce;\n    vars.id = vars.id || \"normalizer\";\n\n    var _vars2 = vars,\n        normalizeScrollX = _vars2.normalizeScrollX,\n        momentum = _vars2.momentum,\n        allowNestedScroll = _vars2.allowNestedScroll,\n        onRelease = _vars2.onRelease,\n        self,\n        maxY,\n        target = _getTarget(vars.target) || _docEl$1,\n        smoother = gsap$1.core.globals().ScrollSmoother,\n        smootherInstance = smoother && smoother.get(),\n        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),\n        scrollFuncY = _getScrollFunc(target, _vertical),\n        scrollFuncX = _getScrollFunc(target, _horizontal),\n        scale = 1,\n        initialScale = (Observer.isTouch && _win$1.visualViewport ? _win$1.visualViewport.scale * _win$1.visualViewport.width : _win$1.outerWidth) / _win$1.innerWidth,\n        wheelRefresh = 0,\n        resolveMomentumDuration = _isFunction(momentum) ? function () {\n      return momentum(self);\n    } : function () {\n      return momentum || 2.8;\n    },\n        lastRefreshID,\n        skipTouchMove,\n        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),\n        resumeTouchMove = function resumeTouchMove() {\n      return skipTouchMove = false;\n    },\n        scrollClampX = _passThrough,\n        scrollClampY = _passThrough,\n        updateClamps = function updateClamps() {\n      maxY = _maxScroll(target, _vertical);\n      scrollClampY = _clamp$1(_fixIOSBug ? 1 : 0, maxY);\n      normalizeScrollX && (scrollClampX = _clamp$1(0, _maxScroll(target, _horizontal)));\n      lastRefreshID = _refreshID;\n    },\n        removeContentOffset = function removeContentOffset() {\n      content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + \"px\";\n      content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + parseFloat(content._gsap.y) + \", 0, 1)\";\n      scrollFuncY.offset = scrollFuncY.cacheID = 0;\n    },\n        ignoreDrag = function ignoreDrag() {\n      if (skipTouchMove) {\n        requestAnimationFrame(resumeTouchMove);\n\n        var offset = _round(self.deltaY / 2),\n            scroll = scrollClampY(scrollFuncY.v - offset);\n\n        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n          scrollFuncY.offset = scroll - scrollFuncY.v;\n\n          var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);\n\n          content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\";\n          content._gsap.y = y + \"px\";\n          scrollFuncY.cacheID = _scrollers.cache;\n\n          _updateAll();\n        }\n\n        return true;\n      }\n\n      scrollFuncY.offset && removeContentOffset();\n      skipTouchMove = true;\n    },\n        tween,\n        startScrollX,\n        startScrollY,\n        onStopDelayedCall,\n        onResize = function onResize() {\n      updateClamps();\n\n      if (tween.isActive() && tween.vars.scrollY > maxY) {\n        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n      }\n    };\n\n    content && gsap$1.set(content, {\n      y: \"+=0\"\n    });\n\n    vars.ignoreCheck = function (e) {\n      return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag() || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n    };\n\n    vars.onPress = function () {\n      skipTouchMove = false;\n      var prevScale = scale;\n      scale = _round((_win$1.visualViewport && _win$1.visualViewport.scale || 1) / initialScale);\n      tween.pause();\n      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n      startScrollX = scrollFuncX();\n      startScrollY = scrollFuncY();\n      updateClamps();\n      lastRefreshID = _refreshID;\n    };\n\n    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {\n      scrollFuncY.offset && removeContentOffset();\n\n      if (!wasDragging) {\n        onStopDelayedCall.restart(true);\n      } else {\n        _scrollers.cache++;\n        var dur = resolveMomentumDuration(),\n            currentScroll,\n            endScroll;\n\n        if (normalizeScrollX) {\n          currentScroll = scrollFuncX();\n          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227;\n          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));\n          tween.vars.scrollX = scrollClampX(endScroll);\n        }\n\n        currentScroll = scrollFuncY();\n        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227;\n        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));\n        tween.vars.scrollY = scrollClampY(endScroll);\n        tween.invalidate().duration(dur).play(0.01);\n\n        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n          gsap$1.to({}, {\n            onUpdate: onResize,\n            duration: dur\n          });\n        }\n      }\n\n      onRelease && onRelease(self);\n    };\n\n    vars.onWheel = function () {\n      tween._ts && tween.pause();\n\n      if (_getTime$1() - wheelRefresh > 1000) {\n        lastRefreshID = 0;\n        wheelRefresh = _getTime$1();\n      }\n    };\n\n    vars.onChange = function (self, dx, dy, xArray, yArray) {\n      _refreshID !== lastRefreshID && updateClamps();\n      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1]));\n\n      if (dy) {\n        scrollFuncY.offset && removeContentOffset();\n        var isTouch = yArray[2] === dy,\n            y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],\n            yClamped = scrollClampY(y);\n        isTouch && y !== yClamped && (startScrollY += yClamped - y);\n        scrollFuncY(yClamped);\n      }\n\n      (dy || dx) && _updateAll();\n    };\n\n    vars.onEnable = function () {\n      _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n\n      ScrollTrigger$1.addEventListener(\"refresh\", onResize);\n\n      _addListener$1(_win$1, \"resize\", onResize);\n\n      if (scrollFuncY.smooth) {\n        scrollFuncY.target.style.scrollBehavior = \"auto\";\n        scrollFuncY.smooth = scrollFuncX.smooth = false;\n      }\n\n      inputObserver.enable();\n    };\n\n    vars.onDisable = function () {\n      _allowNativePanning(target, true);\n\n      _removeListener$1(_win$1, \"resize\", onResize);\n\n      ScrollTrigger$1.removeEventListener(\"refresh\", onResize);\n      inputObserver.kill();\n    };\n\n    vars.lockAxis = vars.lockAxis !== false;\n    self = new Observer(vars);\n    self.iOS = _fixIOSBug;\n    _fixIOSBug && !scrollFuncY() && scrollFuncY(1);\n    _fixIOSBug && gsap$1.ticker.add(_passThrough);\n    onStopDelayedCall = self._dc;\n    tween = gsap$1.to(self, {\n      ease: \"power4\",\n      paused: true,\n      scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n      scrollY: \"+=0.1\",\n      modifiers: {\n        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {\n          return tween.pause();\n        })\n      },\n      onUpdate: _updateAll,\n      onComplete: onStopDelayedCall.vars.onComplete\n    });\n    return self;\n  };\n\n  ScrollTrigger$1.sort = function (func) {\n    return _triggers.sort(func || function (a, b) {\n      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);\n    });\n  };\n\n  ScrollTrigger$1.observe = function (vars) {\n    return new Observer(vars);\n  };\n\n  ScrollTrigger$1.normalizeScroll = function (vars) {\n    if (typeof vars === \"undefined\") {\n      return _normalizer$1;\n    }\n\n    if (vars === true && _normalizer$1) {\n      return _normalizer$1.enable();\n    }\n\n    if (vars === false) {\n      return _normalizer$1 && _normalizer$1.kill();\n    }\n\n    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);\n    _normalizer$1 && _normalizer$1.target === normalizer.target && _normalizer$1.kill();\n    _isViewport$1(normalizer.target) && (_normalizer$1 = normalizer);\n    return normalizer;\n  };\n\n  ScrollTrigger$1.core = {\n    _getVelocityProp: _getVelocityProp,\n    _inputObserver: _inputObserver,\n    _scrollers: _scrollers,\n    _proxies: _proxies,\n    bridge: {\n      ss: function ss() {\n        _lastScrollTime || _dispatch(\"scrollStart\");\n        _lastScrollTime = _getTime$1();\n      },\n      ref: function ref() {\n        return _refreshing;\n      }\n    }\n  };\n  _getGSAP$1() && gsap$1.registerPlugin(ScrollTrigger$1);\n\n  exports.ScrollTrigger = ScrollTrigger$1;\n  exports.default = ScrollTrigger$1;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.12.2\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _reverting,\n      _context,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n  },\n      _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n  },\n      _revertConfig = {\n    suppressEvents: true\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n  },\n      _parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0),\n        end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function (obj, defaults) {\n      for (var p in defaults) {\n        p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n      }\n    };\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [tTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents && !_reverting) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _roundPrecise(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n    return function (raw) {\n      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        prevContext = _context,\n        context = animation._ctx,\n        params,\n        scope,\n        result;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _registerPluginQueue = [],\n      _createPlugin = function _createPlugin(config) {\n    if (_windowExists() && config) {\n      config = !config.name && config[\"default\"] || config;\n\n      var name = config.name,\n          isFunc = _isFunction(config),\n          Plugin = name && !isFunc && config.init ? function () {\n        this._props = [];\n      } : config,\n          instanceDefaults = {\n        init: _emptyFunc,\n        render: _renderPropTweens,\n        add: _addPropTween,\n        kill: _killPropTweensOf,\n        modifier: _addPluginModifier,\n        rawVars: 0\n      },\n          statics = {\n        targetTest: 0,\n        get: 0,\n        getSetter: _getSetter,\n        aliases: {},\n        register: 0\n      };\n\n      _wake();\n\n      if (config !== Plugin) {\n        if (_plugins[name]) {\n          return;\n        }\n\n        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n        _plugins[Plugin.prop = name] = Plugin;\n\n        if (config.targetTest) {\n          _harnessPlugins.push(Plugin);\n\n          _reservedProps[name] = 1;\n        }\n\n        name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n      }\n\n      _addGlobal(name, Plugin);\n\n      config.register && config.register(gsap, Plugin, PropTween);\n    } else {\n      config && _registerPluginQueue.push(config);\n    }\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n\n            _registerPluginQueue.forEach(_createPlugin);\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || Infinity;\n        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback, once, prioritize) {\n        var func = once ? function (t, d, f, v) {\n          callback(t, d, f, v);\n\n          _self.remove(func);\n        } : callback;\n\n        _self.remove(callback);\n\n        _listeners[prioritize ? \"unshift\" : \"push\"](func);\n\n        _wake();\n\n        return func;\n      },\n      remove: function remove(callback, i) {\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n\n      if (_context) {\n        this._ctx = _context;\n\n        _context.data.push(this);\n      }\n\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent && parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);\n\n      _setEnd(this);\n\n      return _recacheAncestors(this);\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.revert = function revert(config) {\n      if (config === void 0) {\n        config = _revertConfig;\n      }\n\n      var prevIsReverting = _reverting;\n      _reverting = config;\n\n      if (this._initted || this._startAt) {\n        this.timeline && this.timeline.revert(config);\n        this.totalTime(-0.01, config.suppressEvents);\n      }\n\n      this.data !== \"nested\" && config.kill !== false && this.kill();\n      _reverting = prevIsReverting;\n      return this;\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : tTime % dur ? dur : tTime;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate(soft) {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate(soft);\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this, soft);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _forceAllPropTweens,\n      _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl || keyframes && !vars.stagger) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n\n      if (prevStartAt) {\n        prevStartAt._zTime < 0 && prevStartAt.progress(1);\n        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);\n        prevStartAt._lazy = 0;\n      }\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: !prevStartAt && _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        tween._startAt._dp = 0;\n        tween._startAt._sat = tween;\n        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);\n\n        if (immediateRender) {\n          if (dur && time <= 0 && tTime <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        }\n      } else if (runBackwards && dur) {\n        if (!prevStartAt) {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          tween._startAt._dp = 0;\n          tween._startAt._sat = tween;\n          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n          tween._zTime = time;\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = tween._ptCache = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n    keyframes && time <= 0 && tl.render(_bigNum, true, true);\n  },\n      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],\n        pt,\n        rootPT,\n        lookup,\n        i;\n\n    if (!ptCache) {\n      ptCache = tween._ptCache[property] = [];\n      lookup = tween._ptLookup;\n      i = tween._targets.length;\n\n      while (i--) {\n        pt = lookup[i][property];\n\n        if (pt && pt.d && pt.d._pt) {\n          pt = pt.d._pt;\n\n          while (pt && pt.p !== property && pt.fp !== property) {\n            pt = pt._next;\n          }\n        }\n\n        if (!pt) {\n          _forceAllPropTweens = 1;\n          tween.vars[property] = \"+=0\";\n\n          _initTween(tween, time);\n\n          _forceAllPropTweens = 0;\n          return 1;\n        }\n\n        ptCache.push(pt);\n      }\n    }\n\n    i = ptCache.length;\n\n    while (i--) {\n      rootPT = ptCache[i];\n      pt = rootPT._pt || rootPT;\n      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n      pt.c = value - pt.s;\n      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));\n      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));\n    }\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\",\n        p,\n        a;\n\n    if (_isArray(obj)) {\n      a = allProps[prop] || (allProps[prop] = []);\n      obj.forEach(function (value, i) {\n        return a.push({\n          t: i / (obj.length - 1) * 100,\n          v: value,\n          e: ease\n        });\n      });\n    } else {\n      for (p in obj) {\n        a = allProps[p] || (allProps[p] = []);\n        p === \"ease\" || a.push({\n          t: parseFloat(prop),\n          v: obj[p],\n          e: ease\n        });\n      }\n    }\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\",\n      _staggerPropsToSkip = {};\n\n  _forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function (name) {\n    return _staggerPropsToSkip[name] = 1;\n  });\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {},\n          targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n          l = parsedTargets.length;\n          staggerFunc = stagger && distribute(stagger);\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = _copyExcluding(vars, _staggerPropsToSkip);\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n            tl._ease = _easeMap.none;\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        } else if (keyframes) {\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          }));\n\n          tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n          var time = 0,\n              a,\n              kf,\n              v;\n\n          if (_isArray(keyframes)) {\n            keyframes.forEach(function (frame) {\n              return tl.to(parsedTargets, frame, \">\");\n            });\n            tl.duration();\n          } else {\n            copy = {};\n\n            for (p in keyframes) {\n              p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n            }\n\n            for (p in copy) {\n              a = copy[p].sort(function (a, b) {\n                return a.t - b.t;\n              });\n              time = 0;\n\n              for (i = 0; i < a.length; i++) {\n                kf = a[i];\n                v = {\n                  ease: kf.e,\n                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                };\n                v[p] = kf.v;\n                tl.to(parsedTargets, v, time);\n                time += v.duration;\n              }\n            }\n\n            tl.duration() < duration && tl.to({}, {\n              duration: duration - tl.duration()\n            });\n          }\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay) || 0);\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          isNegative = totalTime < 0,\n          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && isNegative) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            this._tTime = tTime;\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (prevTime !== this._time) {\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate(soft) {\n      (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate(soft);\n      return _Animation2.prototype.invalidate.call(this, soft);\n    };\n\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n      _tickerActive || _ticker.wake();\n      this._ts || this.play();\n      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),\n          ratio;\n      this._initted || _initTween(this, time);\n      ratio = this._ease(time / this._dur);\n\n      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n        return this.resetTo(property, value, start, startIsRelative);\n      }\n\n      _alignPlayhead(this, 0);\n\n      this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n      return this.render(0);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n\n  var _media = [],\n      _listeners = {},\n      _emptyArray = [],\n      _lastMediaTime = 0,\n      _contextID = 0,\n      _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function (f) {\n      return f();\n    });\n  },\n      _onMediaChange = function _onMediaChange() {\n    var time = Date.now(),\n        matches = [];\n\n    if (time - _lastMediaTime > 2) {\n      _dispatch(\"matchMediaInit\");\n\n      _media.forEach(function (c) {\n        var queries = c.queries,\n            conditions = c.conditions,\n            match,\n            p,\n            anyMatch,\n            toggled;\n\n        for (p in queries) {\n          match = _win.matchMedia(queries[p]).matches;\n          match && (anyMatch = 1);\n\n          if (match !== conditions[p]) {\n            conditions[p] = match;\n            toggled = 1;\n          }\n        }\n\n        if (toggled) {\n          c.revert();\n          anyMatch && matches.push(c);\n        }\n      });\n\n      _dispatch(\"matchMediaRevert\");\n\n      matches.forEach(function (c) {\n        return c.onMatch(c);\n      });\n      _lastMediaTime = time;\n\n      _dispatch(\"matchMedia\");\n    }\n  };\n\n  var Context = function () {\n    function Context(func, scope) {\n      this.selector = scope && selector(scope);\n      this.data = [];\n      this._r = [];\n      this.isReverted = false;\n      this.id = _contextID++;\n      func && this.add(func);\n    }\n\n    var _proto5 = Context.prototype;\n\n    _proto5.add = function add(name, func, scope) {\n      if (_isFunction(name)) {\n        scope = func;\n        func = name;\n        name = _isFunction;\n      }\n\n      var self = this,\n          f = function f() {\n        var prev = _context,\n            prevSelector = self.selector,\n            result;\n        prev && prev !== self && prev.data.push(self);\n        scope && (self.selector = selector(scope));\n        _context = self;\n        result = func.apply(self, arguments);\n        _isFunction(result) && self._r.push(result);\n        _context = prev;\n        self.selector = prevSelector;\n        self.isReverted = false;\n        return result;\n      };\n\n      self.last = f;\n      return name === _isFunction ? f(self) : name ? self[name] = f : f;\n    };\n\n    _proto5.ignore = function ignore(func) {\n      var prev = _context;\n      _context = null;\n      func(this);\n      _context = prev;\n    };\n\n    _proto5.getTweens = function getTweens() {\n      var a = [];\n      this.data.forEach(function (e) {\n        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n      });\n      return a;\n    };\n\n    _proto5.clear = function clear() {\n      this._r.length = this.data.length = 0;\n    };\n\n    _proto5.kill = function kill(revert, matchMedia) {\n      var _this4 = this;\n\n      if (revert) {\n        var tweens = this.getTweens();\n        this.data.forEach(function (t) {\n          if (t.data === \"isFlip\") {\n            t.revert();\n            t.getChildren(true, true, false).forEach(function (tween) {\n              return tweens.splice(tweens.indexOf(tween), 1);\n            });\n          }\n        });\n        tweens.map(function (t) {\n          return {\n            g: t.globalTime(0),\n            t: t\n          };\n        }).sort(function (a, b) {\n          return b.g - a.g || -Infinity;\n        }).forEach(function (o) {\n          return o.t.revert(revert);\n        });\n        this.data.forEach(function (e) {\n          return !(e instanceof Tween) && e.revert && e.revert(revert);\n        });\n\n        this._r.forEach(function (f) {\n          return f(revert, _this4);\n        });\n\n        this.isReverted = true;\n      } else {\n        this.data.forEach(function (e) {\n          return e.kill && e.kill();\n        });\n      }\n\n      this.clear();\n\n      if (matchMedia) {\n        var i = _media.length;\n\n        while (i--) {\n          _media[i].id === this.id && _media.splice(i, 1);\n        }\n      }\n    };\n\n    _proto5.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    return Context;\n  }();\n\n  var MatchMedia = function () {\n    function MatchMedia(scope) {\n      this.contexts = [];\n      this.scope = scope;\n    }\n\n    var _proto6 = MatchMedia.prototype;\n\n    _proto6.add = function add(conditions, func, scope) {\n      _isObject(conditions) || (conditions = {\n        matches: conditions\n      });\n      var context = new Context(0, scope || this.scope),\n          cond = context.conditions = {},\n          mq,\n          p,\n          active;\n      _context && !context.selector && (context.selector = _context.selector);\n      this.contexts.push(context);\n      func = context.add(\"onMatch\", func);\n      context.queries = conditions;\n\n      for (p in conditions) {\n        if (p === \"all\") {\n          active = 1;\n        } else {\n          mq = _win.matchMedia(conditions[p]);\n\n          if (mq) {\n            _media.indexOf(context) < 0 && _media.push(context);\n            (cond[p] = mq.matches) && (active = 1);\n            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n          }\n        }\n      }\n\n      active && func(context);\n      return this;\n    };\n\n    _proto6.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    _proto6.kill = function kill(revert) {\n      this.contexts.forEach(function (c) {\n        return c.kill(revert, true);\n      });\n    };\n\n    return MatchMedia;\n  }();\n\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    quickTo: function quickTo(target, property, vars) {\n      var _merge2;\n\n      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})),\n          func = function func(value, start, startIsRelative) {\n        return tween.resetTo(property, value, start, startIsRelative);\n      };\n\n      func.tween = tween;\n      return func;\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    context: function context(func, scope) {\n      return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n      return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n      return _media.forEach(function (c) {\n        var cond = c.conditions,\n            found,\n            p;\n\n        for (p in cond) {\n          if (cond[p]) {\n            cond[p] = false;\n            found = 1;\n          }\n        }\n\n        found && c.revert();\n      }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n      var a = _listeners[type] || (_listeners[type] = []);\n      ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n      var a = _listeners[type],\n          i = a && a.indexOf(callback);\n      i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      reverting: function reverting() {\n        return _reverting;\n      },\n      context: function context(toAdd) {\n        if (toAdd && _context) {\n          _context.data.push(toAdd);\n\n          toAdd._ctx = _context;\n        }\n\n        return _context;\n      },\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt, v;\n      this.tween = tween;\n\n      for (p in vars) {\n        v = target.getAttribute(p) || \"\";\n        pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt.op = p;\n        pt.b = v;\n\n        this._props.push(p);\n      }\n    },\n    render: function render(ratio, data) {\n      var pt = data._pt;\n\n      while (pt) {\n        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.12.2\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _reverting$1,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n\n    var target = this.target,\n        style = target.style;\n\n    if (property in _transformProps && style) {\n      this.tfm = this.tfm || {};\n\n      if (property !== \"transform\") {\n        property = _propertyAliases[property] || property;\n        ~property.indexOf(\",\") ? property.split(\",\").forEach(function (a) {\n          return _this.tfm[a] = _get(target, a);\n        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);\n      } else {\n        return _propertyAliases.transform.split(\",\").forEach(function (p) {\n          return _saveStyle.call(_this, p, isNotCSS);\n        });\n      }\n\n      if (this.props.indexOf(_transformProp) >= 0) {\n        return;\n      }\n\n      if (target._gsap.svg) {\n        this.svgo = target.getAttribute(\"data-svg-origin\");\n        this.props.push(_transformOriginProp, isNotCSS, \"\");\n      }\n\n      property = _transformProp;\n    }\n\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n  },\n      _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n      style.removeProperty(\"translate\");\n      style.removeProperty(\"scale\");\n      style.removeProperty(\"rotate\");\n    }\n  },\n      _revertStyle = function _revertStyle() {\n    var props = this.props,\n        target = this.target,\n        style = target.style,\n        cache = target._gsap,\n        i,\n        p;\n\n    for (i = 0; i < props.length; i += 3) {\n      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n\n    if (this.tfm) {\n      for (p in this.tfm) {\n        cache[p] = this.tfm[p];\n      }\n\n      if (cache.svg) {\n        cache.renderTransform();\n        target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n      }\n\n      i = _reverting$1();\n\n      if ((!i || !i.isStart) && !style[_transformProp]) {\n        _removeIndependentTransforms(style);\n\n        cache.uncache = 1;\n      }\n    }\n  },\n      _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n      target: target,\n      props: [],\n      revert: _revertStyle,\n      save: _saveStyle\n    };\n    target._gsap || gsap.core.getCache(target);\n    properties && properties.split(\",\").forEach(function (p) {\n      return saver.save(p);\n    });\n    return saver;\n  },\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _reverting$1 = gsap.core.reverting;\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n\n          _removeIndependentTransforms(style);\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextElementSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        cs = getComputedStyle(target),\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n\n    if (cs.translate) {\n      if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n        style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n      }\n\n      style.scale = style.rotate = style.translate = \"none\";\n    }\n\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      if (cache.uncache) {\n        t2 = target.getBBox();\n        origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n        t1 = \"\";\n      } else {\n        t1 = !uncache && target.getAttribute(\"data-svg-origin\");\n      }\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority,\n          inlineProps;\n      _pluginInitted || _initCore();\n      this.styles = this.styles || _getStyleSaver(target);\n      inlineProps = this.styles.props;\n      this.tween = tween;\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n          inlineProps.push(p, 0, style[p]);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n            getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\");\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              inlineProps.push(\"visibility\", 0, style.visibility);\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            this.styles.save(p);\n\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n              this._pt.u = 0;\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit && endUnit !== \"%\") {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n            } else if (p !== \"parseTransform\") {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n          }\n\n          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    render: function render(ratio, data) {\n      if (data.tween._time || !_reverting$1()) {\n        var pt = data._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n      } else {\n        data.styles.revert();\n      }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n  gsap.core.getStyleSaver = _getStyleSaver;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","import { animations } from './animations/all';\n\nexport type AnimationType = (el: HTMLElement, delay?: number)=> gsap.core.Tween | gsap.core.Timeline;\n\n\nexport function getAnimation(type: string, el: HTMLElement, delay: number): gsap.core.Tween | gsap.core.Timeline | null {\n    if (!animations[type]) { console.warn(`animation type \"${type}\" does not exist`); return null; }\n    return animations[type]?.(el, delay);\n}\n","export interface IBreakpoint {\n    desktop: boolean;\n    tablet: boolean;\n    phone: boolean;\n    value: string;\n}\n\n\nexport function getBreakpoint(): IBreakpoint {\n    const before = window.getComputedStyle(document.querySelector('body'), ':before');\n    const breakpoint = before.getPropertyValue('content').replace(/[\\\"\\']/g, '');\n\n    return {\n        desktop: breakpoint === 'desktop',\n        phone: breakpoint === 'phone',\n        tablet: breakpoint === 'tablet',\n        value: breakpoint,\n    };\n}\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n\ndeclare let safari;\n\nexport interface IBrowser {\n    android?: boolean;\n    chrome?: boolean;\n    edge?: boolean;\n    firefox?: boolean;\n    ie?: boolean;\n    ios?: boolean;\n    mac?: boolean;\n    mobile?: boolean;\n    phone?: boolean;\n    opera?: boolean;\n    safari?: boolean;\n    touch?: boolean;\n}\n\n\nexport function getBrowser(): IBrowser {\n    const ua = window.navigator.userAgent;\n    const browser: IBrowser = {\n        mobile: !!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),\n        phone: !!(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))),\n        android: /Android/i.test(ua),\n        ios: ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) || (navigator.userAgent.includes('Mac') && 'ontouchend' in document),\n        mac: navigator.platform.toUpperCase().indexOf('MAC') >= 0,\n        ie: ua.indexOf('MSIE ') > 0 || !!ua.match(/Trident.*rv\\:11\\./),\n        edge: /Edge/.test(navigator.userAgent),\n        firefox: ua.toLowerCase().indexOf('firefox') > -1,\n        safari: /iP(ad|hone|od).+Version\\/[\\d\\.]+.*Safari/i.test(navigator.userAgent) || Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0 || (((p): boolean => p.toString() === '[object SafariRemoteNotification]')(!window.safari || safari.pushNotification)),\n        chrome: (ua.toLowerCase().indexOf('chrome') > -1) && (navigator.vendor.toLowerCase().indexOf('google') > -1),\n        touch: ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || ((navigator as any).msMaxTouchPoints > 0),\n    };\n\n    const htmlClassList = document.querySelector('html')!.classList;\n    htmlClassList.toggle('mac', browser.ios || browser.mac);\n    htmlClassList.toggle('mobile', browser.mobile);\n    htmlClassList.toggle('phone', browser.phone && browser.touch);\n    htmlClassList.toggle('ios', browser.ios);\n    htmlClassList.toggle('firefox', browser.firefox);\n    htmlClassList.toggle('safari', browser.safari);\n    htmlClassList.toggle('ie', browser.ie);\n    htmlClassList.toggle('touch', browser.touch);\n    htmlClassList.toggle('no-touch', !browser.touch);\n    htmlClassList.remove('no-js');\n\n    return browser;\n}\n\n\ndeclare global {\n    interface Window {\n        opr: any;\n        opera: any;\n        safari: any;\n        HTMLElement: any;\n    }\n}\n","import { Page } from './pages/Page';\nimport { LightboxNav } from './components/Lightbox/LightboxNav';\nimport { LightboxTranscript } from './components/Lightbox/LightboxTranscript';\nimport { LightboxSlider } from './components/Lightbox/LightboxSlider';\nimport { Load } from './components/Load';\nimport { Modal } from './components/Modal';\nimport { More } from './components/More';\nimport { Accordeon } from './components/Accordeon';\nimport { AccordeonList } from './components/AccordeonList';\nimport { Player } from './components/Player/Player';\nimport { Video } from './components/Player/Video';\nimport { FilterLetters } from './components/FilterLetters';\n\nexport const components = {\n    Accordeon,\n    AccordeonList,\n    FilterLetters,\n    Load,\n    Modal,\n    More,\n    Player,\n    Video,\n    LightboxNav,\n    LightboxTranscript,\n    LightboxSlider,\n};\n\nexport const pages = { Page };\n","export abstract class Handler {\n    public events: Object;\n\n    constructor() {\n        this.events = {};\n    }\n\n\n    /**\n     * Attach an event handler function.\n     * @param  {string}   eventName please use static names\n     * @param  {Function} handler   callback function\n     * @return {Handler}            returns current object\n     */\n    public on(eventName: string, handler: Function): Handler {\n        if (!this.events[eventName]) {\n            this.events[eventName] = [];\n        }\n\n        this.events[eventName].push(handler);\n\n        return this;\n    }\n\n\n    /**\n     * Detach an event handler function.\n     * @param  {string}   eventName please use static names\n     * @param  {Function} handler   callback function\n     * @return {Handler}            returns current object\n     */\n    public off(eventName?: string, handler?: Function): Handler {\n        if (typeof eventName === 'undefined') {\n            this.events = {};\n\n            return this;\n        }\n\n        if (typeof handler === 'undefined' && this.events[eventName]) {\n            this.events[eventName] = [];\n\n            return this;\n        }\n\n        if (!this.events[eventName]) {\n            return this;\n        }\n\n        const index = this.events[eventName].indexOf(handler);\n\n        if (index > -1) {\n            this.events[eventName].splice(index, 1);\n        }\n\n        return this;\n    }\n\n\n    /**\n     * Call an event handler function.\n     * @param {string} eventName\n     * @param {[type]} ...extraParameters pass any parameters to callback function\n     */\n    public trigger(eventName: string, ...args): void {\n        if (!this.events[eventName]) { return; }\n        this.events[eventName].forEach(event => event(...args));\n    }\n\n\n    public destroy(): void {\n        this.events = {};\n    }\n}\n\n","import { gsap } from 'gsap/dist/gsap';\nimport { AudioPlayer } from './components/AudioPlayer';\n\nexport class Menu {\n    private isOpen = false;\n\n    private elToggle: HTMLElement;\n    private closeBtn: HTMLButtonElement;\n    private wrapEl: HTMLElement;\n    private isAnimating = false;\n    private items: NodeListOf<HTMLElement>;\n    private lines: NodeListOf<HTMLElement>;\n    private labels: NodeListOf<HTMLElement>;\n    private links: NodeListOf<HTMLElement>;\n    private searchLabel: HTMLElement;\n    private searchIcon: HTMLElement;\n\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement) {\n        this.elToggle = document.querySelector('.js-toggle-menu');\n        this.closeBtn = this.view.querySelector('.js-menu-close');\n        this.wrapEl = document.getElementById('wrapper');\n        this.items = this.view.querySelectorAll('.js-menu-item');\n        this.labels = this.view.querySelectorAll('.js-menu-label');\n        this.lines = this.view.querySelectorAll('.js-menu-line');\n        this.links = this.view.querySelectorAll('.js-menu-link');\n        this.searchLabel = this.view.querySelector('.js-menu-search-label');\n        this.searchIcon = this.view.querySelector('.js-menu-search-svg');\n\n        this.bind();\n    }\n\n\n\n    public onState(): void {\n        this.isOpen && this.close();\n    }\n\n\n\n    private bind(): void {\n        this.elToggle && this.elToggle.addEventListener('click', this.onToggle);\n        this.closeBtn && this.closeBtn.addEventListener('click', this.close);\n\n        // on close menu animation's end (related to whole #content toggle animation) set display: none for menu\n        this.wrapEl.addEventListener('transitionend', () => {\n            this.onAnimationEnd();\n        });\n    }\n\n\n\n    private onAnimationEnd = (): void => {\n        this.isAnimating = false;\n        if (!this.isOpen) {\n            this.view.style.display = 'none';\n        }\n    };\n\n\n\n    private onToggle = (): void => {\n        this.isOpen ? this.close() : this.open();\n    };\n\n\n\n    private open = (): void => {\n        if (this.isAnimating) return;\n\n        this.isAnimating = true;\n        this.isOpen = true;\n        this.view.style.display = 'flex';\n        document.body.classList.add('has-menu-open');\n\n        gsap.timeline()\n            .addLabel('init')\n            .fromTo(this.labels, { yPercent: 120 }, {\n                yPercent: 0,\n                duration: 0.8,\n                stagger: 0.25,\n                ease: 'power2.out',\n            }, 'init')\n            .fromTo(this.lines, { scaleX: 0 }, {\n                scaleX: 1,\n                duration: 1.2,\n                stagger: 0.25,\n                ease: 'power2.out',\n            }, 'init')\n            .fromTo(this.links, { xPercent: 100 }, {\n                xPercent: 0,\n                duration: 0.6,\n                stagger: 0.1,\n                ease: 'power2.out',\n            }, '-=.8')\n            .fromTo(this.searchIcon, { scale: 0 }, {\n                scale: 1,\n                duration: 0.4,\n                ease: 'power2.out',\n            }, '-=.4')\n            .fromTo(this.searchLabel, { xPercent: 100 }, {\n                xPercent: 0,\n                duration: 0.6,\n                clearProps: 'all',\n                ease: 'power2.out',\n            }, '-=.25');\n\n        AudioPlayer.closeAudioPlayer();\n    };\n\n\n\n    private close = (): void => {\n        if (this.isAnimating) return;\n\n        this.isAnimating = true;\n        this.isOpen = false;\n        document.body.classList.remove('has-menu-open');\n    };\n}\n","/* eslint-disable max-classes-per-file */\nimport { normalizeUrl } from './Utils';\nimport Scroll from './Scroll';\nimport { Handler } from './Handler';\n\nexport class PushStatesEvents {\n    public static CHANGE = 'state';\n    public static PROGRESS = 'progress';\n}\n\n\nexport class PushStates extends Handler {\n\n\n\n    // eslint-disable-next-line no-use-before-define\n    public static instance: PushStates;\n    public static readonly TIME_LIMIT = 10000;\n    private static initialHistoryLength: number;\n    private static noChange = false;\n\n\n\n    /** change document title */\n    public static setTitle(title?: string): void {\n        const content: HTMLElement = document.getElementById('content');\n        const dataTitle: HTMLElement = content.querySelector('[data-title]');\n\n        document.title = title || dataTitle.dataset.title;\n    }\n\n\n\n    /** change loaction pathname and trigger History */\n    public static goTo(location: string, replace?: boolean): boolean {\n        const pathname = location.replace(window.location.protocol + window.location.host, '');\n        const isDifferent = pathname !== window.location.pathname;\n\n        if (replace) {\n            window.history.replaceState({ randomData: Math.random() }, document.title, pathname);\n        } else {\n            window.history.pushState({ randomData: Math.random() }, document.title, pathname);\n        }\n\n        PushStates.instance.onState();\n\n        return isDifferent;\n    }\n\n\n\n    /** only change loaction pathname without triggering History */\n    public static changePath(location: string, replace?: boolean, title?: string): void {\n        PushStates.noChange = true;\n        const changed = PushStates.goTo(location, replace || true);\n        PushStates.noChange = false;\n\n        if (changed) {\n            PushStates.setTitle(title || document.title);\n        }\n    }\n\n\n\n    /** bind links to be used with PushStates / History */\n    public static bind(target?: Element, elementItself?: boolean): void {\n        if (!elementItself) {\n            PushStates.instance.bindLinks(target);\n        } else {\n            PushStates.instance.bindLink(target as Element);\n        }\n    }\n\n\n\n    /**\n     * go back in browser history\n     * @param {string} optional fallback url (when browser deoesn't have any items in history)\n     */\n    public static back(url?: string): void {\n        if (window.history.length - PushStates.initialHistoryLength > 0) {\n            window.history.back();\n        } else if (url) {\n            window.history.replaceState({ randomData: Math.random() }, document.title, url);\n            PushStates.instance.onState();\n        } else {\n            window.history.replaceState({ randomData: Math.random() }, document.title, '/');\n            PushStates.instance.onState();\n        }\n    }\n\n\n\n    public static reload(): void {\n        PushStates.instance.trigger(PushStatesEvents.CHANGE);\n    }\n\n\n\n    private loadedData: string;\n    private request: XMLHttpRequest;\n    private timeout: ReturnType<typeof setTimeout>;\n    private currentUrl: string;\n\n\n\n    constructor() {\n        super();\n\n        this.bindLinks();\n\n        window.addEventListener('popstate', this.onState, { passive: true });\n\n        /**\n         * Set scrollRestoration to 'manual' so the scroll doesn't jump\n         * when back button is pressed.\n         */\n        window.history.scrollRestoration = 'manual';\n        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);\n\n        PushStates.instance = this;\n        PushStates.initialHistoryLength = window.history.length;\n        this.currentUrl = normalizeUrl(window.location.pathname + window.location.search);\n\n        this.setActiveLinks();\n    }\n\n\n    /**\n     * load new content via ajax based on current location:\n     * @return {Promise<boolean>} promise resolved when XMLHttpRequest is finished\n     */\n    public load(): Promise<void> {\n        // cancel old request:\n        if (this.request) {\n            this.request.abort();\n        }\n\n        // define url\n        const { pathname } = window.location;\n        const search: string = window.location.search || '';\n        const url = pathname + search;\n\n        // define timeout\n        window.clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            if (this.request) {\n                window.location.reload();\n            }\n        }, PushStates.TIME_LIMIT);\n\n        // return promise\n        // and do the request:\n        return new Promise<void>((resolve, reject) => {\n            // do the usual xhr stuff:\n            this.request = new XMLHttpRequest();\n            this.request.open('GET', url);\n            this.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n            // onload handler:\n            this.request.onload = () => {\n                if (this.request.status === 200) {\n                    this.loadedData = this.request.responseText;\n                    this.currentUrl = normalizeUrl(url);\n\n                    this.trigger(PushStatesEvents.PROGRESS, 1);\n                    resolve();\n                } else {\n                    reject(Error(this.request.statusText));\n\n                    if (this.request.statusText !== 'abort') {\n                        window.location.reload();\n                    }\n                }\n\n                this.request = null;\n                window.clearTimeout(this.timeout);\n            };\n\n            // catching errors:\n            this.request.onerror = () => {\n                reject(Error('Network Error'));\n                window.clearTimeout(this.timeout);\n                this.request = null;\n            };\n\n            // catch progress\n            this.request.onprogress = e => {\n                if (e.lengthComputable) {\n                    this.trigger(PushStatesEvents.PROGRESS, e.loaded / e.total);\n                }\n            };\n\n            // send request:\n            this.request.send();\n        });\n    }\n\n\n    /**\n     * tells if rendered html match current pathname\n     */\n    public isRendered(pathname?: string): boolean {\n        return this.currentUrl === normalizeUrl(pathname || window.location.pathname + window.location.search);\n    }\n\n\n    /** function called on successful data load */\n    public render(): void {\n        const data: string = this.loadedData.trim();\n        const containers = document.querySelectorAll('.js-replace[id], #content');\n        let renderedCount = 0;\n\n\n        // render each of containers\n        // if only one container, force `plain`\n        if (containers.length > 0) {\n            containers.forEach((container, index): void => {\n                const force = index === 0 && containers.length === 1;\n                renderedCount += this.renderElement(container as HTMLElement, data, force) ? 1 : 0;\n            });\n        }\n\n\n        // re-try rendering if none of containers were rendered:\n        if (renderedCount === 0 && containers.length > 0) {\n            this.renderElement(document.getElementById('content'), data, true);\n        }\n\n        this.bindLinks();\n        this.setActiveLinks();\n\n        // dispatch global event for serdelia CMS:\n        window.document.dispatchEvent(new Event('ajax_loaded'));\n\n        // fix browser scroll history cache\n        window.history.scrollRestoration = 'manual';\n        setTimeout(() => { window.history.scrollRestoration = 'manual'; }, 1000);\n    }\n\n\n\n    private renderElement(el: HTMLElement, data: string, forcePlain?: boolean): boolean {\n\n        let code: string = null;\n\n        if (!el.id) { console.warn('Rendered element must have an `id` attribute!'); return false; }\n\n        const container = `#${el.id}`;\n\n        // if ajax returns only <article> element:\n        if (!!forcePlain && data.indexOf('<article') === 0 && el.id === 'content') {\n            code = data;\n        } else { // if ajax returns whole html:\n            const parser = new DOMParser();\n            const htmlDocument = parser.parseFromString(data, 'text/html');\n            const foundElement = htmlDocument.documentElement.querySelector(container);\n            code = foundElement ? foundElement.innerHTML : null;\n        }\n\n        if (!code) {\n            console.info(`Couldn't rerender #${el.id} element`);\n            return false;\n        }\n\n        const containerEl: HTMLElement = document.getElementById(el.id);\n\n        containerEl.style.display = 'none';\n        while (containerEl.firstChild) containerEl.removeChild(containerEl.firstChild);\n        containerEl.innerHTML = code || data;\n        containerEl.style.display = 'block';\n\n        return true;\n    }\n\n\n\n    /** bind links */\n    private bindLink(target: Element): void {\n        target.removeEventListener('click', this.onClick);\n        target.addEventListener('click', this.onClick);\n    }\n\n\n\n    /** bind links */\n    private bindLinks(target?: Element): void {\n        const t = target ?? document.body;\n\n        // eslint-disable-next-line max-len\n        const links = t.querySelectorAll('a:not([data-history=\"false\"]):not([data-component=\"More\"]):not([data-api]):not([download]):not([data-modal]):not([href^=\"#\"]):not([href$=\".jpg\"]):not([target=\"_blank\"]):not([href^=\"mailto:\"]):not([href^=\"tel:\"]):not([data-poczta]):not([data-login]):not([data-lang]):not([data-more])');\n\n        links.forEach(el => {\n            el.removeEventListener('click', this.onClick);\n            el.addEventListener('click', this.onClick);\n        });\n    }\n\n\n\n    /** links click handler */\n    private onClick = (e: Event): void => {\n        e.preventDefault();\n\n        const self: HTMLElement = e.currentTarget as HTMLElement;\n        const state: string = self.getAttribute('href').replace(`http://${window.location.host}`, '');\n        const type: string = self.dataset.history;\n\n        if (type === 'back') {\n            PushStates.back(state);\n        } else if (type === 'replace') {\n            window.history.replaceState({ randomData: Math.random() }, document.title, state);\n            this.onState();\n        } else {\n            Scroll.resetScrollCache(state);\n            window.history.pushState({ randomData: Math.random() }, document.title, state);\n            this.onState();\n        }\n    };\n\n\n\n    /** `statechange` event handler */\n    private onState = (): void => {\n        this.setActiveLinks();\n\n        if (!PushStates.noChange) {\n            this.trigger(PushStatesEvents.CHANGE);\n        }\n    };\n\n\n\n    /** mark links as active */\n    private setActiveLinks(): void {\n        [...document.querySelectorAll('a[href]')].map(el => el.classList.remove('is-active'));\n\n        [...document.querySelectorAll(`a[href^=\"${window.location.pathname}\"]`)]\n            .forEach(el => el.classList.add('is-active'));\n\n        const path = `/${window.location.pathname.split('/')[1]}`;\n        [...document.querySelectorAll(`.nav a[href^=\"${path}\"]`)]\n            .forEach(el => {\n                (el as HTMLAnchorElement)?.href !== '/' && el.classList.add('is-active');\n            });\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport { gsap } from 'gsap/dist/gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport { ScrollToPlugin } from 'gsap/dist/ScrollToPlugin';\nimport { Component } from './components/Component';\nimport { browser } from './Site';\nimport { getAnimation } from './Animate';\nimport { animations, scrolls } from './animations/all';\n\n\nexport type ScrollToProps = {\n    el?: HTMLElement;\n    isSmooth?: boolean;\n    offsetY?: number;\n    duration?: number;\n    ease?: string;\n    y?: number;\n    onComplete?: ()=> void;\n}\n\ninterface IScrollData {\n    el: HTMLElement;\n    type: string;\n    delay?: number;\n    component?: Component;\n}\n\ninterface IParallaxData {\n    el: HTMLElement;\n    parallax: number,\n    delay?: number;\n    component?: Component;\n}\n\ngsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\n\n\n\nexport default class Scroll {\n\n    public static matchMedia: any = null;\n\n    private static enabled: boolean = true;\n    private static scrollCache: { [key: string]: number } = {};\n\n\n    public static resize(): void {\n        ScrollTrigger.refresh();\n    }\n\n\n    public static enable(): void {\n        Scroll.enabled = true;\n    }\n\n\n    public static disable(): void {\n        Scroll.enabled = false;\n    }\n\n\n    public static start(): void {\n        window.addEventListener('scroll', Scroll.onScroll);\n    }\n\n\n    public static stop(): void {\n        window.removeEventListener('scroll', Scroll.onScroll);\n    }\n\n\n\n    public static resetScrollCache(pathname): void {\n        Scroll.scrollCache[pathname] = 0;\n    }\n\n\n    private static onScroll = () => {\n        if (!Scroll.enabled) { return; }\n        Scroll.scrollCache[window.location.pathname] = window.scrollY;\n    };\n\n\n\n    public static scrollTo = async({\n        el,\n        y,\n        duration = 1,\n        ease = 'none',\n        offsetY = 0,\n    }: ScrollToProps): Promise<void> => new Promise(resolve => {\n        gsap.to(window, {\n            scrollTo: {\n                y: y ?? el,\n                x: 0,\n                offsetY,\n            },\n            duration,\n            ease,\n            onComplete: () => resolve(),\n        });\n    });\n\n\n\n    public static scrollToTop = async(fast?: boolean): Promise<void> => {\n        await Scroll.scrollTo({\n            y: 0,\n            el: document.querySelector('[data-page]'),\n            duration: fast ? 0 : 2,\n        });\n    };\n\n\n\n    public static scrollToCached(): void {\n        const y = Scroll.scrollCache[window.location.pathname] || 0;\n        Scroll.scrollTo({ y, duration: 0 });\n    }\n\n\n\n    public async load(): Promise<void> {\n        (ScrollTrigger as any).clearScrollMemory('manual');\n        this.bindHashClick();\n        this.setup();\n        Scroll.resize();\n    }\n\n\n\n    public setup(): void {\n\n        console.log('scroll setup', gsap.version);\n\n        // if (browser.safari) { return; }\n\n        Scroll.matchMedia = (gsap as any).matchMedia();\n        // Scroll.matchMedia.add('(min-width: 1024px)', () => {}\n\n\n        // general animations:\n        [...document.querySelectorAll('[data-animation]')]\n            .map((el: HTMLElement) => <IScrollData>{\n                el,\n                type: el.dataset.animation,\n                delay: parseInt(el.dataset.delay, 10) || 0,\n            }).forEach((item: IScrollData) => {\n                if (animations[item.type]) {\n                    ScrollTrigger.create({\n                        trigger: item.el,\n                        toggleActions: 'play pause resume reset',\n                        animation: getAnimation(item.type, item.el, item.delay || 0),\n                    });\n                } else {\n                    console.warn(`animation type \"${item.type}\" does not exist`, item.el);\n                }\n            });\n\n\n        // custom animations:\n        [...document.querySelectorAll('[data-scroll]')]\n            .map((el: HTMLElement) => <IScrollData>{\n                el,\n                type: el.dataset.scroll,\n                delay: parseInt(el.dataset.delay, 10) || 0,\n            }).forEach((item: IScrollData) => {\n                if (scrolls[item.type]) {\n                    scrolls[item.type](item.el, item.delay);\n                } else {\n                    console.warn(`scroll type \"${item.type}\" does not exist`, item.el);\n                }\n            });\n\n\n        // parallaxes:\n        [...document.querySelectorAll('[data-parallax]')]\n            .map((el: HTMLElement) => <IParallaxData> {\n                el,\n                parallax: parseInt(el.dataset.parallax, 10),\n                delay: el.dataset.delay || 0,\n            }).forEach((item: IParallaxData) => {\n                gsap.fromTo(item.el, { y: -item.parallax * (window.innerWidth / 1280) }, {\n                    y: () => item.parallax * (window.innerWidth / 1280),\n                    ease: 'none',\n                    scrollTrigger: {\n                        trigger: item.el,\n                        scrub: true,\n                    },\n                });\n            });\n    }\n\n\n\n    public revertAnimations(): void {\n        Scroll.matchMedia?.revert();\n    }\n\n\n\n    private bindHashClick(): void {\n        document.querySelectorAll('a[href^=\"#\"]:not(a[href=\"#\"])').forEach((el: HTMLAnchorElement) => {\n            el.addEventListener('click', this.onHashClickHandler);\n        });\n    }\n\n\n\n    private onHashClickHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const { hash } = (e.currentTarget as HTMLAnchorElement);\n        const target = document.querySelector(hash) as HTMLElement;\n\n        target\n            ? Scroll.scrollTo({ el: target })\n            : console.warn('There is no %s element', hash);\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from './Site';\nimport { API, IApiData } from './widgets/API';\n// import Widgets from 'widgets/All';\nimport { PushStates } from './PushStates';\nimport { Templates, TemplateNames } from './templates/Templates';\nimport * as Utils from './Utils';\n\nexport interface ISearchSettings {\n    liveMinLen?: number;\n    timeout?: number;\n}\n\n\nexport class Search {\n\n    private settings: ISearchSettings;\n    private toggleButtons: NodeListOf<HTMLElement>;\n    private searchBg: HTMLElement;\n    private searchContent: HTMLElement;\n    private btnClose: HTMLElement;\n    private live: HTMLElement;\n    private input: HTMLInputElement;\n    private form: HTMLFormElement;\n    private liveList: HTMLElement;\n    private liveBottom: HTMLElement;\n    private liveLi: NodeListOf<HTMLElement>;\n    private isLiveShown: boolean;\n    private timer;\n    private liveTemplate;\n    private isOpen: boolean;\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement) {\n        this.init();\n    }\n\n\n    public onState(): void {\n        this.onFormReset();\n        clearTimeout(this.timer);\n    }\n\n\n    private init(): void {\n        this.settings = {\n            liveMinLen: 3,\n            timeout: 250,\n        };\n\n        this.searchBg = this.view.querySelector('.js-search-bg');\n        this.searchContent = this.view.querySelector('.js-search-content');\n        this.btnClose = document.querySelector('.js-search-close');\n        this.input = this.view.querySelector('#search-inp');\n        this.form = this.view.querySelector('.js-form');\n        this.live = this.view.querySelector('.js-livesearch');\n        this.liveTemplate = Templates.get(TemplateNames.LIVESEARCH);\n\n        this.input.addEventListener('keyup', this.onType);\n\n        this.bind();\n    }\n\n\n\n    private bind(): void {\n        this.form.addEventListener('reset', this.onFormReset);\n        this.form.addEventListener('submit', this.onFormSubmit);\n    }\n\n\n\n    private onFormReset = (): void => {\n        this.input.value = '';\n        this.animationHide();\n        this.view.classList.remove('has-value');\n    };\n\n\n\n    private onFormSubmit = (e): void => {\n        e.preventDefault();\n        const pathname = this.form.getAttribute('action') || window.location.pathname;\n        const params = Utils.getQueryString(this.form);\n\n        PushStates.goTo(`${pathname}?${params}`);\n    };\n\n\n\n    private onType = (e): void => {\n        e.preventDefault();\n\n        const { value } = this.input;\n\n        this.view.classList.toggle('has-value', value.length > 0);\n\n        if (value.length < this.settings.liveMinLen) {\n            this.animationHide();\n            return;\n        }\n\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n\n            const formData: IApiData = { url: this.form.getAttribute('data-api-url') };\n\n            API.callIt(formData, this.form, (data, el, response) => {\n                this.liveResponse(data, el, response);\n            });\n\n\n        }, this.settings.timeout);\n    };\n\n\n\n    private liveResponse(data, el, response): void {\n        if (response.results) {\n            this.live.innerHTML = this.liveTemplate.render(response);\n            // this.trigger(ComponentEvents.CHANGE, this.live);\n            this.showLiveResults();\n            PushStates.bind(this.live);\n            // Widgets.bind(this.live);\n        } else {\n            this.quickHide();\n        }\n    }\n\n\n\n    private showLiveResults(): void {\n        this.view.classList.add('is-livesearch-shown');\n        this.liveList = this.view.querySelector('.js-livesearch-list');\n        this.liveLi = this.view.querySelectorAll('.js-livesearch-item');\n\n        // set max-height of livesearch wrap - prevent growing outside viewport\n        const height = Math.min(this.liveList.clientHeight, window.innerHeight * 0.75);\n\n        gsap.timeline()\n            .to(this.liveList.parentElement, {\n                duration: !this.isLiveShown ? 0.8 : 0,\n                height,\n                ease: easing,\n            })\n            .fromTo(\n                this.liveLi,\n                { y: window.innerHeight },\n                {\n                    y: 0,\n                    duration: 0.9,\n                    stagger: 0.1,\n                    ease: easing,\n                },\n            );\n\n        this.isLiveShown = true;\n    }\n\n\n\n    private quickHide(): void {\n        if (!this.liveList) return;\n        gsap.to(this.liveList.parentElement, {\n            height: 0,\n            duration: 0.01,\n            delay: 0.8,\n            onComplete: () => {\n                this.input.value = '';\n                this.live.innerHTML = '';\n            },\n        });\n    }\n\n\n\n    private animationHide(): void {\n        if (!this.isLiveShown) return;\n        [...this.liveLi].reverse().forEach((item, index) => {\n            gsap.to(item, {\n                y: window.innerHeight,\n                rotate: index % 2 === 0 ? 15 : -15,\n                duration: 0.8,\n                delay: index * 0.1,\n                ease: easing,\n                onComplete: () => {\n                    item.remove();\n                    // after all tweens\n                    if (index === this.liveLi.length) gsap.set(this.liveList.parentElement, { height: 0 });\n                },\n            });\n        });\n\n\n        this.isLiveShown = false;\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport { CustomEase } from 'gsap/dist/CustomEase';\nimport Scroll from './Scroll';\nimport { pages as Pages } from './Classes';\nimport { stats, debounce, setAppHeight } from './Utils';\nimport { IBrowser, getBrowser } from './Browser';\nimport { IBreakpoint, getBreakpoint } from './Breakpoint';\nimport { PushStates, PushStatesEvents } from './PushStates';\nimport { Page, PageEvents } from './pages/Page';\nimport { Menu } from './Menu';\nimport { Search } from './Search';\nimport { AudioPlayer } from './components/AudioPlayer';\nimport { Lightbox } from './components/Lightbox/Lightbox';\n\nimport Widgets from './widgets/All';\n\nexport const local = !!window.location.hostname.match(/(localhost|\\.lh|192\\.168\\.)/g);\nexport const debug = window.location.search.indexOf('debug') >= 0;\n\nexport let lang: string;\nexport let pixelRatio: number;\nexport let easing: string;\nexport let browser: IBrowser;\nexport let breakpoint: IBreakpoint;\n\ngsap.registerPlugin(CustomEase);\n\n\nclass Site {\n\n    private currentPage: Page;\n    private pushStates: PushStates;\n    private scroll: Scroll;\n    private menu: Menu;\n    private lightbox: Lightbox;\n    private search: Search;\n    private audioPlayer: AudioPlayer;\n\n    private isInitialized: boolean = false;\n    private resizingTimeout: ReturnType<typeof setTimeout>;\n\n\n\n    public init(): void {\n\n        console.group();\n\n        breakpoint = getBreakpoint();\n        browser = getBrowser();\n        easing = CustomEase.create('custom', '0.5, 0, 0.1, 1');\n        lang = document.documentElement.getAttribute('lang');\n        pixelRatio = Math.min(2, window.devicePixelRatio || 1);\n\n        this.bind();\n        setAppHeight();\n        debug && stats();\n\n        this.pushStates = new PushStates();\n        this.pushStates.on(PushStatesEvents.CHANGE, this.onState);\n\n        this.scroll = new Scroll();\n\n        this.lightbox = new Lightbox();\n        this.menu = new Menu(document.querySelector('.js-menu'));\n        this.search = new Search(document.getElementById('search'));\n\n        this.audioPlayer = new AudioPlayer(document.querySelector('.js-audioplayer'));\n\n        if (browser.ie) {\n            console.warn('This browser is outdated!');\n            return;\n        }\n\n        PushStates.setTitle();\n\n        Promise.all<void>([\n            this.setCurrentPage(),\n            // preload other components if needed\n        ]).then(this.onPageLoaded);\n    }\n\n\n    /**\n     * add some general event listeners\n     */\n    private bind(): void {\n\n        window.addEventListener('DOMContentLoaded', () => {\n            document.body!.classList.add('is-loaded');\n        });\n\n        // delayed resize to prevent transitions:\n        window.addEventListener('resize', () => {\n            document.body.classList.add('is-resizing');\n            clearTimeout(this.resizingTimeout);\n            this.resizingTimeout = setTimeout(() => {\n                this.onResize();\n                document.body.classList.remove('is-resizing');\n            }, 250);\n        });\n\n        window.addEventListener('orientationchange', debounce(() => this.onResize(true)));\n    }\n\n\n    /**\n     * resize handler\n     */\n    private onResize = (isOrientationChanged?: boolean): void => {\n\n        const oldBreakpoint = breakpoint ? breakpoint.value : null;\n        breakpoint = getBreakpoint();\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const changed = oldBreakpoint !== breakpoint.value;\n\n        !browser.touch && setAppHeight();\n        isOrientationChanged && setAppHeight();\n\n        this.currentPage?.resize(width, height, breakpoint, changed);\n        (!browser.touch || changed) && Scroll?.resize();\n    };\n\n\n    /**\n     * check if any component handle onState event\n     * if not, reload html:\n     */\n    private onState = () => {\n        const isRendered = this.pushStates.isRendered();\n        const pageChangedState = this.currentPage.onState();\n        const lightboxChangedState = this.lightbox.onState(isRendered);\n        this.menu?.onState();\n        this.search?.onState();\n\n        if (!isRendered && !pageChangedState && !lightboxChangedState) {\n            Promise.all<void>([\n                this.pushStates.load(),\n                this.currentPage.animateOut(),\n            ]).then(this.render);\n        }\n    };\n\n\n    /**\n     * called after new html is loaded\n     * and old content is animated out:\n     */\n    private render = async(): Promise<void> => {\n        if (this.currentPage) {\n            this.currentPage.off();\n            this.currentPage.destroy();\n            this.currentPage = null;\n        }\n\n        console.groupEnd();\n        console.group();\n\n        document.body.classList.add('is-rendering');\n        PushStates.setTitle();\n        this.pushStates.render();\n        await this.setCurrentPage();\n        this.onPageLoaded();\n    };\n\n\n    /**\n     * when current page is loaded:\n     */\n    private onPageLoaded = async(): Promise<void> => {\n        document.body.classList.remove('is-not-ready', 'is-rendering');\n        this.currentPage.animateIn(0);\n        !this.isInitialized && Scroll.scrollToTop(true);\n        Scroll.scrollToCached();\n        this.scroll.load();\n        Scroll.start();\n        PushStates.setTitle();\n        this.audioPlayer.bindButtons();\n        this.isInitialized = true;\n    };\n\n\n\n    /**\n     * run new Page object\n     * (found by `data-page` attribute)\n     * bind it and store as currentPage:\n     */\n    private setCurrentPage(): Promise<void> {\n        const pageList: NodeList = document.querySelectorAll('[data-page]');\n        let pageEl: HTMLElement = pageList[0] as HTMLElement;\n        let pageName: string = pageEl.dataset.page || 'Page';\n        const pageOptions: Object = pageEl.dataset.options;\n\n        // page not found:\n        if (Pages[pageName] === undefined) {\n            if (pageName !== 'undefined') {\n                console.warn('There is no \"%s\" in Pages!', pageName);\n            }\n            pageName = 'Page';\n        }\n\n        // more than one data-page:\n        if (pageList.length > 1) {\n            console.warn('Only one [data-page] element, please!');\n\n        // page not defined in html:\n        } else if (pageList.length === 0) {\n            const articleEl = document.getElementById('content').querySelector('article');\n            const contentEl = document.getElementById('content');\n            pageEl = articleEl || contentEl!.firstChild as HTMLElement;\n        }\n\n        // set custom classes to body based on <article> parameters\n        document.body.classList.toggle('is-404', Boolean(document.body.querySelector('[data-not-found]')));\n\n        // create Page object:\n        const page: Page = new Pages[pageName](pageEl, pageOptions);\n        this.currentPage = page;\n\n        // bind events:\n        page.on(PageEvents.CHANGE, this.onPageAppend);\n\n        // bind widgets:\n        Widgets.bind();\n\n        // update links:\n        this.setActiveLinks();\n\n        ScrollTrigger.refresh();\n\n        this.lightbox?.check();\n\n        return page.preload();\n    }\n\n\n    /**\n     * deal with newly added elements\n     */\n    private onPageAppend = (el: HTMLElement): void => {\n        PushStates.bind(el);\n        this.scroll.load();\n    };\n\n\n    /**\n     * toggle active links with the page change\n     */\n    private setActiveLinks(): void {\n        const anchors = document.querySelectorAll('a[href]');\n        const pathname = window.location.pathname.replace(/\\/+$/, '');\n\n        [...anchors].forEach(anchor => {\n            anchor.classList.remove('is-active');\n        });\n\n        document.querySelectorAll(`a[href=\"${pathname}/\"], a[href=\"${pathname}\"]`).forEach(link => link?.classList.add('is-active'));\n    }\n}\n\n\n\nwindow.addEventListener('load', () => {\n    const site = new Site();\n    site.init();\n});\n","/* eslint-disable no-param-reassign */\n/* eslint-disable max-len */\n\n\nexport function generateUID(): string {\n    return `${(new Date()).getTime()}${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`;\n}\n\n\n\nexport const debounce = (callback: Function, timeout: number = 300) => {\n    let timeoutId = null;\n\n    return (...args) => {\n        window.clearTimeout(timeoutId);\n        timeoutId = window.setTimeout(() => {\n            // eslint-disable-next-line\n            callback.apply(null, args);\n        }, timeout);\n    };\n};\n\n\nexport function setAppHeight(): void {\n    document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);\n}\n\n\n// eslint-disable-next-line no-undef\nexport function stats(): Stats {\n    // eslint-disable-next-line no-undef\n    const stats = new Stats(); // eslint-disable-line no-shadow\n\n    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    stats.dom.style.pointerEvents = 'none';\n    document.body.appendChild(stats.dom);\n\n    function animate(): void {\n        stats.begin();\n        // monitored code goes here\n        stats.end();\n        requestAnimationFrame(animate);\n    }\n\n    requestAnimationFrame(animate);\n\n    return stats;\n}\n\n\n/**\n * Cover canvas with image\n * By Ken Fyrstenberg Nilsen\n * If image and context are only arguments rectangle will equal canvas\n * @param {CanvasRenderingContext2D} ctx\n * @param {HTMLImageElement}         img\n * @param {number}                   x\n * @param {number}                   y\n * @param {number}                   w\n * @param {number}                   h\n * @param {number}                   offsetX 0..1\n * @param {number}                   offsetY 0..1\n */\nexport function drawImageProp(ctx: CanvasRenderingContext2D, img: HTMLImageElement, iw: number, ih: number, x?: number, y?: number, w?: number, h?: number, offsetX?: number, offsetY?: number): void {\n    if (arguments.length === 4) {\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0;\n        w = ctx.canvas.width;\n        h = ctx.canvas.height;\n    }\n\n    // default offset is center\n    offsetX = typeof offsetX === 'number' ? offsetX : 0.5;\n    offsetY = typeof offsetY === 'number' ? offsetY : 0.5;\n\n    // keep bounds [0.0, 1.0]\n    if (offsetX < 0) { offsetX = 0; }\n    if (offsetY < 0) { offsetY = 0; }\n    if (offsetX > 1) { offsetX = 1; }\n    if (offsetY > 1) { offsetY = 1; }\n\n\n    const r = Math.min(w / iw, h / ih);\n    let nw = iw * r; // new prop. width\n    let nh = ih * r; // new prop. height\n    let cx; let cy; let cw; let ch; let\n        ar = 1;\n\n    // decide which gap to fill\n    if (nw < w) { ar = w / nw; }\n    if (Math.abs(ar - 1) < 1e-14 && nh < h) { ar = h / nh; } // updated\n    nw *= ar;\n    nh *= ar;\n\n    // calc source rectangle\n    cw = iw / (nw / w);\n    ch = ih / (nh / h);\n\n    cx = (iw - cw) * offsetX;\n    cy = (ih - ch) * offsetY;\n\n    // make sure source rectangle is valid\n    if (cx < 0) { cx = 0; }\n    if (cy < 0) { cy = 0; }\n    if (cw > iw) { cw = iw; }\n    if (ch > ih) { ch = ih; }\n\n    // fill image in dest. rectangle\n    ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n}\n\n\nexport const clearThree = (obj: any): void => {\n    if (!obj) { return; }\n    if (!obj.children) { return; }\n    while (obj.children.length > 0) {\n        clearThree(obj.children[0]);\n        obj.remove(obj.children[0]);\n    }\n\n    if (obj.geometry) { obj.geometry.dispose(); }\n\n    if (obj.material) {\n        Object.keys(obj.material).forEach(prop => {\n            if (!obj.material[prop]) {\n                return;\n            }\n            if (obj.material[prop] !== null && typeof obj.material[prop].dispose === 'function') {\n                obj.material[prop].dispose();\n            }\n        });\n        obj.material.dispose();\n    }\n};\n\nexport function lon2tile(lon: number, zoom: number): number {\n    return Math.floor(((lon + 180) / 360) * 2 ** zoom);\n}\n\n\nexport function lat2tile(lat: number, zoom: number): number {\n    return Math.floor(\n        ((1\n            - Math.log(\n                Math.tan((lat * Math.PI) / 180)\n                    + 1 / Math.cos((lat * Math.PI) / 180),\n            )\n                / Math.PI)\n            / 2)\n            * 2 ** zoom,\n    );\n}\n\n\nexport function getImgFromMapbox(zoom: number, lon: number, lat: number, style: string, token: string): string {\n    const z = Math.floor(zoom - 0.5);\n\n    const x = lon2tile(lon, z);\n    const y = lat2tile(lat, z);\n\n\n    const img = `<img src=\"https://api.mapbox.com/styles/v1/${style}/tiles/256/${z}/${x}/${y}?access_token=${token}\" loading=\"lazy\" alt=\"\">`;\n\n    return img;\n}\n\nexport function nFormatter(num: number, digits: number) {\n    const lookup = [\n        { value: 1, symbol: '' },\n        { value: 1e3, symbol: 'k' },\n        { value: 1e6, symbol: 'MI' },\n        { value: 1e9, symbol: 'G' },\n        { value: 1e12, symbol: 'T' },\n        { value: 1e15, symbol: 'P' },\n        { value: 1e18, symbol: 'E' },\n    ];\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    const item = lookup.slice().reverse().find(itemInner => num >= itemInner.value);\n    return item ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol : '0';\n}\n\n\nexport const keys = {\n    enter: 13,\n    esc: 27,\n    space: 32,\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    pageUp: 33,\n    pageDown: 34,\n    end: 35,\n    home: 36,\n    minus: 109,\n    plus: 107,\n};\n\n/* eslint-disable */\nexport function getScript(source: string, callback: () => void) {\n    let script = document.createElement('script') as any;\n    const prior = document.getElementsByTagName('script')[0];\n    script.async = 1;\n    script.onload = script.onreadystatechange = function (_, isAbort) {\n        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n            script.onload = script.onreadystatechange = null;\n            script = undefined;\n\n            if (!isAbort && callback) setTimeout(callback, 0);\n        }\n    };\n\n    script.src = source;\n    prior.parentNode.insertBefore(script, prior);\n}\n/* eslint-enable */\n\n/*!\n * Serialize all form data into an object of key/value pairs\n * (c) 2020 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {Node}   form The form to serialize\n * @return {Object}      The serialized form data\n */\nexport const serializeObject = (form: HTMLFormElement) => {\n    const obj = {};\n    Array.prototype.slice.call(form.elements).forEach(field => {\n        if (!field.name || field.disabled || ['file', 'reset', 'submit', 'button'].indexOf(field.type) > -1) return;\n        if (field.type === 'select-multiple') {\n            const options = [];\n            Array.prototype.slice.call(field.options).forEach(option => {\n                if (!option.selected) return;\n                options.push(option.value);\n            });\n            if (options.length) {\n                obj[field.name] = options;\n            }\n            return;\n        }\n        if (['checkbox', 'radio'].indexOf(field.type) > -1 && !field.checked) return;\n        obj[field.name] = field.value;\n    });\n    return obj;\n};\n\n\nexport const zeroPad = (num: number, places: number): string => {\n    const zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\n\nexport const wait = (time: number): Promise<void> => new Promise(resolve => {\n    setTimeout(() => resolve(), time);\n});\n\n\nexport function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n\n\nexport function normalizeUrl(url: string): string {\n    // without search query parameter - needed for reloading search results' page with different query\n    return `/${url.replace(/#.*$/, '').replace(/^\\/|\\/$/g, '')}`;\n\n    // old version - let's leave it just in case\n    // return `/${url.replace(/#.*$/, '').replace(/^\\/|\\/$/g, '').replace(/\\?.*$/, '')}`;\n}\n\n\nexport const getQueryString = (forms: HTMLFormElement | HTMLFormElement[]): string => {\n\n    const formData = new FormData();\n\n    (Array.isArray(forms) ? forms : [forms])\n        .filter((e, i, a) => a.indexOf(e) === i) // remove duplicates\n        .forEach(form => {\n            new URLSearchParams(new FormData(form) as any)\n                .forEach((value, key) => formData.append(key, value));\n        });\n\n\n    const formParams = new URLSearchParams(formData as any);\n\n    // filter empty values from form\n    const keysForDel = [];\n    formParams.forEach((value, key) => {\n        if (!value) keysForDel.push(key);\n    });\n\n    // remove empty fields from query\n    keysForDel.forEach(key => formParams.delete(key));\n\n    // set new URLSearchParams Object for final converted data\n    const finalFormData: URLSearchParams = new URLSearchParams();\n\n    // when query has same name parameters with different values (eg multi checkboxes), merge values into one key (for URL prettify & backend purposes)\n    formParams.forEach((value, key) => {\n        if (finalFormData.has(key)) {\n            finalFormData.set(key, `${finalFormData.get(key)},${value}`);\n        } else finalFormData.set(key, value);\n    });\n\n\n    return decodeURIComponent(finalFormData.toString());\n};\n\n\n\nexport function removeTags(str) {\n    if ((str === null) || (str === '')) return false;\n    // eslint-disable-next-line no-param-reassign\n    str = str.toString();\n\n    // Regular expression to identify HTML tags in\n    // the input string. Replacing the identified\n    // HTML tag with a null string.\n    return str.replace(/(<([^>]+)>)/ig, '');\n}\n\n\n\nexport function setStorageItem(key: string, value: string): void {\n    try {\n        localStorage.setItem(key, value);\n    } catch (error) {\n        console.warn(error);\n    }\n}\n\n\nexport function getStorageItem(key: string): string {\n    return localStorage.getItem(key);\n}\n","// [data-animation]\nimport { fadeUp } from './fadeUp';\n\n// [data-scroll]\nimport { hero } from './scroll/hero';\nimport { interviews } from './scroll/interviews';\n\nexport const animations = { fadeUp };\n\nexport const scrolls = { hero, interviews };\n","import { gsap } from 'gsap/dist/gsap';\nimport { AnimationType } from '../Animate';\nimport { easing } from '../Site';\n\nexport const fadeUp: AnimationType = (el, delay = 0) => {\n    gsap.killTweensOf(el, { opacity: true, y: true });\n    return gsap.fromTo(el, { opacity: 0, y: 60 }, { duration: 1.4, opacity: 1, y: 0, ease: easing, delay });\n};\n","import gsap from 'gsap';\n\nexport const hero = el => {\n    gsap.to(el.children, {\n        y: () => el.clientHeight / -2,\n        ease: 'none',\n        scrollTrigger: {\n            trigger: el,\n            scrub: true,\n            start: 'top top',\n            end: 'bottom top',\n        },\n    });\n};\n","import { gsap } from 'gsap/dist/gsap';\n\nexport const interviews = el => {\n\n    const controls = el.querySelector('.interviews-grid__controls');\n    const moreInterviews = el.querySelector('.interviews__more');\n\n    if (controls) {\n        const mm = gsap.matchMedia();\n\n        mm.add('(orientation: landscape)', () => {\n\n            gsap.to(controls, {\n                ease: 'none',\n                scrollTrigger: {\n                    trigger: el,\n                    pin: controls,\n                    pinSpacing: false,\n                    start: 'top top',\n                    end: () => `bottom ${controls.offsetHeight + (moreInterviews?.offsetHeight ?? 0)}px`,\n                    onToggle: self => el.classList.toggle('is-pinned', self.isActive),\n                    invalidateOnRefresh: true,\n                },\n            });\n        });\n    }\n};\n","import { Component } from './Component';\n\n\nexport class Accordeon extends Component {\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n        this.bind();\n        this.setHeight();\n    }\n\n    private bind(): void {\n        const button = this.view.querySelector('.js-accordeon-button');\n        button && button.addEventListener('click', this.onToggleClick);\n    }\n\n    private onToggleClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.view.classList.toggle('is-closed');\n    };\n\n    private setHeight(): void {\n        const copy: HTMLDivElement = this.view.querySelector('.js-accordeon-copy');\n\n        if (copy) {\n            copy.removeAttribute('style');\n            copy.style.height = `${copy.scrollHeight}px`;\n        }\n    }\n}\n","import { Component } from './Component';\n\n\nexport class AccordeonList extends Component {\n    private allItems: HTMLLIElement[];\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n        this.bind();\n        this.setupListeners();\n    }\n\n    private bind(): void {\n        this.allItems = [...this.view.querySelectorAll('.js-accordeon-item')].map(el => {\n            this.setHeight(el);\n            const element = <HTMLLIElement>el;\n            return element;\n        });\n    }\n\n    private setupListeners(): void {\n        const { closeOthers } = this.view.dataset;\n\n        this.allItems.forEach(item => {\n            const button = item.querySelector('.js-accordeon-button');\n            button && button.addEventListener('click', e => this.onToggleClick(e, item));\n\n            closeOthers && this.setupMutationObserver(item);\n        });\n    }\n\n    private setupMutationObserver(item): void {\n        const link = item.querySelector('a.button');\n\n        if (link) {\n            this.onLinkToggle(item.classList.contains('is-closed'), link);\n            const observer = new MutationObserver(() => this.onLinkToggle(item.classList.contains('is-closed'), link));\n            observer.observe(item, { attributes: true });\n        }\n    }\n\n    private onToggleClick = (e, item) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (item.classList.contains('is-closed')) {\n            this.allItems.forEach(itemToclose => {\n                this.close(itemToclose);\n            });\n\n            this.open(item);\n        } else {\n            this.close(item);\n        }\n    };\n\n    private onLinkToggle = (isClosed, element) => {\n        element.tabIndex = isClosed ? -1 : 0;\n    };\n\n    private close(item): void {\n        item.classList.add('is-closed');\n    }\n\n    private open(item): void {\n        item.classList.remove('is-closed');\n    }\n\n    private setHeight(item): void {\n        const copy: HTMLDivElement = item.querySelector('.js-accordeon-copy');\n\n        if (copy) {\n            copy.removeAttribute('style');\n            copy.style.height = `${copy.scrollHeight}px`;\n        }\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from '../Site';\nimport { Video } from './Player/Video';\nimport { Lightbox } from './Lightbox/Lightbox';\n\n\nexport class AudioPlayerStatesText {\n    public static RANDOM = 'Play random interview';\n    public static PLAYING = 'Playing interview';\n    public static PAUSED = 'Play interview';\n}\n\nexport interface IAudioPlayerMedia {\n    src: string;\n    duration: string;\n}\nexport interface IAudioPlayerResponse {\n    id: string;\n    src: IAudioPlayerMedia[];\n    title: string;\n    urlInterview: string;\n    nextId?: string;\n    prevId?: string;\n}\n\n\nexport interface IAudioPlayerResponseElements {\n    urlLink: HTMLAnchorElement;\n    nextBtn: HTMLButtonElement;\n    prevBtn: HTMLButtonElement;\n    title: HTMLElement;\n}\n\nexport class AudioPlayer extends Video {\n\n    // eslint-disable-next-line no-use-before-define\n    public static instance: AudioPlayer;\n    public static currentAudioId: string;\n\n    public static closeAudioPlayer(): void {\n        AudioPlayer.instance.minimize();\n    }\n\n\n\n    public static openAudioPlayer(): void {\n        AudioPlayer.instance.expand();\n    }\n\n\n\n    public static getId(): string {\n        return AudioPlayer.currentAudioId;\n    }\n\n\n\n    public static isAudioPlayerPaused(): boolean {\n        return AudioPlayer.instance.isPaused();\n    }\n\n\n    public static updateColors(color: string): void {\n        AudioPlayer.instance.updateColors(color);\n    }\n\n\n\n    private isExpanded = false;\n    private cassetteTitle: HTMLElement;\n    private apiUrl: string;\n    private elements: IAudioPlayerResponseElements;\n    private playerButtons: NodeListOf<HTMLButtonElement>;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        AudioPlayer.instance = this;\n\n        this.ui.thumbnail = this.view.querySelector('.js-player-thumbnail');\n        this.ui.minimize = this.view.querySelector('.js-player-minimize');\n        this.cassetteTitle = this.view.querySelector('.js-player-marquee');\n        this.apiUrl = this.view.dataset.apiUrl;\n\n        this.elements = {\n            urlLink: this.view.querySelector('.js-player-url'),\n            nextBtn: this.view.querySelector('.js-player-next'),\n            prevBtn: this.view.querySelector('.js-player-prev'),\n            title: this.view.querySelector('.js-player-title'),\n        };\n\n\n        this.init();\n        this.bindAudioPlayer();\n    }\n\n\n\n    public bindButtons = (): void => {\n        // bind new buttons after each page transition\n\n        document.querySelectorAll('[data-audio-player]').forEach(button => {\n            button.addEventListener('click', this.onBtnClick);\n        });\n    };\n\n\n\n    protected onBtnClick = (e): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const id = (e.currentTarget as HTMLElement).dataset.audioPlayer;\n        if (!id) return;\n\n        if (id !== AudioPlayer.currentAudioId) {\n            // if button has different id than audio player, load new audio and play\n            this.setNewAudio(id, true);\n        } else {\n            // if button has the same id as current audio, only toggle player\n            this.isPaused() ? this.play() : this.pause();\n        }\n    };\n\n\n\n    protected onPlay(): void {\n        super.onPlay();\n        this.setTitleInCassette(AudioPlayerStatesText.PLAYING);\n        this.togglePlayerButtons(true);\n    }\n\n\n\n    protected onPause(): void {\n        super.onPause();\n        this.setTitleInCassette(AudioPlayerStatesText.PAUSED);\n        this.togglePlayerButtons(false);\n    }\n\n\n\n    private init = (): void => {\n        if (!this.apiUrl) return;\n        this.setNewAudio();\n    };\n\n\n\n    private togglePlayerButtons = (isPlaying: boolean): void => {\n        this.playerButtons = document.querySelectorAll(`[data-audio-player=\"${AudioPlayer.currentAudioId}\"]`);\n        this.playerButtons.forEach(btn => btn.classList.toggle('is-playing', isPlaying));\n    };\n\n\n\n    private bindAudioPlayer = (): void => {\n        this.ui.thumbnail && this.ui.thumbnail.addEventListener('click', this.onThumbnailClick);\n        this.ui.minimize && this.ui.minimize.addEventListener('click', this.onMinimizeClick);\n        this.elements.nextBtn && this.elements.nextBtn.addEventListener('click', this.onNextClick);\n        this.elements.prevBtn && this.elements.prevBtn.addEventListener('click', this.onPrevClick);\n    };\n\n\n\n    private setNewAudio = (id?: string, play?: boolean): void => {\n        this.loadAudio(id).then((data: IAudioPlayerResponse) => {\n            this.updatePlayer(data);\n            // check if lightbox is open and has the same id as audio player\n            Lightbox.checkPlayerState();\n            // play audio when it has been already initialized\n            play && this.play();\n        });\n    };\n\n\n\n    private onNextClick = (): void => {\n        const { nextId } = this.elements.nextBtn.dataset;\n        this.setNewAudio(nextId, true);\n    };\n\n\n\n    private onPrevClick = (): void => {\n        const { prevId } = this.elements.prevBtn.dataset;\n        this.setNewAudio(prevId, true);\n    };\n\n\n\n    private onThumbnailClick = (): void => {\n        // when lightbox is open, do not minimize the player - it should be always expanded\n        if (Lightbox.isOpen) return;\n\n        this.isExpanded ? this.minimize() : this.expand();\n        this.view.classList.toggle('is-expanded');\n    };\n\n\n\n    private onMinimizeClick = (): void => this.minimize();\n\n\n\n    private minimize = (): void => {\n        gsap.to(this.ui.playerBar, {\n            yPercent: 0,\n            duration: 0.7,\n            ease: easing,\n            onComplete: () => {\n                this.setTitleInCassette(this.elements.title.innerText);\n                this.isExpanded = false;\n            },\n        });\n    };\n\n\n\n    private expand = (): void => {\n        gsap.to(this.ui.playerBar, {\n            yPercent: -100,\n            duration: 0.7,\n            ease: easing,\n            onStart: () => {\n                this.setTitleInCassette(this.isPaused() ? AudioPlayerStatesText.PAUSED : AudioPlayerStatesText.PLAYING);\n            },\n            onComplete: () => {\n                this.isExpanded = true;\n            },\n        });\n    };\n\n\n\n    private setTitleInCassette = (text: string): void => {\n        [...this.cassetteTitle.querySelectorAll('span')].forEach(span => {\n            span.innerText = text;\n        });\n    };\n\n\n\n    private updatePlayer = (data: IAudioPlayerResponse): void => {\n        AudioPlayer.currentAudioId = data.id;\n        // TO DO - add multiple sources\n        this.media.src = data.src[0].src;\n        this.elements.title.innerText = data.title;\n        this.elements.urlLink.href = data.urlInterview;\n        this.elements.nextBtn.dataset.nextId = data.nextId?.toString() || '';\n        this.elements.prevBtn.dataset.prevId = data.prevId?.toString() || '';\n    };\n\n\n\n    private async loadAudio(id?: string): Promise<IAudioPlayerResponse> {\n        const isWorkspace = window.location.pathname.indexOf('/workspace/') >= 0;\n\n        // url for workspace handles the id differently - adding .json at the end for local reading json file\n        const url = isWorkspace\n            ? `${this.apiUrl}${id ? `0${id}` : '01'}.json`\n            : `${this.apiUrl}${id ? `?id=${id}` : ''}`;\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Elder-Api': 'true',\n                },\n            });\n\n            const data = await response.json();\n            this.view.classList.remove('is-fetching');\n\n            return data;\n\n        } catch (error) {\n            this.view.classList.remove('is-fetching');\n            throw new Error(error);\n        }\n    }\n\n\n\n    private updateColors = (color: string): void => {\n        this.view.style.setProperty('--lightbox-color', `var(--color-${color})`);\n\n        // remove all previous color modifiers (if exist)\n        const classes = this.view.className.split(' ').filter(c => !c.startsWith('audioplayer--'));\n        this.view.className = classes.join(' ').trim();\n\n        // add new color modifier\n        this.view.classList.add(`audioplayer--${color}`);\n    };\n}\n","import { Handler } from '../Handler';\nimport { generateUID } from '../Utils';\n\nexport class ComponentEvents {\n    public static readonly CHANGE: string = 'change';\n}\n\n\nexport abstract class Component extends Handler {\n    public uuid: string;\n\n    constructor(protected view: HTMLElement) {\n        super();\n        this.uuid = generateUID();\n        if (!view) { console.warn('component built without view'); }\n    }\n\n    public onState(): boolean {\n        return false;\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public animateIn(index?: number, delay?: number): void { }\n\n    public animateOut(): Promise<void> {\n        // if you don't want to animate component,\n        // just return empty Promise:\n        return Promise.resolve(null);\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public resize = (wdt: number, hgt: number): void => { };\n\n    public destroy(): void {\n        super.destroy();\n    }\n}\n","import Scroll from '../Scroll';\nimport { Component } from './Component';\n\n\ninterface ILoadSettings {\n    contentSelector: string;\n}\n\n\nexport class FilterLetters extends Component {\n\n    private settings: ILoadSettings;\n    private contentElement: HTMLElement;\n    private buttons: NodeListOf<HTMLElement>;\n    private scrolledItems: NodeListOf<HTMLElement>;\n\n\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.settings = { ...this.settings, ...JSON.parse(this.view.getAttribute('data-options')) };\n        this.contentElement = document.querySelector(this.settings.contentSelector);\n        this.buttons = this.view.querySelectorAll('.js-letter');\n        this.scrolledItems = this.contentElement.querySelectorAll('.js-tile');\n\n        this.bind();\n    }\n\n\n\n    protected bind(): void {\n        [...this.buttons].map(btn => btn.addEventListener('click', this.onButtonClick));\n    }\n\n\n\n    private onButtonClick = (e): void => {\n\n        const button: HTMLElement = e.currentTarget;\n        const { letter } = button.dataset;\n\n        const letterItem: HTMLElement = [...this.scrolledItems].find(item => this.getFirstLetter(item) === letter.toLowerCase());\n\n        if (!letterItem) {\n            console.warn('There is no item starting with letter \"%s\"!', letter);\n            return;\n        }\n\n        Scroll.scrollTo({\n            el: letterItem,\n            offsetY: this.view.closest('.js-controls').clientHeight - 1, // prevent double border\n        });\n    };\n\n\n\n    private getFirstLetter(item: HTMLElement): string {\n        return item.dataset.name.toLowerCase().charAt(0);\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { TemplateNames, Templates } from '../../templates/Templates';\nimport { PushStates } from '../../PushStates';\nimport { LightboxData } from './Lightbox.types';\nimport { easing } from '../../Site';\nimport { Component } from '../../components/Component';\nimport { components } from '../../Classes';\nimport { AudioPlayer } from '../../components/AudioPlayer';\n\n\n\nexport class Lightbox {\n\n    // eslint-disable-next-line no-use-before-define\n    public static instance: Lightbox;\n    public static isOpen: boolean;\n    public static currentId: string;\n\n\n    public static checkPlayerState(): void {\n        Lightbox.instance.checkPlayerState();\n    }\n\n\n    public static getId(): string {\n        return Lightbox.currentId;\n    }\n\n    private components: Array<Component>;\n    private view: HTMLElement;\n    private shown = false;\n    private currentPath: string;\n    private playerBtn: HTMLButtonElement;\n\n    private animating: boolean;\n    private controller: AbortController;\n\n    constructor() {\n        Lightbox.instance = this;\n        this.view = document.getElementById('lightbox');\n\n        this.hide(true);\n\n        this.bind();\n    }\n\n\n\n    public async load(payload?: Object): Promise<LightboxData> {\n        this.view.classList.add('is-fetching');\n        this.controller = new AbortController();\n\n        const isWorkspace = window.location.pathname.indexOf('/workspace/') >= 0;\n        // const url = isWorkspace ? this.settings.api[type] : window.location.href + window.location.search;\n        const url = isWorkspace\n            ? `${window.location.origin}/workspace/json/lightbox/${window.location.pathname.split('/')[3]}.json`\n            : window.location.href + window.location.search;\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                signal: this.controller?.signal,\n                body: new URLSearchParams(payload as any),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Elder-Api': 'true',\n                },\n            });\n\n            const data = await response.json();\n            this.view.classList.remove('is-fetching');\n            this.controller = null;\n\n            return data;\n\n        } catch (error) {\n            this.view.classList.remove('is-fetching');\n            throw new Error(error);\n        }\n    }\n\n\n\n    public check(): void {\n        this.toggleByPathname();\n    }\n\n\n\n    public onState(isRendered?: boolean): boolean {\n        return this.toggleByPathname(isRendered);\n    }\n\n\n\n    public destroy(): void {\n        this.view.innerHTML = '';\n        this.components?.forEach(c => c.destroy());\n        this.components = null;\n    }\n\n\n\n    public build = (data: LightboxData): void => {\n        const template = Templates.get(TemplateNames.LIGHTBOX);\n\n        const html = template.render(data);\n        this.view.innerHTML = html;\n\n        PushStates.bind(this.view);\n\n        // lightbox has its own audio player's button to run it\n        AudioPlayer.instance.bindButtons();\n\n        Lightbox.currentId = data.id;\n\n        this.buildComponents(this.view.querySelectorAll('[data-component]'));\n\n        // find button connected to player\n        this.playerBtn = this.view.querySelector('.js-player-btn');\n\n        // check if player is playing audio for this lightbox\n        this.checkPlayerState();\n\n        this.tryToSetColor();\n    };\n\n\n\n    private tryToSetColor = (): void => {\n        const lightboxItem: HTMLElement = this.view.firstElementChild as HTMLElement;\n        // for initial load, when lightbox is not rendered yet\n        if (!lightboxItem) return;\n\n        // get data-attribute from .lightbox__item and update color variable in audioplayer\n        const color: string = lightboxItem.getAttribute('data-theme-color');\n\n        if (color && (AudioPlayer.getId() === Lightbox.getId())) AudioPlayer.updateColors(color);\n    };\n\n\n\n    private bind = (): void => {\n        document.addEventListener('keydown', this.onKeyDown);\n    };\n\n\n\n    private onKeyDown = (e): void => {\n        // ONLY for testing\n        // if (e.key === 'r') this.shown ? this.hide() : this.show();\n    };\n\n\n\n    private buildComponents(componentsList: NodeList): void {\n        this.components = [];\n\n        this.components = [...componentsList].map(el => {\n            const element = <HTMLElement>el;\n            const name = element.dataset.component;\n            if (name !== undefined && components[name]) {\n                let options: Object = {};\n                if (element.dataset.options) {\n                    options = JSON.parse(element.dataset.options);\n                }\n                const component = new components[name](element, options);\n                return component;\n            }\n            window.console.warn('There is no `%s` component!', name);\n            return null;\n        }).filter(Boolean);\n    }\n\n\n\n    private toggleByPathname(isRendered?: boolean): boolean {\n        const patternFound = this.matchPathnamePattern();\n\n        if (patternFound) {\n\n            Promise.all([\n                this.hide(),\n                this.load(),\n            ]).then(results => {\n                const data = results.filter(Boolean).reduce((p, c) => ({ ...p, ...c })) as LightboxData;\n\n                data?.title && PushStates.setTitle(data.title);\n                this.currentPath = window.location.pathname;\n\n                this.build(data);\n                // show the interview lightbox:\n                if (!this.shown) { this.show(); }\n\n                this.animateIn();\n            }).catch(() => {\n                this.hide();\n            });\n            return true;\n        }\n\n\n        // just hide:\n        if (this.shown) {\n            const animate = isRendered;\n            !!animate && this.animateOut();\n            this.hide(!animate);\n        }\n\n        return false;\n    }\n\n\n\n    private hide(fast?: boolean): Promise<void> {\n        if (this.animating) return Promise.resolve();\n        this.controller?.abort();\n        Lightbox.isOpen = false;\n\n        return new Promise<void>((resolve, reject) => {\n            this.animating = true;\n            this.view.classList.add('is-closing');\n            gsap.to(this.view, {\n                duration: fast ? 0 : 0.01,\n                opacity: 0,\n\n                // CONNECTED WITH CSS - .is-closing\n                delay: fast ? 0 : 1,\n                ease: 'none',\n                onStart: () => {\n                    document.body.classList.remove('has-lightbox');\n                    this.view.classList.remove('is-showing');\n                },\n                onComplete: (): void => {\n                    this.view.style.display = 'none';\n                    this.shown = false;\n                    this.animating = false;\n                    // empty the lightbox\n                    this.view.innerHTML = '';\n                    resolve();\n                },\n            });\n        });\n    }\n\n\n    private show(): void {\n        if (this.animating) return;\n        if (this.shown) { return; }\n\n\n        Promise.all([this.shown ? this.hide() : null]).then(() => {\n            this.animating = true;\n            this.shown = true;\n            Lightbox.isOpen = true;\n\n            gsap.to(this.view, {\n                duration: 0.3,\n                opacity: 1,\n                ease: 'none',\n                onStart: () => {\n                    document.body.classList.add('has-lightbox');\n                    this.view.classList.remove('is-closing');\n                    this.view.style.display = 'block';\n                },\n                // that class runs CSS animation\n                onComplete: () => {\n                    this.view.classList.add('is-showing');\n                    // audioplayer should be always expanded when lightbox is open\n                    AudioPlayer.openAudioPlayer();\n                    this.animating = false;\n                },\n            });\n        });\n    }\n\n\n\n    private checkPlayerState(): void {\n        if (AudioPlayer.getId() === Lightbox.getId() && !AudioPlayer.isAudioPlayerPaused()) {\n            this.playerBtn?.classList.add('is-playing');\n        } else {\n            this.playerBtn?.classList.remove('is-playing');\n        }\n        this.tryToSetColor();\n    }\n\n\n\n    private matchPathnamePattern(): boolean {\n        return /^\\/(workspace\\/lightbox|interviews)\\/[a-z0-9-]/gmi\n            .test(window.location.pathname + window.location.search);\n    }\n\n\n\n    private animateIn(fast?: boolean): Promise<void> {\n        return new Promise<void>(resolve => {\n            gsap.timeline({\n                onComplete: () => {\n                    this.view.classList.add('is-visible');\n                    resolve();\n                },\n                defaults: { ease: easing, duration: !fast ? 1 : 0 },\n            });\n\n            navigator.vibrate([1, 400, 1]);\n        });\n    }\n\n\n\n    private animateOut(fast?: boolean): Promise<void> {\n\n        if (!this.view.classList.contains('is-visible')) {\n            return Promise.resolve();\n        }\n\n        return new Promise<void>(resolve => {\n            gsap.timeline({\n                onComplete: () => {\n                    this.view.classList.remove('is-visible');\n                    resolve();\n                },\n                defaults: { ease: 'expo.inOut' },\n            });\n        });\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { easing } from '../../Site';\nimport { Component } from '../../components/Component';\n\n\nexport class LightboxNav extends Component {\n\n    private navButtons: NodeListOf<HTMLButtonElement>;\n    private navTabs: NodeListOf<HTMLElement>;\n    private activeTab: HTMLElement;\n    private lightboxEl: HTMLElement;\n    private isAnimating: boolean;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.lightboxEl = document.getElementById('lightbox');\n        this.navButtons = this.view.querySelectorAll('button');\n        this.navTabs = document.querySelectorAll('.js-lightbox-tab');\n\n        this.bind();\n    }\n\n\n\n    private bind = (): void => {\n        [...this.navButtons].forEach(btn => btn.addEventListener('click', this.onBtnClick));\n    };\n\n\n\n    private onBtnClick = (e): void => {\n        if (this.isAnimating) return;\n\n        const { currentTarget: button } = e;\n\n        const tabSlug: string = button.getAttribute('aria-controls');\n        const tabToOpen: HTMLElement = [...this.navTabs].find(tab => tab.id === tabSlug);\n\n        this.showTab(tabToOpen);\n\n        [...this.navButtons].forEach(btn => {\n            btn.classList.remove('is-active');\n            btn.setAttribute('aria-selected', 'false');\n        });\n        button.classList.add('is-active');\n        button.setAttribute('aria-selected', 'true');\n    };\n\n\n\n    private showTab = (tab: HTMLElement): void => {\n        if (this.isAnimating) return;\n\n        this.closeTab(this.activeTab).then(() => {\n            if (!tab) {\n                // for animate image\n                this.lightboxEl.classList.add('is-default');\n                this.lightboxEl.classList.remove('is-not-default');\n                this.activeTab = null;\n                return;\n            }\n            gsap.fromTo(tab, { yPercent: 100 }, {\n                yPercent: 0,\n                duration: 0.6,\n                ease: easing,\n                clearProps: 'all',\n                onStart: () => {\n                    this.isAnimating = true;\n                    tab.classList.add('is-visible');\n                },\n                onComplete: () => {\n                    this.isAnimating = false;\n                    this.activeTab = tab;\n                },\n            });\n        });\n    };\n\n\n\n    private closeTab = (tab: HTMLElement): Promise<void> => new Promise(resolve => {\n        if (this.isAnimating) resolve();\n\n        if (!tab) {\n            // for animate image\n            this.lightboxEl.classList.add('is-not-default');\n            this.lightboxEl.classList.remove('is-default');\n            resolve();\n        } else {\n            gsap.fromTo(tab, { yPercent: 0 }, {\n                yPercent: 100,\n                duration: 0.3,\n                ease: easing,\n                clearProps: 'all',\n                onStart: () => {\n                    this.isAnimating = true;\n                },\n                onComplete: () => {\n                    this.isAnimating = false;\n                    tab.classList.remove('is-visible');\n                    resolve();\n                },\n            });\n        }\n    });\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Component } from '../../components/Component';\nimport { easing } from '../../Site';\n\n\nexport class LightboxSlider extends Component {\n\n    private wrap: HTMLElement;\n    private slides: NodeListOf<HTMLElement>;\n    private arrowPrev: HTMLButtonElement;\n    private arrowNext: HTMLButtonElement;\n    private activeSlide: HTMLElement;\n    private activeSlideIndex: number;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.wrap = this.view.querySelector('.js-slider-wrap');\n        this.slides = this.wrap.querySelectorAll('.js-slide');\n        this.arrowPrev = this.view.querySelector('.js-slider-prev');\n        this.arrowNext = this.view.querySelector('.js-slider-next');\n\n\n        this.init();\n        this.bind();\n    }\n\n\n\n    private init = (): void => {\n        this.goTo(0, true);\n    };\n\n\n\n    private bind = (): void => {\n        this.arrowNext.addEventListener('click', () => this.goTo(this.activeSlideIndex + 1));\n        this.arrowPrev.addEventListener('click', () => this.goTo(this.activeSlideIndex - 1));\n    };\n\n\n\n    private goTo = (index: number, fast?: boolean): void => {\n        const direction: number = index > this.activeSlideIndex ? 1 : -1;\n\n        this.hideSlide(this.activeSlide, direction, fast);\n        this.showSlide(this.slides[index], direction, fast);\n    };\n\n\n\n    private hideSlide = (slide: HTMLElement, direction: number, fast?: boolean): void => {\n        if (!slide) return;\n\n        gsap.fromTo(slide, { xPercent: 0 }, {\n            xPercent: direction * -100,\n            duration: fast ? 0 : 0.25,\n            ease: easing,\n            onComplete: () => {\n                slide.style.display = 'none';\n            },\n        });\n    };\n\n\n\n    private showSlide = (slide: HTMLElement, direction: number, fast?: boolean): void => {\n\n        gsap.fromTo(slide, { xPercent: direction * 100 }, {\n            xPercent: 0,\n            duration: fast ? 0.01 : 0.4,\n            ease: easing,\n            onStart: () => {\n                slide.style.display = 'block';\n            },\n            onComplete: () => {\n                this.activeSlide = slide;\n                this.activeSlideIndex = [...this.slides].findIndex(el => el === slide);\n                this.updateArrows();\n            },\n        });\n    };\n\n\n\n    private updateArrows(): void {\n        (this.arrowPrev.querySelector('.js-text') as HTMLElement).innerText = `0${this.activeSlideIndex}`;\n        (this.arrowNext.querySelector('.js-text') as HTMLElement).innerText = `0${this.activeSlideIndex + 2}`;\n\n        switch (this.activeSlideIndex) {\n            case 0:\n                this.view.classList.add('is-first');\n                this.view.classList.remove('is-last');\n                break;\n            case this.slides.length - 1:\n                this.view.classList.remove('is-first');\n                this.view.classList.add('is-last');\n                break;\n            default:\n                this.view.classList.remove('is-first', 'is-last');\n        }\n    }\n}\n","import gsap from 'gsap';\nimport { Component } from '../../components/Component';\nimport * as Utils from '../../Utils';\n\ndeclare let ScrollToPlugin;\ngsap.registerPlugin(ScrollToPlugin);\n\nexport class LightboxTranscript extends Component {\n\n    private searchForm: HTMLFormElement;\n    private searchInput: HTMLInputElement;\n    private inputWrap: HTMLElement;\n    private fakeSpan: HTMLSpanElement;\n    private langButton: HTMLButtonElement;\n    private langWrappers: NodeListOf<HTMLElement>;\n    private isMainLang = true;\n    private activeLanguageWrap: HTMLElement;\n    private foundElements: NodeListOf<HTMLElement>;\n    private transcriptNavigation: HTMLElement;\n    private currentMarkIndex: number;\n    private transcriptNavNextButton: HTMLButtonElement;\n    private transcriptNavPrevButton: HTMLButtonElement;\n    private transcriptNavCloseButton: HTMLButtonElement;\n    private transcriptScrollContainer: HTMLElement;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.searchForm = this.view.querySelector('.js-transcript-search');\n        this.inputWrap = this.view.querySelector('.js-transcript-input-wrap');\n        this.searchInput = this.searchForm.querySelector('input');\n        this.fakeSpan = this.view.querySelector('.js-transcript-span');\n        this.langButton = this.view.querySelector('.js-transcript-switch');\n        this.langWrappers = this.view.querySelectorAll('.js-transcript-lang');\n        this.activeLanguageWrap = this.view.querySelector('.js-transcript-lang.is-active');\n        this.transcriptNavigation = this.view.querySelector('.js-transcript-nav');\n        this.transcriptNavNextButton = this.view.querySelector('.js-transcript-next');\n        this.transcriptNavPrevButton = this.view.querySelector('.js-transcript-prev');\n        this.transcriptNavCloseButton = this.view.querySelector('.js-transcript-close');\n        this.transcriptScrollContainer = this.view.querySelector('.js-scrolled');\n\n\n        this.bind();\n    }\n\n\n\n    private bind = (): void => {\n        this.searchInput.addEventListener('input', e => this.onKeyUp(e));\n        this.searchForm.addEventListener('submit', e => this.onSubmit(e));\n        this.langButton && this.langButton.addEventListener('click', this.onLangButtonClick);\n        this.transcriptNavNextButton && this.transcriptNavNextButton.addEventListener('click', () => this.goTo(1));\n        this.transcriptNavPrevButton && this.transcriptNavPrevButton.addEventListener('click', () => this.goTo(-1));\n        this.transcriptNavCloseButton && this.transcriptNavCloseButton.addEventListener('click', this.closeNav);\n    };\n\n\n\n    private onKeyUp = (e): void => {\n        // fake span is created to measure its' width & update input's width dynamically\n        const inputValue: string = this.searchInput.value;\n        this.updateInput(inputValue);\n    };\n\n\n\n    private updateInput = (value: string): void => {\n        this.fakeSpan.innerText = value;\n        const spanWidth = this.fakeSpan.scrollWidth;\n        this.inputWrap.style.width = `${spanWidth}px`;\n    };\n\n\n\n    private goTo = (dir: number): void => {\n        this.currentMarkIndex += dir;\n\n        if (this.currentMarkIndex > this.foundElements.length) this.currentMarkIndex = 1;\n        if (this.currentMarkIndex < 1) this.currentMarkIndex = this.foundElements.length;\n        this.updateTranscriptNav();\n    };\n\n\n\n    private closeNav = (): void => {\n        this.transcriptNavigation.classList.remove('is-active');\n        this.searchInput.value = '';\n        this.updateInput('');\n        this.clearMarkedElements();\n    };\n\n\n\n    private onSubmit = (e): void => {\n        e.preventDefault();\n        this.findWordInTranscript();\n    };\n\n\n\n    private findWordInTranscript = (): void => {\n        // get search value\n        const inputValue: string = this.searchInput.value;\n\n        // find all search value's results in transcript text, and wrap each in <mark> tag to highlight\n        const searchElements: NodeListOf<HTMLElement> = this.activeLanguageWrap.querySelectorAll('.transcript__text');\n        [...searchElements].forEach(elem => {\n            elem.innerHTML = elem.innerHTML.replace(new RegExp(`${inputValue}(?!([^<]+)?<)`, 'gi'), '<mark>$&</mark>');\n        });\n\n        // store all found words\n        this.foundElements = this.activeLanguageWrap.querySelectorAll('mark');\n\n        // if found any words, declare words' counter and show nav\n        if (this.foundElements.length) {\n            this.transcriptNavigation.classList.add('is-active');\n            this.currentMarkIndex = 1;\n            this.updateTranscriptNav();\n        }\n    };\n\n\n\n    private updateTranscriptNav = (): void => {\n        // update nav numbers\n        this.transcriptNavigation.querySelector('.js-transcript-counters').innerHTML = `${this.currentMarkIndex}/${this.foundElements.length}`;\n\n        // find current selected item and scroll to it\n        const selectedMark = this.foundElements[this.currentMarkIndex - 1];\n        gsap.to(this.transcriptScrollContainer, {\n            scrollTo: {\n                y: selectedMark,\n                offsetY: this.searchForm.clientHeight,\n            },\n            duration: 0.01,\n            ease: 'power3.inOut',\n        });\n    };\n\n\n\n    private onLangButtonClick = (e): void => {\n        // get attributes from button to switch languages\n        const button = e.currentTarget;\n        const oldSlug = button.getAttribute(`data-${!this.isMainLang ? 'alternate' : 'main'}-lang`);\n        const newSlug = button.getAttribute(`data-${this.isMainLang ? 'alternate' : 'main'}-lang`);\n\n        // set old language as buttons'text\n        button.innerText = oldSlug;\n\n        this.isMainLang = !this.isMainLang;\n\n        // hide old lang wrapper and show the new one\n        this.activeLanguageWrap.classList.remove('is-active');\n\n        const newActiveWrap = [...this.langWrappers].find(wrap => wrap.getAttribute('data-lang') === newSlug);\n        newActiveWrap.classList.add('is-active');\n        this.activeLanguageWrap = newActiveWrap;\n    };\n\n\n\n    private clearMarkedElements = (): void => {\n        if (!this.foundElements.length) return;\n        [...this.foundElements].forEach(elem => {\n            elem.replaceWith(Utils.removeTags(elem.innerHTML));\n        });\n        this.foundElements = null;\n    };\n}\n","import gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport Scroll from '../Scroll';\nimport * as Utils from '../Utils';\nimport { Component, ComponentEvents } from './Component';\nimport { PushStates } from '../PushStates';\n\ninterface ILoadSettings {\n    contentSelector?: string;\n    live?: boolean; // live reload on form change events\n    extra?: string; // additional form to parse\n    extraMobile?: string; // additional mobile form to parse instead of extra\n    total?: string; // updating total value on filters' change\n    filtered?: string; // show filtered items' list\n    scrollTo?: string; // scroll to given element when reloading filters\n    updateCurrentSorting?: boolean // manually updates currently selected sorting on mobile\n}\n\n\n/* This can be used on form or any other element\n * to load html data to specified container */\n\nexport class Load extends Component {\n\n    private isPending = false;\n    private isFinished = false;\n    private settings: ILoadSettings;\n    private isContentHidden: boolean;\n    private contentElement: HTMLElement;\n    private totalElement: HTMLElement;\n    private liveTimeout;\n    private viewsButtons: NodeListOf<HTMLButtonElement>;\n    private filteredEl: HTMLElement;\n    private resetButton: HTMLButtonElement;\n\n\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.settings = {\n            contentSelector: '.js-load-content',\n            live: false,\n        };\n\n\n        this.settings = Object.assign(this.settings, JSON.parse(this.view.getAttribute('data-options')));\n\n        this.isContentHidden = false;\n        this.contentElement = document.querySelector(this.settings.contentSelector);\n        this.viewsButtons = this.view.querySelectorAll('[data-view]');\n        this.resetButton = this.view.querySelector('.js-reset');\n\n        if (this.settings.total) this.totalElement = this.view.querySelector(this.settings.total);\n        if (this.settings.filtered) this.filteredEl = document.querySelector(this.settings.filtered);\n\n        this.updateFiltered();\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        super.destroy();\n    }\n\n\n\n    protected bind(): void {\n\n        this.view.addEventListener('submit', this.onSubmit);\n\n        if (this.settings.live) {\n            [...this.view.querySelectorAll('input, select')].forEach(el => {\n                el.addEventListener('change', () => {\n                    window.clearTimeout(this.liveTimeout);\n                    this.liveTimeout = setTimeout(() => this.view.dispatchEvent(new Event('submit')), 10);\n                });\n            });\n        }\n\n        [...this.viewsButtons].forEach(btn => btn.addEventListener('click', this.onViewBtnClick));\n        this.resetButton && this.resetButton.addEventListener('click', this.onReset);\n    }\n\n\n\n    protected hideContent(): Promise<void> {\n\n        return new Promise<void>(resolve => {\n            if (!this.isContentHidden) {\n                gsap.to(this.contentElement, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: 'sine',\n                    onComplete: (): void => {\n                        this.isContentHidden = true;\n                        resolve();\n                    },\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n\n\n    protected showContent = (): void => {\n        this.isContentHidden = false;\n        gsap.fromTo(this.contentElement, { opacity: 0 }, {\n            opacity: 1,\n            duration: 0.45,\n            ease: 'sine',\n        });\n    };\n\n\n\n    protected onViewBtnClick = (e): void => {\n        const { currentTarget: button } = e;\n        const { view } = button.dataset;\n        this.hideContent().then(() => {\n            this.contentElement.classList.remove('is-list-view', 'is-grid-view');\n            this.contentElement.classList.add(`is-${view}-view`);\n        }).then(this.showContent);\n    };\n\n\n\n    protected load(url): Promise<void> {\n        if (!!this.isPending || !!this.isFinished) { return; }\n\n        window.clearTimeout(this.liveTimeout);\n        this.isPending = true;\n        this.view.classList.add('is-pending');\n        PushStates.changePath(url, true);\n        ScrollTrigger.refresh();\n\n        if (this.settings.filtered) this.updateFiltered();\n        if (this.settings.scrollTo) this.scrollToContainer();\n\n        // eslint-disable-next-line consistent-return\n        return fetch(url, {\n            method: 'GET',\n            headers: { 'Content-Type': 'text/html' },\n        })\n            .then(response => response.text())\n            .then(response => {\n                const selector = this.settings.contentSelector;\n                const newDiv = document.createElement('div');\n                newDiv.innerHTML = response;\n                const elLoadedContent = newDiv.querySelector(selector).innerHTML;\n                this.contentElement.innerHTML = elLoadedContent;\n\n\n                // update total in filters\n                if (this.settings.total) {\n                    const total = newDiv.querySelector(this.settings.total).innerHTML;\n                    this.totalElement.innerHTML = total;\n                }\n\n\n                this.trigger(ComponentEvents.CHANGE, this.contentElement);\n            })\n            .catch(error => {\n                console.warn(`error: ${error}`, error);\n            })\n            .finally(() => {\n                this.view.classList.remove('is-pending');\n                ScrollTrigger.refresh();\n\n                // should have lightbox links\n                PushStates.bind(this.contentElement);\n\n                setTimeout(() => {\n                    this.isPending = false;\n                }, 250);\n            });\n    }\n\n\n    private onSubmit = (e?): void => {\n\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        let loadPath = this.view.getAttribute('action') || this.view.dataset.api || window.location.pathname;\n\n        let extraForms = this.settings.extra ? ([...document.querySelectorAll(this.settings.extra)] as HTMLFormElement[]) : null;\n        const extraFormsMobile = this.settings.extraMobile\n            ? ([...document.querySelectorAll(this.settings.extraMobile)] as HTMLFormElement[])\n            : null;\n\n        if (extraFormsMobile && window.matchMedia('(orientation: portrait) and (max-width: 659px)').matches) {\n            extraForms = extraFormsMobile;\n        }\n\n        if (this.settings.updateCurrentSorting) {\n            const indicator = document.querySelector('.js-current-sorting');\n\n            if (indicator) {\n                const sorting = Utils.getQueryString([this.view as HTMLFormElement]).replace('sort=', '');\n                const arrow = document.querySelector('.js-mobile-modal-button');\n\n                if (sorting.includes('!') && arrow) {\n                    arrow.classList.add('button--inversed');\n                } else {\n                    arrow.classList.remove('button--inversed');\n                }\n\n                indicator.innerHTML = sorting.replace('!', '');\n            }\n        }\n\n        const formData = Utils.getQueryString([...extraForms, this.view as HTMLFormElement]);\n\n        if (formData) {\n            loadPath += `?${formData}`;\n        }\n\n\n\n        Promise.all([this.hideContent(), this.load(loadPath)]).then(() => {\n            this.showContent();\n        });\n    };\n\n\n\n    private updateFiltered = (): void => {\n        // updating on front side because response is always in html\n\n        if (!this.filteredEl) return;\n\n        const selectedInputs: HTMLInputElement[] = [...this.view.querySelectorAll('input')].filter(input => input.checked);\n        const filteredItems = selectedInputs.map(input => `\n            <li class=\"filtered__label\">\n                <label for=\"${input.id}\">${input.dataset.name}<i class=\"icon-close\"></i></label>\n            </li>`);\n        this.filteredEl.innerHTML = filteredItems.join('');\n        this.bindFiltered();\n    };\n\n\n\n    private bindFiltered = (): void => {\n        // when live=true, there's no need to trigger submit manually - form submits on each change\n        if (this.settings.live) return;\n\n        // force form submit on each filtered label click\n        [...this.filteredEl.querySelectorAll('label')].forEach(label => label.addEventListener('click', () => {\n            // submit needs to be triggered manually for closing modal on submit event\n            setTimeout(() => this.view.dispatchEvent(new Event('submit')), 10);\n        }));\n    };\n\n\n\n    private scrollToContainer = (): void => {\n        const elem = document.querySelector(this.settings.scrollTo) as HTMLElement;\n        if (!elem) {\n            console.error(`element ${this.settings.scrollTo} doesn't exist!`);\n            return;\n        }\n\n        Scroll.scrollTo({\n            el: elem,\n            duration: 1,\n        });\n    };\n\n\n\n    private onReset = (e): void => {\n        e.preventDefault();\n        [...this.view.querySelectorAll('input')].forEach(input => {\n            input.checked = false;\n        });\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Component } from './Component';\nimport Scroll from '../Scroll';\n\n\n\nexport class Modal extends Component {\n\n    private triggerBtn: HTMLButtonElement;\n    private closerBtn: HTMLButtonElement;\n    private form: HTMLFormElement;\n    private isOpen = false;\n    private tl: gsap.core.Timeline;\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.triggerBtn = document.querySelector(`[aria-controls=\"${this.view.id}\"]`);\n        this.closerBtn = this.view.querySelector('.js-modal-close');\n        this.form = this.view.querySelector('form');\n\n        this.bind();\n    }\n\n\n\n    protected bind(): void {\n        this.triggerBtn && this.triggerBtn.addEventListener('click', this.onTriggerClick);\n        this.form && this.form.addEventListener('submit', this.close);\n        this.closerBtn && this.closerBtn.addEventListener('click', this.close);\n    }\n\n\n\n    private createTimeline = (): void => {\n        const wrapper = this.view.querySelector('.js-modal-wrap');\n        const bar: HTMLElement = this.view.querySelector('.js-modal-wrap-bar');\n\n        if (!wrapper) return;\n\n        this.tl = gsap.timeline({\n            ease: 'none',\n            scrollTrigger: {\n                trigger: wrapper,\n                scroller: this.view,\n                invalidateOnRefresh: true,\n                start: () => `top ${bar?.offsetHeight ?? 0}px`,\n                onToggle: self => this.view.classList.toggle('is-scrolled', self.isActive),\n            },\n        });\n    };\n\n\n\n    private cleanupTimeline = (): void => {\n        this.tl.kill();\n        this.view.classList.remove('is-scrolled');\n    };\n\n\n\n    private onTriggerClick = (): void => {\n        this.isOpen ? this.close() : this.open();\n    };\n\n\n\n    private close = (): void => {\n        this.view.classList.remove('is-open');\n        document.body.classList.remove('has-open-modal');\n        this.isOpen = false;\n        this.cleanupTimeline();\n    };\n\n\n\n    private open = (): void => {\n        this.view.classList.add('is-open');\n        document.body.classList.add('has-open-modal');\n        this.isOpen = true;\n        this.createTimeline();\n\n        Scroll.scrollTo({\n            el: this.view,\n            duration: window.matchMedia('(orientation: landscape)').matches ? 0.75 : 0,\n            ease: 'sine.out',\n            offsetY: window.matchMedia('(orientation: landscape)').matches ? this.view.parentElement.clientHeight : -1,\n        });\n    };\n}\n","import gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\nimport { Component, ComponentEvents } from '../components/Component';\nimport { easing } from '../Site';\nimport { PushStates } from '../PushStates';\nimport Widgets from '../widgets/All';\n\n\nexport interface IMoreSettings {\n    contentSelector?: string;\n    itemSelector?: string;\n    infinite?: boolean;\n    updateURL?: boolean;\n}\n\nexport class More extends Component {\n\n\n    private settings: IMoreSettings;\n    private contentEl: HTMLElement;\n    private pending: boolean;\n    private scrollTrigger: ScrollTrigger;\n    private linkEl: HTMLAnchorElement;\n\n\n\n    constructor(protected view: HTMLElement) {\n        super(view);\n\n        this.linkEl = (this.view.nodeName === 'A') ? this.view as HTMLAnchorElement : this.view.querySelector('a');\n\n        this.settings = {\n            itemSelector: 'li',\n            infinite: false,\n            updateURL: false,\n            ...JSON.parse(this.view.dataset.options),\n        };\n\n        this.contentEl = document.querySelector(this.settings.contentSelector);\n\n        // check must-have options:\n        console.assert(!!this.contentEl, 'There is no wrap element to load more content!', true);\n\n        if (!this.contentEl) {\n            this.view.style.display = 'none';\n            return;\n        }\n\n        // bind click:\n        this.linkEl.addEventListener('click', this.onClick);\n\n        // bind infinite scroll:\n        if (this.settings.infinite) {\n            this.scrollTrigger = ScrollTrigger.create({\n                trigger: this.view,\n                start: 'bottom bottom',\n                onEnter: () => this.load(),\n            });\n        }\n    }\n\n\n\n    public destroy(): void {\n        this.scrollTrigger?.kill();\n        super.destroy();\n    }\n\n\n\n    private async load(): Promise<void> {\n\n        if (this.pending) return;\n\n        const url = this.linkEl.href;\n        const tie = url.indexOf('?') < 0 ? '?' : '&';\n        const params = new URLSearchParams({ partial: 'true' });\n\n        this.pending = true;\n        this.view.classList.add('is-doing-request');\n\n        this.settings.updateURL && PushStates.changePath(url);\n\n        // send API request\n        fetch(url + tie + params, {\n            method: 'GET',\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'text/html',\n            },\n        })\n            .then(response => response.text())\n            .then(response => {\n                const selector = this.settings.contentSelector;\n\n                // mark existing items to not animate them later\n                const existingItems = this.contentEl.querySelectorAll(this.settings.itemSelector);\n                [...existingItems].map(i => i.classList.add('is-existing'));\n\n                // store current height\n                const height = this.contentEl.clientHeight;\n\n                // add new html from response to content element\n                const newDiv = document.createElement('div');\n                newDiv.innerHTML = response;\n                const elLoadedContent = newDiv.querySelector(selector).innerHTML;\n                this.contentEl.insertAdjacentHTML('beforeend', elLoadedContent);\n\n                // Update button\n                const id = this.view.getAttribute('id');\n                const newButton: HTMLLinkElement = newDiv.querySelector(id ? `#${id}` : '[data-component=\"More\"] a');\n                const newURL = newButton?.getAttribute('href');\n                if (newButton && newURL !== '') {\n                    this.linkEl.setAttribute('href', newURL);\n                    this.scrollTrigger?.refresh();\n                } else {\n                    // we have more link inside div here\n                    this.view.parentElement.remove();\n                    this.scrollTrigger?.kill();\n                }\n\n                this.trigger(ComponentEvents.CHANGE, this.contentEl);\n\n                // new items' animation - excluding items that were added to content earlier\n                const items = this.contentEl.querySelectorAll(`${this.settings.itemSelector}:not(.is-existing)`);\n                const tl = gsap.timeline();\n                [...items].forEach((item, index) => {\n                    tl.from(item, { opacity: 0, duration: 0.5, y: 50, ease: easing }, index * 0.1);\n                });\n\n                // animate height\n                gsap.fromTo(this.contentEl, { height }, {\n                    height: 'auto',\n                    duration: 0.4,\n                    ease: easing,\n                });\n            })\n            .catch(error => {\n                console.warn(`error: ${error}`, error);\n            })\n            .finally(() => {\n                this.view.classList.remove('is-doing-request');\n                // bind widgets\n                Widgets.bind();\n\n                setTimeout(() => {\n                    this.pending = false;\n                }, 250);\n            });\n    }\n\n\n\n    private onClick = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.load();\n    };\n}\n","import { parseToTime } from './Player.utils';\n\nexport class PlayerTime {\n\n\n    private durationTimeEl: HTMLElement;\n    private currentTimeEl: HTMLElement;\n\n\n\n    constructor(playerEl: HTMLElement) {\n        this.currentTimeEl = playerEl.querySelector('.js-player-time');\n        this.durationTimeEl = playerEl.querySelector('.js-player-duration');\n    }\n\n\n\n    public destroy(): void {\n        this.currentTimeEl = null;\n        this.durationTimeEl = null;\n    }\n\n\n\n    public update(metadata: { duration: number, current?: number }, isLong?: boolean): void {\n        if (this.durationTimeEl) {\n            this.durationTimeEl.innerText = parseToTime(metadata.duration, isLong);\n        }\n        if (this.currentTimeEl && typeof metadata.current === 'number') {\n            this.currentTimeEl.innerText = parseToTime(metadata.current || 0, isLong);\n        }\n    }\n}\n","import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';\n\nimport { Component } from '../Component';\nimport * as Utils from '../../Utils';\nimport { IPlayerSettings, PlayerEvents, PlayerSize } from './Player.types';\nimport { PlayerTimeline, PlayerTimelineEvents } from './PlayerTimeline';\nimport { PlayerPopups } from './PlayerPopups';\nimport { PlayerTime } from './Player.Time';\nimport { PlayerPoster } from './PlayerPoster';\nimport { PlayerVolume, PlayerVolumeEvents } from './PlayerVolume';\nimport { PlayerFullscreen, PlayerFullscreenEvents } from './PlayerFullscreen';\nimport { VideoCaptions } from './VideoCaptions';\nimport { PlayerStorage } from './Video.types';\nimport { PlayerSettings, PlayerSettingsEvents } from './PlayerSettings';\nimport { Templates, TemplateNames } from '../../templates/Templates';\nimport { PushStates } from '../../PushStates';\n\n\n\nexport abstract class Player extends Component {\n\n\n    // eslint-disable-next-line no-use-before-define\n    public static instances: { [key: string]: Player } = {};\n\n\n    // pause all instances of Player class:\n    static pauseAll(omitUID?: string): void {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const uid in Player.instances) {\n            if (typeof omitUID === 'undefined' || omitUID !== uid) {\n                Player.instances[uid].pause();\n            }\n        }\n    }\n\n\n    // pause all instances of Player class inside element:\n    static pauseAllIn(el: HTMLElement): void {\n        // eslint-disable-next-line no-restricted-syntax, guard-for-in\n        for (const uid in Player.instances) {\n            const item = Player.instances[uid];\n            if (el.contains(item.view)) {\n                item.pause();\n            }\n        }\n    }\n\n\n    public userPaused = false;\n\n    protected uid: string;\n    protected media: HTMLElement;\n    protected isLoaded: boolean;\n    protected isReady = false;\n    protected settings: IPlayerSettings;\n    protected wasPaused = false;\n    protected st: ScrollTrigger;\n\n    protected ui: {\n        poster?: PlayerPoster;\n        time?: PlayerTime;\n        timeline?: PlayerTimeline;\n        popups?: PlayerPopups;\n        volume?: PlayerVolume;\n        settings?: PlayerSettings;\n        captions?: VideoCaptions;\n        fullscreen?: PlayerFullscreen;\n        toggleBtn?: HTMLElement,\n        playPauseBtn?: HTMLElement,\n        bottomPanel?: HTMLElement,\n        thumbnail?: HTMLElement;\n        minimize?: HTMLElement;\n        playerBar?: HTMLElement;\n        rewindBtn?: HTMLElement;\n        forwardBtn?: HTMLElement;\n    };\n\n\n\n    constructor(protected view: HTMLElement, options?: Object) {\n        super(view);\n\n        // extend settings:\n        this.settings = {\n            autoplay: false,\n            loop: false,\n            muted: false,\n            controls: false,\n            volume: 1,\n            width: 480,\n            height: 270,\n            size: PlayerSize.AUTO,\n            readyTime: 0.001,\n            hotkeys: false,\n            pauseOnScroll: false,\n            ...JSON.parse(view.dataset.options || '{}'),\n            ...options,\n        };\n\n        // generate unique id:\n        this.uid = Utils.generateUID();\n\n        // setup:\n        this.setup();\n        this.resize();\n\n        if (typeof Player.instances === 'undefined') { Player.instances = {}; }\n        Player.instances[this.uid] = this;\n\n        this.view.classList.add('is-initialized');\n    }\n\n\n    /* eslint-disable no-unused-vars */\n    public abstract play(): void;\n    public abstract pause(): void;\n    public abstract toggle(): boolean;\n    public abstract seek(value: number): void;\n    public abstract toggleMute(mute?: boolean): void;\n    public abstract unload(): void;\n    public abstract load(data: IPlayerSettings): any | Promise<any>;\n    public abstract preload(): Promise<any>;\n    public abstract skipForward(more?: boolean): void;\n    public abstract skipBackward(more?: boolean): void;\n    public abstract restart(): void;\n    public abstract end(): void;\n    public abstract volumeUp(): void;\n    public abstract volumeDown(): void;\n    public abstract speedUp(): void;\n    public abstract speedDown(): void;\n    public abstract goRewind(): void;\n    public abstract goForward(): void;\n\n    protected abstract isPaused(): boolean;\n    protected abstract setup(): void;\n    protected abstract createPlayer(): void;\n    protected abstract bindPlayer(): void;\n    protected abstract unbindPlayer(): void;\n\n    protected abstract onDurationChange(data?): void;\n    protected abstract onError (error): void;\n    protected abstract onProgress(data?): void;\n    protected abstract onTimeupdate(data?): void;\n    /* eslint-enable no-unused-vars */\n\n\n    public hide(): void { this.view.style.display = 'none'; }\n    public show(): void { this.view.style.display = 'block'; }\n    public resize = (): void => {};\n\n    public setVolume(volume: number): void {\n        this.ui.volume.update(volume);\n        this.ui.volume.toggle(volume < 0.05);\n        Utils.setStorageItem(PlayerStorage.VOLUME, `${volume}`);\n    }\n\n    public setSpeed(speed: number): void {\n        this.ui.settings?.updateSpeed(speed);\n        Utils.setStorageItem(PlayerStorage.SPEED, `${speed}`);\n    }\n\n    public destroy(): void {\n        delete Player.instances[this.uid];\n\n        if (this.ui) {\n            this.ui.time?.destroy();\n            this.ui.timeline?.destroy();\n            this.ui.volume?.destroy();\n            this.ui.popups.destroy();\n            this.ui.settings?.destroy();\n            this.ui.time = null;\n            this.ui.timeline = null;\n            this.ui.volume = null;\n            this.ui.playPauseBtn = null;\n            this.ui.bottomPanel = null;\n            this.ui.toggleBtn = null;\n        }\n\n        this.unbind();\n        this.unload();\n\n        this.view.classList.remove('is-initialized');\n\n        super.destroy();\n    }\n\n\n\n    protected buildUI(): void {\n        const template = Templates.get(TemplateNames.PLAYER);\n        const html = template.render({});\n\n        this.view.insertAdjacentHTML('beforeend', html);\n\n        this.ui = {\n            fullscreen: new PlayerFullscreen(this.view.querySelector('.js-player-fullscreen'), this.view),\n            timeline: new PlayerTimeline(this.view.querySelector('.js-player-timeline'), this.view),\n            popups: new PlayerPopups(this.view.querySelector('.js-player-popups')),\n            volume: new PlayerVolume(this.view.querySelector('.js-player-volume'), this.view),\n            time: new PlayerTime(this.view),\n            poster: new PlayerPoster(this.view.querySelector('.js-player-poster'), this.view),\n            // settings: new PlayerSettings(this.view.querySelector('.js-player-settings'), this.view),\n            bottomPanel: this.view.querySelector('.js-player-bottom'),\n            playPauseBtn: this.view.querySelector('.js-player-playpause'),\n            toggleBtn: this.view.querySelector('.js-player-toggle'),\n            playerBar: this.view.querySelector('.js-player-bar'),\n            rewindBtn: this.view.querySelector('.js-player-rewind'),\n            forwardBtn: this.view.querySelector('.js-player-forward'),\n        };\n\n        this.view.classList.toggle('has-autoplay', this.settings.autoplay);\n        this.view.classList.toggle('has-autoplay', this.settings.autoplay);\n        this.view.classList.add('has-controls');\n\n        this.settings.muted && this.ui.volume?.toggle(true);\n\n        // poster\n        this.ui.poster.load(this.settings);\n\n\n        PushStates.bind(this.view);\n    }\n\n\n\n    protected bind(): void {\n        this.ui.timeline?.on(PlayerTimelineEvents.SEEK, (position: number) => this.seek(position));\n        this.ui.volume?.on(PlayerVolumeEvents.CHANGE, (volume: number) => this.setVolume(volume));\n        this.ui.volume?.on(PlayerVolumeEvents.MUTE, () => this.toggleMute(true));\n        this.ui.volume?.on(PlayerVolumeEvents.UNMUTE, () => this.toggleMute(false));\n        this.ui.settings?.on(PlayerSettingsEvents.SPEED, speed => this.setSpeed(speed));\n\n        this.ui.playPauseBtn?.addEventListener('click', this.onToggleClick);\n        this.ui.toggleBtn?.addEventListener('click', this.onToggleClick);\n        this.ui.toggleBtn?.addEventListener('dblclick', this.onDoubleClick);\n\n        this.ui.rewindBtn?.addEventListener('click', () => this.goRewind());\n        this.ui.forwardBtn?.addEventListener('click', () => this.goForward());\n\n        !!this.settings.hotkeys && document.addEventListener('keydown', this.onKeyDown);\n\n        this.ui.fullscreen?.on(PlayerFullscreenEvents.ENTER, this.onFullscreenEnter);\n        this.ui.fullscreen?.on(PlayerFullscreenEvents.EXIT, this.onFullscreenExit);\n\n        this.settings.pauseOnScroll && this.pauseOnScroll();\n\n        window.addEventListener('beforeunload', () => this.onBeforeunload());\n        window.addEventListener('pagehide', () => this.onBeforeunload());\n\n        this.bindPlayer();\n    }\n\n\n\n    protected unbind(): void {\n        this.ui?.timeline?.off();\n        this.ui?.volume?.off();\n\n        this.ui?.playPauseBtn?.removeEventListener('click', this.onToggleClick);\n        this.ui?.toggleBtn?.removeEventListener('click', this.onToggleClick);\n        this.ui?.toggleBtn?.removeEventListener('dblclick', this.onDoubleClick);\n\n        !!this.settings.hotkeys && document.removeEventListener('keydown', this.onKeyDown);\n\n        this.ui.fullscreen?.off();\n        this.st?.kill();\n\n        window.removeEventListener('beforeunload', () => this.onBeforeunload());\n        window.removeEventListener('pagehide', () => this.onBeforeunload());\n\n        this.unbindPlayer();\n    }\n\n\n\n    protected onCanplay(): void {\n        this.view.classList.add('is-canplay');\n        this.view.classList.remove('is-error');\n    }\n\n\n\n    protected onPlay(): void {\n        this.view.classList.add('is-played');\n        this.view.classList.remove('is-ended', 'is-error', 'is-share-open');\n        Player.pauseAll(this.uid);\n        this.updateMediaSession();\n    }\n\n\n\n    protected onPlaying(): void {\n        this.view.classList.add('is-playing');\n        this.view.classList.remove('is-loading', 'is-error');\n        this.trigger(PlayerEvents.PLAY);\n        navigator.mediaSession.playbackState = 'playing';\n    }\n\n\n\n    protected onPause(): void {\n        this.view.classList.remove('is-playing', 'is-share-open');\n        this.trigger(PlayerEvents.PAUSE);\n        navigator.mediaSession.playbackState = 'paused';\n    }\n\n\n\n    protected onWaiting(): void {\n        this.view.classList.remove('is-playing');\n        this.view.classList.add('is-loading');\n    }\n\n\n\n    protected onEnd(): void {\n        this.view.classList.remove('is-playing', 'is-played', 'is-started', 'is-loading');\n        this.view.classList.add('is-ended');\n\n        if (!this.settings.autoplay) {\n            this.trigger(PlayerEvents.END);\n        }\n    }\n\n\n\n    protected onToggleClick = (e): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggle();\n    };\n\n\n\n    protected onDoubleClick = (e): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.ui?.fullscreen?.toggle();\n    };\n\n\n\n    protected onBeforeunload(): void {}\n\n\n\n    protected onKeyDown = e => {\n\n        if (document.querySelector('#transcript-search') === document.activeElement) { return; }\n\n        switch (e.key) {\n            case ' ':\n            case 'k':\n                e.preventDefault();\n                e.stopPropagation();\n                this.toggle();\n                break;\n\n            case 'ArrowRight':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipForward();\n                break;\n\n            case 'l':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipForward(true);\n                break;\n\n            case 'ArrowLeft':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipBackward();\n                break;\n\n            case 'j':\n                e.preventDefault();\n                e.stopPropagation();\n                this.skipBackward(true);\n                break;\n\n            case 'm':\n                e.preventDefault();\n                e.stopPropagation();\n                this.toggleMute();\n                break;\n\n            case '>':\n                e.preventDefault();\n                e.stopPropagation();\n                this.speedUp();\n                break;\n\n            case '<':\n                e.preventDefault();\n                e.stopPropagation();\n                this.speedDown();\n                break;\n\n            case 'Home':\n            case '0':\n                e.preventDefault();\n                e.stopPropagation();\n                this.restart();\n                break;\n\n            case 'End':\n                e.preventDefault();\n                e.stopPropagation();\n                this.end();\n                break;\n\n            case 'ArrowUp':\n                e.preventDefault();\n                e.stopPropagation();\n                this.volumeUp();\n                break;\n\n            case 'ArrowDown':\n                e.preventDefault();\n                e.stopPropagation();\n                this.volumeDown();\n                break;\n\n            case 'f':\n                e.preventDefault();\n                e.stopPropagation();\n                this.ui?.fullscreen?.toggle();\n                break;\n\n            case 'c':\n                e.preventDefault();\n                e.stopPropagation();\n                this.ui?.captions?.toggle();\n                break;\n\n            default:\n                break;\n        }\n    };\n\n\n\n    protected onFullscreenEnter = () => {\n        this.ui?.captions?.showNative();\n    };\n\n\n\n    protected onFullscreenExit = () => {\n        this.ui?.captions?.hideNative();\n    };\n\n\n\n    protected pauseOnScroll(): void {\n        this.st = ScrollTrigger.create({\n            trigger: this.view,\n            onToggle: self => {\n                !self.isActive && !this.ui.fullscreen?.isFullscreen() && this.pause();\n            },\n        });\n    }\n\n\n\n    protected updateMediaSession(): void {\n        if ('mediaSession' in navigator && this.settings.metadata) {\n\n            navigator.mediaSession.metadata = new MediaMetadata({ ...this.settings.metadata as any });\n\n            navigator.mediaSession.setActionHandler('play', () => this.play());\n            navigator.mediaSession.setActionHandler('pause', () => this.pause());\n            navigator.mediaSession.setActionHandler('seekbackward', () => this.skipBackward(true));\n            navigator.mediaSession.setActionHandler('seekforward', () => this.skipForward(true));\n            navigator.mediaSession.setActionHandler('seekto', () => {}); // just enable seeking\n\n            // TODO: use this in playlists in the future\n            // navigator.mediaSession.setActionHandler('previoustrack', () => { });\n            // navigator.mediaSession.setActionHandler('nexttrack', () => { });\n        }\n    }\n}\n","export class PlayerEvents {\n    public static END = 'end';\n    public static NEXT = 'next';\n    public static PREV = 'prev';\n    public static TIME_UPDATE = 'timeUpdate';\n    public static PLAY = 'play';\n    public static PAUSE = 'pause';\n}\n\n\nexport class PlayerSize {\n    public static COVER = 'cover';\n    public static CONTAIN = 'contain';\n    public static AUTO = 'auto';\n}\n\nexport interface IPlayerSettings {\n    pauseOnScroll: boolean;\n    autoplay?: boolean;\n    loop?: boolean;\n    muted?: boolean;\n    controls?: boolean;\n\n    id?: string | number;\n    src?: string;\n    srcMobile?: string;\n    poster?: string;\n    posterMobile?: string;\n\n    ratio?: number;\n    ratioMobile?: number;\n    width?: number;\n    height?: number;\n    size?: PlayerSize;\n\n    timeFrom?: number;\n    duration?: number;\n    timeFormatLong?: boolean;\n    cacheTime?: boolean;\n\n    volume?: number;\n    hotkeys?: boolean;\n    readyTime?: number; // started class\n    // tracking?: Array<ITrackingElem>;\n\n    metadata?: MediaMetadata;\n}\n\n\nexport interface ISpotData {\n    el?: HTMLElement;\n    id?: string;\n    elHotspot?: HTMLElement;\n    elLightbox?: HTMLElement;\n    start?: number;\n    stop?: number;\n}\n\nexport interface IPlayerElements {\n    duration?: HTMLElement;\n    fullBtn?: HTMLElement;\n    loaded?: HTMLElement;\n    next?: HTMLElement;\n    playBtn?: HTMLElement;\n    playerBar?: HTMLElement;\n    poster?: HTMLElement;\n    prev?: HTMLElement;\n    progress?: HTMLElement;\n    scrubber?: HTMLElement;\n    time?: HTMLElement;\n    title?: HTMLElement;\n    toggleBtn?: HTMLElement;\n    volume?: HTMLElement;\n    volumeBar?: HTMLElement;\n    volumeButton?: HTMLElement;\n    volumeValue?: HTMLElement;\n    captions?: HTMLElement;\n    cc?: HTMLElement;\n    spots?: Array<ISpotData>;\n    exitFullBtn?: HTMLButtonElement;\n}\n","export function decodeURL(src: string): string {\n    const decode = (s): string => {\n        try {\n            const d = window.atob(s);\n            return /^wq|x@$/g.test(d) ? d.replace(/^wq|x@$/g, '') : s;\n        } catch (e) {\n            return s;\n        }\n    };\n    return /\\.mp4$/.test(src) ? src : decode(src);\n}\n\n\n\nexport function parseToTime(totalSeconds: number, isLong?: boolean): string {\n    const totalSec = parseInt(`${totalSeconds}`, 10);\n    const hours = parseInt(`${totalSec / 3600}`, 10) % 24;\n    const minutes = parseInt(`${totalSec / 60}`, 10) % 60;\n    const seconds = totalSec % 60;\n\n    return `${(hours < 10 ? `0${hours}` : hours)}:${(minutes < 10 ? `0${minutes}` : minutes)}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n","import { Handler } from '../../Handler';\nimport { browser } from '../../Site';\n\nexport class PlayerFullscreenEvents {\n    public static EXIT: string = 'exit';\n    public static ENTER: string = 'enter';\n}\n\nexport interface ExtendedDocument extends Document {\n    mozFullScreenElement: HTMLElement;\n    webkitFullscreenElement: HTMLElement;\n    msFullscreenElement: HTMLElement;\n    exitFullscreen(): Promise<void>;\n    mozCancelFullScreen(): Promise<void>;\n    webkitExitFullscreen(): Promise<void>;\n}\n\nexport const htmlDocument: ExtendedDocument = document as ExtendedDocument;\n\n\n\nexport class PlayerFullscreen extends Handler {\n\n\n\n    private static getFullscreenElement(): HTMLElement | any {\n        // eslint-disable-next-line max-len\n        return htmlDocument.fullscreenElement || htmlDocument.mozFullScreenElement || htmlDocument.webkitFullscreenElement || htmlDocument.msFullscreenElement;\n    }\n\n\n\n    constructor(private btnEl: HTMLElement, private playerEl: HTMLElement) {\n        super();\n\n        this.btnEl = btnEl;\n        this.playerEl = playerEl;\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n    }\n\n\n\n    public isFullscreen(): boolean {\n        return PlayerFullscreen.getFullscreenElement();\n    }\n\n\n\n    public toggle(): void {\n        if (this.isFullscreen()) {\n            this.exitFullscreen();\n        } else {\n            this.goFullscreen(this.playerEl);\n        }\n    }\n\n\n\n    public exitFullscreen(): void {\n        if (htmlDocument.exitFullscreen) {\n            htmlDocument.exitFullscreen();\n        } else if (htmlDocument.mozCancelFullScreen) {\n            htmlDocument.mozCancelFullScreen();\n        } else if (htmlDocument.webkitExitFullscreen) {\n            htmlDocument.webkitExitFullscreen();\n        }\n    }\n\n\n\n    public goFullscreen(element: HTMLElement | any): void {\n\n        let promise;\n        if (element.requestFullscreen) {\n            promise = element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            promise = element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            promise = element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            promise = element.msRequestFullscreen();\n        }\n\n        promise.then(() => {\n            this.playerEl.classList.add('is-fullscreen');\n        }).catch(err => {\n            console.error(`Error attempting to enable fullscreen mode: ${err.message} (${err.name})`);\n        });\n    }\n\n\n\n    private bind(): void {\n        this.btnEl?.addEventListener('click', this.onBtnClick);\n        document.addEventListener('fullscreenchange', this.onFullscreenChange);\n        const mm = window.matchMedia('(orientation: landscape) and (max-height: 1023px)');\n        mm.addEventListener('change', this.onOrientationChange);\n\n        [...this.playerEl.querySelectorAll('video')].forEach(video => {\n            video.addEventListener('webkitendfullscreen', this.onVideoFullscreenExit, false);\n        });\n    }\n\n\n\n    private unbind(): void {\n        this.btnEl?.removeEventListener('click', this.onBtnClick);\n        document.removeEventListener('fullscreenchange', this.onFullscreenChange);\n    }\n\n\n\n    private onBtnClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (PlayerFullscreen.getFullscreenElement()) {\n            this.exitFullscreen();\n        } else if (browser.mobile || browser.ios) {\n            const mediaElement = this.playerEl.querySelector('video.is-current') as any;\n            this.trigger(PlayerFullscreenEvents.ENTER);\n            mediaElement?.webkitEnterFullscreen && mediaElement?.webkitEnterFullscreen();\n            mediaElement?.enterFullscreen && mediaElement?.enterFullscreen();\n            this.playerEl.classList.add('is-fullscreen');\n        } else {\n            this.goFullscreen(this.playerEl);\n        }\n    };\n\n\n\n    private onFullscreenChange = () => {\n        if (PlayerFullscreen.getFullscreenElement()) { return; }\n        this.playerEl.classList.remove('is-fullscreen');\n        this.trigger(PlayerFullscreenEvents.EXIT);\n    };\n\n\n\n    private onVideoFullscreenExit = () => {\n        this.playerEl.classList.remove('is-fullscreen');\n        this.trigger(PlayerFullscreenEvents.EXIT);\n    };\n\n\n\n    private onOrientationChange = e => {\n        if (browser.mobile) {\n            const mediaElement = this.playerEl.querySelector('video.is-current') as any;\n            if (e.matches) {\n                // landscape\n                this.playerEl.classList.add('is-fullscreen');\n                this.trigger(PlayerFullscreenEvents.ENTER);\n                mediaElement?.webkitEnterFullscreen && mediaElement?.webkitEnterFullscreen();\n                mediaElement?.enterFullscreen && mediaElement?.enterFullscreen();\n            } else {\n                // portrait\n                mediaElement?.webkitExitFullscreen && mediaElement?.webkitExitFullscreen();\n                mediaElement?.exitFullscreen && mediaElement?.exitFullscreen();\n            }\n        }\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { easing } from '../../Site';\nimport { PopupData } from './Video.types';\n\nexport class PlayerPopups extends Handler {\n\n    private static DURATION: number = 3;\n\n    private related: Array<PopupData>;\n    private popups: Array<HTMLElement>;\n\n\n\n    constructor(private view: HTMLElement) {\n        super();\n\n        this.view = view;\n        this.popups = view ? [...this.view.children] as HTMLElement[] : null;\n    }\n\n\n\n    public loadData({ related }): void {\n        this.related = related;\n    }\n\n\n\n    public check(current?: number): void {\n\n        if (!current) { return; }\n\n        this.related?.forEach((element, key) => {\n\n            if (!element.timeStart) {\n                return;\n            }\n\n            if (current < element.timeStart || current > element.timeStart + PlayerPopups.DURATION) {\n                if (element.shown) {\n                    element.shown = false;\n                    this.hidePopup(this.popups[key]);\n                }\n                return;\n            }\n\n            if (element.shown) { return; }\n\n            this.popups[key].style.display = 'block';\n            element.shown = true;\n\n            this.showPopup(this.popups[key]);\n        });\n    }\n\n\n\n    private showPopup(popupEl: HTMLElement): void {\n        gsap.fromTo(popupEl, {\n            y: -20,\n            opacity: 0,\n            scale: 0.9,\n            transformOrigin: 'bottom',\n        }, {\n            y: 0,\n            scale: 1,\n            opacity: 1,\n            duration: 0.7,\n            delay: 0.15,\n            pointerEvents: 'all',\n            ease: easing,\n        });\n    }\n\n\n\n    private hidePopup(popupEl: HTMLElement): void {\n        gsap.to(popupEl, {\n            y: 20,\n            opacity: 0,\n            height: 0,\n            duration: 0.7,\n            scale: 0.9,\n            pointerEvents: 'none',\n            ease: easing,\n            clearProps: 'height,scale',\n            onComplete: () => {\n                popupEl.style.display = 'none';\n            },\n        });\n    }\n}\n","import { browser } from '../../Site';\nimport { IPlayerSettings } from './Player.types';\n\nexport class PlayerPoster {\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        this.view = view;\n        this.playerEl = playerEl;\n    }\n\n\n\n    public load(data: IPlayerSettings): void {\n        if (data.poster) {\n            const poster = !!browser.mobile\n                && data.posterMobile\n                && data.posterMobile !== ''\n                ? data.posterMobile\n                : data.poster;\n\n            this.view.style.backgroundImage = `url(${poster})`;\n        }\n\n        this.playerEl.classList.toggle('has-poster', !!data.poster);\n    }\n}\n","import { Handler } from '../../Handler';\n\n\nexport class PlayerSettingsEvents {\n    public static SPEED: string = 'speed';\n}\n\n\nexport class PlayerSettings extends Handler {\n\n    public static MAX_SPEED = 2;\n    public static MIN_SPEED = 0.25;\n    public static SPEED_STEP = 0.25;\n\n    public static constrainSpeed(speed: number): number {\n        return Math.max(PlayerSettings.MIN_SPEED, Math.min(PlayerSettings.MAX_SPEED, speed));\n    }\n\n\n    private listButtons: Array<HTMLLIElement>;\n    private timeout: ReturnType<typeof setTimeout>;\n    private isInitialSetup: boolean = true;\n    private button: HTMLButtonElement;\n\n\n\n    constructor(protected view: HTMLElement, protected playerEl: HTMLElement) {\n        super();\n\n        this.view = view;\n        this.playerEl = playerEl;\n        this.listButtons = [...view.querySelectorAll('[data-playback-rate]')] as HTMLLIElement[];\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.listButtons = null;\n    }\n\n\n\n    public updateSpeed(speed: number): void {\n        if (!this.isInitialSetup) {\n            this.view.classList.add('is-updating');\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n        }\n        this.isInitialSetup = false;\n\n        this.listButtons.forEach(btn => {\n            btn.parentElement.classList.toggle('is-active', parseFloat(btn.dataset.playbackRate) === speed);\n        });\n    }\n\n\n\n    private bind(): void {\n        this.listButtons.forEach(btn => btn.addEventListener('click', this.onSpeedBtnClick));\n    }\n\n\n\n    private unbind(): void {\n        this.listButtons.forEach(btn => btn.removeEventListener('click', this.onSpeedBtnClick));\n    }\n\n\n\n    private onSpeedBtnClick = (e: MouseEvent) => {\n        this.trigger(PlayerSettingsEvents.SPEED, parseFloat((e.currentTarget as HTMLElement).dataset.playbackRate));\n    };\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { browser } from '../../Site';\n\nexport class PlayerTimelineEvents {\n    public static SEEK: string = 'seek';\n}\n\nexport class PlayerTimeline extends Handler {\n\n    private isScrubbing: boolean;\n    private hoverEl: HTMLElement;\n    private currentEl: HTMLElement;\n    private loadedEl: HTMLElement;\n\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        super();\n        this.view = view;\n        this.hoverEl = view.querySelector('.js-player-hover');\n        this.currentEl = view.querySelector('.js-player-progress');\n        this.loadedEl = view.querySelector('.js-player-loaded');\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.hoverEl = null;\n        this.currentEl = null;\n        this.loadedEl = null;\n    }\n\n\n\n    public reset(): void {\n        this.currentEl.style.width = '0';\n        this.loadedEl.style.width = '0';\n    }\n\n\n\n    public update(metadata: { duration: number, buffered?: number, current?: number }, quick?: boolean): void {\n\n        const { duration, buffered, current } = metadata;\n\n        if (!duration) { return; }\n\n        if (buffered && this.loadedEl) {\n            gsap.to(this.loadedEl, {\n                width: `${(Math.max(buffered, current || 0) / duration) * 100}%`,\n                duration: !quick ? 0.3 : 0,\n            });\n        }\n\n        if (typeof current === 'number') {\n            gsap.to(this.currentEl, {\n                width: `${((current || 0) / duration) * 100}%`,\n                duration: !quick ? 0.3 : 0,\n                ease: 'none',\n            });\n        }\n    }\n\n\n\n    public addHotspots(data, duration): void {\n\n        data.related?.forEach(({ timeStart, color }) => {\n            const hotspot = document.createElement('div');\n\n            hotspot.classList.add('player__hotspot');\n            hotspot.style.left = `${((timeStart || 0) / duration) * 100}%`;\n            hotspot.style.backgroundColor = color;\n\n            this.view.appendChild(hotspot);\n        });\n\n    }\n\n\n\n    protected onMouseDown = (e: MouseEvent): void => {\n        e.stopPropagation();\n        this.isScrubbing = true;\n    };\n\n\n\n    protected onMouseMove = (e: MouseEvent): void => {\n\n        const { seek } = this.getPosition(e);\n        if (this.hoverEl) this.hoverEl.style.width = `${seek * 100}%`;\n\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            this.trigger(PlayerTimelineEvents.SEEK, seek, true);\n            gsap.killTweensOf(this.currentEl);\n            gsap.set(this.currentEl, { width: `${seek * 100}%` });\n            this.playerEl.classList.add('is-scrubbing');\n        }\n    };\n\n\n\n    protected onMouseUp = (e: MouseEvent): void => {\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            const { seek } = this.getPosition(e);\n            this.trigger(PlayerTimelineEvents.SEEK, seek);\n        }\n        this.isScrubbing = false;\n        this.playerEl.classList.remove('is-scrubbing');\n    };\n\n\n\n    protected onMouseLeave = (): void => {\n        this.isScrubbing = false;\n        this.playerEl.classList.remove('is-scrubbing');\n    };\n\n\n\n    protected onClick = (e: MouseEvent): void => {\n        e.stopPropagation();\n        const { seek } = this.getPosition(e);\n        this.trigger(PlayerTimelineEvents.SEEK, seek);\n        gsap.killTweensOf(this.currentEl);\n        gsap.set(this.currentEl, { width: `${seek * 100}%` });\n    };\n\n\n\n    private bind(): void {\n        !browser.touch && this.playerEl?.addEventListener('mouseup', this.onMouseUp);\n        !browser.touch && this.playerEl?.addEventListener('mouseleave', this.onMouseLeave);\n        !browser.touch && this.playerEl?.addEventListener('mousemove', this.onMouseMove);\n        browser.touch && this.playerEl?.addEventListener('touchmove', this.onMouseMove);\n        browser.touch && this.playerEl?.addEventListener('touchend', this.onMouseUp);\n\n        !browser.touch && this.view?.addEventListener('click', this.onClick);\n        !browser.touch && this.view?.addEventListener('mousedown', this.onMouseDown);\n        browser.touch && this.view?.addEventListener('touchstart', this.onMouseDown);\n    }\n\n\n\n    private unbind(): void {\n        this.playerEl?.removeEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.removeEventListener('mouseleave', this.onMouseLeave);\n        this.playerEl?.removeEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.removeEventListener('touchmove', this.onMouseMove);\n        this.playerEl?.removeEventListener('touchend', this.onMouseUp);\n\n        this.view?.removeEventListener('mousedown', this.onMouseDown);\n        this.view?.removeEventListener('touchstart', this.onMouseDown);\n        this.view?.removeEventListener('click', this.onClick);\n    }\n\n\n\n    private getPosition(e: TouchEvent|MouseEvent): { x: number; width: number; seek: number } {\n        const pageX = (e as MouseEvent).pageX || (e as TouchEvent).touches[0]?.pageX || (e as TouchEvent).changedTouches[0]?.pageX;\n        const x = pageX - this.view.getBoundingClientRect().left;\n        const width = this.view.clientWidth;\n        const seek = Math.max(0, Math.min(1, x / width));\n        return { x, width, seek };\n    }\n}\n","import { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../../Handler';\nimport { easing } from '../../Site';\n\nexport class PlayerVolumeEvents {\n    public static CHANGE: string = 'change';\n    public static MUTE: string = 'mute';\n    public static UNMUTE: string = 'unmute';\n}\n\n\nexport class PlayerVolume extends Handler {\n\n    private isScrubbing: boolean;\n    private isMuted: boolean;\n    private isInitialSetup: boolean = true;\n    private volume: number;\n    private buttonEl: HTMLElement;\n    private barEl: HTMLElement;\n    private valueEl: HTMLElement;\n    private timeout: ReturnType<typeof setTimeout>;\n\n\n\n    constructor(private view: HTMLElement, private playerEl: HTMLElement) {\n        super();\n        this.view = view;\n        this.playerEl = playerEl;\n        this.buttonEl = this.view.querySelector('.js-volume-btn');\n        this.barEl = this.view.querySelector('.js-volume-bar');\n        this.valueEl = this.view.querySelector('.js-volume-value');\n        this.bind();\n    }\n\n\n\n    public update(volume: number): void {\n        this.volume = volume;\n        this.valueEl && gsap.to(this.valueEl, {\n            scaleY: volume,\n            duration: this.isScrubbing ? 0.0001 : 0.2,\n            ease: easing,\n        });\n        if (!this.isInitialSetup) {\n            this.view.classList.add('is-updating');\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n        }\n        this.isInitialSetup = false;\n    }\n\n\n\n    public toggle(muted: boolean): void {\n        this.isMuted = muted;\n        this.playerEl.classList.toggle('is-muted', this.isMuted);\n        this.valueEl && gsap.to(this.valueEl, { scaleY: this.isMuted ? 0 : this.volume, duration: 0.2, ease: easing });\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.buttonEl = null;\n        this.barEl = null;\n        this.valueEl = null;\n    }\n\n\n\n    private bind(): void {\n        this.buttonEl?.addEventListener('click', this.onVolumeButtonClick);\n        this.barEl?.addEventListener('click', this.onVolumeBarClick);\n        this.barEl?.addEventListener('mousedown', this.onMouseDown);\n        this.playerEl?.addEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.addEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.addEventListener('mouseleave', this.onMouseLeave);\n    }\n\n\n\n    private unbind(): void {\n        this.buttonEl?.removeEventListener('click', this.onVolumeButtonClick);\n        this.barEl?.removeEventListener('click', this.onVolumeBarClick);\n        this.barEl?.removeEventListener('mousedown', this.onMouseDown);\n        this.playerEl?.removeEventListener('mousemove', this.onMouseMove);\n        this.playerEl?.removeEventListener('mouseup', this.onMouseUp);\n        this.playerEl?.removeEventListener('mouseleave', this.onMouseLeave);\n    }\n\n\n\n    private onVolumeButtonClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.trigger(this.isMuted ? PlayerVolumeEvents.UNMUTE : PlayerVolumeEvents.MUTE);\n    };\n\n\n\n    private onVolumeBarClick = (e: MouseEvent): void => {\n        e.stopPropagation();\n        const value = Math.max(0, Math.min(1, 1 - e.offsetY / this.barEl.clientHeight));\n        this.trigger(PlayerVolumeEvents.CHANGE, value);\n    };\n\n\n\n    private onMouseDown = (e: MouseEvent): void => {\n        e.stopPropagation();\n        this.isScrubbing = true;\n    };\n\n\n\n    private onMouseMove = (e): void => {\n        if (this.isScrubbing) {\n            e.stopPropagation();\n            const posY = e.clientY - this.barEl.getBoundingClientRect().top;\n            const value = Math.max(0, Math.min(1, 1 - posY / this.barEl.clientHeight));\n            this.trigger(PlayerVolumeEvents.CHANGE, value);\n        }\n    };\n\n\n\n    private onMouseUp = (): void => {\n        this.isScrubbing = false;\n    };\n\n\n\n    private onMouseLeave = (): void => {\n        this.isScrubbing = false;\n    };\n\n}\n","import { decodeURL } from '../../components/Player/Player.utils';\nimport { IPlayerSettings, PlayerEvents } from '../../components/Player/Player.types';\nimport { MediaState, PlayerStorage } from '../../components/Player/Video.types';\nimport { browser } from '../../Site';\nimport { Player } from '../../components/Player/Player';\nimport { getStorageItem, normalizeUrl, setStorageItem } from '../../Utils';\nimport { VideoCaptions } from './VideoCaptions';\nimport { PlayerSettings } from './PlayerSettings';\n\n\n\nexport class Video extends Player {\n\n    protected media: HTMLVideoElement | HTMLAudioElement;\n    protected isAudio: boolean;\n\n    public preload(): Promise<boolean> {\n        const state = !browser.safari\n            ? MediaState.HAVE_ENOUGH_DATA\n            : MediaState.HAVE_METADATA;\n        return new Promise<boolean>(resolve => {\n            if (!!browser.mobile || !this.settings.autoplay) {\n                resolve(true);\n            } else if (this.media.readyState >= state) {\n                resolve(true);\n            } else {\n                this.media.addEventListener('loadeddata', () => {\n                    if (this.media.readyState >= state) {\n                        resolve(true);\n                    }\n                });\n            }\n        });\n    }\n\n\n\n    public destroy(): void {\n        this.cacheTimePosition(true);\n        this.media.pause();\n        this.media.src = '';\n        this.media.load();\n        super.destroy();\n    }\n\n\n\n    public load(data: IPlayerSettings): Promise<number|{}> {\n        const src = !!browser.mobile && data.srcMobile && data.srcMobile !== '' ? data.srcMobile : data.src;\n\n        this.media.pause();\n        this.media.src = decodeURL(src);\n        this.media.load();\n\n        this.view.classList.remove('is-ended', 'is-started', 'is-played', 'is-playing');\n\n        this.ui && this.ui.timeline?.reset();\n\n        this.settings.autoplay && this.play();\n\n        this.settings.ratio = data.ratio;\n        this.settings.ratioMobile = data.ratioMobile;\n        this.resize();\n\n        this.settings.poster = data.poster;\n        this.settings.posterMobile = data.posterMobile;\n\n        this.ui.poster.load(data);\n\n        this.settings.cacheTime && this.seekToCached();\n\n        return Promise.resolve(true);\n    }\n\n\n\n    public play(): void {\n        if (this.media && this.media.paused) {\n\n            if (this.getCurrentTime() >= this.getDuration()) {\n                this.ui?.timeline?.update({ current: 0, duration: this.getDuration() }, true);\n                this.seek(0);\n            }\n\n            const playPromise = this.media.play();\n\n            if (playPromise !== undefined) {\n                (playPromise).then(() => {\n                    this.view.classList.remove('autoplay-failed');\n                }).catch(() => {\n                    this.view.classList.add('autoplay-failed');\n                });\n            }\n\n            // show poster if autoplay fails:\n            setTimeout(() => {\n                this.view.classList.add('should-play');\n            }, 1000);\n        }\n    }\n\n\n\n    public pause(): void {\n        if (!this.media || this.media.paused) { return; }\n        this.media.pause();\n    }\n\n\n\n    public toggle(play?: boolean): boolean {\n        const playing: boolean = !this.media.paused;\n\n        if (typeof play !== 'undefined') {\n            if (!!play && !playing) {\n                this.play();\n            } else if (!play && !!playing) {\n                this.pause();\n            }\n        } else {\n            playing ? this.pause() : this.play();\n        }\n\n        return !playing;\n    }\n\n\n\n    public unload(): void {\n        if (this.media) {\n            this.media.pause();\n            this.media.src = '';\n            this.media.load();\n        }\n    }\n\n\n\n    public seek(value: number): void {\n        if (!this.getDuration()) { return; }\n        this.media.currentTime = this.getStart() + this.getDuration() * value;\n    }\n\n\n\n    public seekToTime(time: number): void {\n        this.media.currentTime = this.getStart() + time;\n    }\n\n\n\n    public skipForward(more?: boolean): void {\n        this.seekToTime(this.getCurrentTime() + (more ? 10 : 5));\n    }\n\n\n\n    public skipBackward(more?: boolean): void {\n        this.seekToTime(this.getCurrentTime() - (more ? 10 : 5));\n    }\n\n\n\n    public goRewind(): void {\n        this.media.currentTime -= 15;\n    }\n\n\n\n    public goForward(): void {\n        this.media.currentTime += 15;\n    }\n\n\n\n    public end(): void {\n        this.seek(1);\n        this.pause();\n    }\n\n\n\n    public restart(): void {\n        this.seek(0);\n        this.play();\n    }\n\n\n\n    public setVolume(value: number): void {\n        this.media.volume = value;\n        this.media.muted = value === 0;\n        super.setVolume(value);\n    }\n\n\n\n    public toggleMute(mute?: boolean): void {\n        if (typeof mute !== 'undefined') {\n            this.media.muted = mute;\n        } else {\n            this.media.muted = !this.media.muted;\n        }\n        !this.media.muted && this.media.volume < 0.05 && (this.media.volume = 1);\n        this.ui.volume.update(this.media.volume);\n        this.ui.volume.toggle(this.media.muted);\n    }\n\n\n\n    public volumeUp(): void {\n        if (this.media.muted) {\n            this.toggleMute(false);\n            this.setVolume(0.05);\n        } else {\n            this.setVolume(Math.min(1, this.media.volume + 0.05));\n        }\n    }\n\n\n\n    public volumeDown(): void {\n        this.setVolume(Math.max(0, this.media.volume - 0.05));\n    }\n\n\n\n    public setSpeed(speed: number): void {\n        const constrainedSpeed = PlayerSettings.constrainSpeed(speed);\n        this.media.playbackRate = constrainedSpeed;\n        super.setSpeed(constrainedSpeed);\n    }\n\n\n\n    public speedUp(): void {\n        this.setSpeed(this.media.playbackRate + PlayerSettings.SPEED_STEP);\n    }\n\n\n\n    public speedDown(): void {\n        this.setSpeed(this.media.playbackRate - PlayerSettings.SPEED_STEP);\n    }\n\n\n\n    public setHotspots(data): void {\n        this.ui.timeline.addHotspots(data, this.getDuration());\n        this.ui.popups.loadData(data);\n    }\n\n\n\n    protected isPaused(): boolean {\n        return this.media.paused;\n    }\n\n\n\n    protected setup(): void {\n\n        this.createPlayer();\n\n        // make sure ratios are float numbers:\n        this.settings.ratio = parseFloat(`${this.settings.ratio}`);\n        this.settings.ratioMobile = <number>parseFloat(`${this.settings.ratioMobile}`);\n\n\n        // remove mobile ratio if no mobile src:\n        if (!this.settings.srcMobile || this.settings.srcMobile === '') {\n            delete this.settings.ratioMobile;\n            delete this.settings.srcMobile;\n        }\n\n        // mobile src:\n        if (!!browser.mobile && this.settings.srcMobile && this.settings.srcMobile !== this.media.src) {\n            this.media.src = decodeURL(this.settings.srcMobile);\n            this.media.load();\n        } else if (!browser.mobile && this.settings.src && this.settings.src !== this.media.src) {\n            this.media.src = decodeURL(this.settings.src);\n            this.media.load();\n        }\n\n        // volume:\n        this.settings.volume && (this.media.volume = this.settings.volume);\n        this.settings.muted = this.media.muted;\n\n        // autoplay:\n        // if (this.media.autoplay || this.settings.autoplay) {\n        //     this.settings.autoplay = true;\n        //     this.media.autoplay = false;\n        // }\n\n        // loop:\n        if (this.media.loop) {\n            this.settings.loop = true;\n        }\n        if (this.settings.loop) {\n            this.media.loop = true;\n        }\n\n        // poster:\n        const media = <HTMLVideoElement> this.media;\n        if (media.poster && !this.settings.poster) {\n            this.settings.poster = media.poster;\n            if (this.media.controls) {\n                media.poster = '';\n            }\n        }\n\n        // controls:\n        if (!!this.media.controls || this.settings.controls) {\n            this.buildUI();\n            this.media.controls = false;\n            this.media.removeAttribute('controls');\n        }\n\n        this.bind();\n\n        // seek to param or to local storage:\n        !this.seekToParams() && this.settings.cacheTime && this.seekToCached();\n\n        // set cached volume:\n        const cachedVolume = getStorageItem(PlayerStorage.VOLUME);\n        this.ui && this.ui.volume?.toggle(this.settings.muted);\n        this.setVolume(parseFloat(cachedVolume) || this.media.volume);\n\n        // set playback rate:\n        const cachedSpeed = getStorageItem(PlayerStorage.SPEED);\n        this.setSpeed(parseFloat(cachedSpeed) || 1);\n    }\n\n\n\n    protected createPlayer(): void {\n        this.media = this.view.querySelector('audio, video');\n        if (!this.media) {\n            console.error('Video/Audio component must contain html `<audio>` or `<video>` element');\n            return;\n        }\n\n        this.isAudio = this.media.tagName === 'AUDIO';\n    }\n\n\n\n    protected buildUI(): void {\n        super.buildUI();\n        this.loadCaptions();\n    }\n\n\n\n    protected loadCaptions(): void {\n        const captionsEl = this.view.querySelector('.js-player-cc') as HTMLElement;\n        captionsEl && this.ui && (this.ui.captions = new VideoCaptions(captionsEl, this.view));\n    }\n\n\n\n    protected bindPlayer(): void {\n        this.media.addEventListener('loadeddata', () => this.onLoaded());\n        this.media.addEventListener('loadedmetadata', () => this.onLoaded());\n        this.media.addEventListener('durationchange', () => this.onDurationChange());\n        this.media.addEventListener('updateMediaState', () => this.onDurationChange());\n        this.media.addEventListener('progress', () => this.onProgress());\n        this.media.addEventListener('updateMediaState', () => this.onProgress());\n        this.media.addEventListener('timeupdate', () => this.onTimeupdate());\n        this.media.addEventListener('play', () => this.onPlay());\n        this.media.addEventListener('canplay', () => this.onCanplay());\n        this.media.addEventListener('playing', () => this.onPlaying());\n        this.media.addEventListener('pause', () => this.onPause());\n        this.media.addEventListener('waiting', () => this.onWaiting());\n        this.media.addEventListener('ended', () => this.onEnd());\n        this.media.addEventListener('error', e => this.onError(e));\n\n        if (this.media.readyState >= MediaState.HAVE_CURRENT_DATA) {\n            this.onLoaded();\n        }\n    }\n\n\n\n    protected unbindPlayer(): void {\n        this.media.removeEventListener('loadeddata', () => this.onLoaded());\n        this.media.removeEventListener('loadedmetadata', () => this.onLoaded());\n        this.media.removeEventListener('durationchange', () => this.onDurationChange());\n        this.media.removeEventListener('updateMediaState', () => this.onDurationChange());\n        this.media.removeEventListener('progress', () => this.onProgress());\n        this.media.removeEventListener('updateMediaState', () => this.onProgress());\n        this.media.removeEventListener('timeupdate', () => this.onTimeupdate());\n        this.media.removeEventListener('play', () => this.onPlay());\n        this.media.removeEventListener('canplay', () => this.onCanplay());\n        this.media.removeEventListener('playing', () => this.onPlaying());\n        this.media.removeEventListener('pause', () => this.onPause());\n        this.media.removeEventListener('waiting', () => this.onWaiting());\n        this.media.removeEventListener('ended', () => this.onEnd());\n        this.media.removeEventListener('error', e => this.onError(e));\n    }\n\n\n\n    protected onLoaded(): void {\n        this.ui && this.ui.captions?.load(this.media);\n        this.updateTime();\n    }\n\n\n    protected onDurationChange(): void {\n        this.updateTime();\n    }\n\n\n    protected onProgress(): void {\n        this.updateTime();\n    }\n\n\n    protected onTimeupdate(): void {\n        this.constrainTime();\n        this.updateTime();\n    }\n\n\n\n    protected onError(e): void {\n        if (this.view && e.target.networkState && e.target.networkState === 3) {\n            console.warn(`Can't load media ${(e.target as HTMLMediaElement).src}`);\n            this.view.classList.add('is-error');\n        }\n    }\n\n\n    protected onBeforeunload() {\n        this.cacheTimePosition(true);\n    }\n\n\n\n    protected updateTime(): void {\n\n        if (!this.media) { return; }\n\n        const current = this.getCurrentTime();\n        const duration = this.getDuration();\n        const { buffered } = this.media;\n        const bufferedTime = buffered && buffered.length ? buffered.end(0) : 0;\n\n        this.ui.time.update({ duration, current }, this.settings.timeFormatLong);\n        this.ui.timeline.update({ duration, buffered: bufferedTime, current });\n        this.ui.popups.check(current);\n\n        this.view.classList.toggle('is-started', current > this.settings.readyTime);\n\n        this.cacheTimePosition();\n        this.trigger(PlayerEvents.TIME_UPDATE, current);\n    }\n\n\n\n    protected seekToParams(): boolean {\n        const time = (new URLSearchParams(window.location.search)).get('time');\n        if (time) {\n            this.seekToTime(parseInt(time, 10));\n            return true;\n        }\n        return false;\n    }\n\n\n\n    protected seekToCached(): void {\n        const path = normalizeUrl(window.location.pathname);\n        const cachedTime = getStorageItem(PlayerStorage.SEEK + path);\n        cachedTime && this.seekToTime(parseFloat(cachedTime));\n    }\n\n\n\n    protected cacheTimePosition(force?: boolean): void {\n        const path = normalizeUrl(window.location.pathname);\n        const time = this.getCurrentTime() >= this.getDuration() - 1 ? 0 : this.getCurrentTime();\n        (!browser.ios || force) && setStorageItem(PlayerStorage.SEEK + path, `${time}`);\n    }\n\n\n\n    protected getDuration(): number {\n        return this.settings.duration || this.media.duration;\n    }\n\n\n    protected getStart(): number {\n        return this.settings.timeFrom || 0;\n    }\n\n\n    protected getCurrentTime(): number {\n        return this.media.currentTime - this.getStart();\n    }\n\n\n    protected constrainTime(): void {\n\n        if (!this.media) { return; }\n\n        if (this.media.currentTime < this.getStart()) {\n            this.media.currentTime = this.getStart();\n            this.pause();\n        }\n\n        if (this.media.currentTime === this.getStart() + this.getDuration()) {\n            this.pause();\n            this.onEnd();\n            return;\n        }\n\n        if (this.media.currentTime > this.getStart() + this.getDuration()) {\n            this.media.currentTime = this.getStart() + this.getDuration();\n        }\n    }\n}\n","// eslint-disable-next-line no-shadow\nexport enum MediaState {\n    HAVE_NOTHING,\n    HAVE_METADATA,\n    HAVE_CURRENT_DATA,\n    HAVE_FUTURE_DATA,\n    HAVE_ENOUGH_DATA,\n}\n\n\n\nexport class PlayerStorage {\n    public static CC_ACTIVE: string = 'active';\n    public static CC_INDEX: string = 'captions';\n    public static CC_NOT_ACTIVE: string = 'not-active';\n    public static CC: string = 'cc';\n    public static SEEK: string = 'seek';\n    public static SPEED: string = 'speed';\n    public static VOLUME: string = 'volume';\n}\n\n\n\nexport type PopupData = {\n    url: string;\n    session: number;\n    timeStart: number;\n    title: string;\n    color: string;\n    description: string;\n    image: string;\n    type: string;\n    shown?: boolean;\n    timeline?;\n}\n","import { getStorageItem, setStorageItem } from '../../Utils';\nimport { PlayerStorage } from './Video.types';\n\n\nexport class VideoCaptions {\n\n\n    protected tracks: TextTrackList | TextTrackList[];\n    protected currentIndex: number;\n    protected isActive: boolean;\n    private captions: HTMLElement;\n    private btn: HTMLButtonElement;\n    private listButtons: HTMLLIElement[];\n    private timeout: ReturnType<typeof setTimeout>;\n\n\n\n    constructor(protected view: HTMLElement, protected playerEl: HTMLElement) {\n        this.view = view;\n        this.playerEl = playerEl;\n        this.btn = view.querySelector('.js-player-cc-btn');\n        this.captions = playerEl.querySelector('.js-player-cc-text');\n        this.listButtons = [...view.querySelectorAll('.js-player-cc-item')] as HTMLLIElement[];\n\n        this.bind();\n    }\n\n\n\n    public destroy(): void {\n        this.unbind();\n        this.view = null;\n        this.playerEl = null;\n        this.btn = null;\n        this.captions = null;\n        this.listButtons = null;\n        this.unloadCC();\n        this.tracks = null;\n        this.currentIndex = null;\n    }\n\n\n\n    public load(media: HTMLMediaElement | HTMLMediaElement[]): void {\n        if (!Array.isArray(media) && media.textTracks.length > 0) {\n            this.playerEl.classList.add('has-cc');\n            this.tracks = media.textTracks;\n            [...this.tracks].forEach((track: TextTrack) => { track.mode = 'hidden'; });\n        } else {\n            this.playerEl.classList.remove('has-cc');\n        }\n\n        this.checkLocalStorage();\n    }\n\n\n\n    public toggle(): void {\n        this.isActive = !this.isActive;\n        setStorageItem(PlayerStorage.CC, this.isActive ? PlayerStorage.CC_ACTIVE : PlayerStorage.CC_NOT_ACTIVE);\n\n        if (this.isActive) {\n            this.loadCC(this.currentIndex >= 0 ? this.currentIndex : 0);\n        } else {\n            this.unloadCC();\n        }\n\n        this.view.classList.add('is-updating');\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => this.view.classList.remove('is-updating'), (600 + 300));\n    }\n\n\n\n    public showNative(): void {\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => {\n            track.mode = track.mode === 'hidden' ? 'showing' : 'disabled';\n        });\n    }\n\n\n\n    public hideNative(): void {\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => {\n            track.mode = track.mode === 'showing' ? 'hidden' : 'disabled';\n        });\n    }\n\n\n\n    protected loadCC(index: number): void {\n\n        if (Array.isArray(this.tracks)) { return; }\n\n        this.isActive = true;\n        this.currentIndex = index;\n\n        setStorageItem(PlayerStorage.CC_INDEX, `${index}`);\n        setStorageItem(PlayerStorage.CC, PlayerStorage.CC_ACTIVE);\n\n        this.loadTracklist(this.tracks);\n        this.updateButtons();\n    }\n\n\n\n    protected loadTracklist(tracklist: TextTrackList): void {\n        if (!tracklist) { return; }\n\n        [...tracklist].forEach((track: TextTrack, i: number) => {\n            track.mode = i === this.currentIndex ? 'hidden' : 'disabled';\n        });\n\n        const track = tracklist[this.currentIndex];\n        const { cues } = track;\n\n        for (let i = 0; i < cues.length; ++i) {\n            const cue: VTTCue = cues[i] as VTTCue;\n            cue.onenter = this.onCueEnter;\n            cue.onexit = this.onCueExit;\n        }\n    }\n\n\n\n    protected unloadCC(): void {\n        this.isActive = false;\n        this.tracks && [...this.tracks].forEach((track: TextTrack) => { track.mode = 'disabled'; });\n        this.updateButtons();\n        setStorageItem(PlayerStorage.CC, PlayerStorage.CC_NOT_ACTIVE);\n    }\n\n\n\n    protected updateButtons(): void {\n        this.listButtons.forEach((btn, i) => {\n            const isCurrent = (!this.isActive && i === 0) || (this.isActive && i - 1 === this.currentIndex);\n            btn.parentElement.classList.toggle('is-active', isCurrent);\n        });\n        this.playerEl.classList.toggle('has-captions-on', this.isActive);\n    }\n\n\n\n    protected onCueEnter = (e: Event): any => {\n        this.captions && (this.captions.style.display = 'block');\n        this.captions && (this.captions.innerHTML = `<span>${(e.currentTarget as VTTCue).text}</span>`);\n    };\n\n\n\n    protected onCueExit = () => {\n        this.captions && (this.captions.style.display = 'none');\n    };\n\n\n\n    protected checkLocalStorage(): void {\n        if (getStorageItem(PlayerStorage.CC) === PlayerStorage.CC_ACTIVE) {\n            this.loadCC(parseInt(PlayerStorage.CC_INDEX, 10) || 0);\n        }\n    }\n\n\n\n    private bind(): void {\n        this.btn?.addEventListener('click', this.onToggleBtnClick);\n        this.listButtons?.forEach(btn => btn.addEventListener('click', this.onCCTrackClick));\n    }\n\n\n\n    private unbind(): void {\n        this.btn?.removeEventListener('click', this.onToggleBtnClick);\n        this.listButtons?.forEach(btn => btn.removeEventListener('click', this.onCCTrackClick));\n    }\n\n\n\n    private onToggleBtnClick = (e): void => {\n        e.stopPropagation();\n        this.toggle();\n    };\n\n\n\n    private onCCTrackClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        const index = parseInt(e.currentTarget.dataset.index || -1, 10);\n        index < 0 ? this.unloadCC() : this.loadCC(index);\n    };\n}\n","/* eslint-disable consistent-return */\n/* eslint-disable array-callback-return */\n/* eslint-disable max-classes-per-file */\nimport { gsap } from 'gsap/dist/gsap';\nimport { Handler } from '../Handler';\nimport { IBreakpoint } from '../Breakpoint';\nimport { Component } from '../components/Component';\nimport { components } from '../Classes';\nimport { Images } from '../widgets/Images';\n\n\nexport class PageEvents {\n    public static readonly PROGRESS: string = 'progress';\n    public static readonly COMPLETE: string = 'complete';\n    public static readonly CHANGE: string = 'append';\n}\n\n\n\nexport class Page extends Handler {\n\n    public components: Array<Component>;\n\n\n\n    // eslint-disable-next-line no-unused-vars\n    constructor(protected view: HTMLElement, options?) {\n        super();\n        this.view.style.opacity = '0';\n\n        this.components = [];\n        this.buildComponents(this.view.parentNode.querySelectorAll('[data-component]'));\n    }\n\n\n\n    /**\n     * preload necessary assets:\n     * @return {Promise<boolean>} loading images promise\n     */\n    public preload(): Promise<void> {\n        return Images.preload(this.view.querySelectorAll('img.preload'))\n            .then(() => {\n                this.trigger(PageEvents.COMPLETE);\n            });\n    }\n\n\n\n    /**\n     * check if any Component can be changed after onState\n     * @return {boolean} returns true when one of the components\n     * takes action in onState function call\n     */\n    public onState(): boolean {\n        let changed: boolean = !!false;\n\n        for (let i = 0; i < this.components.length; i += 1) {\n            const component = this.components[i];\n            const componentChanged: boolean = component.onState();\n            if (!changed && !!componentChanged) {\n                changed = true;\n            }\n        }\n\n        return changed;\n    }\n\n\n\n    /**\n     * page entering animation\n     * @param {number} delay animation delay\n     */\n    public animateIn(delay?: number): Promise<void> {\n        return new Promise(resolve => {\n            for (let i = 0; i < this.components.length; i += 1) {\n                this.components[i].animateIn(i, delay);\n            }\n\n            gsap.to(this.view, {\n                duration: 0.3,\n                opacity: 1,\n                onComplete: () => resolve(),\n            });\n        });\n    }\n\n\n\n    /**\n     * page exit animation\n     * (called after new content is loaded and before is rendered)\n     * @return {Promise<boolean>} animation promise\n     */\n    public animateOut(): Promise<void> {\n        // animation of the page:\n        const pageAnimationPromise = new Promise<void>(resolve => {\n            gsap.to(this.view, {\n                duration: 0.2,\n                onComplete: (): void => {\n                    document.body.scrollTop = 0;\n                },\n                opacity: 0,\n            });\n            resolve();\n        });\n\n        // animations of all components:\n        const componentAnimations: Promise<void>[] = this.components.map(obj => obj.animateOut());\n\n        // return one promise waiting for all animations:\n        return new Promise<void>(resolve => {\n            const allPromises: Promise<void>[] = componentAnimations.concat(pageAnimationPromise);\n\n            Promise.all<void>(allPromises).then(() => {\n                resolve();\n            });\n        });\n    }\n\n\n\n    /**\n     * resize handler\n     * @param {[type]} wdt        window width\n     * @param {[type]} hgt        window height\n     * @param {[type]} breakpoint IBreakpoint object\n     */\n    // eslint-disable-next-line no-unused-vars\n    public resize(wdt: number, hgt: number, breakpoint: IBreakpoint, bpChanged?: boolean): void {\n        this.components.forEach(item => {\n            item.resize(wdt, hgt);\n        });\n    }\n\n\n\n    /**\n     * cleanup when closing Page\n     */\n    public destroy(): void {\n        this.components.forEach(item => item.destroy());\n        this.components = [];\n        this.view = null;\n        super.destroy();\n    }\n\n\n\n    protected buildComponents(componentsList: NodeList): void {\n        this.components = [];\n\n        this.components = [...componentsList].map(el => {\n            const element = <HTMLElement>el;\n            const name = element.dataset.component;\n            if (name !== undefined && components[name]) {\n                let options: Object;\n                if (element.dataset.options) {\n                    options = JSON.parse(element.dataset.options);\n                }\n                const component = new components[name](element, options);\n                return component;\n            }\n            window.console.warn('There is no `%s` component!', name);\n        }).filter(Boolean);\n    }\n\n\n\n    private onComponentChange = (el): void => {\n        this.buildComponents(el.querySelectorAll('[data-component]'));\n        this.trigger(PageEvents.CHANGE, el);\n    };\n\n\n\n    // short call\n    // eslint-disable-next-line no-unused-vars\n    private callAll(fn: string, ...args): void {\n        for (let i = 0; i < this.components.length; i += 1) {\n            const component = this.components[i];\n            if (typeof component[fn] === 'function') {\n                component[fn](...args);\n            }\n        }\n    }\n}\n","/* eslint-disable no-undef */\n/// <reference path=\"../definitions/twig.d.ts\" />\n\n// eslint-disable-next-line max-classes-per-file\nexport class TemplateNames {\n    public static LIGHTBOX = 'lightbox';\n    public static LIVESEARCH = 'livesearch';\n    public static PLAYER = 'player';\n}\n\nexport class Templates {\n    public static get(name: string): Twig.Template {\n        const tmpl = document.querySelector(`#tmpl-${name}`);\n        if (!tmpl) {\n            console.warn('There is no `%s` template!', name);\n            return null;\n        }\n        return Twig.twig({ data: tmpl.innerHTML });\n    }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-case-declarations */\nimport { PushStates } from '../PushStates';\nimport { Recaptcha } from './Recaptcha';\nimport { serializeObject } from '../Utils';\n\nexport interface IApiData {\n    url?: string;\n    beforeCall?: string;\n    callback?: string;\n    formSelector?: string;\n    // tslint:disable-next-line: no-any\n    params?: any;\n    action?: 'POST' | 'DELETE' | 'GET' | 'PUT' | 'PATCH';\n}\n\ninterface IApiElement extends HTMLElement {\n    api: IApiData;\n}\n\n\nexport class API {\n    private static beforeCalls = {\n\n\n        validate(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? \"It seems there's an issue with the email you entered. <br> Please double-check and try again.\" : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                Promise.all([Recaptcha ? Recaptcha.check(el as HTMLFormElement) : null]).then(() => {\n                    API.callIt(data, el);\n                    el.querySelectorAll('.js-error').forEach(errorEl => {\n                        errorEl.innerHTML = '';\n                        errorEl.classList.remove('is-error');\n                    });\n                    el.classList.remove('has-errors');\n                });\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n        validateBlur(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                el.querySelectorAll('.js-error').forEach(errorEl => {\n                    errorEl.innerHTML = '';\n                    errorEl.classList.remove('is-error');\n                });\n                el.classList.remove('has-errors');\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n    };\n\n\n    private static callbacks = {\n\n\n        onSubscribe(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                const div = document.createElement('div');\n                div.classList.add('js-message', 'message');\n                el.append(div);\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        onSendMessage(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                el.append('<div class=\"js-message message\">');\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        reload: (): void => {\n            PushStates.reload();\n        },\n    };\n\n\n    public static bind(where?: HTMLElement): void {\n\n        [...(where || document).querySelectorAll('[data-api]:not(form)')]\n            .forEach(apiEl => {\n                apiEl.removeEventListener('click', API.onAction);\n                apiEl.addEventListener('click', API.onAction);\n            });\n\n        [...(where || document).querySelectorAll('form[data-api]')].forEach(apiFormEl => {\n            apiFormEl.removeEventListener('submit', API.onAction);\n            apiFormEl.addEventListener('submit', API.onAction);\n            apiFormEl.setAttribute('novalidate', 'novalidate');\n\n            apiFormEl.querySelectorAll('input[required]').forEach(input => {\n                input.addEventListener('blur', () => {\n                    const data: IApiData = { ...JSON.parse(apiFormEl.getAttribute('data-api')) };\n                    API.beforeCalls.validateBlur(data, apiFormEl as HTMLElement);\n                });\n            });\n        });\n    }\n\n\n    public static callIt(dataApi: IApiData, el: HTMLElement, customCallback?: Function): Promise<any> {\n        const data = API.preprocessData(dataApi, el);\n\n        el.classList.add('is-doing-request');\n\n        const action = data.action || 'POST';\n        delete data.action;\n\n        const url = data.url || window.location.pathname;\n        delete data.url;\n\n        return new Promise<any>((resolve, reject) => {\n            el.classList.remove('is-doing-request');\n\n            const dataBody = new URLSearchParams(data as any);\n\n            fetch(url, {\n                method: action,\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                body: dataBody,\n            })\n                .then(response => response.json())\n                .then(response => {\n                    if (data.callback) {\n                        API.onSuccess(data, el, response);\n                    }\n\n                    if (customCallback && typeof customCallback === 'function') {\n                        customCallback(data, el, response);\n                    }\n\n                    resolve(response);\n                })\n                .catch(error => {\n                    console.warn(`API error: ${error}`, data);\n                    reject(error);\n                });\n        });\n    }\n\n\n    private static preprocessData(data: IApiData, el: HTMLElement): IApiData {\n        // get data if api called on form element:\n        if (el.matches('form')) {\n            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;\n            data = Object.assign(data, serializeObject(el as HTMLFormElement));\n        }\n\n        // update data if api called on link element:\n        if (el.matches('[href]')) {\n            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;\n        }\n\n        // get additional data from external form:\n        if (data.formSelector) {\n            data = Object.assign(data, serializeObject(document.querySelector(data.formSelector)));\n            delete data.formSelector;\n        }\n\n        // flatten:\n        if (data.params) {\n            data = Object.assign(data, data.params);\n            delete data.params;\n        }\n\n        return data;\n    }\n\n\n    private static onAction = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const el = e.currentTarget as IApiElement;\n        const data: IApiData = { ...JSON.parse(el.getAttribute('data-api')) };\n        // console.log(data, el);\n\n        // beforeCall handler:\n        if (data.beforeCall) {\n            if (data.beforeCall in API.beforeCalls) {\n                API.beforeCalls[data.beforeCall](data, el);\n                return;\n            }\n        }\n\n        API.callIt(data, el);\n    };\n\n\n    private static onSuccess = (data: IApiData, el: HTMLElement, response): void => {\n        if (data.callback) {\n            if (data.callback in API.callbacks) {\n                API.callbacks[data.callback](data, el, response);\n            }\n        }\n    };\n\n\n    public static refresh = () => {\n        const forms = [...document.querySelectorAll('form')];\n\n        forms.forEach(form => {\n            const inputs = form.querySelectorAll('input');\n            const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];\n            const errorMessages = form.querySelectorAll('.js-error');\n            form.classList.remove('is-doing-request', 'is-completed', 'has-errors');\n\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const message of errorMessages) {\n                message.innerHTML = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const input of inputs) {\n                input.value = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const err of errors) {\n                err.classList.remove('is-error', 'has-errors');\n            }\n        });\n    };\n}\n","import { debug } from '../Site';\nimport { Analytics } from './Analytics';\n\nexport class Accessibility {\n\n\n    public static tabbedAmunt = 0;\n    public static current: { el: HTMLElement; callback: Function };\n    public static isOn: boolean;\n\n\n    public static init(): void {\n        const html = document.documentElement;\n\n        document.addEventListener('keyup', e => {\n            const key = e.keyCode || e.which;\n            if (key === 9) {\n                Accessibility.tabbedAmunt += 1;\n                if (debug) { console.log('%caccessibility', 'background: yellow; color: black', document.activeElement); }\n                html.classList.toggle('accessibility', Accessibility.tabbedAmunt >= 2);\n                Accessibility.isOn = html.classList.contains('accessibility');\n                Accessibility.tabbedAmunt >= 2 && !!Accessibility.isOn && Analytics.sendCustomEvent({ event: 'accessibility_on' });\n            }\n        });\n\n        document.addEventListener('mouseup', e => {\n            if (e.detail) {\n                html.classList.remove('accessibility');\n                Accessibility.tabbedAmunt = 0;\n                Accessibility.isOn = html.classList.contains('accessibility');\n            }\n        });\n\n\n\n        document.querySelectorAll('[data-skip-to]').forEach(item => {\n            item.addEventListener('click', e => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                const target = (e.currentTarget as HTMLElement).getAttribute('href');\n                if (!target[0]) { return; }\n                (document.querySelector(`${target} a`) as HTMLElement).focus();\n\n                html.classList.add('accessibility');\n            });\n        });\n    }\n}\n","import { Accessibility } from './Accessibility';\nimport { API } from './Api';\nimport { CSSAnimate } from './CSSAnimate';\nimport { Expand } from './Expand';\nimport { Images } from './Images';\nimport { Recaptcha } from './Recaptcha';\nimport { Sounds } from './Sounds';\nimport { Vibration } from './Vibration';\n\nexport default class Widgets {\n\n    public static bind(el?: HTMLElement): void {\n\n        Accessibility.init();\n        API.bind(el);\n        CSSAnimate.bind(el);\n        Expand.bind(el);\n        Images.bind(el);\n        Recaptcha.bind(el);\n        Sounds.bind(el);\n        Vibration.bind(el);\n\n    }\n}\n","/// <reference path=\"../definitions/ga.d.ts\" />\n/// <reference path=\"../Site.ts\" />\n\n\ndeclare let ga;\ndeclare let gtag;\ndeclare let dataLayer: Object[];\n\ntype GAEventParams = {\n    [key: string]: any;\n    event: string;\n};\n\nexport class Analytics {\n\n    public static TRACKING_ID: string;\n\n\n\n    public static bind(where?: HTMLElement): void {\n        [...(where || document).querySelectorAll('[data-ga]')].forEach(el => {\n            el.addEventListener('click', e => {\n                const data = JSON.parse((e.currentTarget as HTMLElement).dataset.ga);\n                Analytics.sendEvent(data[0] || '', data[1] || '', data[2] || '', data[3] || -1);\n            });\n        });\n\n        [...(where || document).querySelectorAll('[data-gtm]')].forEach(el => {\n            el.addEventListener('click', e => {\n                const data = JSON.parse((e.currentTarget as HTMLElement).dataset.gtm);\n                this.sendCustomEvent(data);\n            });\n        });\n    }\n\n\n\n    public static sendCustomEvent(data: GAEventParams): void {\n        if (typeof gtag !== 'undefined' && data.event) {\n            console.log('%cgtag tracking: event', 'background:#1a73e8;color:#fff', data);\n            const eventLabel = data.event.replace(/-/g, '_');\n            delete data.event;\n            Object.keys(data).length ? gtag('event', eventLabel, data) : gtag('event', eventLabel);\n        } else if (typeof dataLayer !== 'undefined') {\n            dataLayer.push(data);\n            console.log('%cgtm tracking: event', 'background:#1a73e8;color:#fff', data);\n        }\n    }\n\n\n\n    public static sendEvent(category: string, action: string, label?: string, value?: number|string): void {\n        if (typeof gtag !== 'undefined') {\n            gtag('event', action, {\n                event_category: category,\n                event_label: label,\n                value,\n            });\n            console.log('%cgtag tracking: event', 'background:#1a73e8;color:#fff', category, action, label, value);\n        } else if (typeof dataLayer !== 'undefined') {\n            const data = {\n                event: action,\n                category,\n                label: value,\n            };\n            dataLayer.push(data);\n            console.log('%cgtm tracking: event', 'background:#1a73e8;color:#fff', category, action, label, value);\n        } else if (typeof ga !== 'undefined') {\n            ga('send', 'event', category, action, label, value);\n            console.log('%cga tracking: event', 'background:#1a73e8;color:#fff', category, action, label, value);\n        }\n    }\n\n\n\n    public static sendPageview(pathname?: string, title?: string): void {\n        if (typeof dataLayer !== 'undefined') {\n            dataLayer.push({\n                event: 'pageview',\n                // title: title || document.title,\n                pathname: pathname || window.location.pathname,\n            });\n            console.log('%cgtm tracking: pageview', 'background:#1a73e8;color:#fff', pathname || window.location.pathname, title || document.title);\n        } else if (typeof gtag !== 'undefined') {\n            gtag('config', Analytics.TRACKING_ID, {\n                page_path: pathname || window.location.pathname,\n                page_title: title || document.title,\n            });\n            console.log('%cgtag tracking: pageview', 'background:#1a73e8;color:#fff', pathname || window.location.pathname, title || document.title);\n        } else if (typeof ga !== 'undefined') {\n            ga('send', 'pageview', pathname || window.location.pathname, {\n                title: title || document.title,\n                pathname: pathname || '',\n            });\n            console.log('%cga tracking: pageview', 'background:#1a73e8;color:#fff', pathname || window.location.pathname, title || document.title);\n        }\n    }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-case-declarations */\nimport { PushStates } from '../PushStates';\nimport { Recaptcha } from './Recaptcha';\nimport { serializeObject } from '../Utils';\n\nexport interface IApiData {\n    url?: string;\n    beforeCall?: string;\n    callback?: string;\n    formSelector?: string;\n    // tslint:disable-next-line: no-any\n    params?: any;\n    action?: 'POST' | 'DELETE' | 'GET' | 'PUT' | 'PATCH';\n}\n\ninterface IApiElement extends HTMLElement {\n    api: IApiData;\n}\n\n\nexport class API {\n    private static beforeCalls = {\n\n\n        validate(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? \"It seems there's an issue with the email you entered. <br> Please double-check and try again.\" : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                Promise.all([Recaptcha ? Recaptcha.check(el as HTMLFormElement) : null]).then(() => {\n                    API.callIt(data, el);\n                    el.querySelectorAll('.js-error').forEach(errorEl => {\n                        errorEl.innerHTML = '';\n                        errorEl.classList.remove('is-error');\n                    });\n                    el.classList.remove('has-errors');\n                });\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n        validateBlur(data: IApiData, el: HTMLElement): void {\n            let passed = true;\n            let message = '';\n\n            if (el.classList.contains('is-done')) {\n                el.classList.remove('is-done');\n                return;\n            }\n\n            el.querySelectorAll('.js-error').forEach(errorEl => {\n                errorEl.innerHTML = '';\n                errorEl.classList.remove('is-error');\n            });\n\n\n            el.querySelectorAll('input[required]:not([data-recaptcha])').forEach(input => {\n                switch ((input as HTMLInputElement).type) {\n                    case 'email':\n                        // eslint-disable-next-line max-len\n                        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                        const { value } = input as HTMLInputElement;\n\n\n                        if (!re.test(value) || !value.length) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = value.length > 0 ? 'NOT VALID E-MAIL FORMAT' : 'Required field';\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.closest('fieldset').querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'password':\n                        const pass = (input as HTMLInputElement).value;\n\n                        if (pass.length > 5) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = pass.length > 0 ? 'invalid-pass' : 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n\n                        break;\n\n                    case 'checkbox':\n                        if (!(input as HTMLInputElement).checked) {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        } else {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        }\n                        break;\n\n                    case 'text':\n                        if ((input as HTMLInputElement).value.length > 0) {\n                            input.parentElement.classList.remove('is-error');\n                            input.parentElement.querySelector('.js-error').innerHTML = '';\n                        } else {\n                            passed = false;\n                            input.parentElement.classList.add('is-error');\n                            message = 'Required field';\n                            input.parentElement.querySelector('.js-error').innerHTML = message;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            });\n\n            el.querySelectorAll('textarea[required]').forEach(textarea => {\n                if ((textarea as HTMLTextAreaElement).value.length > 0) {\n                    textarea.parentElement.classList.remove('is-error');\n                    textarea.parentElement.querySelector('.js-error').innerHTML = '';\n                } else {\n                    passed = false;\n                    textarea.parentElement.classList.add('is-error');\n                    message = 'Required field';\n                    textarea.parentElement.querySelector('.js-error').innerHTML = message;\n                }\n            });\n\n\n            if (passed) {\n                el.querySelectorAll('.js-error').forEach(errorEl => {\n                    errorEl.innerHTML = '';\n                    errorEl.classList.remove('is-error');\n                });\n                el.classList.remove('has-errors');\n            } else {\n                el.classList.add('has-errors');\n            }\n        },\n\n    };\n\n\n    private static callbacks = {\n\n\n        onSubscribe(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                const div = document.createElement('div');\n                div.classList.add('js-message', 'message');\n                el.append(div);\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        onSendMessage(data: IApiData, el: HTMLElement, response): void {\n            let $message = el.querySelector('.js-message');\n\n            if (!$message) {\n                el.append('<div class=\"js-message message\">');\n                $message = el.querySelector('.js-message');\n            }\n\n            const html = (response.message);\n\n            $message.innerHTML = html;\n\n            el.classList.add('is-completed');\n\n            el.querySelectorAll('input').forEach(elem => elem.dispatchEvent(new Event('blur')));\n        },\n\n        reload: (): void => {\n            PushStates.reload();\n        },\n    };\n\n\n    public static bind(where?: HTMLElement): void {\n\n        [...(where || document).querySelectorAll('[data-api]:not(form)')]\n            .forEach(apiEl => {\n                apiEl.removeEventListener('click', API.onAction);\n                apiEl.addEventListener('click', API.onAction);\n            });\n\n        [...(where || document).querySelectorAll('form[data-api]')].forEach(apiFormEl => {\n            apiFormEl.removeEventListener('submit', API.onAction);\n            apiFormEl.addEventListener('submit', API.onAction);\n            apiFormEl.setAttribute('novalidate', 'novalidate');\n\n            apiFormEl.querySelectorAll('input[required]').forEach(input => {\n                input.addEventListener('blur', () => {\n                    const data: IApiData = { ...JSON.parse(apiFormEl.getAttribute('data-api')) };\n                    API.beforeCalls.validateBlur(data, apiFormEl as HTMLElement);\n                });\n            });\n        });\n    }\n\n\n    public static callIt(dataApi: IApiData, el: HTMLElement, customCallback?: Function): Promise<any> {\n        const data = API.preprocessData(dataApi, el);\n\n        el.classList.add('is-doing-request');\n\n        const action = data.action || 'POST';\n        delete data.action;\n\n        const url = data.url || window.location.pathname;\n        delete data.url;\n\n        return new Promise<any>((resolve, reject) => {\n            el.classList.remove('is-doing-request');\n\n            const dataBody = new URLSearchParams(data as any);\n\n            fetch(url, {\n                method: action,\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                body: dataBody,\n            })\n                .then(response => response.json())\n                .then(response => {\n                    if (data.callback) {\n                        API.onSuccess(data, el, response);\n                    }\n\n                    if (customCallback && typeof customCallback === 'function') {\n                        customCallback(data, el, response);\n                    }\n\n                    resolve(response);\n                })\n                .catch(error => {\n                    console.warn(`API error: ${error}`, data);\n                    reject(error);\n                });\n        });\n    }\n\n\n    private static preprocessData(data: IApiData, el: HTMLElement): IApiData {\n        // get data if api called on form element:\n        if (el.matches('form')) {\n            data.url = !data.url && el.getAttribute('action') ? el.getAttribute('action') : data.url;\n            data = Object.assign(data, serializeObject(el as HTMLFormElement));\n        }\n\n        // update data if api called on link element:\n        if (el.matches('[href]')) {\n            data.url = !data.url && el.getAttribute('href') ? el.getAttribute('href') : data.url;\n        }\n\n        // get additional data from external form:\n        if (data.formSelector) {\n            data = Object.assign(data, serializeObject(document.querySelector(data.formSelector)));\n            delete data.formSelector;\n        }\n\n        // flatten:\n        if (data.params) {\n            data = Object.assign(data, data.params);\n            delete data.params;\n        }\n\n        return data;\n    }\n\n\n    private static onAction = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const el = e.currentTarget as IApiElement;\n        const data: IApiData = { ...JSON.parse(el.getAttribute('data-api')) };\n        // console.log(data, el);\n\n        // beforeCall handler:\n        if (data.beforeCall) {\n            if (data.beforeCall in API.beforeCalls) {\n                API.beforeCalls[data.beforeCall](data, el);\n                return;\n            }\n        }\n\n        API.callIt(data, el);\n    };\n\n\n    private static onSuccess = (data: IApiData, el: HTMLElement, response): void => {\n        if (data.callback) {\n            if (data.callback in API.callbacks) {\n                API.callbacks[data.callback](data, el, response);\n            }\n        }\n    };\n\n\n    public static refresh = () => {\n        const forms = [...document.querySelectorAll('form')];\n\n        forms.forEach(form => {\n            const inputs = form.querySelectorAll('input');\n            const errors = [...form.querySelectorAll('.is-error'), ...form.querySelectorAll('.has-errors')];\n            const errorMessages = form.querySelectorAll('.js-error');\n            form.classList.remove('is-doing-request', 'is-completed', 'has-errors');\n\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const message of errorMessages) {\n                message.innerHTML = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const input of inputs) {\n                input.value = '';\n            }\n\n            // eslint-disable-next-line no-restricted-syntax\n            for (const err of errors) {\n                err.classList.remove('is-error', 'has-errors');\n            }\n        });\n    };\n}\n","/**\n * Fire single one-way animations on hover.\n *\n * Listeners are bound on `[data-cssanimate]` elements themselves\n * or on elements specified by selector passed in the dataset:\n * ```<div data-cssanimate=\".js-child\"><span class=\"js-child\">```\n *\n * To fire the animation use `is-animating` class which is added on `mouseenter` event.\n * ```[data-cssanimate].is-animating { animation: customAnimation; }```\n *\n * It can be used with both: css-transition and css-animation;\n */\n\nexport class CSSAnimate {\n\n\n    public static bind(where?: HTMLElement): void {\n        [...(where || document).querySelectorAll('[data-cssanimate]')].forEach(el => {\n            const selector = (el as HTMLElement).dataset.cssanimate;\n            const target = selector ? el.querySelector(selector) : el;\n            target?.addEventListener('transitionend', CSSAnimate.onAnimationEnd);\n            target?.addEventListener('animationend', CSSAnimate.onAnimationEnd);\n            el.addEventListener('mouseenter', CSSAnimate.onMouseEnter);\n        });\n    }\n\n\n    private static onAnimationEnd = e => {\n        e.target.closest('[data-cssanimate]').classList.remove('is-animating');\n    };\n\n\n    private static onMouseEnter = e => {\n        e.currentTarget.classList.add('is-animating');\n    };\n}\n","export class Expand {\n\n    public static resize = () => {\n        this.setMaxHeight();\n    };\n\n\n\n    public static bind(where?: HTMLElement): void {\n\n        this.setMaxHeight();\n\n        ([...(where || document).querySelectorAll('[data-expand][id]')] as HTMLElement[])\n            .forEach(element => {\n                const toggleButton = document.querySelector(`[aria-controls=\"${element.id}\"]`) as HTMLElement;\n                toggleButton?.addEventListener('click', Expand.onAriaControlsClick);\n            });\n    }\n\n\n\n    public static unbind(): void {\n        ([...document.querySelectorAll('[data-expand][id]')] as HTMLElement[]).forEach(element => {\n            const toggleButton = element.querySelector('[aria-controls]') as HTMLElement;\n            toggleButton?.removeEventListener('click', Expand.onAriaControlsClick);\n        });\n    }\n\n\n\n    private static onAriaControlsClick = (e: Event): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const target = e.currentTarget as HTMLElement;\n        const isExpanded = target.getAttribute('aria-expanded') === 'true';\n\n        isExpanded ? this.collapse(target) : this.expand(target);\n    };\n\n\n\n    private static expand = (target: HTMLElement) => {\n        target.setAttribute('aria-expanded', 'true');\n        target.parentElement.classList.add('is-expanded');\n        (target.querySelector('.js-expand-text') as HTMLElement).innerText = target.getAttribute('data-expanded-text');\n        document.getElementById(target.getAttribute('aria-controls')).classList.add('is-expanded');\n    };\n\n\n\n    private static collapse = (target: HTMLElement) => {\n        target.setAttribute('aria-expanded', 'false');\n        target.parentElement.classList.remove('is-expanded');\n        (target.querySelector('.js-expand-text') as HTMLElement).innerText = target.getAttribute('data-hidden-text');\n        document.getElementById(target.getAttribute('aria-controls')).classList.remove('is-expanded');\n    };\n\n\n\n    private static setMaxHeight = () => {\n        ([...document.querySelectorAll('[data-expand][id]')] as HTMLElement[]).forEach(element => {\n            let height = 0;\n            [...element.children].forEach(children => {\n                height += children.getBoundingClientRect().height;\n                console.log(children, height);\n            });\n\n            element.style.maxHeight = `${height}px`;\n        });\n    };\n}\n","/// <reference path=\"../definitions/imagesloaded.d.ts\" />\n\nimport { debug, local } from '../Site';\n\n\nexport class Images {\n\n\n    /**\n     * preload images\n     * @param {NodeListOf<HTMLImageElement>} imgElements images to preload\n     * @return {Promise<void>} loading images promise\n     */\n    public static preload(imgElements: NodeListOf<HTMLImageElement>): Promise<void> {\n\n        if (!imgElements || !imgElements.length) {\n            return Promise.resolve();\n        }\n\n        return new Promise<void>(resolve => {\n            const il = imagesLoaded(imgElements);\n            (local || debug) && il.on('progress', () => console.log(il));\n            il.on('always', () => resolve());\n        });\n\n    }\n\n\n    /**\n     * listen to all images loaded event\n     * mark them as loaded\n     */\n    public static bind(where?: HTMLElement): void {\n        const il = imagesLoaded(where || document.body);\n        il.on('progress', Images.onProgress);\n    }\n\n\n    /**\n     * imagesLoaded successful callback\n     */\n    private static onProgress = (instance, { img, isLoaded }) => {\n        if (isLoaded && img.naturalWidth > 0 && img.naturalHeight > 0) {\n            img.classList.remove('is-loading');\n            img.classList.add('is-loaded');\n            img.closest('figure')?.classList.add('is-loaded');\n            img.closest('.image')?.classList.add('is-loaded');\n        }\n    };\n}\n","/* eslint-disable no-undef */\n/// <reference path=\"../definitions/grecaptcha.d.ts\" />\n\nimport { getScript } from '../Utils';\n\n\nexport class Recaptcha {\n    private static SITE_KEY: string;\n    private static inputSelector = '[data-recaptcha]';\n\n\n    public static bind(selector?: any): void {\n        const target = typeof selector === 'undefined' ? document.body : selector;\n\n        if (!document.querySelector('[data-recaptchakey]')) { return; }\n\n        Recaptcha.SITE_KEY = Recaptcha.SITE_KEY\n        || (document.querySelector('[data-recaptchakey]') as HTMLElement).dataset.recaptchakey;\n\n        if (!target.querySelector(Recaptcha.inputSelector)) { return; }\n\n        if (typeof grecaptcha === 'undefined') {\n            getScript(\n                `//www.google.com/recaptcha/api.js?render=${Recaptcha.SITE_KEY}`,\n                () => Recaptcha.attach(target.querySelector(Recaptcha.inputSelector)),\n            );\n        } else {\n            Recaptcha.attach(target.querySelector(Recaptcha.inputSelector));\n        }\n    }\n\n\n    // linked with `Widgets.Form`\n    public static check(form: HTMLFormElement): Promise<string> {\n        return new Promise<string>(resolve => {\n            const action = form.getAttribute('action').split('/').pop().replace(/[^0-9a-z]/gi, '') || 'action';\n            grecaptcha.execute(Recaptcha.SITE_KEY, { action })\n                .then(token => {\n                    Recaptcha.onExecute(form, token);\n                    resolve(token);\n                });\n        });\n    }\n\n\n    private static attach(target: HTMLElement): void {\n        grecaptcha.ready(() => {\n            target.closest('form').data = { Recaptcha };\n            target.closest('form').classList.add('has-recaptcha');\n        });\n    }\n\n\n    private static onExecute(form: HTMLFormElement, token: string): void {\n        if (!form.querySelector('[name=token]')) { form.append('<input name=\"token\" type=\"hidden\" value=\"\">'); }\n        const input = form.querySelector('[name=token]') as HTMLInputElement;\n        input.value = token;\n    }\n}\n","window.AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n\nconst context = new AudioContext();\n\nexport class Sound {\n\n    private url: string;\n    private buffer: AudioBuffer;\n    private sources: AudioBufferSourceNode[] = [];\n\n\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n\n\n    public load(): Promise<AudioBuffer|Error> {\n\n        if (!this.url) return Promise.reject(new Error(`Missing or invalid URL: ${this.url}`));\n        if (this.buffer) return Promise.resolve(this.buffer);\n\n        return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.open('GET', this.url, true);\n            request.responseType = 'arraybuffer';\n\n            // Decode asynchronously:\n            request.onload = () => {\n                context.decodeAudioData(request.response, buffer => {\n\n                    if (!buffer) {\n                        console.log(`Sound decoding error: ${this.url}`);\n                        reject(new Error(`Sound decoding error: ${this.url}`));\n                        return;\n                    }\n\n                    this.buffer = buffer;\n                    resolve(buffer);\n                });\n            };\n\n            request.onerror = err => {\n                console.log('Sound XMLHttpRequest error:', err);\n                reject(err);\n            };\n\n            request.send();\n        });\n    }\n\n\n\n    public play(volume = 1, time = 0): Promise<void> {\n\n        if (!this.buffer) return Promise.resolve();\n\n        return new Promise(resolve => {\n\n            // Create a new sound source and assign it the loaded sound's buffer:\n            const source: AudioBufferSourceNode = context.createBufferSource();\n            source.buffer = this.buffer;\n\n            // Keep track of all sources created, and stop tracking them once they finish playing:\n            const insertedAt = this.sources.push(source) - 1;\n            source.onended = () => {\n                source.stop(0);\n                this.sources.splice(insertedAt, 1);\n                resolve();\n            };\n\n            // Create a gain node with the desired volume:\n            const gainNode = context.createGain();\n            gainNode.gain.value = volume;\n\n            // Connect nodes:\n            source.connect(gainNode).connect(context.destination);\n\n            // Start playing at the desired time:\n            source.start(time);\n        });\n    }\n\n\n\n    /**\n     * Stop any sources still playing:\n     */\n    public stop(): void {\n        this.sources.forEach(source => source.stop(0));\n        this.sources = [];\n    }\n}\n","import { getBrowser } from '../Browser';\nimport { Sound } from './Sound';\n\nexport class Sounds {\n\n    private static root: string = '/public/theme/sounds/';\n    private static canPlay: boolean = Sounds.supportsAudio();\n    private static muted: boolean = false;\n    private static sources = {\n        click: 'tick.mp3',\n        hover: 'tap-smallest.mp3',\n        menu: 'tap-kissy.mp3',\n        playerBtn: '627848__francoistjp__rew-musique-stop-off_02.mp3',\n        playerRewind: '627848__francoistjp__rew-musique-stop-off_01.mp3',\n    };\n\n    private static sounds: { [key: string]: Sound };\n\n\n\n    public static supportsAudio(): boolean {\n        return !!(window.AudioContext\n            || (window as any).webkitAudioContext\n            || (window as any).mozAudioContext\n            || (window as any).oAudioContext\n            || (window as any).msAudioContext) && !getBrowser().phone;\n    }\n\n\n\n    public static init(): void {\n        if (!Sounds.canPlay) { return; }\n\n        Object.entries(Sounds.sources).forEach(([key, value]) => {\n            Sounds.sounds[key] = new Sound(Sounds.root + value);\n            Sounds.sounds[key].load();\n        });\n    }\n\n\n\n    public static bind(where?: HTMLElement): void {\n\n        if (!Sounds.canPlay) { return; }\n\n        if (!Sounds.sounds) {\n            Sounds.sounds = {};\n            Sounds.init();\n        }\n\n        [...(where || document).querySelectorAll('[data-sound-hover]')].forEach(el => {\n            el.addEventListener('mouseenter', e => {\n                const type = (e.currentTarget as HTMLElement).dataset.soundHover || 'hover';\n                Sounds.play(type);\n            });\n        });\n\n        [...(where || document).querySelectorAll('[data-sound-click]')].forEach(el => {\n            el.addEventListener('click', e => {\n                const type = (e.currentTarget as HTMLElement).dataset.soundClick || 'click';\n                Sounds.play(type);\n            });\n        });\n\n        document.querySelectorAll('[data-generate-sounds]')\n            .forEach(el => el.addEventListener('click', e => Sounds.generateSoundTester(e)));\n\n        document.querySelectorAll('.js-toggle-sounds')\n            .forEach(el => el.addEventListener('click', e => {\n                e.preventDefault();\n                e.stopPropagation();\n                Sounds.toggle();\n            }));\n    }\n\n\n\n    public static toggle(): void {\n        Sounds.muted = !Sounds.muted;\n        document.body.classList.toggle('is-muted', Sounds.muted);\n    }\n\n\n\n    public static play(type: string): Promise<void> {\n        if (Sounds.muted || !Sounds.canPlay || !Sounds.sounds[type]) { return Promise.resolve(); }\n        return Sounds.sounds[type].play();\n    }\n\n\n\n    private static generateSoundTester(e): void {\n        let html = '<ul>';\n        Object.keys(Sounds.sources).forEach(property => {\n            html += `<li class=\"sound-test\" data-sound-click=\"${property}\"><strong>${property}</strong> ${Sounds.sources[property]}</li>`;\n        });\n        html += '</ul>';\n        e.currentTarget.style.display = 'none';\n        e.currentTarget.insertAdjacentHTML('afterend', html);\n        Sounds.bind(e.currentTarget.parentNode);\n    }\n}\n","export class Vibration {\n\n\n    public static bind(where?: HTMLElement): void {\n        [...(where || document).querySelectorAll('a, label, button')].forEach(el => {\n            el.addEventListener('click', Vibration.onClick);\n        });\n    }\n\n\n    private static onClick = e => {\n        navigator.vibrate(5);\n    };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}